
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function claim_element(nodes, name, attributes, svg) {
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeName === name) {
                let j = 0;
                const remove = [];
                while (j < node.attributes.length) {
                    const attribute = node.attributes[j++];
                    if (!attributes[attribute.name]) {
                        remove.push(attribute.name);
                    }
                }
                for (let k = 0; k < remove.length; k++) {
                    node.removeAttribute(remove[k]);
                }
                return nodes.splice(i, 1)[0];
            }
        }
        return svg ? svg_element(name) : element(name);
    }
    function claim_text(nodes, data) {
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeType === 3) {
                node.data = '' + data;
                return nodes.splice(i, 1)[0];
            }
        }
        return text(data);
    }
    function claim_space(nodes) {
        return claim_text(nodes, ' ');
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_options(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            option.selected = ~value.indexOf(option.__value);
        }
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                info.blocks[i] = null;
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function claim_component(block, parent_nodes) {
        block && block.l(parent_nodes);
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.24.1' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "@import url(\"https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap\");.mdc-button{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:2.25rem;font-weight:500;letter-spacing:.08929em;text-decoration:none;text-transform:uppercase;padding:0 8px;display:inline-flex;position:relative;align-items:center;justify-content:center;box-sizing:border-box;min-width:64px;height:36px;border:none;outline:none;line-height:inherit;user-select:none;-webkit-appearance:none;overflow:hidden;vertical-align:middle;border-radius:4px}.mdc-button::-moz-focus-inner{padding:0;border:0}.mdc-button:active{outline:none}.mdc-button:hover{cursor:pointer}.mdc-button:disabled{background-color:transparent;color:rgba(0,0,0,.37);cursor:default;pointer-events:none}.mdc-button.mdc-button--dense{border-radius:4px}.mdc-button:not(:disabled){background-color:transparent}.mdc-button .mdc-button__icon{margin-left:0;margin-right:8px;display:inline-block;width:18px;height:18px;font-size:18px;vertical-align:top}.mdc-button .mdc-button__icon[dir=rtl],[dir=rtl] .mdc-button .mdc-button__icon{margin-left:8px;margin-right:0}.mdc-button:not(:disabled){color:#6200ee;color:var(--mdc-theme-primary,#6200ee)}.mdc-button__label+.mdc-button__icon{margin-left:8px;margin-right:0}.mdc-button__label+.mdc-button__icon[dir=rtl],[dir=rtl] .mdc-button__label+.mdc-button__icon{margin-left:0;margin-right:8px}svg.mdc-button__icon{fill:currentColor}.mdc-button--outlined .mdc-button__icon,.mdc-button--raised .mdc-button__icon,.mdc-button--unelevated .mdc-button__icon{margin-left:-4px;margin-right:8px}.mdc-button--outlined .mdc-button__icon[dir=rtl],.mdc-button--outlined .mdc-button__label+.mdc-button__icon,.mdc-button--raised .mdc-button__icon[dir=rtl],.mdc-button--raised .mdc-button__label+.mdc-button__icon,.mdc-button--unelevated .mdc-button__icon[dir=rtl],.mdc-button--unelevated .mdc-button__label+.mdc-button__icon,[dir=rtl] .mdc-button--outlined .mdc-button__icon,[dir=rtl] .mdc-button--raised .mdc-button__icon,[dir=rtl] .mdc-button--unelevated .mdc-button__icon{margin-left:8px;margin-right:-4px}.mdc-button--outlined .mdc-button__label+.mdc-button__icon[dir=rtl],.mdc-button--raised .mdc-button__label+.mdc-button__icon[dir=rtl],.mdc-button--unelevated .mdc-button__label+.mdc-button__icon[dir=rtl],[dir=rtl] .mdc-button--outlined .mdc-button__label+.mdc-button__icon,[dir=rtl] .mdc-button--raised .mdc-button__label+.mdc-button__icon,[dir=rtl] .mdc-button--unelevated .mdc-button__label+.mdc-button__icon{margin-left:-4px;margin-right:8px}.mdc-button--raised,.mdc-button--unelevated{padding:0 16px}.mdc-button--raised:disabled,.mdc-button--unelevated:disabled{background-color:rgba(0,0,0,.12);color:rgba(0,0,0,.37)}.mdc-button--raised:not(:disabled),.mdc-button--unelevated:not(:disabled){background-color:#6200ee}@supports not (-ms-ime-align:auto){.mdc-button--raised:not(:disabled),.mdc-button--unelevated:not(:disabled){background-color:var(--mdc-theme-primary,#6200ee)}}.mdc-button--raised:not(:disabled),.mdc-button--unelevated:not(:disabled){color:#fff;color:var(--mdc-theme-on-primary,#fff)}.mdc-button--raised{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transition:box-shadow .28s cubic-bezier(.4,0,.2,1)}.mdc-button--raised:focus,.mdc-button--raised:hover{box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.mdc-button--raised:active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mdc-button--raised:disabled{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mdc-button--outlined{border-style:solid;padding:0 15px;border-width:1px}.mdc-button--outlined:disabled{border-color:rgba(0,0,0,.37)}.mdc-button--outlined:not(:disabled){border-color:#6200ee;border-color:var(--mdc-theme-primary,#6200ee)}.mdc-button--dense{height:32px;font-size:.8125rem}@keyframes mdc-ripple-fg-radius-in{0%{animation-timing-function:cubic-bezier(.4,0,.2,1);transform:translate(var(--mdc-ripple-fg-translate-start,0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}}@keyframes mdc-ripple-fg-opacity-in{0%{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity,0)}}@keyframes mdc-ripple-fg-opacity-out{0%{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity,0)}to{opacity:0}}.mdc-ripple-surface--test-edge-var-bug{--mdc-ripple-surface-test-edge-var:1px solid #000;visibility:hidden}.mdc-ripple-surface--test-edge-var-bug:before{border:var(--mdc-ripple-surface-test-edge-var)}.mdc-button{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-button:after,.mdc-button:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}.mdc-button:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-button.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-button.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-button.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}.mdc-button.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-button.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-button:after,.mdc-button:before{top:-50%;left:-50%;width:200%;height:200%}.mdc-button.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-button:after,.mdc-button:before{background-color:#6200ee}@supports not (-ms-ime-align:auto){.mdc-button:after,.mdc-button:before{background-color:var(--mdc-theme-primary,#6200ee)}}.mdc-button:hover:before{opacity:.04}.mdc-button.mdc-ripple-upgraded--background-focused:before,.mdc-button:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-button:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-button:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-button.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.mdc-button--raised:after,.mdc-button--raised:before,.mdc-button--unelevated:after,.mdc-button--unelevated:before{background-color:#fff}@supports not (-ms-ime-align:auto){.mdc-button--raised:after,.mdc-button--raised:before,.mdc-button--unelevated:after,.mdc-button--unelevated:before{background-color:var(--mdc-theme-on-primary,#fff)}}.mdc-button--raised:hover:before,.mdc-button--unelevated:hover:before{opacity:.08}.mdc-button--raised.mdc-ripple-upgraded--background-focused:before,.mdc-button--raised:not(.mdc-ripple-upgraded):focus:before,.mdc-button--unelevated.mdc-ripple-upgraded--background-focused:before,.mdc-button--unelevated:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.24}.mdc-button--raised:not(.mdc-ripple-upgraded):after,.mdc-button--unelevated:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-button--raised:not(.mdc-ripple-upgraded):active:after,.mdc-button--unelevated:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.24}.mdc-button--raised.mdc-ripple-upgraded,.mdc-button--unelevated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.24}.mdc-ripple-surface{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:relative;outline:none;overflow:hidden}.mdc-ripple-surface:after,.mdc-ripple-surface:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}.mdc-ripple-surface:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-ripple-surface.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-ripple-surface.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface:after,.mdc-ripple-surface:before{background-color:#000}.mdc-ripple-surface:hover:before{opacity:.04}.mdc-ripple-surface.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.mdc-ripple-surface:after,.mdc-ripple-surface:before{top:-50%;left:-50%;width:200%;height:200%}.mdc-ripple-surface.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]{overflow:visible}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:before{top:0;left:0;width:100%;height:100%}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:before{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0);width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface--primary:after,.mdc-ripple-surface--primary:before{background-color:#6200ee}@supports not (-ms-ime-align:auto){.mdc-ripple-surface--primary:after,.mdc-ripple-surface--primary:before{background-color:var(--mdc-theme-primary,#6200ee)}}.mdc-ripple-surface--primary:hover:before{opacity:.04}.mdc-ripple-surface--primary.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--primary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.mdc-ripple-surface--accent:after,.mdc-ripple-surface--accent:before{background-color:#018786}@supports not (-ms-ime-align:auto){.mdc-ripple-surface--accent:after,.mdc-ripple-surface--accent:before{background-color:var(--mdc-theme-secondary,#018786)}}.mdc-ripple-surface--accent:hover:before{opacity:.04}.mdc-ripple-surface--accent.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--accent.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.smui-button--color-secondary:not(:disabled){color:#018786;color:var(--mdc-theme-secondary,#018786)}.smui-button--color-secondary.mdc-button--raised:not(:disabled),.smui-button--color-secondary.mdc-button--unelevated:not(:disabled){background-color:#018786}@supports not (-ms-ime-align:auto){.smui-button--color-secondary.mdc-button--raised:not(:disabled),.smui-button--color-secondary.mdc-button--unelevated:not(:disabled){background-color:var(--mdc-theme-secondary,#018786)}}.smui-button--color-secondary.mdc-button--raised:not(:disabled),.smui-button--color-secondary.mdc-button--unelevated:not(:disabled){color:#fff;color:var(--mdc-theme-on-secondary,#fff)}.smui-button--color-secondary.mdc-button--outlined:not(:disabled){border-color:#018786;border-color:var(--mdc-theme-secondary,#018786)}.smui-button--color-secondary:after,.smui-button--color-secondary:before{background-color:#018786}@supports not (-ms-ime-align:auto){.smui-button--color-secondary:after,.smui-button--color-secondary:before{background-color:var(--mdc-theme-secondary,#018786)}}.smui-button--color-secondary:hover:before{opacity:.04}.smui-button--color-secondary.mdc-ripple-upgraded--background-focused:before,.smui-button--color-secondary:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.smui-button--color-secondary:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.smui-button--color-secondary:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.smui-button--color-secondary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.smui-button--color-secondary.mdc-button--raised:after,.smui-button--color-secondary.mdc-button--raised:before,.smui-button--color-secondary.mdc-button--unelevated:after,.smui-button--color-secondary.mdc-button--unelevated:before{background-color:#fff}@supports not (-ms-ime-align:auto){.smui-button--color-secondary.mdc-button--raised:after,.smui-button--color-secondary.mdc-button--raised:before,.smui-button--color-secondary.mdc-button--unelevated:after,.smui-button--color-secondary.mdc-button--unelevated:before{background-color:var(--mdc-theme-on-secondary,#fff)}}.smui-button--color-secondary.mdc-button--raised:hover:before,.smui-button--color-secondary.mdc-button--unelevated:hover:before{opacity:.08}.smui-button--color-secondary.mdc-button--raised.mdc-ripple-upgraded--background-focused:before,.smui-button--color-secondary.mdc-button--raised:not(.mdc-ripple-upgraded):focus:before,.smui-button--color-secondary.mdc-button--unelevated.mdc-ripple-upgraded--background-focused:before,.smui-button--color-secondary.mdc-button--unelevated:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.24}.smui-button--color-secondary.mdc-button--raised:not(.mdc-ripple-upgraded):after,.smui-button--color-secondary.mdc-button--unelevated:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.smui-button--color-secondary.mdc-button--raised:not(.mdc-ripple-upgraded):active:after,.smui-button--color-secondary.mdc-button--unelevated:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.24}.smui-button--color-secondary.mdc-button--raised.mdc-ripple-upgraded,.smui-button--color-secondary.mdc-button--unelevated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.24}.smui-button__group{display:inline-flex}.smui-button__group>.mdc-button,.smui-button__group>.smui-button__group-item>.mdc-button{margin-left:0;margin-right:0}.smui-button__group>.mdc-button:not(:last-child),.smui-button__group>.smui-button__group-item:not(:last-child)>.mdc-button{border-top-right-radius:0;border-bottom-right-radius:0}.smui-button__group>.mdc-button:not(:first-child),.smui-button__group>.smui-button__group-item:not(:first-child)>.mdc-button{border-top-left-radius:0;border-bottom-left-radius:0}.smui-button__group.smui-button__group--raised{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.smui-button__group>.mdc-button--raised,.smui-button__group>.smui-button__group-item>.mdc-button--raised{border-radius:4px;box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.smui-button__group>.mdc-button--raised.mdc-button--dense,.smui-button__group>.smui-button__group-item>.mdc-button--raised.mdc-button--dense{border-radius:4px}.smui-button__group>.mdc-button--raised:active,.smui-button__group>.mdc-button--raised:disabled,.smui-button__group>.mdc-button--raised:focus,.smui-button__group>.mdc-button--raised:hover,.smui-button__group>.smui-button__group-item>.mdc-button--raised:active,.smui-button__group>.smui-button__group-item>.mdc-button--raised:disabled,.smui-button__group>.smui-button__group-item>.mdc-button--raised:focus,.smui-button__group>.smui-button__group-item>.mdc-button--raised:hover{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.smui-button__group>.mdc-button--outlined:not(:last-child),.smui-button__group>.smui-button__group-item:not(:last-child)>.mdc-button--outlined{border-right-width:0}";
    styleInject(css_248z);

    function forwardEventsBuilder(component, additionalEvents = []) {
      const events = [
        'focus', 'blur',
        'fullscreenchange', 'fullscreenerror', 'scroll',
        'cut', 'copy', 'paste',
        'keydown', 'keypress', 'keyup',
        'auxclick', 'click', 'contextmenu', 'dblclick', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseout', 'mouseup', 'pointerlockchange', 'pointerlockerror', 'select', 'wheel',
        'drag', 'dragend', 'dragenter', 'dragstart', 'dragleave', 'dragover', 'drop',
        'touchcancel', 'touchend', 'touchmove', 'touchstart',
        'pointerover', 'pointerenter', 'pointerdown', 'pointermove', 'pointerup', 'pointercancel', 'pointerout', 'pointerleave', 'gotpointercapture', 'lostpointercapture',
        ...additionalEvents
      ];

      function forward(e) {
        bubble(component, e);
      }

      return node => {
        const destructors = [];

        for (let i = 0; i < events.length; i++) {
          destructors.push(listen(node, events[i], forward));
        }

        return {
          destroy: () => {
            for (let i = 0; i < destructors.length; i++) {
              destructors[i]();
            }
          }
        }
      };
    }

    function exclude(obj, keys) {
      let names = Object.getOwnPropertyNames(obj);
      const newObj = {};

      for (let i = 0; i < names.length; i++) {
        const name = names[i];
        const cashIndex = name.indexOf('$');
        if (cashIndex !== -1 && keys.indexOf(name.substring(0, cashIndex + 1)) !== -1) {
          continue;
        }
        if (keys.indexOf(name) !== -1) {
          continue;
        }
        newObj[name] = obj[name];
      }

      return newObj;
    }

    function useActions(node, actions) {
      let objects = [];

      if (actions) {
        for (let i = 0; i < actions.length; i++) {
          const isArray = Array.isArray(actions[i]);
          const action = isArray ? actions[i][0] : actions[i];
          if (isArray && actions[i].length > 1) {
            objects.push(action(node, actions[i][1]));
          } else {
            objects.push(action(node));
          }
        }
      }

      return {
        update(actions) {
          if ((actions && actions.length || 0) != objects.length) {
            throw new Error('You must not change the length of an actions array.');
          }

          if (actions) {
            for (let i = 0; i < actions.length; i++) {
              if (objects[i] && 'update' in objects[i]) {
                const isArray = Array.isArray(actions[i]);
                if (isArray && actions[i].length > 1) {
                  objects[i].update(actions[i][1]);
                } else {
                  objects[i].update();
                }
              }
            }
          }
        },

        destroy() {
          for (let i = 0; i < objects.length; i++) {
            if (objects[i] && 'destroy' in objects[i]) {
              objects[i].destroy();
            }
          }
        }
      }
    }

    /* node_modules/@smui/common/A.svelte generated by Svelte v3.24.1 */
    const file = "node_modules/@smui/common/A.svelte";

    function create_fragment(ctx) {
    	let a;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let a_levels = [{ href: /*href*/ ctx[1] }, exclude(/*$$props*/ ctx[3], ["use", "href"])];
    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			a = claim_element(nodes, "A", { href: true });
    			var a_nodes = children(a);
    			if (default_slot) default_slot.l(a_nodes);
    			a_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(a, a_data);
    			add_location(a, file, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, a, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[2].call(null, a))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 16) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
    				dirty & /*$$props*/ 8 && exclude(/*$$props*/ ctx[3], ["use", "href"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { href = "javascript:void(0);" } = $$props;
    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("A", $$slots, ['default']);

    	$$self.$$set = $$new_props => {
    		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("href" in $$new_props) $$invalidate(1, href = $$new_props.href);
    		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		href
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("href" in $$props) $$invalidate(1, href = $$new_props.href);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [use, href, forwardEvents, $$props, $$scope, $$slots];
    }

    class A extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { use: 0, href: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "A",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get use() {
    		throw new Error("<A>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<A>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<A>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<A>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/Button.svelte generated by Svelte v3.24.1 */
    const file$1 = "node_modules/@smui/common/Button.svelte";

    function create_fragment$1(ctx) {
    	let button;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
    	let button_levels = [exclude(/*$$props*/ ctx[2], ["use"])];
    	let button_data = {};

    	for (let i = 0; i < button_levels.length; i += 1) {
    		button_data = assign(button_data, button_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			button = claim_element(nodes, "BUTTON", {});
    			var button_nodes = children(button);
    			if (default_slot) default_slot.l(button_nodes);
    			button_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(button, button_data);
    			add_location(button, file$1, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, button, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[1].call(null, button))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 8) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
    				}
    			}

    			set_attributes(button, button_data = get_spread_update(button_levels, [dirty & /*$$props*/ 4 && exclude(/*$$props*/ ctx[2], ["use"])]));
    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Button", $$slots, ['default']);

    	$$self.$$set = $$new_props => {
    		$$invalidate(2, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(2, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [use, forwardEvents, $$props, $$scope, $$slots];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { use: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get use() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * Stores result from supportsCssVariables to avoid redundant processing to
     * detect CSS custom variable support.
     */
    var supportsCssVariables_;
    function detectEdgePseudoVarBug(windowObj) {
        // Detect versions of Edge with buggy var() support
        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
        var document = windowObj.document;
        var node = document.createElement('div');
        node.className = 'mdc-ripple-surface--test-edge-var-bug';
        // Append to head instead of body because this script might be invoked in the
        // head, in which case the body doesn't exist yet. The probe works either way.
        document.head.appendChild(node);
        // The bug exists if ::before style ends up propagating to the parent element.
        // Additionally, getComputedStyle returns null in iframes with display: "none" in Firefox,
        // but Firefox is known to support CSS custom properties correctly.
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
        var computedStyle = windowObj.getComputedStyle(node);
        var hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
        return hasPseudoVarBug;
    }
    function supportsCssVariables(windowObj, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        var CSS = windowObj.CSS;
        var supportsCssVars = supportsCssVariables_;
        if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
            return supportsCssVariables_;
        }
        var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
        if (!supportsFunctionPresent) {
            return false;
        }
        var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
        // See: https://bugs.webkit.org/show_bug.cgi?id=154669
        // See: README section on Safari
        var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&
            CSS.supports('color', '#00000000'));
        if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
            supportsCssVars = !detectEdgePseudoVarBug(windowObj);
        }
        else {
            supportsCssVars = false;
        }
        if (!forceRefresh) {
            supportsCssVariables_ = supportsCssVars;
        }
        return supportsCssVars;
    }
    function getNormalizedEventCoords(evt, pageOffset, clientRect) {
        if (!evt) {
            return { x: 0, y: 0 };
        }
        var x = pageOffset.x, y = pageOffset.y;
        var documentX = x + clientRect.left;
        var documentY = y + clientRect.top;
        var normalizedX;
        var normalizedY;
        // Determine touch point relative to the ripple container.
        if (evt.type === 'touchstart') {
            var touchEvent = evt;
            normalizedX = touchEvent.changedTouches[0].pageX - documentX;
            normalizedY = touchEvent.changedTouches[0].pageY - documentY;
        }
        else {
            var mouseEvent = evt;
            normalizedX = mouseEvent.pageX - documentX;
            normalizedY = mouseEvent.pageY - documentY;
        }
        return { x: normalizedX, y: normalizedY };
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFoundation = /** @class */ (function () {
        function MDCFoundation(adapter) {
            if (adapter === void 0) { adapter = {}; }
            this.adapter_ = adapter;
        }
        Object.defineProperty(MDCFoundation, "cssClasses", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports every
                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "strings", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "numbers", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "defaultAdapter", {
            get: function () {
                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
                // validation.
                return {};
            },
            enumerable: true,
            configurable: true
        });
        MDCFoundation.prototype.init = function () {
            // Subclasses should override this method to perform initialization routines (registering events, etc.)
        };
        MDCFoundation.prototype.destroy = function () {
            // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
        };
        return MDCFoundation;
    }());

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCComponent = /** @class */ (function () {
        function MDCComponent(root, foundation) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            this.root_ = root;
            this.initialize.apply(this, __spread(args));
            // Note that we initialize foundation here and not within the constructor's default param so that
            // this.root_ is defined and can be used within the foundation class.
            this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
            this.foundation_.init();
            this.initialSyncWithDOM();
        }
        MDCComponent.attachTo = function (root) {
            // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
            // returns an instantiated component with its root set to that element. Also note that in the cases of
            // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
            // from getDefaultFoundation().
            return new MDCComponent(root, new MDCFoundation({}));
        };
        /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
        MDCComponent.prototype.initialize = function () {
            var _args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _args[_i] = arguments[_i];
            }
            // Subclasses can override this to do any additional setup work that would be considered part of a
            // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
            // initialized. Any additional arguments besides root and foundation will be passed in here.
        };
        MDCComponent.prototype.getDefaultFoundation = function () {
            // Subclasses must override this method to return a properly configured foundation class for the
            // component.
            throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +
                'foundation class');
        };
        MDCComponent.prototype.initialSyncWithDOM = function () {
            // Subclasses should override this method if they need to perform work to synchronize with a host DOM
            // object. An example of this would be a form control wrapper that needs to synchronize its internal state
            // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
            // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
        };
        MDCComponent.prototype.destroy = function () {
            // Subclasses may implement this method to release any resources / deregister any listeners they have
            // attached. An example of this might be deregistering a resize event from the window object.
            this.foundation_.destroy();
        };
        MDCComponent.prototype.listen = function (evtType, handler, options) {
            this.root_.addEventListener(evtType, handler, options);
        };
        MDCComponent.prototype.unlisten = function (evtType, handler, options) {
            this.root_.removeEventListener(evtType, handler, options);
        };
        /**
         * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
         */
        MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
            if (shouldBubble === void 0) { shouldBubble = false; }
            var evt;
            if (typeof CustomEvent === 'function') {
                evt = new CustomEvent(evtType, {
                    bubbles: shouldBubble,
                    detail: evtData,
                });
            }
            else {
                evt = document.createEvent('CustomEvent');
                evt.initCustomEvent(evtType, shouldBubble, false, evtData);
            }
            this.root_.dispatchEvent(evt);
        };
        return MDCComponent;
    }());

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * Stores result from applyPassive to avoid redundant processing to detect
     * passive event listener support.
     */
    var supportsPassive_;
    /**
     * Determine whether the current browser supports passive event listeners, and
     * if so, use them.
     */
    function applyPassive(globalObj, forceRefresh) {
        if (globalObj === void 0) { globalObj = window; }
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (supportsPassive_ === undefined || forceRefresh) {
            var isSupported_1 = false;
            try {
                globalObj.document.addEventListener('test', function () { return undefined; }, {
                    get passive() {
                        isSupported_1 = true;
                        return isSupported_1;
                    },
                });
            }
            catch (e) {
            } // tslint:disable-line:no-empty cannot throw error due to tests. tslint also disables console.log.
            supportsPassive_ = isSupported_1;
        }
        return supportsPassive_ ? { passive: true } : false;
    }

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
     * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
     */
    function closest(element, selector) {
        if (element.closest) {
            return element.closest(selector);
        }
        var el = element;
        while (el) {
            if (matches(el, selector)) {
                return el;
            }
            el = el.parentElement;
        }
        return null;
    }
    function matches(element, selector) {
        var nativeMatches = element.matches
            || element.webkitMatchesSelector
            || element.msMatchesSelector;
        return nativeMatches.call(element, selector);
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses = {
        // Ripple is a special case where the "root" component is really a "mixin" of sorts,
        // given that it's an 'upgrade' to an existing component. That being said it is the root
        // CSS class that all other CSS classes derive from.
        BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
        FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
        FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
        ROOT: 'mdc-ripple-upgraded',
        UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
    };
    var strings = {
        VAR_FG_SCALE: '--mdc-ripple-fg-scale',
        VAR_FG_SIZE: '--mdc-ripple-fg-size',
        VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
        VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
        VAR_LEFT: '--mdc-ripple-left',
        VAR_TOP: '--mdc-ripple-top',
    };
    var numbers = {
        DEACTIVATION_TIMEOUT_MS: 225,
        FG_DEACTIVATION_MS: 150,
        INITIAL_ORIGIN_SCALE: 0.6,
        PADDING: 10,
        TAP_DELAY_MS: 300,
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    // Activation events registered on the root element of each instance for activation
    var ACTIVATION_EVENT_TYPES = [
        'touchstart', 'pointerdown', 'mousedown', 'keydown',
    ];
    // Deactivation events registered on documentElement when a pointer-related down event occurs
    var POINTER_DEACTIVATION_EVENT_TYPES = [
        'touchend', 'pointerup', 'mouseup', 'contextmenu',
    ];
    // simultaneous nested activations
    var activatedTargets = [];
    var MDCRippleFoundation = /** @class */ (function (_super) {
        __extends(MDCRippleFoundation, _super);
        function MDCRippleFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCRippleFoundation.defaultAdapter, adapter)) || this;
            _this.activationAnimationHasEnded_ = false;
            _this.activationTimer_ = 0;
            _this.fgDeactivationRemovalTimer_ = 0;
            _this.fgScale_ = '0';
            _this.frame_ = { width: 0, height: 0 };
            _this.initialSize_ = 0;
            _this.layoutFrame_ = 0;
            _this.maxRadius_ = 0;
            _this.unboundedCoords_ = { left: 0, top: 0 };
            _this.activationState_ = _this.defaultActivationState_();
            _this.activationTimerCallback_ = function () {
                _this.activationAnimationHasEnded_ = true;
                _this.runDeactivationUXLogicIfReady_();
            };
            _this.activateHandler_ = function (e) { return _this.activate_(e); };
            _this.deactivateHandler_ = function () { return _this.deactivate_(); };
            _this.focusHandler_ = function () { return _this.handleFocus(); };
            _this.blurHandler_ = function () { return _this.handleBlur(); };
            _this.resizeHandler_ = function () { return _this.layout(); };
            return _this;
        }
        Object.defineProperty(MDCRippleFoundation, "cssClasses", {
            get: function () {
                return cssClasses;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "strings", {
            get: function () {
                return strings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "numbers", {
            get: function () {
                return numbers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    browserSupportsCssVars: function () { return true; },
                    computeBoundingRect: function () { return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 }); },
                    containsEventTarget: function () { return true; },
                    deregisterDocumentInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                    deregisterResizeHandler: function () { return undefined; },
                    getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },
                    isSurfaceActive: function () { return true; },
                    isSurfaceDisabled: function () { return true; },
                    isUnbounded: function () { return true; },
                    registerDocumentInteractionHandler: function () { return undefined; },
                    registerInteractionHandler: function () { return undefined; },
                    registerResizeHandler: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    updateCssVariable: function () { return undefined; },
                };
            },
            enumerable: true,
            configurable: true
        });
        MDCRippleFoundation.prototype.init = function () {
            var _this = this;
            var supportsPressRipple = this.supportsPressRipple_();
            this.registerRootHandlers_(supportsPressRipple);
            if (supportsPressRipple) {
                var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                    _this.adapter_.addClass(ROOT_1);
                    if (_this.adapter_.isUnbounded()) {
                        _this.adapter_.addClass(UNBOUNDED_1);
                        // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                        _this.layoutInternal_();
                    }
                });
            }
        };
        MDCRippleFoundation.prototype.destroy = function () {
            var _this = this;
            if (this.supportsPressRipple_()) {
                if (this.activationTimer_) {
                    clearTimeout(this.activationTimer_);
                    this.activationTimer_ = 0;
                    this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
                }
                if (this.fgDeactivationRemovalTimer_) {
                    clearTimeout(this.fgDeactivationRemovalTimer_);
                    this.fgDeactivationRemovalTimer_ = 0;
                    this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
                }
                var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                    _this.adapter_.removeClass(ROOT_2);
                    _this.adapter_.removeClass(UNBOUNDED_2);
                    _this.removeCssVars_();
                });
            }
            this.deregisterRootHandlers_();
            this.deregisterDeactivationHandlers_();
        };
        /**
         * @param evt Optional event containing position information.
         */
        MDCRippleFoundation.prototype.activate = function (evt) {
            this.activate_(evt);
        };
        MDCRippleFoundation.prototype.deactivate = function () {
            this.deactivate_();
        };
        MDCRippleFoundation.prototype.layout = function () {
            var _this = this;
            if (this.layoutFrame_) {
                cancelAnimationFrame(this.layoutFrame_);
            }
            this.layoutFrame_ = requestAnimationFrame(function () {
                _this.layoutInternal_();
                _this.layoutFrame_ = 0;
            });
        };
        MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
            var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
            if (unbounded) {
                this.adapter_.addClass(UNBOUNDED);
            }
            else {
                this.adapter_.removeClass(UNBOUNDED);
            }
        };
        MDCRippleFoundation.prototype.handleFocus = function () {
            var _this = this;
            requestAnimationFrame(function () {
                return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
            });
        };
        MDCRippleFoundation.prototype.handleBlur = function () {
            var _this = this;
            requestAnimationFrame(function () {
                return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
            });
        };
        /**
         * We compute this property so that we are not querying information about the client
         * until the point in time where the foundation requests it. This prevents scenarios where
         * client-side feature-detection may happen too early, such as when components are rendered on the server
         * and then initialized at mount time on the client.
         */
        MDCRippleFoundation.prototype.supportsPressRipple_ = function () {
            return this.adapter_.browserSupportsCssVars();
        };
        MDCRippleFoundation.prototype.defaultActivationState_ = function () {
            return {
                activationEvent: undefined,
                hasDeactivationUXRun: false,
                isActivated: false,
                isProgrammatic: false,
                wasActivatedByPointer: false,
                wasElementMadeActive: false,
            };
        };
        /**
         * supportsPressRipple Passed from init to save a redundant function call
         */
        MDCRippleFoundation.prototype.registerRootHandlers_ = function (supportsPressRipple) {
            var _this = this;
            if (supportsPressRipple) {
                ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                    _this.adapter_.registerInteractionHandler(evtType, _this.activateHandler_);
                });
                if (this.adapter_.isUnbounded()) {
                    this.adapter_.registerResizeHandler(this.resizeHandler_);
                }
            }
            this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
            this.adapter_.registerInteractionHandler('blur', this.blurHandler_);
        };
        MDCRippleFoundation.prototype.registerDeactivationHandlers_ = function (evt) {
            var _this = this;
            if (evt.type === 'keydown') {
                this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);
            }
            else {
                POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                    _this.adapter_.registerDocumentInteractionHandler(evtType, _this.deactivateHandler_);
                });
            }
        };
        MDCRippleFoundation.prototype.deregisterRootHandlers_ = function () {
            var _this = this;
            ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter_.deregisterInteractionHandler(evtType, _this.activateHandler_);
            });
            this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
            this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);
            if (this.adapter_.isUnbounded()) {
                this.adapter_.deregisterResizeHandler(this.resizeHandler_);
            }
        };
        MDCRippleFoundation.prototype.deregisterDeactivationHandlers_ = function () {
            var _this = this;
            this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);
            POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter_.deregisterDocumentInteractionHandler(evtType, _this.deactivateHandler_);
            });
        };
        MDCRippleFoundation.prototype.removeCssVars_ = function () {
            var _this = this;
            var rippleStrings = MDCRippleFoundation.strings;
            var keys = Object.keys(rippleStrings);
            keys.forEach(function (key) {
                if (key.indexOf('VAR_') === 0) {
                    _this.adapter_.updateCssVariable(rippleStrings[key], null);
                }
            });
        };
        MDCRippleFoundation.prototype.activate_ = function (evt) {
            var _this = this;
            if (this.adapter_.isSurfaceDisabled()) {
                return;
            }
            var activationState = this.activationState_;
            if (activationState.isActivated) {
                return;
            }
            // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
            var previousActivationEvent = this.previousActivationEvent_;
            var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
            if (isSameInteraction) {
                return;
            }
            activationState.isActivated = true;
            activationState.isProgrammatic = evt === undefined;
            activationState.activationEvent = evt;
            activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
            var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) { return _this.adapter_.containsEventTarget(target); });
            if (hasActivatedChild) {
                // Immediately reset activation state, while preserving logic that prevents touch follow-on events
                this.resetActivationState_();
                return;
            }
            if (evt !== undefined) {
                activatedTargets.push(evt.target);
                this.registerDeactivationHandlers_(evt);
            }
            activationState.wasElementMadeActive = this.checkElementMadeActive_(evt);
            if (activationState.wasElementMadeActive) {
                this.animateActivation_();
            }
            requestAnimationFrame(function () {
                // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
                activatedTargets = [];
                if (!activationState.wasElementMadeActive
                    && evt !== undefined
                    && (evt.key === ' ' || evt.keyCode === 32)) {
                    // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                    // active states inconsistently when they're called within event handling code:
                    // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                    // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                    // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                    // variable is set within a rAF callback for a submit button interaction (#2241).
                    activationState.wasElementMadeActive = _this.checkElementMadeActive_(evt);
                    if (activationState.wasElementMadeActive) {
                        _this.animateActivation_();
                    }
                }
                if (!activationState.wasElementMadeActive) {
                    // Reset activation state immediately if element was not made active.
                    _this.activationState_ = _this.defaultActivationState_();
                }
            });
        };
        MDCRippleFoundation.prototype.checkElementMadeActive_ = function (evt) {
            return (evt !== undefined && evt.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;
        };
        MDCRippleFoundation.prototype.animateActivation_ = function () {
            var _this = this;
            var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
            var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
            var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
            this.layoutInternal_();
            var translateStart = '';
            var translateEnd = '';
            if (!this.adapter_.isUnbounded()) {
                var _c = this.getFgTranslationCoordinates_(), startPoint = _c.startPoint, endPoint = _c.endPoint;
                translateStart = startPoint.x + "px, " + startPoint.y + "px";
                translateEnd = endPoint.x + "px, " + endPoint.y + "px";
            }
            this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
            this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
            // Cancel any ongoing activation/deactivation animations
            clearTimeout(this.activationTimer_);
            clearTimeout(this.fgDeactivationRemovalTimer_);
            this.rmBoundedActivationClasses_();
            this.adapter_.removeClass(FG_DEACTIVATION);
            // Force layout in order to re-trigger the animation.
            this.adapter_.computeBoundingRect();
            this.adapter_.addClass(FG_ACTIVATION);
            this.activationTimer_ = setTimeout(function () { return _this.activationTimerCallback_(); }, DEACTIVATION_TIMEOUT_MS);
        };
        MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function () {
            var _a = this.activationState_, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
            var startPoint;
            if (wasActivatedByPointer) {
                startPoint = getNormalizedEventCoords(activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());
            }
            else {
                startPoint = {
                    x: this.frame_.width / 2,
                    y: this.frame_.height / 2,
                };
            }
            // Center the element around the start point.
            startPoint = {
                x: startPoint.x - (this.initialSize_ / 2),
                y: startPoint.y - (this.initialSize_ / 2),
            };
            var endPoint = {
                x: (this.frame_.width / 2) - (this.initialSize_ / 2),
                y: (this.frame_.height / 2) - (this.initialSize_ / 2),
            };
            return { startPoint: startPoint, endPoint: endPoint };
        };
        MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function () {
            var _this = this;
            // This method is called both when a pointing device is released, and when the activation animation ends.
            // The deactivation animation should only run after both of those occur.
            var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
            var _a = this.activationState_, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
            var activationHasEnded = hasDeactivationUXRun || !isActivated;
            if (activationHasEnded && this.activationAnimationHasEnded_) {
                this.rmBoundedActivationClasses_();
                this.adapter_.addClass(FG_DEACTIVATION);
                this.fgDeactivationRemovalTimer_ = setTimeout(function () {
                    _this.adapter_.removeClass(FG_DEACTIVATION);
                }, numbers.FG_DEACTIVATION_MS);
            }
        };
        MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function () {
            var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
            this.adapter_.removeClass(FG_ACTIVATION);
            this.activationAnimationHasEnded_ = false;
            this.adapter_.computeBoundingRect();
        };
        MDCRippleFoundation.prototype.resetActivationState_ = function () {
            var _this = this;
            this.previousActivationEvent_ = this.activationState_.activationEvent;
            this.activationState_ = this.defaultActivationState_();
            // Touch devices may fire additional events for the same interaction within a short time.
            // Store the previous event until it's safe to assume that subsequent events are for new interactions.
            setTimeout(function () { return _this.previousActivationEvent_ = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
        };
        MDCRippleFoundation.prototype.deactivate_ = function () {
            var _this = this;
            var activationState = this.activationState_;
            // This can happen in scenarios such as when you have a keyup event that blurs the element.
            if (!activationState.isActivated) {
                return;
            }
            var state = __assign({}, activationState);
            if (activationState.isProgrammatic) {
                requestAnimationFrame(function () { return _this.animateDeactivation_(state); });
                this.resetActivationState_();
            }
            else {
                this.deregisterDeactivationHandlers_();
                requestAnimationFrame(function () {
                    _this.activationState_.hasDeactivationUXRun = true;
                    _this.animateDeactivation_(state);
                    _this.resetActivationState_();
                });
            }
        };
        MDCRippleFoundation.prototype.animateDeactivation_ = function (_a) {
            var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
            if (wasActivatedByPointer || wasElementMadeActive) {
                this.runDeactivationUXLogicIfReady_();
            }
        };
        MDCRippleFoundation.prototype.layoutInternal_ = function () {
            var _this = this;
            this.frame_ = this.adapter_.computeBoundingRect();
            var maxDim = Math.max(this.frame_.height, this.frame_.width);
            // Surface diameter is treated differently for unbounded vs. bounded ripples.
            // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
            // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
            // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
            // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
            // `overflow: hidden`.
            var getBoundedRadius = function () {
                var hypotenuse = Math.sqrt(Math.pow(_this.frame_.width, 2) + Math.pow(_this.frame_.height, 2));
                return hypotenuse + MDCRippleFoundation.numbers.PADDING;
            };
            this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();
            // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
            this.initialSize_ = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
            this.fgScale_ = "" + this.maxRadius_ / this.initialSize_;
            this.updateLayoutCssVars_();
        };
        MDCRippleFoundation.prototype.updateLayoutCssVars_ = function () {
            var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
            this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + "px");
            this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);
            if (this.adapter_.isUnbounded()) {
                this.unboundedCoords_ = {
                    left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),
                    top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),
                };
                this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + "px");
                this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + "px");
            }
        };
        return MDCRippleFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCRipple = /** @class */ (function (_super) {
        __extends(MDCRipple, _super);
        function MDCRipple() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.disabled = false;
            return _this;
        }
        MDCRipple.attachTo = function (root, opts) {
            if (opts === void 0) { opts = { isUnbounded: undefined }; }
            var ripple = new MDCRipple(root);
            // Only override unbounded behavior if option is explicitly specified
            if (opts.isUnbounded !== undefined) {
                ripple.unbounded = opts.isUnbounded;
            }
            return ripple;
        };
        MDCRipple.createAdapter = function (instance) {
            return {
                addClass: function (className) { return instance.root_.classList.add(className); },
                browserSupportsCssVars: function () { return supportsCssVariables(window); },
                computeBoundingRect: function () { return instance.root_.getBoundingClientRect(); },
                containsEventTarget: function (target) { return instance.root_.contains(target); },
                deregisterDocumentInteractionHandler: function (evtType, handler) {
                    return document.documentElement.removeEventListener(evtType, handler, applyPassive());
                },
                deregisterInteractionHandler: function (evtType, handler) {
                    return instance.root_.removeEventListener(evtType, handler, applyPassive());
                },
                deregisterResizeHandler: function (handler) { return window.removeEventListener('resize', handler); },
                getWindowPageOffset: function () { return ({ x: window.pageXOffset, y: window.pageYOffset }); },
                isSurfaceActive: function () { return matches(instance.root_, ':active'); },
                isSurfaceDisabled: function () { return Boolean(instance.disabled); },
                isUnbounded: function () { return Boolean(instance.unbounded); },
                registerDocumentInteractionHandler: function (evtType, handler) {
                    return document.documentElement.addEventListener(evtType, handler, applyPassive());
                },
                registerInteractionHandler: function (evtType, handler) {
                    return instance.root_.addEventListener(evtType, handler, applyPassive());
                },
                registerResizeHandler: function (handler) { return window.addEventListener('resize', handler); },
                removeClass: function (className) { return instance.root_.classList.remove(className); },
                updateCssVariable: function (varName, value) { return instance.root_.style.setProperty(varName, value); },
            };
        };
        Object.defineProperty(MDCRipple.prototype, "unbounded", {
            get: function () {
                return Boolean(this.unbounded_);
            },
            set: function (unbounded) {
                this.unbounded_ = Boolean(unbounded);
                this.setUnbounded_();
            },
            enumerable: true,
            configurable: true
        });
        MDCRipple.prototype.activate = function () {
            this.foundation_.activate();
        };
        MDCRipple.prototype.deactivate = function () {
            this.foundation_.deactivate();
        };
        MDCRipple.prototype.layout = function () {
            this.foundation_.layout();
        };
        MDCRipple.prototype.getDefaultFoundation = function () {
            return new MDCRippleFoundation(MDCRipple.createAdapter(this));
        };
        MDCRipple.prototype.initialSyncWithDOM = function () {
            var root = this.root_;
            this.unbounded = 'mdcRippleIsUnbounded' in root.dataset;
        };
        /**
         * Closure Compiler throws an access control error when directly accessing a
         * protected or private property inside a getter/setter, like unbounded above.
         * By accessing the protected property inside a method, we solve that problem.
         * That's why this function exists.
         */
        MDCRipple.prototype.setUnbounded_ = function () {
            this.foundation_.setUnbounded(Boolean(this.unbounded_));
        };
        return MDCRipple;
    }(MDCComponent));

    function Ripple(node, props = {ripple: false, unbounded: false, color: null, classForward: () => {}}) {
      let instance = null;
      let addLayoutListener = getContext('SMUI:addLayoutListener');
      let removeLayoutListener;
      let classList = [];

      function addClass(className) {
        const idx = classList.indexOf(className);
        if (idx === -1) {
          node.classList.add(className);
          classList.push(className);
          if (props.classForward) {
            props.classForward(classList);
          }
        }
      }

      function removeClass(className) {
        const idx = classList.indexOf(className);
        if (idx !== -1) {
          node.classList.remove(className);
          classList.splice(idx, 1);
          if (props.classForward) {
            props.classForward(classList);
          }
        }
      }

      function handleProps() {
        if (props.ripple && !instance) {
          // Override the Ripple component's adapter, so that we can forward classes
          // to Svelte components that overwrite Ripple's classes.
          const _createAdapter = MDCRipple.createAdapter;
          MDCRipple.createAdapter = function(...args) {
            const adapter = _createAdapter.apply(this, args);
            adapter.addClass = function(className) {
              return addClass(className);
            };
            adapter.removeClass = function(className) {
              return removeClass(className);
            };
            return adapter;
          };
          instance = new MDCRipple(node);
          MDCRipple.createAdapter = _createAdapter;
        } else if (instance && !props.ripple) {
          instance.destroy();
          instance = null;
        }
        if (props.ripple) {
          instance.unbounded = !!props.unbounded;
          switch (props.color) {
            case 'surface':
              addClass('mdc-ripple-surface');
              removeClass('mdc-ripple-surface--primary');
              removeClass('mdc-ripple-surface--accent');
              return;
            case 'primary':
              addClass('mdc-ripple-surface');
              addClass('mdc-ripple-surface--primary');
              removeClass('mdc-ripple-surface--accent');
              return;
            case 'secondary':
              addClass('mdc-ripple-surface');
              removeClass('mdc-ripple-surface--primary');
              addClass('mdc-ripple-surface--accent');
              return;
          }
        }
        removeClass('mdc-ripple-surface');
        removeClass('mdc-ripple-surface--primary');
        removeClass('mdc-ripple-surface--accent');
      }

      handleProps();

      if (addLayoutListener) {
        removeLayoutListener = addLayoutListener(layout);
      }

      function layout() {
        if (instance) {
          instance.layout();
        }
      }

      return {
        update(newProps = {ripple: false, unbounded: false, color: null, classForward: []}) {
          props = newProps;
          handleProps();
        },

        destroy() {
          if (instance) {
            instance.destroy();
            instance = null;
            removeClass('mdc-ripple-surface');
            removeClass('mdc-ripple-surface--primary');
            removeClass('mdc-ripple-surface--accent');
          }

          if (removeLayoutListener) {
            removeLayoutListener();
          }
        }
      }
    }

    /* node_modules/@smui/button/Button.svelte generated by Svelte v3.24.1 */

    // (1:0) <svelte:component   this={component}   use={[[Ripple, {ripple, unbounded: false, classForward: classes => rippleClasses = classes}], forwardEvents, ...use]}   class="     mdc-button     {className}     {rippleClasses.join(' ')}     {variant === 'raised' ? 'mdc-button--raised' : ''}     {variant === 'unelevated' ? 'mdc-button--unelevated' : ''}     {variant === 'outlined' ? 'mdc-button--outlined' : ''}     {dense ? 'mdc-button--dense' : ''}     {color === 'secondary' ? 'smui-button--color-secondary' : ''}     {context === 'card:action' ? 'mdc-card__action' : ''}     {context === 'card:action' ? 'mdc-card__action--button' : ''}     {context === 'dialog:action' ? 'mdc-dialog__button' : ''}     {context === 'top-app-bar:navigation' ? 'mdc-top-app-bar__navigation-icon' : ''}     {context === 'top-app-bar:action' ? 'mdc-top-app-bar__action-item' : ''}     {context === 'snackbar' ? 'mdc-snackbar__action' : ''}   "   {...actionProp}   {...defaultProp}   {...exclude($$props, ['use', 'class', 'ripple', 'color', 'variant', 'dense', ...dialogExcludes])} >
    function create_default_slot(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[17].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 524288) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(1:0) <svelte:component   this={component}   use={[[Ripple, {ripple, unbounded: false, classForward: classes => rippleClasses = classes}], forwardEvents, ...use]}   class=\\\"     mdc-button     {className}     {rippleClasses.join(' ')}     {variant === 'raised' ? 'mdc-button--raised' : ''}     {variant === 'unelevated' ? 'mdc-button--unelevated' : ''}     {variant === 'outlined' ? 'mdc-button--outlined' : ''}     {dense ? 'mdc-button--dense' : ''}     {color === 'secondary' ? 'smui-button--color-secondary' : ''}     {context === 'card:action' ? 'mdc-card__action' : ''}     {context === 'card:action' ? 'mdc-card__action--button' : ''}     {context === 'dialog:action' ? 'mdc-dialog__button' : ''}     {context === 'top-app-bar:navigation' ? 'mdc-top-app-bar__navigation-icon' : ''}     {context === 'top-app-bar:action' ? 'mdc-top-app-bar__action-item' : ''}     {context === 'snackbar' ? 'mdc-snackbar__action' : ''}   \\\"   {...actionProp}   {...defaultProp}   {...exclude($$props, ['use', 'class', 'ripple', 'color', 'variant', 'dense', ...dialogExcludes])} >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{
    			use: [
    				[
    					Ripple,
    					{
    						ripple: /*ripple*/ ctx[2],
    						unbounded: false,
    						classForward: /*func*/ ctx[18]
    					}
    				],
    				/*forwardEvents*/ ctx[11],
    				.../*use*/ ctx[0]
    			]
    		},
    		{
    			class: "\n    mdc-button\n    " + /*className*/ ctx[1] + "\n    " + /*rippleClasses*/ ctx[7].join(" ") + "\n    " + (/*variant*/ ctx[4] === "raised"
    			? "mdc-button--raised"
    			: "") + "\n    " + (/*variant*/ ctx[4] === "unelevated"
    			? "mdc-button--unelevated"
    			: "") + "\n    " + (/*variant*/ ctx[4] === "outlined"
    			? "mdc-button--outlined"
    			: "") + "\n    " + (/*dense*/ ctx[5] ? "mdc-button--dense" : "") + "\n    " + (/*color*/ ctx[3] === "secondary"
    			? "smui-button--color-secondary"
    			: "") + "\n    " + (/*context*/ ctx[12] === "card:action"
    			? "mdc-card__action"
    			: "") + "\n    " + (/*context*/ ctx[12] === "card:action"
    			? "mdc-card__action--button"
    			: "") + "\n    " + (/*context*/ ctx[12] === "dialog:action"
    			? "mdc-dialog__button"
    			: "") + "\n    " + (/*context*/ ctx[12] === "top-app-bar:navigation"
    			? "mdc-top-app-bar__navigation-icon"
    			: "") + "\n    " + (/*context*/ ctx[12] === "top-app-bar:action"
    			? "mdc-top-app-bar__action-item"
    			: "") + "\n    " + (/*context*/ ctx[12] === "snackbar"
    			? "mdc-snackbar__action"
    			: "") + "\n  "
    		},
    		/*actionProp*/ ctx[9],
    		/*defaultProp*/ ctx[10],
    		exclude(/*$$props*/ ctx[13], [
    			"use",
    			"class",
    			"ripple",
    			"color",
    			"variant",
    			"dense",
    			.../*dialogExcludes*/ ctx[8]
    		])
    	];

    	var switch_value = /*component*/ ctx[6];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			$$slots: { default: [create_default_slot] },
    			$$scope: { ctx }
    		};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = (dirty & /*Ripple, ripple, rippleClasses, forwardEvents, use, className, variant, dense, color, context, actionProp, defaultProp, exclude, $$props, dialogExcludes*/ 16319)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*Ripple, ripple, rippleClasses, forwardEvents, use*/ 2181 && {
    						use: [
    							[
    								Ripple,
    								{
    									ripple: /*ripple*/ ctx[2],
    									unbounded: false,
    									classForward: /*func*/ ctx[18]
    								}
    							],
    							/*forwardEvents*/ ctx[11],
    							.../*use*/ ctx[0]
    						]
    					},
    					dirty & /*className, rippleClasses, variant, dense, color, context*/ 4282 && {
    						class: "\n    mdc-button\n    " + /*className*/ ctx[1] + "\n    " + /*rippleClasses*/ ctx[7].join(" ") + "\n    " + (/*variant*/ ctx[4] === "raised"
    						? "mdc-button--raised"
    						: "") + "\n    " + (/*variant*/ ctx[4] === "unelevated"
    						? "mdc-button--unelevated"
    						: "") + "\n    " + (/*variant*/ ctx[4] === "outlined"
    						? "mdc-button--outlined"
    						: "") + "\n    " + (/*dense*/ ctx[5] ? "mdc-button--dense" : "") + "\n    " + (/*color*/ ctx[3] === "secondary"
    						? "smui-button--color-secondary"
    						: "") + "\n    " + (/*context*/ ctx[12] === "card:action"
    						? "mdc-card__action"
    						: "") + "\n    " + (/*context*/ ctx[12] === "card:action"
    						? "mdc-card__action--button"
    						: "") + "\n    " + (/*context*/ ctx[12] === "dialog:action"
    						? "mdc-dialog__button"
    						: "") + "\n    " + (/*context*/ ctx[12] === "top-app-bar:navigation"
    						? "mdc-top-app-bar__navigation-icon"
    						: "") + "\n    " + (/*context*/ ctx[12] === "top-app-bar:action"
    						? "mdc-top-app-bar__action-item"
    						: "") + "\n    " + (/*context*/ ctx[12] === "snackbar"
    						? "mdc-snackbar__action"
    						: "") + "\n  "
    					},
    					dirty & /*actionProp*/ 512 && get_spread_object(/*actionProp*/ ctx[9]),
    					dirty & /*defaultProp*/ 1024 && get_spread_object(/*defaultProp*/ ctx[10]),
    					dirty & /*exclude, $$props, dialogExcludes*/ 8448 && get_spread_object(exclude(/*$$props*/ ctx[13], [
    						"use",
    						"class",
    						"ripple",
    						"color",
    						"variant",
    						"dense",
    						.../*dialogExcludes*/ ctx[8]
    					]))
    				])
    			: {};

    			if (dirty & /*$$scope*/ 524288) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*component*/ ctx[6])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { ripple = true } = $$props;
    	let { color = "primary" } = $$props;
    	let { variant = "text" } = $$props;
    	let { dense = false } = $$props;
    	let { href = null } = $$props;
    	let { action = "close" } = $$props;
    	let { default: defaultAction = false } = $$props;
    	let { component = href == null ? Button : A } = $$props;
    	let context = getContext("SMUI:button:context");
    	let rippleClasses = [];
    	setContext("SMUI:label:context", "button");
    	setContext("SMUI:icon:context", "button");
    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Button", $$slots, ['default']);
    	const func = classes => $$invalidate(7, rippleClasses = classes);

    	$$self.$$set = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("ripple" in $$new_props) $$invalidate(2, ripple = $$new_props.ripple);
    		if ("color" in $$new_props) $$invalidate(3, color = $$new_props.color);
    		if ("variant" in $$new_props) $$invalidate(4, variant = $$new_props.variant);
    		if ("dense" in $$new_props) $$invalidate(5, dense = $$new_props.dense);
    		if ("href" in $$new_props) $$invalidate(14, href = $$new_props.href);
    		if ("action" in $$new_props) $$invalidate(15, action = $$new_props.action);
    		if ("default" in $$new_props) $$invalidate(16, defaultAction = $$new_props.default);
    		if ("component" in $$new_props) $$invalidate(6, component = $$new_props.component);
    		if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		A,
    		Button,
    		Ripple,
    		forwardEvents,
    		use,
    		className,
    		ripple,
    		color,
    		variant,
    		dense,
    		href,
    		action,
    		defaultAction,
    		component,
    		context,
    		rippleClasses,
    		dialogExcludes,
    		actionProp,
    		defaultProp
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("ripple" in $$props) $$invalidate(2, ripple = $$new_props.ripple);
    		if ("color" in $$props) $$invalidate(3, color = $$new_props.color);
    		if ("variant" in $$props) $$invalidate(4, variant = $$new_props.variant);
    		if ("dense" in $$props) $$invalidate(5, dense = $$new_props.dense);
    		if ("href" in $$props) $$invalidate(14, href = $$new_props.href);
    		if ("action" in $$props) $$invalidate(15, action = $$new_props.action);
    		if ("defaultAction" in $$props) $$invalidate(16, defaultAction = $$new_props.defaultAction);
    		if ("component" in $$props) $$invalidate(6, component = $$new_props.component);
    		if ("context" in $$props) $$invalidate(12, context = $$new_props.context);
    		if ("rippleClasses" in $$props) $$invalidate(7, rippleClasses = $$new_props.rippleClasses);
    		if ("dialogExcludes" in $$props) $$invalidate(8, dialogExcludes = $$new_props.dialogExcludes);
    		if ("actionProp" in $$props) $$invalidate(9, actionProp = $$new_props.actionProp);
    		if ("defaultProp" in $$props) $$invalidate(10, defaultProp = $$new_props.defaultProp);
    	};

    	let dialogExcludes;
    	let actionProp;
    	let defaultProp;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*action*/ 32768) {
    			 $$invalidate(9, actionProp = context === "dialog:action" && action !== null
    			? { "data-mdc-dialog-action": action }
    			: {});
    		}

    		if ($$self.$$.dirty & /*defaultAction*/ 65536) {
    			 $$invalidate(10, defaultProp = context === "dialog:action" && defaultAction
    			? { "data-mdc-dialog-button-default": "" }
    			: {});
    		}
    	};

    	 $$invalidate(8, dialogExcludes = context === "dialog:action" ? ["action", "default"] : []);
    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		ripple,
    		color,
    		variant,
    		dense,
    		component,
    		rippleClasses,
    		dialogExcludes,
    		actionProp,
    		defaultProp,
    		forwardEvents,
    		context,
    		$$props,
    		href,
    		action,
    		defaultAction,
    		$$slots,
    		func,
    		$$scope
    	];
    }

    class Button_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			use: 0,
    			class: 1,
    			ripple: 2,
    			color: 3,
    			variant: 4,
    			dense: 5,
    			href: 14,
    			action: 15,
    			default: 16,
    			component: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button_1",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get use() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get action() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get default() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set default(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/button/Group.svelte generated by Svelte v3.24.1 */
    const file$2 = "node_modules/@smui/button/Group.svelte";

    function create_fragment$3(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	let div_levels = [
    		{
    			class: div_class_value = "\n    smui-button__group\n    " + /*className*/ ctx[1] + "\n    " + (/*variant*/ ctx[2] === "raised"
    			? "smui-button__group--raised"
    			: "") + "\n  "
    		},
    		exclude(/*$$props*/ ctx[4], ["use", "class", "variant"])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (default_slot) default_slot.l(div_nodes);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(div, div_data);
    			add_location(div, file$2, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[3].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 32) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, variant*/ 6 && div_class_value !== (div_class_value = "\n    smui-button__group\n    " + /*className*/ ctx[1] + "\n    " + (/*variant*/ ctx[2] === "raised"
    				? "smui-button__group--raised"
    				: "") + "\n  ")) && { class: div_class_value },
    				dirty & /*$$props*/ 16 && exclude(/*$$props*/ ctx[4], ["use", "class", "variant"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { variant = "text" } = $$props;
    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Group", $$slots, ['default']);

    	$$self.$$set = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("variant" in $$new_props) $$invalidate(2, variant = $$new_props.variant);
    		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		variant
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("variant" in $$props) $$invalidate(2, variant = $$new_props.variant);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [use, className, variant, forwardEvents, $$props, $$scope, $$slots];
    }

    class Group extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { use: 0, class: 1, variant: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Group",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get use() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/common/Label.svelte generated by Svelte v3.24.1 */
    const file$3 = "node_modules/@smui/common/Label.svelte";

    function create_fragment$4(ctx) {
    	let span;
    	let span_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	let span_levels = [
    		{
    			class: span_class_value = "\n    " + /*className*/ ctx[1] + "\n    " + (/*context*/ ctx[3] === "button"
    			? "mdc-button__label"
    			: "") + "\n    " + (/*context*/ ctx[3] === "fab" ? "mdc-fab__label" : "") + "\n    " + (/*context*/ ctx[3] === "chip" ? "mdc-chip__text" : "") + "\n    " + (/*context*/ ctx[3] === "tab"
    			? "mdc-tab__text-label"
    			: "") + "\n    " + (/*context*/ ctx[3] === "image-list"
    			? "mdc-image-list__label"
    			: "") + "\n    " + (/*context*/ ctx[3] === "snackbar"
    			? "mdc-snackbar__label"
    			: "") + "\n  "
    		},
    		/*context*/ ctx[3] === "snackbar"
    		? { role: "status", "aria-live": "polite" }
    		: {},
    		exclude(/*$$props*/ ctx[4], ["use", "class"])
    	];

    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			if (default_slot) default_slot.l(span_nodes);
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(span, span_data);
    			add_location(span, file$3, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[2].call(null, span))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 32) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
    				}
    			}

    			set_attributes(span, span_data = get_spread_update(span_levels, [
    				(!current || dirty & /*className*/ 2 && span_class_value !== (span_class_value = "\n    " + /*className*/ ctx[1] + "\n    " + (/*context*/ ctx[3] === "button"
    				? "mdc-button__label"
    				: "") + "\n    " + (/*context*/ ctx[3] === "fab" ? "mdc-fab__label" : "") + "\n    " + (/*context*/ ctx[3] === "chip" ? "mdc-chip__text" : "") + "\n    " + (/*context*/ ctx[3] === "tab"
    				? "mdc-tab__text-label"
    				: "") + "\n    " + (/*context*/ ctx[3] === "image-list"
    				? "mdc-image-list__label"
    				: "") + "\n    " + (/*context*/ ctx[3] === "snackbar"
    				? "mdc-snackbar__label"
    				: "") + "\n  ")) && { class: span_class_value },
    				/*context*/ ctx[3] === "snackbar"
    				? { role: "status", "aria-live": "polite" }
    				: {},
    				dirty & /*$$props*/ 16 && exclude(/*$$props*/ ctx[4], ["use", "class"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	const context = getContext("SMUI:label:context");
    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Label", $$slots, ['default']);

    	$$self.$$set = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		context
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [use, className, forwardEvents, context, $$props, $$scope, $$slots];
    }

    class Label extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { use: 0, class: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Label",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get use() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
    function isArray(x) {
        return Array.isArray(x);
    }
    function isFunction(x) {
        return typeof x === 'function';
    }

    var METRICS_MAP = {
        'AMS-Regular': {
            '65': [0, 0.68889, 0, 0],
            '66': [0, 0.68889, 0, 0],
            '67': [0, 0.68889, 0, 0],
            '68': [0, 0.68889, 0, 0],
            '69': [0, 0.68889, 0, 0],
            '70': [0, 0.68889, 0, 0],
            '71': [0, 0.68889, 0, 0],
            '72': [0, 0.68889, 0, 0],
            '73': [0, 0.68889, 0, 0],
            '74': [0.16667, 0.68889, 0, 0],
            '75': [0, 0.68889, 0, 0],
            '76': [0, 0.68889, 0, 0],
            '77': [0, 0.68889, 0, 0],
            '78': [0, 0.68889, 0, 0],
            '79': [0.16667, 0.68889, 0, 0],
            '80': [0, 0.68889, 0, 0],
            '81': [0.16667, 0.68889, 0, 0],
            '82': [0, 0.68889, 0, 0],
            '83': [0, 0.68889, 0, 0],
            '84': [0, 0.68889, 0, 0],
            '85': [0, 0.68889, 0, 0],
            '86': [0, 0.68889, 0, 0],
            '87': [0, 0.68889, 0, 0],
            '88': [0, 0.68889, 0, 0],
            '89': [0, 0.68889, 0, 0],
            '90': [0, 0.68889, 0, 0],
            '107': [0, 0.68889, 0, 0],
            '165': [0, 0.675, 0.025, 0],
            '174': [0.15559, 0.69224, 0, 0],
            '240': [0, 0.68889, 0, 0],
            '295': [0, 0.68889, 0, 0],
            '710': [0, 0.825, 0, 0],
            '732': [0, 0.9, 0, 0],
            '770': [0, 0.825, 0, 0],
            '771': [0, 0.9, 0, 0],
            '989': [0.08167, 0.58167, 0, 0],
            '1008': [0, 0.43056, 0.04028, 0],
            '8245': [0, 0.54986, 0, 0],
            '8463': [0, 0.68889, 0, 0],
            '8487': [0, 0.68889, 0, 0],
            '8498': [0, 0.68889, 0, 0],
            '8502': [0, 0.68889, 0, 0],
            '8503': [0, 0.68889, 0, 0],
            '8504': [0, 0.68889, 0, 0],
            '8513': [0, 0.68889, 0, 0],
            '8592': [-0.03598, 0.46402, 0, 0],
            '8594': [-0.03598, 0.46402, 0, 0],
            '8602': [-0.13313, 0.36687, 0, 0],
            '8603': [-0.13313, 0.36687, 0, 0],
            '8606': [0.01354, 0.52239, 0, 0],
            '8608': [0.01354, 0.52239, 0, 0],
            '8610': [0.01354, 0.52239, 0, 0],
            '8611': [0.01354, 0.52239, 0, 0],
            '8619': [0, 0.54986, 0, 0],
            '8620': [0, 0.54986, 0, 0],
            '8621': [-0.13313, 0.37788, 0, 0],
            '8622': [-0.13313, 0.36687, 0, 0],
            '8624': [0, 0.69224, 0, 0],
            '8625': [0, 0.69224, 0, 0],
            '8630': [0, 0.43056, 0, 0],
            '8631': [0, 0.43056, 0, 0],
            '8634': [0.08198, 0.58198, 0, 0],
            '8635': [0.08198, 0.58198, 0, 0],
            '8638': [0.19444, 0.69224, 0, 0],
            '8639': [0.19444, 0.69224, 0, 0],
            '8642': [0.19444, 0.69224, 0, 0],
            '8643': [0.19444, 0.69224, 0, 0],
            '8644': [0.1808, 0.675, 0, 0],
            '8646': [0.1808, 0.675, 0, 0],
            '8647': [0.1808, 0.675, 0, 0],
            '8648': [0.19444, 0.69224, 0, 0],
            '8649': [0.1808, 0.675, 0, 0],
            '8650': [0.19444, 0.69224, 0, 0],
            '8651': [0.01354, 0.52239, 0, 0],
            '8652': [0.01354, 0.52239, 0, 0],
            '8653': [-0.13313, 0.36687, 0, 0],
            '8654': [-0.13313, 0.36687, 0, 0],
            '8655': [-0.13313, 0.36687, 0, 0],
            '8666': [0.13667, 0.63667, 0, 0],
            '8667': [0.13667, 0.63667, 0, 0],
            '8669': [-0.13313, 0.37788, 0, 0],
            '8672': [-0.064, 0.437, 0, 0],
            '8674': [-0.064, 0.437, 0, 0],
            '8705': [0, 0.825, 0, 0],
            '8708': [0, 0.68889, 0, 0],
            '8709': [0.08167, 0.58167, 0, 0],
            '8717': [0, 0.43056, 0, 0],
            '8722': [-0.03598, 0.46402, 0, 0],
            '8724': [0.08198, 0.69224, 0, 0],
            '8726': [0.08167, 0.58167, 0, 0],
            '8733': [0, 0.69224, 0, 0],
            '8736': [0, 0.69224, 0, 0],
            '8737': [0, 0.69224, 0, 0],
            '8738': [0.03517, 0.52239, 0, 0],
            '8739': [0.08167, 0.58167, 0, 0],
            '8740': [0.25142, 0.74111, 0, 0],
            '8741': [0.08167, 0.58167, 0, 0],
            '8742': [0.25142, 0.74111, 0, 0],
            '8756': [0, 0.69224, 0, 0],
            '8757': [0, 0.69224, 0, 0],
            '8764': [-0.13313, 0.36687, 0, 0],
            '8765': [-0.13313, 0.37788, 0, 0],
            '8769': [-0.13313, 0.36687, 0, 0],
            '8770': [-0.03625, 0.46375, 0, 0],
            '8774': [0.30274, 0.79383, 0, 0],
            '8776': [-0.01688, 0.48312, 0, 0],
            '8778': [0.08167, 0.58167, 0, 0],
            '8782': [0.06062, 0.54986, 0, 0],
            '8783': [0.06062, 0.54986, 0, 0],
            '8785': [0.08198, 0.58198, 0, 0],
            '8786': [0.08198, 0.58198, 0, 0],
            '8787': [0.08198, 0.58198, 0, 0],
            '8790': [0, 0.69224, 0, 0],
            '8791': [0.22958, 0.72958, 0, 0],
            '8796': [0.08198, 0.91667, 0, 0],
            '8806': [0.25583, 0.75583, 0, 0],
            '8807': [0.25583, 0.75583, 0, 0],
            '8808': [0.25142, 0.75726, 0, 0],
            '8809': [0.25142, 0.75726, 0, 0],
            '8812': [0.25583, 0.75583, 0, 0],
            '8814': [0.20576, 0.70576, 0, 0],
            '8815': [0.20576, 0.70576, 0, 0],
            '8816': [0.30274, 0.79383, 0, 0],
            '8817': [0.30274, 0.79383, 0, 0],
            '8818': [0.22958, 0.72958, 0, 0],
            '8819': [0.22958, 0.72958, 0, 0],
            '8822': [0.1808, 0.675, 0, 0],
            '8823': [0.1808, 0.675, 0, 0],
            '8828': [0.13667, 0.63667, 0, 0],
            '8829': [0.13667, 0.63667, 0, 0],
            '8830': [0.22958, 0.72958, 0, 0],
            '8831': [0.22958, 0.72958, 0, 0],
            '8832': [0.20576, 0.70576, 0, 0],
            '8833': [0.20576, 0.70576, 0, 0],
            '8840': [0.30274, 0.79383, 0, 0],
            '8841': [0.30274, 0.79383, 0, 0],
            '8842': [0.13597, 0.63597, 0, 0],
            '8843': [0.13597, 0.63597, 0, 0],
            '8847': [0.03517, 0.54986, 0, 0],
            '8848': [0.03517, 0.54986, 0, 0],
            '8858': [0.08198, 0.58198, 0, 0],
            '8859': [0.08198, 0.58198, 0, 0],
            '8861': [0.08198, 0.58198, 0, 0],
            '8862': [0, 0.675, 0, 0],
            '8863': [0, 0.675, 0, 0],
            '8864': [0, 0.675, 0, 0],
            '8865': [0, 0.675, 0, 0],
            '8872': [0, 0.69224, 0, 0],
            '8873': [0, 0.69224, 0, 0],
            '8874': [0, 0.69224, 0, 0],
            '8876': [0, 0.68889, 0, 0],
            '8877': [0, 0.68889, 0, 0],
            '8878': [0, 0.68889, 0, 0],
            '8879': [0, 0.68889, 0, 0],
            '8882': [0.03517, 0.54986, 0, 0],
            '8883': [0.03517, 0.54986, 0, 0],
            '8884': [0.13667, 0.63667, 0, 0],
            '8885': [0.13667, 0.63667, 0, 0],
            '8888': [0, 0.54986, 0, 0],
            '8890': [0.19444, 0.43056, 0, 0],
            '8891': [0.19444, 0.69224, 0, 0],
            '8892': [0.19444, 0.69224, 0, 0],
            '8901': [0, 0.54986, 0, 0],
            '8903': [0.08167, 0.58167, 0, 0],
            '8905': [0.08167, 0.58167, 0, 0],
            '8906': [0.08167, 0.58167, 0, 0],
            '8907': [0, 0.69224, 0, 0],
            '8908': [0, 0.69224, 0, 0],
            '8909': [-0.03598, 0.46402, 0, 0],
            '8910': [0, 0.54986, 0, 0],
            '8911': [0, 0.54986, 0, 0],
            '8912': [0.03517, 0.54986, 0, 0],
            '8913': [0.03517, 0.54986, 0, 0],
            '8914': [0, 0.54986, 0, 0],
            '8915': [0, 0.54986, 0, 0],
            '8916': [0, 0.69224, 0, 0],
            '8918': [0.0391, 0.5391, 0, 0],
            '8919': [0.0391, 0.5391, 0, 0],
            '8920': [0.03517, 0.54986, 0, 0],
            '8921': [0.03517, 0.54986, 0, 0],
            '8922': [0.38569, 0.88569, 0, 0],
            '8923': [0.38569, 0.88569, 0, 0],
            '8926': [0.13667, 0.63667, 0, 0],
            '8927': [0.13667, 0.63667, 0, 0],
            '8928': [0.30274, 0.79383, 0, 0],
            '8929': [0.30274, 0.79383, 0, 0],
            '8934': [0.23222, 0.74111, 0, 0],
            '8935': [0.23222, 0.74111, 0, 0],
            '8936': [0.23222, 0.74111, 0, 0],
            '8937': [0.23222, 0.74111, 0, 0],
            '8938': [0.20576, 0.70576, 0, 0],
            '8939': [0.20576, 0.70576, 0, 0],
            '8940': [0.30274, 0.79383, 0, 0],
            '8941': [0.30274, 0.79383, 0, 0],
            '8994': [0.19444, 0.69224, 0, 0],
            '8995': [0.19444, 0.69224, 0, 0],
            '9416': [0.15559, 0.69224, 0, 0],
            '9484': [0, 0.69224, 0, 0],
            '9488': [0, 0.69224, 0, 0],
            '9492': [0, 0.37788, 0, 0],
            '9496': [0, 0.37788, 0, 0],
            '9585': [0.19444, 0.68889, 0, 0],
            '9586': [0.19444, 0.74111, 0, 0],
            '9632': [0, 0.675, 0, 0],
            '9633': [0, 0.675, 0, 0],
            '9650': [0, 0.54986, 0, 0],
            '9651': [0, 0.54986, 0, 0],
            '9654': [0.03517, 0.54986, 0, 0],
            '9660': [0, 0.54986, 0, 0],
            '9661': [0, 0.54986, 0, 0],
            '9664': [0.03517, 0.54986, 0, 0],
            '9674': [0.11111, 0.69224, 0, 0],
            '9733': [0.19444, 0.69224, 0, 0],
            '10003': [0, 0.69224, 0, 0],
            '10016': [0, 0.69224, 0, 0],
            '10731': [0.11111, 0.69224, 0, 0],
            '10846': [0.19444, 0.75583, 0, 0],
            '10877': [0.13667, 0.63667, 0, 0],
            '10878': [0.13667, 0.63667, 0, 0],
            '10885': [0.25583, 0.75583, 0, 0],
            '10886': [0.25583, 0.75583, 0, 0],
            '10887': [0.13597, 0.63597, 0, 0],
            '10888': [0.13597, 0.63597, 0, 0],
            '10889': [0.26167, 0.75726, 0, 0],
            '10890': [0.26167, 0.75726, 0, 0],
            '10891': [0.48256, 0.98256, 0, 0],
            '10892': [0.48256, 0.98256, 0, 0],
            '10901': [0.13667, 0.63667, 0, 0],
            '10902': [0.13667, 0.63667, 0, 0],
            '10933': [0.25142, 0.75726, 0, 0],
            '10934': [0.25142, 0.75726, 0, 0],
            '10935': [0.26167, 0.75726, 0, 0],
            '10936': [0.26167, 0.75726, 0, 0],
            '10937': [0.26167, 0.75726, 0, 0],
            '10938': [0.26167, 0.75726, 0, 0],
            '10949': [0.25583, 0.75583, 0, 0],
            '10950': [0.25583, 0.75583, 0, 0],
            '10955': [0.28481, 0.79383, 0, 0],
            '10956': [0.28481, 0.79383, 0, 0],
            '57350': [0.08167, 0.58167, 0, 0],
            '57351': [0.08167, 0.58167, 0, 0],
            '57352': [0.08167, 0.58167, 0, 0],
            '57353': [0, 0.43056, 0.04028, 0],
            '57356': [0.25142, 0.75726, 0, 0],
            '57357': [0.25142, 0.75726, 0, 0],
            '57358': [0.41951, 0.91951, 0, 0],
            '57359': [0.30274, 0.79383, 0, 0],
            '57360': [0.30274, 0.79383, 0, 0],
            '57361': [0.41951, 0.91951, 0, 0],
            '57366': [0.25142, 0.75726, 0, 0],
            '57367': [0.25142, 0.75726, 0, 0],
            '57368': [0.25142, 0.75726, 0, 0],
            '57369': [0.25142, 0.75726, 0, 0],
            '57370': [0.13597, 0.63597, 0, 0],
            '57371': [0.13597, 0.63597, 0, 0],
        },
        'Caligraphic-Regular': {
            '48': [0, 0.43056, 0, 0],
            '49': [0, 0.43056, 0, 0],
            '50': [0, 0.43056, 0, 0],
            '51': [0.19444, 0.43056, 0, 0],
            '52': [0.19444, 0.43056, 0, 0],
            '53': [0.19444, 0.43056, 0, 0],
            '54': [0, 0.64444, 0, 0],
            '55': [0.19444, 0.43056, 0, 0],
            '56': [0, 0.64444, 0, 0],
            '57': [0.19444, 0.43056, 0, 0],
            '65': [0, 0.68333, 0, 0.19445],
            '66': [0, 0.68333, 0.03041, 0.13889],
            '67': [0, 0.68333, 0.05834, 0.13889],
            '68': [0, 0.68333, 0.02778, 0.08334],
            '69': [0, 0.68333, 0.08944, 0.11111],
            '70': [0, 0.68333, 0.09931, 0.11111],
            '71': [0.09722, 0.68333, 0.0593, 0.11111],
            '72': [0, 0.68333, 0.00965, 0.11111],
            '73': [0, 0.68333, 0.07382, 0],
            '74': [0.09722, 0.68333, 0.18472, 0.16667],
            '75': [0, 0.68333, 0.01445, 0.05556],
            '76': [0, 0.68333, 0, 0.13889],
            '77': [0, 0.68333, 0, 0.13889],
            '78': [0, 0.68333, 0.14736, 0.08334],
            '79': [0, 0.68333, 0.02778, 0.11111],
            '80': [0, 0.68333, 0.08222, 0.08334],
            '81': [0.09722, 0.68333, 0, 0.11111],
            '82': [0, 0.68333, 0, 0.08334],
            '83': [0, 0.68333, 0.075, 0.13889],
            '84': [0, 0.68333, 0.25417, 0],
            '85': [0, 0.68333, 0.09931, 0.08334],
            '86': [0, 0.68333, 0.08222, 0],
            '87': [0, 0.68333, 0.08222, 0.08334],
            '88': [0, 0.68333, 0.14643, 0.13889],
            '89': [0.09722, 0.68333, 0.08222, 0.08334],
            '90': [0, 0.68333, 0.07944, 0.13889],
        },
        'Fraktur-Regular': {
            '33': [0, 0.69141, 0, 0],
            '34': [0, 0.69141, 0, 0],
            '38': [0, 0.69141, 0, 0],
            '39': [0, 0.69141, 0, 0],
            '40': [0.24982, 0.74947, 0, 0],
            '41': [0.24982, 0.74947, 0, 0],
            '42': [0, 0.62119, 0, 0],
            '43': [0.08319, 0.58283, 0, 0],
            '44': [0, 0.10803, 0, 0],
            '45': [0.08319, 0.58283, 0, 0],
            '46': [0, 0.10803, 0, 0],
            '47': [0.24982, 0.74947, 0, 0],
            '48': [0, 0.47534, 0, 0],
            '49': [0, 0.47534, 0, 0],
            '50': [0, 0.47534, 0, 0],
            '51': [0.18906, 0.47534, 0, 0],
            '52': [0.18906, 0.47534, 0, 0],
            '53': [0.18906, 0.47534, 0, 0],
            '54': [0, 0.69141, 0, 0],
            '55': [0.18906, 0.47534, 0, 0],
            '56': [0, 0.69141, 0, 0],
            '57': [0.18906, 0.47534, 0, 0],
            '58': [0, 0.47534, 0, 0],
            '59': [0.12604, 0.47534, 0, 0],
            '61': [-0.13099, 0.36866, 0, 0],
            '63': [0, 0.69141, 0, 0],
            '65': [0, 0.69141, 0, 0],
            '66': [0, 0.69141, 0, 0],
            '67': [0, 0.69141, 0, 0],
            '68': [0, 0.69141, 0, 0],
            '69': [0, 0.69141, 0, 0],
            '70': [0.12604, 0.69141, 0, 0],
            '71': [0, 0.69141, 0, 0],
            '72': [0.06302, 0.69141, 0, 0],
            '73': [0, 0.69141, 0, 0],
            '74': [0.12604, 0.69141, 0, 0],
            '75': [0, 0.69141, 0, 0],
            '76': [0, 0.69141, 0, 0],
            '77': [0, 0.69141, 0, 0],
            '78': [0, 0.69141, 0, 0],
            '79': [0, 0.69141, 0, 0],
            '80': [0.18906, 0.69141, 0, 0],
            '81': [0.03781, 0.69141, 0, 0],
            '82': [0, 0.69141, 0, 0],
            '83': [0, 0.69141, 0, 0],
            '84': [0, 0.69141, 0, 0],
            '85': [0, 0.69141, 0, 0],
            '86': [0, 0.69141, 0, 0],
            '87': [0, 0.69141, 0, 0],
            '88': [0, 0.69141, 0, 0],
            '89': [0.18906, 0.69141, 0, 0],
            '90': [0.12604, 0.69141, 0, 0],
            '91': [0.24982, 0.74947, 0, 0],
            '93': [0.24982, 0.74947, 0, 0],
            '94': [0, 0.69141, 0, 0],
            '97': [0, 0.47534, 0, 0],
            '98': [0, 0.69141, 0, 0],
            '99': [0, 0.47534, 0, 0],
            '100': [0, 0.62119, 0, 0],
            '101': [0, 0.47534, 0, 0],
            '102': [0.18906, 0.69141, 0, 0],
            '103': [0.18906, 0.47534, 0, 0],
            '104': [0.18906, 0.69141, 0, 0],
            '105': [0, 0.69141, 0, 0],
            '106': [0, 0.69141, 0, 0],
            '107': [0, 0.69141, 0, 0],
            '108': [0, 0.69141, 0, 0],
            '109': [0, 0.47534, 0, 0],
            '110': [0, 0.47534, 0, 0],
            '111': [0, 0.47534, 0, 0],
            '112': [0.18906, 0.52396, 0, 0],
            '113': [0.18906, 0.47534, 0, 0],
            '114': [0, 0.47534, 0, 0],
            '115': [0, 0.47534, 0, 0],
            '116': [0, 0.62119, 0, 0],
            '117': [0, 0.47534, 0, 0],
            '118': [0, 0.52396, 0, 0],
            '119': [0, 0.52396, 0, 0],
            '120': [0.18906, 0.47534, 0, 0],
            '121': [0.18906, 0.47534, 0, 0],
            '122': [0.18906, 0.47534, 0, 0],
            '8216': [0, 0.69141, 0, 0],
            '8217': [0, 0.69141, 0, 0],
            '58112': [0, 0.62119, 0, 0],
            '58113': [0, 0.62119, 0, 0],
            '58114': [0.18906, 0.69141, 0, 0],
            '58115': [0.18906, 0.69141, 0, 0],
            '58116': [0.18906, 0.47534, 0, 0],
            '58117': [0, 0.69141, 0, 0],
            '58118': [0, 0.62119, 0, 0],
            '58119': [0, 0.47534, 0, 0],
        },
        'Main-Bold': {
            '33': [0, 0.69444, 0, 0],
            '34': [0, 0.69444, 0, 0],
            '35': [0.19444, 0.69444, 0, 0],
            '36': [0.05556, 0.75, 0, 0],
            '37': [0.05556, 0.75, 0, 0],
            '38': [0, 0.69444, 0, 0],
            '39': [0, 0.69444, 0, 0],
            '40': [0.25, 0.75, 0, 0],
            '41': [0.25, 0.75, 0, 0],
            '42': [0, 0.75, 0, 0],
            '43': [0.13333, 0.63333, 0, 0],
            '44': [0.19444, 0.15556, 0, 0],
            '45': [0, 0.44444, 0, 0],
            '46': [0, 0.15556, 0, 0],
            '47': [0.25, 0.75, 0, 0],
            '48': [0, 0.64444, 0, 0],
            '49': [0, 0.64444, 0, 0],
            '50': [0, 0.64444, 0, 0],
            '51': [0, 0.64444, 0, 0],
            '52': [0, 0.64444, 0, 0],
            '53': [0, 0.64444, 0, 0],
            '54': [0, 0.64444, 0, 0],
            '55': [0, 0.64444, 0, 0],
            '56': [0, 0.64444, 0, 0],
            '57': [0, 0.64444, 0, 0],
            '58': [0, 0.44444, 0, 0],
            '59': [0.19444, 0.44444, 0, 0],
            '60': [0.08556, 0.58556, 0, 0],
            '61': [-0.10889, 0.39111, 0, 0],
            '62': [0.08556, 0.58556, 0, 0],
            '63': [0, 0.69444, 0, 0],
            '64': [0, 0.69444, 0, 0],
            '65': [0, 0.68611, 0, 0],
            '66': [0, 0.68611, 0, 0],
            '67': [0, 0.68611, 0, 0],
            '68': [0, 0.68611, 0, 0],
            '69': [0, 0.68611, 0, 0],
            '70': [0, 0.68611, 0, 0],
            '71': [0, 0.68611, 0, 0],
            '72': [0, 0.68611, 0, 0],
            '73': [0, 0.68611, 0, 0],
            '74': [0, 0.68611, 0, 0],
            '75': [0, 0.68611, 0, 0],
            '76': [0, 0.68611, 0, 0],
            '77': [0, 0.68611, 0, 0],
            '78': [0, 0.68611, 0, 0],
            '79': [0, 0.68611, 0, 0],
            '80': [0, 0.68611, 0, 0],
            '81': [0.19444, 0.68611, 0, 0],
            '82': [0, 0.68611, 0, 0],
            '83': [0, 0.68611, 0, 0],
            '84': [0, 0.68611, 0, 0],
            '85': [0, 0.68611, 0, 0],
            '86': [0, 0.68611, 0.01597, 0],
            '87': [0, 0.68611, 0.01597, 0],
            '88': [0, 0.68611, 0, 0],
            '89': [0, 0.68611, 0.02875, 0],
            '90': [0, 0.68611, 0, 0],
            '91': [0.25, 0.75, 0, 0],
            '92': [0.25, 0.75, 0, 0],
            '93': [0.25, 0.75, 0, 0],
            '94': [0, 0.69444, 0, 0],
            '95': [0.31, 0.13444, 0.03194, 0],
            '97': [0, 0.44444, 0, 0],
            '98': [0, 0.69444, 0, 0],
            '99': [0, 0.44444, 0, 0],
            '100': [0, 0.69444, 0, 0],
            '101': [0, 0.44444, 0, 0],
            '102': [0, 0.69444, 0.10903, 0],
            '103': [0.19444, 0.44444, 0.01597, 0],
            '104': [0, 0.69444, 0, 0],
            '105': [0, 0.69444, 0, 0],
            '106': [0.19444, 0.69444, 0, 0],
            '107': [0, 0.69444, 0, 0],
            '108': [0, 0.69444, 0, 0],
            '109': [0, 0.44444, 0, 0],
            '110': [0, 0.44444, 0, 0],
            '111': [0, 0.44444, 0, 0],
            '112': [0.19444, 0.44444, 0, 0],
            '113': [0.19444, 0.44444, 0, 0],
            '114': [0, 0.44444, 0, 0],
            '115': [0, 0.44444, 0, 0],
            '116': [0, 0.63492, 0, 0],
            '117': [0, 0.44444, 0, 0],
            '118': [0, 0.44444, 0.01597, 0],
            '119': [0, 0.44444, 0.01597, 0],
            '120': [0, 0.44444, 0, 0],
            '121': [0.19444, 0.44444, 0.01597, 0],
            '122': [0, 0.44444, 0, 0],
            '123': [0.25, 0.75, 0, 0],
            '124': [0.25, 0.75, 0, 0],
            '125': [0.25, 0.75, 0, 0],
            '126': [0.35, 0.34444, 0, 0],
            '168': [0, 0.69444, 0, 0],
            '172': [0, 0.44444, 0, 0],
            '176': [0, 0.69444, 0, 0],
            '177': [0.13333, 0.63333, 0, 0],
            '184': [0.17014, 0, 0, 0],
            '198': [0, 0.68611, 0, 0],
            '215': [0.13333, 0.63333, 0, 0],
            '216': [0.04861, 0.73472, 0, 0],
            '223': [0, 0.69444, 0, 0],
            '230': [0, 0.44444, 0, 0],
            '247': [0.13333, 0.63333, 0, 0],
            '248': [0.09722, 0.54167, 0, 0],
            '305': [0, 0.44444, 0, 0],
            '338': [0, 0.68611, 0, 0],
            '339': [0, 0.44444, 0, 0],
            '567': [0.19444, 0.44444, 0, 0],
            '710': [0, 0.69444, 0, 0],
            '711': [0, 0.63194, 0, 0],
            '713': [0, 0.59611, 0, 0],
            '714': [0, 0.69444, 0, 0],
            '715': [0, 0.69444, 0, 0],
            '728': [0, 0.69444, 0, 0],
            '729': [0, 0.69444, 0, 0],
            '730': [0, 0.69444, 0, 0],
            '732': [0, 0.69444, 0, 0],
            '733': [0, 0.69444, 0, 0],
            '915': [0, 0.68611, 0, 0],
            '916': [0, 0.68611, 0, 0],
            '920': [0, 0.68611, 0, 0],
            '923': [0, 0.68611, 0, 0],
            '926': [0, 0.68611, 0, 0],
            '928': [0, 0.68611, 0, 0],
            '931': [0, 0.68611, 0, 0],
            '933': [0, 0.68611, 0, 0],
            '934': [0, 0.68611, 0, 0],
            '936': [0, 0.68611, 0, 0],
            '937': [0, 0.68611, 0, 0],
            '8211': [0, 0.44444, 0.03194, 0],
            '8212': [0, 0.44444, 0.03194, 0],
            '8216': [0, 0.69444, 0, 0],
            '8217': [0, 0.69444, 0, 0],
            '8220': [0, 0.69444, 0, 0],
            '8221': [0, 0.69444, 0, 0],
            '8224': [0.19444, 0.69444, 0, 0],
            '8225': [0.19444, 0.69444, 0, 0],
            '8242': [0, 0.55556, 0, 0],
            '8407': [0, 0.72444, 0.15486, 0],
            '8463': [0, 0.69444, 0, 0],
            '8465': [0, 0.69444, 0, 0],
            '8467': [0, 0.69444, 0, 0],
            '8472': [0.19444, 0.44444, 0, 0],
            '8476': [0, 0.69444, 0, 0],
            '8501': [0, 0.69444, 0, 0],
            '8592': [-0.10889, 0.39111, 0, 0],
            '8593': [0.19444, 0.69444, 0, 0],
            '8594': [-0.10889, 0.39111, 0, 0],
            '8595': [0.19444, 0.69444, 0, 0],
            '8596': [-0.10889, 0.39111, 0, 0],
            '8597': [0.25, 0.75, 0, 0],
            '8598': [0.19444, 0.69444, 0, 0],
            '8599': [0.19444, 0.69444, 0, 0],
            '8600': [0.19444, 0.69444, 0, 0],
            '8601': [0.19444, 0.69444, 0, 0],
            '8636': [-0.10889, 0.39111, 0, 0],
            '8637': [-0.10889, 0.39111, 0, 0],
            '8640': [-0.10889, 0.39111, 0, 0],
            '8641': [-0.10889, 0.39111, 0, 0],
            '8656': [-0.10889, 0.39111, 0, 0],
            '8657': [0.19444, 0.69444, 0, 0],
            '8658': [-0.10889, 0.39111, 0, 0],
            '8659': [0.19444, 0.69444, 0, 0],
            '8660': [-0.10889, 0.39111, 0, 0],
            '8661': [0.25, 0.75, 0, 0],
            '8704': [0, 0.69444, 0, 0],
            '8706': [0, 0.69444, 0.06389, 0],
            '8707': [0, 0.69444, 0, 0],
            '8709': [0.05556, 0.75, 0, 0],
            '8711': [0, 0.68611, 0, 0],
            '8712': [0.08556, 0.58556, 0, 0],
            '8715': [0.08556, 0.58556, 0, 0],
            '8722': [0.13333, 0.63333, 0, 0],
            '8723': [0.13333, 0.63333, 0, 0],
            '8725': [0.25, 0.75, 0, 0],
            '8726': [0.25, 0.75, 0, 0],
            '8727': [-0.02778, 0.47222, 0, 0],
            '8728': [-0.02639, 0.47361, 0, 0],
            '8729': [-0.02639, 0.47361, 0, 0],
            '8730': [0.18, 0.82, 0, 0],
            '8733': [0, 0.44444, 0, 0],
            '8734': [0, 0.44444, 0, 0],
            '8736': [0, 0.69224, 0, 0],
            '8739': [0.25, 0.75, 0, 0],
            '8741': [0.25, 0.75, 0, 0],
            '8743': [0, 0.55556, 0, 0],
            '8744': [0, 0.55556, 0, 0],
            '8745': [0, 0.55556, 0, 0],
            '8746': [0, 0.55556, 0, 0],
            '8747': [0.19444, 0.69444, 0.12778, 0],
            '8764': [-0.10889, 0.39111, 0, 0],
            '8768': [0.19444, 0.69444, 0, 0],
            '8771': [0.00222, 0.50222, 0, 0],
            '8776': [0.02444, 0.52444, 0, 0],
            '8781': [0.00222, 0.50222, 0, 0],
            '8801': [0.00222, 0.50222, 0, 0],
            '8804': [0.19667, 0.69667, 0, 0],
            '8805': [0.19667, 0.69667, 0, 0],
            '8810': [0.08556, 0.58556, 0, 0],
            '8811': [0.08556, 0.58556, 0, 0],
            '8826': [0.08556, 0.58556, 0, 0],
            '8827': [0.08556, 0.58556, 0, 0],
            '8834': [0.08556, 0.58556, 0, 0],
            '8835': [0.08556, 0.58556, 0, 0],
            '8838': [0.19667, 0.69667, 0, 0],
            '8839': [0.19667, 0.69667, 0, 0],
            '8846': [0, 0.55556, 0, 0],
            '8849': [0.19667, 0.69667, 0, 0],
            '8850': [0.19667, 0.69667, 0, 0],
            '8851': [0, 0.55556, 0, 0],
            '8852': [0, 0.55556, 0, 0],
            '8853': [0.13333, 0.63333, 0, 0],
            '8854': [0.13333, 0.63333, 0, 0],
            '8855': [0.13333, 0.63333, 0, 0],
            '8856': [0.13333, 0.63333, 0, 0],
            '8857': [0.13333, 0.63333, 0, 0],
            '8866': [0, 0.69444, 0, 0],
            '8867': [0, 0.69444, 0, 0],
            '8868': [0, 0.69444, 0, 0],
            '8869': [0, 0.69444, 0, 0],
            '8900': [-0.02639, 0.47361, 0, 0],
            '8901': [-0.02639, 0.47361, 0, 0],
            '8902': [-0.02778, 0.47222, 0, 0],
            '8968': [0.25, 0.75, 0, 0],
            '8969': [0.25, 0.75, 0, 0],
            '8970': [0.25, 0.75, 0, 0],
            '8971': [0.25, 0.75, 0, 0],
            '8994': [-0.13889, 0.36111, 0, 0],
            '8995': [-0.13889, 0.36111, 0, 0],
            '9651': [0.19444, 0.69444, 0, 0],
            '9657': [-0.02778, 0.47222, 0, 0],
            '9661': [0.19444, 0.69444, 0, 0],
            '9667': [-0.02778, 0.47222, 0, 0],
            '9711': [0.19444, 0.69444, 0, 0],
            '9824': [0.12963, 0.69444, 0, 0],
            '9825': [0.12963, 0.69444, 0, 0],
            '9826': [0.12963, 0.69444, 0, 0],
            '9827': [0.12963, 0.69444, 0, 0],
            '9837': [0, 0.75, 0, 0],
            '9838': [0.19444, 0.69444, 0, 0],
            '9839': [0.19444, 0.69444, 0, 0],
            '10216': [0.25, 0.75, 0, 0],
            '10217': [0.25, 0.75, 0, 0],
            '10815': [0, 0.68611, 0, 0],
            '10927': [0.19667, 0.69667, 0, 0],
            '10928': [0.19667, 0.69667, 0, 0],
            '57376': [0.19444, 0.69444, 0, 0],
        },
        'Main-BoldItalic': {
            '33': [0, 0.69444, 0.11417, 0],
            '34': [0, 0.69444, 0.07939, 0],
            '35': [0.19444, 0.69444, 0.06833, 0],
            '37': [0.05556, 0.75, 0.12861, 0],
            '38': [0, 0.69444, 0.08528, 0],
            '39': [0, 0.69444, 0.12945, 0],
            '40': [0.25, 0.75, 0.15806, 0],
            '41': [0.25, 0.75, 0.03306, 0],
            '42': [0, 0.75, 0.14333, 0],
            '43': [0.10333, 0.60333, 0.03306, 0],
            '44': [0.19444, 0.14722, 0, 0],
            '45': [0, 0.44444, 0.02611, 0],
            '46': [0, 0.14722, 0, 0],
            '47': [0.25, 0.75, 0.15806, 0],
            '48': [0, 0.64444, 0.13167, 0],
            '49': [0, 0.64444, 0.13167, 0],
            '50': [0, 0.64444, 0.13167, 0],
            '51': [0, 0.64444, 0.13167, 0],
            '52': [0.19444, 0.64444, 0.13167, 0],
            '53': [0, 0.64444, 0.13167, 0],
            '54': [0, 0.64444, 0.13167, 0],
            '55': [0.19444, 0.64444, 0.13167, 0],
            '56': [0, 0.64444, 0.13167, 0],
            '57': [0, 0.64444, 0.13167, 0],
            '58': [0, 0.44444, 0.06695, 0],
            '59': [0.19444, 0.44444, 0.06695, 0],
            '61': [-0.10889, 0.39111, 0.06833, 0],
            '63': [0, 0.69444, 0.11472, 0],
            '64': [0, 0.69444, 0.09208, 0],
            '65': [0, 0.68611, 0, 0],
            '66': [0, 0.68611, 0.0992, 0],
            '67': [0, 0.68611, 0.14208, 0],
            '68': [0, 0.68611, 0.09062, 0],
            '69': [0, 0.68611, 0.11431, 0],
            '70': [0, 0.68611, 0.12903, 0],
            '71': [0, 0.68611, 0.07347, 0],
            '72': [0, 0.68611, 0.17208, 0],
            '73': [0, 0.68611, 0.15681, 0],
            '74': [0, 0.68611, 0.145, 0],
            '75': [0, 0.68611, 0.14208, 0],
            '76': [0, 0.68611, 0, 0],
            '77': [0, 0.68611, 0.17208, 0],
            '78': [0, 0.68611, 0.17208, 0],
            '79': [0, 0.68611, 0.09062, 0],
            '80': [0, 0.68611, 0.0992, 0],
            '81': [0.19444, 0.68611, 0.09062, 0],
            '82': [0, 0.68611, 0.02559, 0],
            '83': [0, 0.68611, 0.11264, 0],
            '84': [0, 0.68611, 0.12903, 0],
            '85': [0, 0.68611, 0.17208, 0],
            '86': [0, 0.68611, 0.18625, 0],
            '87': [0, 0.68611, 0.18625, 0],
            '88': [0, 0.68611, 0.15681, 0],
            '89': [0, 0.68611, 0.19803, 0],
            '90': [0, 0.68611, 0.14208, 0],
            '91': [0.25, 0.75, 0.1875, 0],
            '93': [0.25, 0.75, 0.09972, 0],
            '94': [0, 0.69444, 0.06709, 0],
            '95': [0.31, 0.13444, 0.09811, 0],
            '97': [0, 0.44444, 0.09426, 0],
            '98': [0, 0.69444, 0.07861, 0],
            '99': [0, 0.44444, 0.05222, 0],
            '100': [0, 0.69444, 0.10861, 0],
            '101': [0, 0.44444, 0.085, 0],
            '102': [0.19444, 0.69444, 0.21778, 0],
            '103': [0.19444, 0.44444, 0.105, 0],
            '104': [0, 0.69444, 0.09426, 0],
            '105': [0, 0.69326, 0.11387, 0],
            '106': [0.19444, 0.69326, 0.1672, 0],
            '107': [0, 0.69444, 0.11111, 0],
            '108': [0, 0.69444, 0.10861, 0],
            '109': [0, 0.44444, 0.09426, 0],
            '110': [0, 0.44444, 0.09426, 0],
            '111': [0, 0.44444, 0.07861, 0],
            '112': [0.19444, 0.44444, 0.07861, 0],
            '113': [0.19444, 0.44444, 0.105, 0],
            '114': [0, 0.44444, 0.11111, 0],
            '115': [0, 0.44444, 0.08167, 0],
            '116': [0, 0.63492, 0.09639, 0],
            '117': [0, 0.44444, 0.09426, 0],
            '118': [0, 0.44444, 0.11111, 0],
            '119': [0, 0.44444, 0.11111, 0],
            '120': [0, 0.44444, 0.12583, 0],
            '121': [0.19444, 0.44444, 0.105, 0],
            '122': [0, 0.44444, 0.13889, 0],
            '126': [0.35, 0.34444, 0.11472, 0],
            '163': [0, 0.69444, 0, 0],
            '168': [0, 0.69444, 0.11473, 0],
            '176': [0, 0.69444, 0, 0],
            '184': [0.17014, 0, 0, 0],
            '198': [0, 0.68611, 0.11431, 0],
            '216': [0.04861, 0.73472, 0.09062, 0],
            '223': [0.19444, 0.69444, 0.09736, 0],
            '230': [0, 0.44444, 0.085, 0],
            '248': [0.09722, 0.54167, 0.09458, 0],
            '305': [0, 0.44444, 0.09426, 0],
            '338': [0, 0.68611, 0.11431, 0],
            '339': [0, 0.44444, 0.085, 0],
            '567': [0.19444, 0.44444, 0.04611, 0],
            '710': [0, 0.69444, 0.06709, 0],
            '711': [0, 0.63194, 0.08271, 0],
            '713': [0, 0.59444, 0.10444, 0],
            '714': [0, 0.69444, 0.08528, 0],
            '715': [0, 0.69444, 0, 0],
            '728': [0, 0.69444, 0.10333, 0],
            '729': [0, 0.69444, 0.12945, 0],
            '730': [0, 0.69444, 0, 0],
            '732': [0, 0.69444, 0.11472, 0],
            '733': [0, 0.69444, 0.11472, 0],
            '915': [0, 0.68611, 0.12903, 0],
            '916': [0, 0.68611, 0, 0],
            '920': [0, 0.68611, 0.09062, 0],
            '923': [0, 0.68611, 0, 0],
            '926': [0, 0.68611, 0.15092, 0],
            '928': [0, 0.68611, 0.17208, 0],
            '931': [0, 0.68611, 0.11431, 0],
            '933': [0, 0.68611, 0.10778, 0],
            '934': [0, 0.68611, 0.05632, 0],
            '936': [0, 0.68611, 0.10778, 0],
            '937': [0, 0.68611, 0.0992, 0],
            '8211': [0, 0.44444, 0.09811, 0],
            '8212': [0, 0.44444, 0.09811, 0],
            '8216': [0, 0.69444, 0.12945, 0],
            '8217': [0, 0.69444, 0.12945, 0],
            '8220': [0, 0.69444, 0.16772, 0],
            '8221': [0, 0.69444, 0.07939, 0],
        },
        'Main-Italic': {
            '33': [0, 0.69444, 0.12417, 0],
            '34': [0, 0.69444, 0.06961, 0],
            '35': [0.19444, 0.69444, 0.06616, 0],
            '37': [0.05556, 0.75, 0.13639, 0],
            '38': [0, 0.69444, 0.09694, 0],
            '39': [0, 0.69444, 0.12417, 0],
            '40': [0.25, 0.75, 0.16194, 0],
            '41': [0.25, 0.75, 0.03694, 0],
            '42': [0, 0.75, 0.14917, 0],
            '43': [0.05667, 0.56167, 0.03694, 0],
            '44': [0.19444, 0.10556, 0, 0],
            '45': [0, 0.43056, 0.02826, 0],
            '46': [0, 0.10556, 0, 0],
            '47': [0.25, 0.75, 0.16194, 0],
            '48': [0, 0.64444, 0.13556, 0],
            '49': [0, 0.64444, 0.13556, 0],
            '50': [0, 0.64444, 0.13556, 0],
            '51': [0, 0.64444, 0.13556, 0],
            '52': [0.19444, 0.64444, 0.13556, 0],
            '53': [0, 0.64444, 0.13556, 0],
            '54': [0, 0.64444, 0.13556, 0],
            '55': [0.19444, 0.64444, 0.13556, 0],
            '56': [0, 0.64444, 0.13556, 0],
            '57': [0, 0.64444, 0.13556, 0],
            '58': [0, 0.43056, 0.0582, 0],
            '59': [0.19444, 0.43056, 0.0582, 0],
            '61': [-0.13313, 0.36687, 0.06616, 0],
            '63': [0, 0.69444, 0.1225, 0],
            '64': [0, 0.69444, 0.09597, 0],
            '65': [0, 0.68333, 0, 0],
            '66': [0, 0.68333, 0.10257, 0],
            '67': [0, 0.68333, 0.14528, 0],
            '68': [0, 0.68333, 0.09403, 0],
            '69': [0, 0.68333, 0.12028, 0],
            '70': [0, 0.68333, 0.13305, 0],
            '71': [0, 0.68333, 0.08722, 0],
            '72': [0, 0.68333, 0.16389, 0],
            '73': [0, 0.68333, 0.15806, 0],
            '74': [0, 0.68333, 0.14028, 0],
            '75': [0, 0.68333, 0.14528, 0],
            '76': [0, 0.68333, 0, 0],
            '77': [0, 0.68333, 0.16389, 0],
            '78': [0, 0.68333, 0.16389, 0],
            '79': [0, 0.68333, 0.09403, 0],
            '80': [0, 0.68333, 0.10257, 0],
            '81': [0.19444, 0.68333, 0.09403, 0],
            '82': [0, 0.68333, 0.03868, 0],
            '83': [0, 0.68333, 0.11972, 0],
            '84': [0, 0.68333, 0.13305, 0],
            '85': [0, 0.68333, 0.16389, 0],
            '86': [0, 0.68333, 0.18361, 0],
            '87': [0, 0.68333, 0.18361, 0],
            '88': [0, 0.68333, 0.15806, 0],
            '89': [0, 0.68333, 0.19383, 0],
            '90': [0, 0.68333, 0.14528, 0],
            '91': [0.25, 0.75, 0.1875, 0],
            '93': [0.25, 0.75, 0.10528, 0],
            '94': [0, 0.69444, 0.06646, 0],
            '95': [0.31, 0.12056, 0.09208, 0],
            '97': [0, 0.43056, 0.07671, 0],
            '98': [0, 0.69444, 0.06312, 0],
            '99': [0, 0.43056, 0.05653, 0],
            '100': [0, 0.69444, 0.10333, 0],
            '101': [0, 0.43056, 0.07514, 0],
            '102': [0.19444, 0.69444, 0.21194, 0],
            '103': [0.19444, 0.43056, 0.08847, 0],
            '104': [0, 0.69444, 0.07671, 0],
            '105': [0, 0.65536, 0.1019, 0],
            '106': [0.19444, 0.65536, 0.14467, 0],
            '107': [0, 0.69444, 0.10764, 0],
            '108': [0, 0.69444, 0.10333, 0],
            '109': [0, 0.43056, 0.07671, 0],
            '110': [0, 0.43056, 0.07671, 0],
            '111': [0, 0.43056, 0.06312, 0],
            '112': [0.19444, 0.43056, 0.06312, 0],
            '113': [0.19444, 0.43056, 0.08847, 0],
            '114': [0, 0.43056, 0.10764, 0],
            '115': [0, 0.43056, 0.08208, 0],
            '116': [0, 0.61508, 0.09486, 0],
            '117': [0, 0.43056, 0.07671, 0],
            '118': [0, 0.43056, 0.10764, 0],
            '119': [0, 0.43056, 0.10764, 0],
            '120': [0, 0.43056, 0.12042, 0],
            '121': [0.19444, 0.43056, 0.08847, 0],
            '122': [0, 0.43056, 0.12292, 0],
            '126': [0.35, 0.31786, 0.11585, 0],
            '163': [0, 0.69444, 0, 0],
            '168': [0, 0.66786, 0.10474, 0],
            '176': [0, 0.69444, 0, 0],
            '184': [0.17014, 0, 0, 0],
            '198': [0, 0.68333, 0.12028, 0],
            '216': [0.04861, 0.73194, 0.09403, 0],
            '223': [0.19444, 0.69444, 0.10514, 0],
            '230': [0, 0.43056, 0.07514, 0],
            '248': [0.09722, 0.52778, 0.09194, 0],
            '305': [0, 0.43056, 0, 0.02778],
            '338': [0, 0.68333, 0.12028, 0],
            '339': [0, 0.43056, 0.07514, 0],
            '567': [0.19444, 0.43056, 0, 0.08334],
            '710': [0, 0.69444, 0.06646, 0],
            '711': [0, 0.62847, 0.08295, 0],
            '713': [0, 0.56167, 0.10333, 0],
            '714': [0, 0.69444, 0.09694, 0],
            '715': [0, 0.69444, 0, 0],
            '728': [0, 0.69444, 0.10806, 0],
            '729': [0, 0.66786, 0.11752, 0],
            '730': [0, 0.69444, 0, 0],
            '732': [0, 0.66786, 0.11585, 0],
            '733': [0, 0.69444, 0.1225, 0],
            '915': [0, 0.68333, 0.13305, 0],
            '916': [0, 0.68333, 0, 0],
            '920': [0, 0.68333, 0.09403, 0],
            '923': [0, 0.68333, 0, 0],
            '926': [0, 0.68333, 0.15294, 0],
            '928': [0, 0.68333, 0.16389, 0],
            '931': [0, 0.68333, 0.12028, 0],
            '933': [0, 0.68333, 0.11111, 0],
            '934': [0, 0.68333, 0.05986, 0],
            '936': [0, 0.68333, 0.11111, 0],
            '937': [0, 0.68333, 0.10257, 0],
            '8211': [0, 0.43056, 0.09208, 0],
            '8212': [0, 0.43056, 0.09208, 0],
            '8216': [0, 0.69444, 0.12417, 0],
            '8217': [0, 0.69444, 0.12417, 0],
            '8220': [0, 0.69444, 0.1685, 0],
            '8221': [0, 0.69444, 0.06961, 0],
            '8463': [0, 0.68889, 0, 0],
        },
        'Main-Regular': {
            '32': [0, 0, 0, 0],
            '33': [0, 0.69444, 0, 0],
            '34': [0, 0.69444, 0, 0],
            '35': [0.19444, 0.69444, 0, 0],
            '36': [0.05556, 0.75, 0, 0],
            '37': [0.05556, 0.75, 0, 0],
            '38': [0, 0.69444, 0, 0],
            '39': [0, 0.69444, 0, 0],
            '40': [0.25, 0.75, 0, 0],
            '41': [0.25, 0.75, 0, 0],
            '42': [0, 0.75, 0, 0],
            '43': [0.08333, 0.58333, 0, 0],
            '44': [0.19444, 0.10556, 0, 0],
            '45': [0, 0.43056, 0, 0],
            '46': [0, 0.10556, 0, 0],
            '47': [0.25, 0.75, 0, 0],
            '48': [0, 0.64444, 0, 0],
            '49': [0, 0.64444, 0, 0],
            '50': [0, 0.64444, 0, 0],
            '51': [0, 0.64444, 0, 0],
            '52': [0, 0.64444, 0, 0],
            '53': [0, 0.64444, 0, 0],
            '54': [0, 0.64444, 0, 0],
            '55': [0, 0.64444, 0, 0],
            '56': [0, 0.64444, 0, 0],
            '57': [0, 0.64444, 0, 0],
            '58': [0, 0.43056, 0, 0],
            '59': [0.19444, 0.43056, 0, 0],
            '60': [0.0391, 0.5391, 0, 0],
            '61': [-0.13313, 0.36687, 0, 0],
            '62': [0.0391, 0.5391, 0, 0],
            '63': [0, 0.69444, 0, 0],
            '64': [0, 0.69444, 0, 0],
            '65': [0, 0.68333, 0, 0],
            '66': [0, 0.68333, 0, 0],
            '67': [0, 0.68333, 0, 0],
            '68': [0, 0.68333, 0, 0],
            '69': [0, 0.68333, 0, 0],
            '70': [0, 0.68333, 0, 0],
            '71': [0, 0.68333, 0, 0],
            '72': [0, 0.68333, 0, 0],
            '73': [0, 0.68333, 0, 0],
            '74': [0, 0.68333, 0, 0],
            '75': [0, 0.68333, 0, 0],
            '76': [0, 0.68333, 0, 0],
            '77': [0, 0.68333, 0, 0],
            '78': [0, 0.68333, 0, 0],
            '79': [0, 0.68333, 0, 0],
            '80': [0, 0.68333, 0, 0],
            '81': [0.19444, 0.68333, 0, 0],
            '82': [0, 0.68333, 0, 0],
            '83': [0, 0.68333, 0, 0],
            '84': [0, 0.68333, 0, 0],
            '85': [0, 0.68333, 0, 0],
            '86': [0, 0.68333, 0.01389, 0],
            '87': [0, 0.68333, 0.01389, 0],
            '88': [0, 0.68333, 0, 0],
            '89': [0, 0.68333, 0.025, 0],
            '90': [0, 0.68333, 0, 0],
            '91': [0.25, 0.75, 0, 0],
            '92': [0.25, 0.75, 0, 0],
            '93': [0.25, 0.75, 0, 0],
            '94': [0, 0.69444, 0, 0],
            '95': [0.31, 0.12056, 0.02778, 0],
            '97': [0, 0.43056, 0, 0],
            '98': [0, 0.69444, 0, 0],
            '99': [0, 0.43056, 0, 0],
            '100': [0, 0.69444, 0, 0],
            '101': [0, 0.43056, 0, 0],
            '102': [0, 0.69444, 0.07778, 0],
            '103': [0.19444, 0.43056, 0.01389, 0],
            '104': [0, 0.69444, 0, 0],
            '105': [0, 0.66786, 0, 0],
            '106': [0.19444, 0.66786, 0, 0],
            '107': [0, 0.69444, 0, 0],
            '108': [0, 0.69444, 0, 0],
            '109': [0, 0.43056, 0, 0],
            '110': [0, 0.43056, 0, 0],
            '111': [0, 0.43056, 0, 0],
            '112': [0.19444, 0.43056, 0, 0],
            '113': [0.19444, 0.43056, 0, 0],
            '114': [0, 0.43056, 0, 0],
            '115': [0, 0.43056, 0, 0],
            '116': [0, 0.61508, 0, 0],
            '117': [0, 0.43056, 0, 0],
            '118': [0, 0.43056, 0.01389, 0],
            '119': [0, 0.43056, 0.01389, 0],
            '120': [0, 0.43056, 0, 0],
            '121': [0.19444, 0.43056, 0.01389, 0],
            '122': [0, 0.43056, 0, 0],
            '123': [0.25, 0.75, 0, 0],
            '124': [0.25, 0.75, 0, 0],
            '125': [0.25, 0.75, 0, 0],
            '126': [0.35, 0.31786, 0, 0],
            '160': [0, 0, 0, 0],
            '167': [0.19444, 0.69444, 0, 0],
            '168': [0, 0.66786, 0, 0],
            '172': [0, 0.43056, 0, 0],
            '176': [0, 0.69444, 0, 0],
            '177': [0.08333, 0.58333, 0, 0],
            '182': [0.19444, 0.69444, 0, 0],
            '184': [0.17014, 0, 0, 0],
            '198': [0, 0.68333, 0, 0],
            '215': [0.08333, 0.58333, 0, 0],
            '216': [0.04861, 0.73194, 0, 0],
            '223': [0, 0.69444, 0, 0],
            '230': [0, 0.43056, 0, 0],
            '247': [0.08333, 0.58333, 0, 0],
            '248': [0.09722, 0.52778, 0, 0],
            '305': [0, 0.43056, 0, 0],
            '338': [0, 0.68333, 0, 0],
            '339': [0, 0.43056, 0, 0],
            '567': [0.19444, 0.43056, 0, 0],
            '710': [0, 0.69444, 0, 0],
            '711': [0, 0.62847, 0, 0],
            '713': [0, 0.56778, 0, 0],
            '714': [0, 0.69444, 0, 0],
            '715': [0, 0.69444, 0, 0],
            '728': [0, 0.69444, 0, 0],
            '729': [0, 0.66786, 0, 0],
            '730': [0, 0.69444, 0, 0],
            '732': [0, 0.66786, 0, 0],
            '733': [0, 0.69444, 0, 0],
            '915': [0, 0.68333, 0, 0],
            '916': [0, 0.68333, 0, 0],
            '920': [0, 0.68333, 0, 0],
            '923': [0, 0.68333, 0, 0],
            '926': [0, 0.68333, 0, 0],
            '928': [0, 0.68333, 0, 0],
            '931': [0, 0.68333, 0, 0],
            '933': [0, 0.68333, 0, 0],
            '934': [0, 0.68333, 0, 0],
            '936': [0, 0.68333, 0, 0],
            '937': [0, 0.68333, 0, 0],
            '8211': [0, 0.43056, 0.02778, 0],
            '8212': [0, 0.43056, 0.02778, 0],
            '8216': [0, 0.69444, 0, 0],
            '8217': [0, 0.69444, 0, 0],
            '8220': [0, 0.69444, 0, 0],
            '8221': [0, 0.69444, 0, 0],
            '8224': [0.19444, 0.69444, 0, 0],
            '8225': [0.19444, 0.69444, 0, 0],
            '8230': [0, 0.12, 0, 0],
            '8242': [0, 0.55556, 0, 0],
            '8407': [0, 0.71444, 0.15382, 0],
            '8463': [0, 0.68889, 0, 0],
            '8465': [0, 0.69444, 0, 0],
            '8467': [0, 0.69444, 0, 0.11111],
            '8472': [0.19444, 0.43056, 0, 0.11111],
            '8476': [0, 0.69444, 0, 0],
            '8501': [0, 0.69444, 0, 0],
            '8592': [-0.13313, 0.36687, 0, 0],
            '8593': [0.19444, 0.69444, 0, 0],
            '8594': [-0.13313, 0.36687, 0, 0],
            '8595': [0.19444, 0.69444, 0, 0],
            '8596': [-0.13313, 0.36687, 0, 0],
            '8597': [0.25, 0.75, 0, 0],
            '8598': [0.19444, 0.69444, 0, 0],
            '8599': [0.19444, 0.69444, 0, 0],
            '8600': [0.19444, 0.69444, 0, 0],
            '8601': [0.19444, 0.69444, 0, 0],
            '8614': [0.011, 0.511, 0, 0],
            '8617': [0.011, 0.511, 0, 0],
            '8618': [0.011, 0.511, 0, 0],
            '8636': [-0.13313, 0.36687, 0, 0],
            '8637': [-0.13313, 0.36687, 0, 0],
            '8640': [-0.13313, 0.36687, 0, 0],
            '8641': [-0.13313, 0.36687, 0, 0],
            '8652': [0.011, 0.671, 0, 0],
            '8656': [-0.13313, 0.36687, 0, 0],
            '8657': [0.19444, 0.69444, 0, 0],
            '8658': [-0.13313, 0.36687, 0, 0],
            '8659': [0.19444, 0.69444, 0, 0],
            '8660': [-0.13313, 0.36687, 0, 0],
            '8661': [0.25, 0.75, 0, 0],
            '8704': [0, 0.69444, 0, 0],
            '8706': [0, 0.69444, 0.05556, 0.08334],
            '8707': [0, 0.69444, 0, 0],
            '8709': [0.05556, 0.75, 0, 0],
            '8711': [0, 0.68333, 0, 0],
            '8712': [0.0391, 0.5391, 0, 0],
            '8715': [0.0391, 0.5391, 0, 0],
            '8722': [0.08333, 0.58333, 0, 0],
            '8723': [0.08333, 0.58333, 0, 0],
            '8725': [0.25, 0.75, 0, 0],
            '8726': [0.25, 0.75, 0, 0],
            '8727': [-0.03472, 0.46528, 0, 0],
            '8728': [-0.05555, 0.44445, 0, 0],
            '8729': [-0.05555, 0.44445, 0, 0],
            '8730': [0.2, 0.8, 0, 0],
            '8733': [0, 0.43056, 0, 0],
            '8734': [0, 0.43056, 0, 0],
            '8736': [0, 0.69224, 0, 0],
            '8739': [0.25, 0.75, 0, 0],
            '8741': [0.25, 0.75, 0, 0],
            '8743': [0, 0.55556, 0, 0],
            '8744': [0, 0.55556, 0, 0],
            '8745': [0, 0.55556, 0, 0],
            '8746': [0, 0.55556, 0, 0],
            '8747': [0.19444, 0.69444, 0.11111, 0],
            '8764': [-0.13313, 0.36687, 0, 0],
            '8768': [0.19444, 0.69444, 0, 0],
            '8771': [-0.03625, 0.46375, 0, 0],
            '8773': [-0.022, 0.589, 0, 0],
            '8776': [-0.01688, 0.48312, 0, 0],
            '8781': [-0.03625, 0.46375, 0, 0],
            '8784': [-0.133, 0.67, 0, 0],
            '8801': [-0.03625, 0.46375, 0, 0],
            '8804': [0.13597, 0.63597, 0, 0],
            '8805': [0.13597, 0.63597, 0, 0],
            '8810': [0.0391, 0.5391, 0, 0],
            '8811': [0.0391, 0.5391, 0, 0],
            '8826': [0.0391, 0.5391, 0, 0],
            '8827': [0.0391, 0.5391, 0, 0],
            '8834': [0.0391, 0.5391, 0, 0],
            '8835': [0.0391, 0.5391, 0, 0],
            '8838': [0.13597, 0.63597, 0, 0],
            '8839': [0.13597, 0.63597, 0, 0],
            '8846': [0, 0.55556, 0, 0],
            '8849': [0.13597, 0.63597, 0, 0],
            '8850': [0.13597, 0.63597, 0, 0],
            '8851': [0, 0.55556, 0, 0],
            '8852': [0, 0.55556, 0, 0],
            '8853': [0.08333, 0.58333, 0, 0],
            '8854': [0.08333, 0.58333, 0, 0],
            '8855': [0.08333, 0.58333, 0, 0],
            '8856': [0.08333, 0.58333, 0, 0],
            '8857': [0.08333, 0.58333, 0, 0],
            '8866': [0, 0.69444, 0, 0],
            '8867': [0, 0.69444, 0, 0],
            '8868': [0, 0.69444, 0, 0],
            '8869': [0, 0.69444, 0, 0],
            '8872': [0.249, 0.75, 0, 0],
            '8900': [-0.05555, 0.44445, 0, 0],
            '8901': [-0.05555, 0.44445, 0, 0],
            '8902': [-0.03472, 0.46528, 0, 0],
            '8904': [0.005, 0.505, 0, 0],
            '8942': [0.03, 0.9, 0, 0],
            '8943': [-0.19, 0.31, 0, 0],
            '8945': [-0.1, 0.82, 0, 0],
            '8968': [0.25, 0.75, 0, 0],
            '8969': [0.25, 0.75, 0, 0],
            '8970': [0.25, 0.75, 0, 0],
            '8971': [0.25, 0.75, 0, 0],
            '8994': [-0.14236, 0.35764, 0, 0],
            '8995': [-0.14236, 0.35764, 0, 0],
            '9136': [0.244, 0.744, 0, 0],
            '9137': [0.244, 0.744, 0, 0],
            '9651': [0.19444, 0.69444, 0, 0],
            '9657': [-0.03472, 0.46528, 0, 0],
            '9661': [0.19444, 0.69444, 0, 0],
            '9667': [-0.03472, 0.46528, 0, 0],
            '9711': [0.19444, 0.69444, 0, 0],
            '9824': [0.12963, 0.69444, 0, 0],
            '9825': [0.12963, 0.69444, 0, 0],
            '9826': [0.12963, 0.69444, 0, 0],
            '9827': [0.12963, 0.69444, 0, 0],
            '9837': [0, 0.75, 0, 0],
            '9838': [0.19444, 0.69444, 0, 0],
            '9839': [0.19444, 0.69444, 0, 0],
            '10216': [0.25, 0.75, 0, 0],
            '10217': [0.25, 0.75, 0, 0],
            '10222': [0.244, 0.744, 0, 0],
            '10223': [0.244, 0.744, 0, 0],
            '10229': [0.011, 0.511, 0, 0],
            '10230': [0.011, 0.511, 0, 0],
            '10231': [0.011, 0.511, 0, 0],
            '10232': [0.024, 0.525, 0, 0],
            '10233': [0.024, 0.525, 0, 0],
            '10234': [0.024, 0.525, 0, 0],
            '10236': [0.011, 0.511, 0, 0],
            '10815': [0, 0.68333, 0, 0],
            '10927': [0.13597, 0.63597, 0, 0],
            '10928': [0.13597, 0.63597, 0, 0],
            '57376': [0.19444, 0.69444, 0, 0],
        },
        'Math-BoldItalic': {
            '65': [0, 0.68611, 0, 0],
            '66': [0, 0.68611, 0.04835, 0],
            '67': [0, 0.68611, 0.06979, 0],
            '68': [0, 0.68611, 0.03194, 0],
            '69': [0, 0.68611, 0.05451, 0],
            '70': [0, 0.68611, 0.15972, 0],
            '71': [0, 0.68611, 0, 0],
            '72': [0, 0.68611, 0.08229, 0],
            '73': [0, 0.68611, 0.07778, 0],
            '74': [0, 0.68611, 0.10069, 0],
            '75': [0, 0.68611, 0.06979, 0],
            '76': [0, 0.68611, 0, 0],
            '77': [0, 0.68611, 0.11424, 0],
            '78': [0, 0.68611, 0.11424, 0],
            '79': [0, 0.68611, 0.03194, 0],
            '80': [0, 0.68611, 0.15972, 0],
            '81': [0.19444, 0.68611, 0, 0],
            '82': [0, 0.68611, 0.00421, 0],
            '83': [0, 0.68611, 0.05382, 0],
            '84': [0, 0.68611, 0.15972, 0],
            '85': [0, 0.68611, 0.11424, 0],
            '86': [0, 0.68611, 0.25555, 0],
            '87': [0, 0.68611, 0.15972, 0],
            '88': [0, 0.68611, 0.07778, 0],
            '89': [0, 0.68611, 0.25555, 0],
            '90': [0, 0.68611, 0.06979, 0],
            '97': [0, 0.44444, 0, 0],
            '98': [0, 0.69444, 0, 0],
            '99': [0, 0.44444, 0, 0],
            '100': [0, 0.69444, 0, 0],
            '101': [0, 0.44444, 0, 0],
            '102': [0.19444, 0.69444, 0.11042, 0],
            '103': [0.19444, 0.44444, 0.03704, 0],
            '104': [0, 0.69444, 0, 0],
            '105': [0, 0.69326, 0, 0],
            '106': [0.19444, 0.69326, 0.0622, 0],
            '107': [0, 0.69444, 0.01852, 0],
            '108': [0, 0.69444, 0.0088, 0],
            '109': [0, 0.44444, 0, 0],
            '110': [0, 0.44444, 0, 0],
            '111': [0, 0.44444, 0, 0],
            '112': [0.19444, 0.44444, 0, 0],
            '113': [0.19444, 0.44444, 0.03704, 0],
            '114': [0, 0.44444, 0.03194, 0],
            '115': [0, 0.44444, 0, 0],
            '116': [0, 0.63492, 0, 0],
            '117': [0, 0.44444, 0, 0],
            '118': [0, 0.44444, 0.03704, 0],
            '119': [0, 0.44444, 0.02778, 0],
            '120': [0, 0.44444, 0, 0],
            '121': [0.19444, 0.44444, 0.03704, 0],
            '122': [0, 0.44444, 0.04213, 0],
            '915': [0, 0.68611, 0.15972, 0],
            '916': [0, 0.68611, 0, 0],
            '920': [0, 0.68611, 0.03194, 0],
            '923': [0, 0.68611, 0, 0],
            '926': [0, 0.68611, 0.07458, 0],
            '928': [0, 0.68611, 0.08229, 0],
            '931': [0, 0.68611, 0.05451, 0],
            '933': [0, 0.68611, 0.15972, 0],
            '934': [0, 0.68611, 0, 0],
            '936': [0, 0.68611, 0.11653, 0],
            '937': [0, 0.68611, 0.04835, 0],
            '945': [0, 0.44444, 0, 0],
            '946': [0.19444, 0.69444, 0.03403, 0],
            '947': [0.19444, 0.44444, 0.06389, 0],
            '948': [0, 0.69444, 0.03819, 0],
            '949': [0, 0.44444, 0, 0],
            '950': [0.19444, 0.69444, 0.06215, 0],
            '951': [0.19444, 0.44444, 0.03704, 0],
            '952': [0, 0.69444, 0.03194, 0],
            '953': [0, 0.44444, 0, 0],
            '954': [0, 0.44444, 0, 0],
            '955': [0, 0.69444, 0, 0],
            '956': [0.19444, 0.44444, 0, 0],
            '957': [0, 0.44444, 0.06898, 0],
            '958': [0.19444, 0.69444, 0.03021, 0],
            '959': [0, 0.44444, 0, 0],
            '960': [0, 0.44444, 0.03704, 0],
            '961': [0.19444, 0.44444, 0, 0],
            '962': [0.09722, 0.44444, 0.07917, 0],
            '963': [0, 0.44444, 0.03704, 0],
            '964': [0, 0.44444, 0.13472, 0],
            '965': [0, 0.44444, 0.03704, 0],
            '966': [0.19444, 0.44444, 0, 0],
            '967': [0.19444, 0.44444, 0, 0],
            '968': [0.19444, 0.69444, 0.03704, 0],
            '969': [0, 0.44444, 0.03704, 0],
            '977': [0, 0.69444, 0, 0],
            '981': [0.19444, 0.69444, 0, 0],
            '982': [0, 0.44444, 0.03194, 0],
            '1009': [0.19444, 0.44444, 0, 0],
            '1013': [0, 0.44444, 0, 0],
        },
        'Math-Italic': {
            '65': [0, 0.68333, 0, 0.13889],
            '66': [0, 0.68333, 0.05017, 0.08334],
            '67': [0, 0.68333, 0.07153, 0.08334],
            '68': [0, 0.68333, 0.02778, 0.05556],
            '69': [0, 0.68333, 0.05764, 0.08334],
            '70': [0, 0.68333, 0.13889, 0.08334],
            '71': [0, 0.68333, 0, 0.08334],
            '72': [0, 0.68333, 0.08125, 0.05556],
            '73': [0, 0.68333, 0.07847, 0.11111],
            '74': [0, 0.68333, 0.09618, 0.16667],
            '75': [0, 0.68333, 0.07153, 0.05556],
            '76': [0, 0.68333, 0, 0.02778],
            '77': [0, 0.68333, 0.10903, 0.08334],
            '78': [0, 0.68333, 0.10903, 0.08334],
            '79': [0, 0.68333, 0.02778, 0.08334],
            '80': [0, 0.68333, 0.13889, 0.08334],
            '81': [0.19444, 0.68333, 0, 0.08334],
            '82': [0, 0.68333, 0.00773, 0.08334],
            '83': [0, 0.68333, 0.05764, 0.08334],
            '84': [0, 0.68333, 0.13889, 0.08334],
            '85': [0, 0.68333, 0.10903, 0.02778],
            '86': [0, 0.68333, 0.22222, 0],
            '87': [0, 0.68333, 0.13889, 0],
            '88': [0, 0.68333, 0.07847, 0.08334],
            '89': [0, 0.68333, 0.22222, 0],
            '90': [0, 0.68333, 0.07153, 0.08334],
            '97': [0, 0.43056, 0, 0],
            '98': [0, 0.69444, 0, 0],
            '99': [0, 0.43056, 0, 0.05556],
            '100': [0, 0.69444, 0, 0.16667],
            '101': [0, 0.43056, 0, 0.05556],
            '102': [0.19444, 0.69444, 0.10764, 0.16667],
            '103': [0.19444, 0.43056, 0.03588, 0.02778],
            '104': [0, 0.69444, 0, 0],
            '105': [0, 0.65952, 0, 0],
            '106': [0.19444, 0.65952, 0.05724, 0],
            '107': [0, 0.69444, 0.03148, 0],
            '108': [0, 0.69444, 0.01968, 0.08334],
            '109': [0, 0.43056, 0, 0],
            '110': [0, 0.43056, 0, 0],
            '111': [0, 0.43056, 0, 0.05556],
            '112': [0.19444, 0.43056, 0, 0.08334],
            '113': [0.19444, 0.43056, 0.03588, 0.08334],
            '114': [0, 0.43056, 0.02778, 0.05556],
            '115': [0, 0.43056, 0, 0.05556],
            '116': [0, 0.61508, 0, 0.08334],
            '117': [0, 0.43056, 0, 0.02778],
            '118': [0, 0.43056, 0.03588, 0.02778],
            '119': [0, 0.43056, 0.02691, 0.08334],
            '120': [0, 0.43056, 0, 0.02778],
            '121': [0.19444, 0.43056, 0.03588, 0.05556],
            '122': [0, 0.43056, 0.04398, 0.05556],
            '915': [0, 0.68333, 0.13889, 0.08334],
            '916': [0, 0.68333, 0, 0.16667],
            '920': [0, 0.68333, 0.02778, 0.08334],
            '923': [0, 0.68333, 0, 0.16667],
            '926': [0, 0.68333, 0.07569, 0.08334],
            '928': [0, 0.68333, 0.08125, 0.05556],
            '931': [0, 0.68333, 0.05764, 0.08334],
            '933': [0, 0.68333, 0.13889, 0.05556],
            '934': [0, 0.68333, 0, 0.08334],
            '936': [0, 0.68333, 0.11, 0.05556],
            '937': [0, 0.68333, 0.05017, 0.08334],
            '945': [0, 0.43056, 0.0037, 0.02778],
            '946': [0.19444, 0.69444, 0.05278, 0.08334],
            '947': [0.19444, 0.43056, 0.05556, 0],
            '948': [0, 0.69444, 0.03785, 0.05556],
            '949': [0, 0.43056, 0, 0.08334],
            '950': [0.19444, 0.69444, 0.07378, 0.08334],
            '951': [0.19444, 0.43056, 0.03588, 0.05556],
            '952': [0, 0.69444, 0.02778, 0.08334],
            '953': [0, 0.43056, 0, 0.05556],
            '954': [0, 0.43056, 0, 0],
            '955': [0, 0.69444, 0, 0],
            '956': [0.19444, 0.43056, 0, 0.02778],
            '957': [0, 0.43056, 0.06366, 0.02778],
            '958': [0.19444, 0.69444, 0.04601, 0.11111],
            '959': [0, 0.43056, 0, 0.05556],
            '960': [0, 0.43056, 0.03588, 0],
            '961': [0.19444, 0.43056, 0, 0.08334],
            '962': [0.09722, 0.43056, 0.07986, 0.08334],
            '963': [0, 0.43056, 0.03588, 0],
            '964': [0, 0.43056, 0.1132, 0.02778],
            '965': [0, 0.43056, 0.03588, 0.02778],
            '966': [0.19444, 0.43056, 0, 0.08334],
            '967': [0.19444, 0.43056, 0, 0.05556],
            '968': [0.19444, 0.69444, 0.03588, 0.11111],
            '969': [0, 0.43056, 0.03588, 0],
            '977': [0, 0.69444, 0, 0.08334],
            '981': [0.19444, 0.69444, 0, 0.08334],
            '982': [0, 0.43056, 0.02778, 0],
            '1009': [0.19444, 0.43056, 0, 0.08334],
            '1013': [0, 0.43056, 0, 0.05556],
        },
        'SansSerif-Bold': {
            '33': [0, 0.69444, 0, 0],
            '34': [0, 0.69444, 0, 0],
            '35': [0.19444, 0.69444, 0, 0],
            '36': [0.05556, 0.75, 0, 0],
            '37': [0.05556, 0.75, 0, 0],
            '38': [0, 0.69444, 0, 0],
            '39': [0, 0.69444, 0, 0],
            '40': [0.25, 0.75, 0, 0],
            '41': [0.25, 0.75, 0, 0],
            '42': [0, 0.75, 0, 0],
            '43': [0.11667, 0.61667, 0, 0],
            '44': [0.10556, 0.13056, 0, 0],
            '45': [0, 0.45833, 0, 0],
            '46': [0, 0.13056, 0, 0],
            '47': [0.25, 0.75, 0, 0],
            '48': [0, 0.69444, 0, 0],
            '49': [0, 0.69444, 0, 0],
            '50': [0, 0.69444, 0, 0],
            '51': [0, 0.69444, 0, 0],
            '52': [0, 0.69444, 0, 0],
            '53': [0, 0.69444, 0, 0],
            '54': [0, 0.69444, 0, 0],
            '55': [0, 0.69444, 0, 0],
            '56': [0, 0.69444, 0, 0],
            '57': [0, 0.69444, 0, 0],
            '58': [0, 0.45833, 0, 0],
            '59': [0.10556, 0.45833, 0, 0],
            '61': [-0.09375, 0.40625, 0, 0],
            '63': [0, 0.69444, 0, 0],
            '64': [0, 0.69444, 0, 0],
            '65': [0, 0.69444, 0, 0],
            '66': [0, 0.69444, 0, 0],
            '67': [0, 0.69444, 0, 0],
            '68': [0, 0.69444, 0, 0],
            '69': [0, 0.69444, 0, 0],
            '70': [0, 0.69444, 0, 0],
            '71': [0, 0.69444, 0, 0],
            '72': [0, 0.69444, 0, 0],
            '73': [0, 0.69444, 0, 0],
            '74': [0, 0.69444, 0, 0],
            '75': [0, 0.69444, 0, 0],
            '76': [0, 0.69444, 0, 0],
            '77': [0, 0.69444, 0, 0],
            '78': [0, 0.69444, 0, 0],
            '79': [0, 0.69444, 0, 0],
            '80': [0, 0.69444, 0, 0],
            '81': [0.10556, 0.69444, 0, 0],
            '82': [0, 0.69444, 0, 0],
            '83': [0, 0.69444, 0, 0],
            '84': [0, 0.69444, 0, 0],
            '85': [0, 0.69444, 0, 0],
            '86': [0, 0.69444, 0.01528, 0],
            '87': [0, 0.69444, 0.01528, 0],
            '88': [0, 0.69444, 0, 0],
            '89': [0, 0.69444, 0.0275, 0],
            '90': [0, 0.69444, 0, 0],
            '91': [0.25, 0.75, 0, 0],
            '93': [0.25, 0.75, 0, 0],
            '94': [0, 0.69444, 0, 0],
            '95': [0.35, 0.10833, 0.03056, 0],
            '97': [0, 0.45833, 0, 0],
            '98': [0, 0.69444, 0, 0],
            '99': [0, 0.45833, 0, 0],
            '100': [0, 0.69444, 0, 0],
            '101': [0, 0.45833, 0, 0],
            '102': [0, 0.69444, 0.07639, 0],
            '103': [0.19444, 0.45833, 0.01528, 0],
            '104': [0, 0.69444, 0, 0],
            '105': [0, 0.69444, 0, 0],
            '106': [0.19444, 0.69444, 0, 0],
            '107': [0, 0.69444, 0, 0],
            '108': [0, 0.69444, 0, 0],
            '109': [0, 0.45833, 0, 0],
            '110': [0, 0.45833, 0, 0],
            '111': [0, 0.45833, 0, 0],
            '112': [0.19444, 0.45833, 0, 0],
            '113': [0.19444, 0.45833, 0, 0],
            '114': [0, 0.45833, 0.01528, 0],
            '115': [0, 0.45833, 0, 0],
            '116': [0, 0.58929, 0, 0],
            '117': [0, 0.45833, 0, 0],
            '118': [0, 0.45833, 0.01528, 0],
            '119': [0, 0.45833, 0.01528, 0],
            '120': [0, 0.45833, 0, 0],
            '121': [0.19444, 0.45833, 0.01528, 0],
            '122': [0, 0.45833, 0, 0],
            '126': [0.35, 0.34444, 0, 0],
            '168': [0, 0.69444, 0, 0],
            '176': [0, 0.69444, 0, 0],
            '180': [0, 0.69444, 0, 0],
            '184': [0.17014, 0, 0, 0],
            '305': [0, 0.45833, 0, 0],
            '567': [0.19444, 0.45833, 0, 0],
            '710': [0, 0.69444, 0, 0],
            '711': [0, 0.63542, 0, 0],
            '713': [0, 0.63778, 0, 0],
            '728': [0, 0.69444, 0, 0],
            '729': [0, 0.69444, 0, 0],
            '730': [0, 0.69444, 0, 0],
            '732': [0, 0.69444, 0, 0],
            '733': [0, 0.69444, 0, 0],
            '915': [0, 0.69444, 0, 0],
            '916': [0, 0.69444, 0, 0],
            '920': [0, 0.69444, 0, 0],
            '923': [0, 0.69444, 0, 0],
            '926': [0, 0.69444, 0, 0],
            '928': [0, 0.69444, 0, 0],
            '931': [0, 0.69444, 0, 0],
            '933': [0, 0.69444, 0, 0],
            '934': [0, 0.69444, 0, 0],
            '936': [0, 0.69444, 0, 0],
            '937': [0, 0.69444, 0, 0],
            '8211': [0, 0.45833, 0.03056, 0],
            '8212': [0, 0.45833, 0.03056, 0],
            '8216': [0, 0.69444, 0, 0],
            '8217': [0, 0.69444, 0, 0],
            '8220': [0, 0.69444, 0, 0],
            '8221': [0, 0.69444, 0, 0],
        },
        'SansSerif-Italic': {
            '33': [0, 0.69444, 0.05733, 0],
            '34': [0, 0.69444, 0.00316, 0],
            '35': [0.19444, 0.69444, 0.05087, 0],
            '36': [0.05556, 0.75, 0.11156, 0],
            '37': [0.05556, 0.75, 0.03126, 0],
            '38': [0, 0.69444, 0.03058, 0],
            '39': [0, 0.69444, 0.07816, 0],
            '40': [0.25, 0.75, 0.13164, 0],
            '41': [0.25, 0.75, 0.02536, 0],
            '42': [0, 0.75, 0.11775, 0],
            '43': [0.08333, 0.58333, 0.02536, 0],
            '44': [0.125, 0.08333, 0, 0],
            '45': [0, 0.44444, 0.01946, 0],
            '46': [0, 0.08333, 0, 0],
            '47': [0.25, 0.75, 0.13164, 0],
            '48': [0, 0.65556, 0.11156, 0],
            '49': [0, 0.65556, 0.11156, 0],
            '50': [0, 0.65556, 0.11156, 0],
            '51': [0, 0.65556, 0.11156, 0],
            '52': [0, 0.65556, 0.11156, 0],
            '53': [0, 0.65556, 0.11156, 0],
            '54': [0, 0.65556, 0.11156, 0],
            '55': [0, 0.65556, 0.11156, 0],
            '56': [0, 0.65556, 0.11156, 0],
            '57': [0, 0.65556, 0.11156, 0],
            '58': [0, 0.44444, 0.02502, 0],
            '59': [0.125, 0.44444, 0.02502, 0],
            '61': [-0.13, 0.37, 0.05087, 0],
            '63': [0, 0.69444, 0.11809, 0],
            '64': [0, 0.69444, 0.07555, 0],
            '65': [0, 0.69444, 0, 0],
            '66': [0, 0.69444, 0.08293, 0],
            '67': [0, 0.69444, 0.11983, 0],
            '68': [0, 0.69444, 0.07555, 0],
            '69': [0, 0.69444, 0.11983, 0],
            '70': [0, 0.69444, 0.13372, 0],
            '71': [0, 0.69444, 0.11983, 0],
            '72': [0, 0.69444, 0.08094, 0],
            '73': [0, 0.69444, 0.13372, 0],
            '74': [0, 0.69444, 0.08094, 0],
            '75': [0, 0.69444, 0.11983, 0],
            '76': [0, 0.69444, 0, 0],
            '77': [0, 0.69444, 0.08094, 0],
            '78': [0, 0.69444, 0.08094, 0],
            '79': [0, 0.69444, 0.07555, 0],
            '80': [0, 0.69444, 0.08293, 0],
            '81': [0.125, 0.69444, 0.07555, 0],
            '82': [0, 0.69444, 0.08293, 0],
            '83': [0, 0.69444, 0.09205, 0],
            '84': [0, 0.69444, 0.13372, 0],
            '85': [0, 0.69444, 0.08094, 0],
            '86': [0, 0.69444, 0.1615, 0],
            '87': [0, 0.69444, 0.1615, 0],
            '88': [0, 0.69444, 0.13372, 0],
            '89': [0, 0.69444, 0.17261, 0],
            '90': [0, 0.69444, 0.11983, 0],
            '91': [0.25, 0.75, 0.15942, 0],
            '93': [0.25, 0.75, 0.08719, 0],
            '94': [0, 0.69444, 0.0799, 0],
            '95': [0.35, 0.09444, 0.08616, 0],
            '97': [0, 0.44444, 0.00981, 0],
            '98': [0, 0.69444, 0.03057, 0],
            '99': [0, 0.44444, 0.08336, 0],
            '100': [0, 0.69444, 0.09483, 0],
            '101': [0, 0.44444, 0.06778, 0],
            '102': [0, 0.69444, 0.21705, 0],
            '103': [0.19444, 0.44444, 0.10836, 0],
            '104': [0, 0.69444, 0.01778, 0],
            '105': [0, 0.67937, 0.09718, 0],
            '106': [0.19444, 0.67937, 0.09162, 0],
            '107': [0, 0.69444, 0.08336, 0],
            '108': [0, 0.69444, 0.09483, 0],
            '109': [0, 0.44444, 0.01778, 0],
            '110': [0, 0.44444, 0.01778, 0],
            '111': [0, 0.44444, 0.06613, 0],
            '112': [0.19444, 0.44444, 0.0389, 0],
            '113': [0.19444, 0.44444, 0.04169, 0],
            '114': [0, 0.44444, 0.10836, 0],
            '115': [0, 0.44444, 0.0778, 0],
            '116': [0, 0.57143, 0.07225, 0],
            '117': [0, 0.44444, 0.04169, 0],
            '118': [0, 0.44444, 0.10836, 0],
            '119': [0, 0.44444, 0.10836, 0],
            '120': [0, 0.44444, 0.09169, 0],
            '121': [0.19444, 0.44444, 0.10836, 0],
            '122': [0, 0.44444, 0.08752, 0],
            '126': [0.35, 0.32659, 0.08826, 0],
            '168': [0, 0.67937, 0.06385, 0],
            '176': [0, 0.69444, 0, 0],
            '184': [0.17014, 0, 0, 0],
            '305': [0, 0.44444, 0.04169, 0],
            '567': [0.19444, 0.44444, 0.04169, 0],
            '710': [0, 0.69444, 0.0799, 0],
            '711': [0, 0.63194, 0.08432, 0],
            '713': [0, 0.60889, 0.08776, 0],
            '714': [0, 0.69444, 0.09205, 0],
            '715': [0, 0.69444, 0, 0],
            '728': [0, 0.69444, 0.09483, 0],
            '729': [0, 0.67937, 0.07774, 0],
            '730': [0, 0.69444, 0, 0],
            '732': [0, 0.67659, 0.08826, 0],
            '733': [0, 0.69444, 0.09205, 0],
            '915': [0, 0.69444, 0.13372, 0],
            '916': [0, 0.69444, 0, 0],
            '920': [0, 0.69444, 0.07555, 0],
            '923': [0, 0.69444, 0, 0],
            '926': [0, 0.69444, 0.12816, 0],
            '928': [0, 0.69444, 0.08094, 0],
            '931': [0, 0.69444, 0.11983, 0],
            '933': [0, 0.69444, 0.09031, 0],
            '934': [0, 0.69444, 0.04603, 0],
            '936': [0, 0.69444, 0.09031, 0],
            '937': [0, 0.69444, 0.08293, 0],
            '8211': [0, 0.44444, 0.08616, 0],
            '8212': [0, 0.44444, 0.08616, 0],
            '8216': [0, 0.69444, 0.07816, 0],
            '8217': [0, 0.69444, 0.07816, 0],
            '8220': [0, 0.69444, 0.14205, 0],
            '8221': [0, 0.69444, 0.00316, 0],
        },
        'SansSerif-Regular': {
            '33': [0, 0.69444, 0, 0],
            '34': [0, 0.69444, 0, 0],
            '35': [0.19444, 0.69444, 0, 0],
            '36': [0.05556, 0.75, 0, 0],
            '37': [0.05556, 0.75, 0, 0],
            '38': [0, 0.69444, 0, 0],
            '39': [0, 0.69444, 0, 0],
            '40': [0.25, 0.75, 0, 0],
            '41': [0.25, 0.75, 0, 0],
            '42': [0, 0.75, 0, 0],
            '43': [0.08333, 0.58333, 0, 0],
            '44': [0.125, 0.08333, 0, 0],
            '45': [0, 0.44444, 0, 0],
            '46': [0, 0.08333, 0, 0],
            '47': [0.25, 0.75, 0, 0],
            '48': [0, 0.65556, 0, 0],
            '49': [0, 0.65556, 0, 0],
            '50': [0, 0.65556, 0, 0],
            '51': [0, 0.65556, 0, 0],
            '52': [0, 0.65556, 0, 0],
            '53': [0, 0.65556, 0, 0],
            '54': [0, 0.65556, 0, 0],
            '55': [0, 0.65556, 0, 0],
            '56': [0, 0.65556, 0, 0],
            '57': [0, 0.65556, 0, 0],
            '58': [0, 0.44444, 0, 0],
            '59': [0.125, 0.44444, 0, 0],
            '61': [-0.13, 0.37, 0, 0],
            '63': [0, 0.69444, 0, 0],
            '64': [0, 0.69444, 0, 0],
            '65': [0, 0.69444, 0, 0],
            '66': [0, 0.69444, 0, 0],
            '67': [0, 0.69444, 0, 0],
            '68': [0, 0.69444, 0, 0],
            '69': [0, 0.69444, 0, 0],
            '70': [0, 0.69444, 0, 0],
            '71': [0, 0.69444, 0, 0],
            '72': [0, 0.69444, 0, 0],
            '73': [0, 0.69444, 0, 0],
            '74': [0, 0.69444, 0, 0],
            '75': [0, 0.69444, 0, 0],
            '76': [0, 0.69444, 0, 0],
            '77': [0, 0.69444, 0, 0],
            '78': [0, 0.69444, 0, 0],
            '79': [0, 0.69444, 0, 0],
            '80': [0, 0.69444, 0, 0],
            '81': [0.125, 0.69444, 0, 0],
            '82': [0, 0.69444, 0, 0],
            '83': [0, 0.69444, 0, 0],
            '84': [0, 0.69444, 0, 0],
            '85': [0, 0.69444, 0, 0],
            '86': [0, 0.69444, 0.01389, 0],
            '87': [0, 0.69444, 0.01389, 0],
            '88': [0, 0.69444, 0, 0],
            '89': [0, 0.69444, 0.025, 0],
            '90': [0, 0.69444, 0, 0],
            '91': [0.25, 0.75, 0, 0],
            '93': [0.25, 0.75, 0, 0],
            '94': [0, 0.69444, 0, 0],
            '95': [0.35, 0.09444, 0.02778, 0],
            '97': [0, 0.44444, 0, 0],
            '98': [0, 0.69444, 0, 0],
            '99': [0, 0.44444, 0, 0],
            '100': [0, 0.69444, 0, 0],
            '101': [0, 0.44444, 0, 0],
            '102': [0, 0.69444, 0.06944, 0],
            '103': [0.19444, 0.44444, 0.01389, 0],
            '104': [0, 0.69444, 0, 0],
            '105': [0, 0.67937, 0, 0],
            '106': [0.19444, 0.67937, 0, 0],
            '107': [0, 0.69444, 0, 0],
            '108': [0, 0.69444, 0, 0],
            '109': [0, 0.44444, 0, 0],
            '110': [0, 0.44444, 0, 0],
            '111': [0, 0.44444, 0, 0],
            '112': [0.19444, 0.44444, 0, 0],
            '113': [0.19444, 0.44444, 0, 0],
            '114': [0, 0.44444, 0.01389, 0],
            '115': [0, 0.44444, 0, 0],
            '116': [0, 0.57143, 0, 0],
            '117': [0, 0.44444, 0, 0],
            '118': [0, 0.44444, 0.01389, 0],
            '119': [0, 0.44444, 0.01389, 0],
            '120': [0, 0.44444, 0, 0],
            '121': [0.19444, 0.44444, 0.01389, 0],
            '122': [0, 0.44444, 0, 0],
            '126': [0.35, 0.32659, 0, 0],
            '168': [0, 0.67937, 0, 0],
            '176': [0, 0.69444, 0, 0],
            '184': [0.17014, 0, 0, 0],
            '305': [0, 0.44444, 0, 0],
            '567': [0.19444, 0.44444, 0, 0],
            '710': [0, 0.69444, 0, 0],
            '711': [0, 0.63194, 0, 0],
            '713': [0, 0.60889, 0, 0],
            '714': [0, 0.69444, 0, 0],
            '715': [0, 0.69444, 0, 0],
            '728': [0, 0.69444, 0, 0],
            '729': [0, 0.67937, 0, 0],
            '730': [0, 0.69444, 0, 0],
            '732': [0, 0.67659, 0, 0],
            '733': [0, 0.69444, 0, 0],
            '915': [0, 0.69444, 0, 0],
            '916': [0, 0.69444, 0, 0],
            '920': [0, 0.69444, 0, 0],
            '923': [0, 0.69444, 0, 0],
            '926': [0, 0.69444, 0, 0],
            '928': [0, 0.69444, 0, 0],
            '931': [0, 0.69444, 0, 0],
            '933': [0, 0.69444, 0, 0],
            '934': [0, 0.69444, 0, 0],
            '936': [0, 0.69444, 0, 0],
            '937': [0, 0.69444, 0, 0],
            '8211': [0, 0.44444, 0.02778, 0],
            '8212': [0, 0.44444, 0.02778, 0],
            '8216': [0, 0.69444, 0, 0],
            '8217': [0, 0.69444, 0, 0],
            '8220': [0, 0.69444, 0, 0],
            '8221': [0, 0.69444, 0, 0],
        },
        'Script-Regular': {
            '65': [0, 0.7, 0.22925, 0],
            '66': [0, 0.7, 0.04087, 0],
            '67': [0, 0.7, 0.1689, 0],
            '68': [0, 0.7, 0.09371, 0],
            '69': [0, 0.7, 0.18583, 0],
            '70': [0, 0.7, 0.13634, 0],
            '71': [0, 0.7, 0.17322, 0],
            '72': [0, 0.7, 0.29694, 0],
            '73': [0, 0.7, 0.19189, 0],
            '74': [0.27778, 0.7, 0.19189, 0],
            '75': [0, 0.7, 0.31259, 0],
            '76': [0, 0.7, 0.19189, 0],
            '77': [0, 0.7, 0.15981, 0],
            '78': [0, 0.7, 0.3525, 0],
            '79': [0, 0.7, 0.08078, 0],
            '80': [0, 0.7, 0.08078, 0],
            '81': [0, 0.7, 0.03305, 0],
            '82': [0, 0.7, 0.06259, 0],
            '83': [0, 0.7, 0.19189, 0],
            '84': [0, 0.7, 0.29087, 0],
            '85': [0, 0.7, 0.25815, 0],
            '86': [0, 0.7, 0.27523, 0],
            '87': [0, 0.7, 0.27523, 0],
            '88': [0, 0.7, 0.26006, 0],
            '89': [0, 0.7, 0.2939, 0],
            '90': [0, 0.7, 0.24037, 0],
        },
        'Size1-Regular': {
            '40': [0.35001, 0.85, 0, 0],
            '41': [0.35001, 0.85, 0, 0],
            '47': [0.35001, 0.85, 0, 0],
            '91': [0.35001, 0.85, 0, 0],
            '92': [0.35001, 0.85, 0, 0],
            '93': [0.35001, 0.85, 0, 0],
            '123': [0.35001, 0.85, 0, 0],
            '125': [0.35001, 0.85, 0, 0],
            '710': [0, 0.72222, 0, 0],
            '732': [0, 0.72222, 0, 0],
            '770': [0, 0.72222, 0, 0],
            '771': [0, 0.72222, 0, 0],
            '8214': [-0.00099, 0.601, 0, 0],
            '8593': [1e-5, 0.6, 0, 0],
            '8595': [1e-5, 0.6, 0, 0],
            '8657': [1e-5, 0.6, 0, 0],
            '8659': [1e-5, 0.6, 0, 0],
            '8719': [0.25001, 0.75, 0, 0],
            '8720': [0.25001, 0.75, 0, 0],
            '8721': [0.25001, 0.75, 0, 0],
            '8730': [0.35001, 0.85, 0, 0],
            '8739': [-0.00599, 0.606, 0, 0],
            '8741': [-0.00599, 0.606, 0, 0],
            '8747': [0.30612, 0.805, 0.19445, 0],
            '8748': [0.306, 0.805, 0.19445, 0],
            '8749': [0.306, 0.805, 0.19445, 0],
            '8750': [0.30612, 0.805, 0.19445, 0],
            '8896': [0.25001, 0.75, 0, 0],
            '8897': [0.25001, 0.75, 0, 0],
            '8898': [0.25001, 0.75, 0, 0],
            '8899': [0.25001, 0.75, 0, 0],
            '8968': [0.35001, 0.85, 0, 0],
            '8969': [0.35001, 0.85, 0, 0],
            '8970': [0.35001, 0.85, 0, 0],
            '8971': [0.35001, 0.85, 0, 0],
            '9168': [-0.00099, 0.601, 0, 0],
            '10216': [0.35001, 0.85, 0, 0],
            '10217': [0.35001, 0.85, 0, 0],
            '10752': [0.25001, 0.75, 0, 0],
            '10753': [0.25001, 0.75, 0, 0],
            '10754': [0.25001, 0.75, 0, 0],
            '10756': [0.25001, 0.75, 0, 0],
            '10758': [0.25001, 0.75, 0, 0],
        },
        'Size2-Regular': {
            '40': [0.65002, 1.15, 0, 0],
            '41': [0.65002, 1.15, 0, 0],
            '47': [0.65002, 1.15, 0, 0],
            '91': [0.65002, 1.15, 0, 0],
            '92': [0.65002, 1.15, 0, 0],
            '93': [0.65002, 1.15, 0, 0],
            '123': [0.65002, 1.15, 0, 0],
            '125': [0.65002, 1.15, 0, 0],
            '710': [0, 0.75, 0, 0],
            '732': [0, 0.75, 0, 0],
            '770': [0, 0.75, 0, 0],
            '771': [0, 0.75, 0, 0],
            '8719': [0.55001, 1.05, 0, 0],
            '8720': [0.55001, 1.05, 0, 0],
            '8721': [0.55001, 1.05, 0, 0],
            '8730': [0.65002, 1.15, 0, 0],
            '8747': [0.86225, 1.36, 0.44445, 0],
            '8748': [0.862, 1.36, 0.44445, 0],
            '8749': [0.862, 1.36, 0.44445, 0],
            '8750': [0.86225, 1.36, 0.44445, 0],
            '8896': [0.55001, 1.05, 0, 0],
            '8897': [0.55001, 1.05, 0, 0],
            '8898': [0.55001, 1.05, 0, 0],
            '8899': [0.55001, 1.05, 0, 0],
            '8968': [0.65002, 1.15, 0, 0],
            '8969': [0.65002, 1.15, 0, 0],
            '8970': [0.65002, 1.15, 0, 0],
            '8971': [0.65002, 1.15, 0, 0],
            '10216': [0.65002, 1.15, 0, 0],
            '10217': [0.65002, 1.15, 0, 0],
            '10752': [0.55001, 1.05, 0, 0],
            '10753': [0.55001, 1.05, 0, 0],
            '10754': [0.55001, 1.05, 0, 0],
            '10756': [0.55001, 1.05, 0, 0],
            '10758': [0.55001, 1.05, 0, 0],
        },
        'Size3-Regular': {
            '40': [0.95003, 1.45, 0, 0],
            '41': [0.95003, 1.45, 0, 0],
            '47': [0.95003, 1.45, 0, 0],
            '91': [0.95003, 1.45, 0, 0],
            '92': [0.95003, 1.45, 0, 0],
            '93': [0.95003, 1.45, 0, 0],
            '123': [0.95003, 1.45, 0, 0],
            '125': [0.95003, 1.45, 0, 0],
            '710': [0, 0.75, 0, 0],
            '732': [0, 0.75, 0, 0],
            '770': [0, 0.75, 0, 0],
            '771': [0, 0.75, 0, 0],
            '8730': [0.95003, 1.45, 0, 0],
            '8968': [0.95003, 1.45, 0, 0],
            '8969': [0.95003, 1.45, 0, 0],
            '8970': [0.95003, 1.45, 0, 0],
            '8971': [0.95003, 1.45, 0, 0],
            '10216': [0.95003, 1.45, 0, 0],
            '10217': [0.95003, 1.45, 0, 0],
        },
        'Size4-Regular': {
            '40': [1.25003, 1.75, 0, 0],
            '41': [1.25003, 1.75, 0, 0],
            '47': [1.25003, 1.75, 0, 0],
            '91': [1.25003, 1.75, 0, 0],
            '92': [1.25003, 1.75, 0, 0],
            '93': [1.25003, 1.75, 0, 0],
            '123': [1.25003, 1.75, 0, 0],
            '125': [1.25003, 1.75, 0, 0],
            '710': [0, 0.825, 0, 0],
            '732': [0, 0.825, 0, 0],
            '770': [0, 0.825, 0, 0],
            '771': [0, 0.825, 0, 0],
            '8730': [1.25003, 1.75, 0, 0],
            '8968': [1.25003, 1.75, 0, 0],
            '8969': [1.25003, 1.75, 0, 0],
            '8970': [1.25003, 1.75, 0, 0],
            '8971': [1.25003, 1.75, 0, 0],
            '9115': [0.64502, 1.155, 0, 0],
            '9116': [1e-5, 0.6, 0, 0],
            '9117': [0.64502, 1.155, 0, 0],
            '9118': [0.64502, 1.155, 0, 0],
            '9119': [1e-5, 0.6, 0, 0],
            '9120': [0.64502, 1.155, 0, 0],
            '9121': [0.64502, 1.155, 0, 0],
            '9122': [-0.00099, 0.601, 0, 0],
            '9123': [0.64502, 1.155, 0, 0],
            '9124': [0.64502, 1.155, 0, 0],
            '9125': [-0.00099, 0.601, 0, 0],
            '9126': [0.64502, 1.155, 0, 0],
            '9127': [1e-5, 0.9, 0, 0],
            '9128': [0.65002, 1.15, 0, 0],
            '9129': [0.90001, 0, 0, 0],
            '9130': [0, 0.3, 0, 0],
            '9131': [1e-5, 0.9, 0, 0],
            '9132': [0.65002, 1.15, 0, 0],
            '9133': [0.90001, 0, 0, 0],
            '9143': [0.88502, 0.915, 0, 0],
            '10216': [1.25003, 1.75, 0, 0],
            '10217': [1.25003, 1.75, 0, 0],
            '57344': [-0.00499, 0.605, 0, 0],
            '57345': [-0.00499, 0.605, 0, 0],
            '57680': [0, 0.12, 0, 0],
            '57681': [0, 0.12, 0, 0],
            '57682': [0, 0.12, 0, 0],
            '57683': [0, 0.12, 0, 0],
        },
        'Typewriter-Regular': {
            '32': [0, 0, 0, 0],
            '33': [0, 0.61111, 0, 0],
            '34': [0, 0.61111, 0, 0],
            '35': [0, 0.61111, 0, 0],
            '36': [0.08333, 0.69444, 0, 0],
            '37': [0.08333, 0.69444, 0, 0],
            '38': [0, 0.61111, 0, 0],
            '39': [0, 0.61111, 0, 0],
            '40': [0.08333, 0.69444, 0, 0],
            '41': [0.08333, 0.69444, 0, 0],
            '42': [0, 0.52083, 0, 0],
            '43': [-0.08056, 0.53055, 0, 0],
            '44': [0.13889, 0.125, 0, 0],
            '45': [-0.08056, 0.53055, 0, 0],
            '46': [0, 0.125, 0, 0],
            '47': [0.08333, 0.69444, 0, 0],
            '48': [0, 0.61111, 0, 0],
            '49': [0, 0.61111, 0, 0],
            '50': [0, 0.61111, 0, 0],
            '51': [0, 0.61111, 0, 0],
            '52': [0, 0.61111, 0, 0],
            '53': [0, 0.61111, 0, 0],
            '54': [0, 0.61111, 0, 0],
            '55': [0, 0.61111, 0, 0],
            '56': [0, 0.61111, 0, 0],
            '57': [0, 0.61111, 0, 0],
            '58': [0, 0.43056, 0, 0],
            '59': [0.13889, 0.43056, 0, 0],
            '60': [-0.05556, 0.55556, 0, 0],
            '61': [-0.19549, 0.41562, 0, 0],
            '62': [-0.05556, 0.55556, 0, 0],
            '63': [0, 0.61111, 0, 0],
            '64': [0, 0.61111, 0, 0],
            '65': [0, 0.61111, 0, 0],
            '66': [0, 0.61111, 0, 0],
            '67': [0, 0.61111, 0, 0],
            '68': [0, 0.61111, 0, 0],
            '69': [0, 0.61111, 0, 0],
            '70': [0, 0.61111, 0, 0],
            '71': [0, 0.61111, 0, 0],
            '72': [0, 0.61111, 0, 0],
            '73': [0, 0.61111, 0, 0],
            '74': [0, 0.61111, 0, 0],
            '75': [0, 0.61111, 0, 0],
            '76': [0, 0.61111, 0, 0],
            '77': [0, 0.61111, 0, 0],
            '78': [0, 0.61111, 0, 0],
            '79': [0, 0.61111, 0, 0],
            '80': [0, 0.61111, 0, 0],
            '81': [0.13889, 0.61111, 0, 0],
            '82': [0, 0.61111, 0, 0],
            '83': [0, 0.61111, 0, 0],
            '84': [0, 0.61111, 0, 0],
            '85': [0, 0.61111, 0, 0],
            '86': [0, 0.61111, 0, 0],
            '87': [0, 0.61111, 0, 0],
            '88': [0, 0.61111, 0, 0],
            '89': [0, 0.61111, 0, 0],
            '90': [0, 0.61111, 0, 0],
            '91': [0.08333, 0.69444, 0, 0],
            '92': [0.08333, 0.69444, 0, 0],
            '93': [0.08333, 0.69444, 0, 0],
            '94': [0, 0.61111, 0, 0],
            '95': [0.09514, 0, 0, 0],
            '96': [0, 0.61111, 0, 0],
            '97': [0, 0.43056, 0, 0],
            '98': [0, 0.61111, 0, 0],
            '99': [0, 0.43056, 0, 0],
            '100': [0, 0.61111, 0, 0],
            '101': [0, 0.43056, 0, 0],
            '102': [0, 0.61111, 0, 0],
            '103': [0.22222, 0.43056, 0, 0],
            '104': [0, 0.61111, 0, 0],
            '105': [0, 0.61111, 0, 0],
            '106': [0.22222, 0.61111, 0, 0],
            '107': [0, 0.61111, 0, 0],
            '108': [0, 0.61111, 0, 0],
            '109': [0, 0.43056, 0, 0],
            '110': [0, 0.43056, 0, 0],
            '111': [0, 0.43056, 0, 0],
            '112': [0.22222, 0.43056, 0, 0],
            '113': [0.22222, 0.43056, 0, 0],
            '114': [0, 0.43056, 0, 0],
            '115': [0, 0.43056, 0, 0],
            '116': [0, 0.55358, 0, 0],
            '117': [0, 0.43056, 0, 0],
            '118': [0, 0.43056, 0, 0],
            '119': [0, 0.43056, 0, 0],
            '120': [0, 0.43056, 0, 0],
            '121': [0.22222, 0.43056, 0, 0],
            '122': [0, 0.43056, 0, 0],
            '123': [0.08333, 0.69444, 0, 0],
            '124': [0.08333, 0.69444, 0, 0],
            '125': [0.08333, 0.69444, 0, 0],
            '126': [0, 0.61111, 0, 0],
            '127': [0, 0.61111, 0, 0],
            '160': [0, 0, 0, 0],
            '176': [0, 0.61111, 0, 0],
            '184': [0.19445, 0, 0, 0],
            '305': [0, 0.43056, 0, 0],
            '567': [0.22222, 0.43056, 0, 0],
            '711': [0, 0.56597, 0, 0],
            '713': [0, 0.56555, 0, 0],
            '714': [0, 0.61111, 0, 0],
            '715': [0, 0.61111, 0, 0],
            '728': [0, 0.61111, 0, 0],
            '730': [0, 0.61111, 0, 0],
            '770': [0, 0.61111, 0, 0],
            '771': [0, 0.61111, 0, 0],
            '776': [0, 0.61111, 0, 0],
            '915': [0, 0.61111, 0, 0],
            '916': [0, 0.61111, 0, 0],
            '920': [0, 0.61111, 0, 0],
            '923': [0, 0.61111, 0, 0],
            '926': [0, 0.61111, 0, 0],
            '928': [0, 0.61111, 0, 0],
            '931': [0, 0.61111, 0, 0],
            '933': [0, 0.61111, 0, 0],
            '934': [0, 0.61111, 0, 0],
            '936': [0, 0.61111, 0, 0],
            '937': [0, 0.61111, 0, 0],
            '8216': [0, 0.61111, 0, 0],
            '8217': [0, 0.61111, 0, 0],
            '8242': [0, 0.61111, 0, 0],
            '9251': [0.11111, 0.21944, 0, 0],
        },
    };

    /**
     * This module contains metrics regarding fonts and individual symbols. The sigma
     * and xi variables, as well as the METRICS_MAP map contain data extracted from
     * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
     * `metrics` variable and the getCharacterMetrics function.
     */
    // const hangulRegex = /[\uAC00-\uD7AF]/;
    // This regex combines
    // - Hiragana: [\u3040-\u309F]
    // - Katakana: [\u30A0-\u30FF]
    // - CJK ideograms: [\u4E00-\u9FAF]
    // - Hangul syllables: [\uAC00-\uD7AF]
    // Notably missing are half width Katakana and Romaji glyphs.
    const cjkRegex = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/;
    /*
     *
     * In TeX, there are actually three sets of dimensions, one for each of
     * textstyle, scriptstyle, and scriptscriptstyle.  These are provided in the
     * the arrays below, in that order.
     *
     * The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respectively.
     * This was determined by running the following script:
     *``` bash
          latex -interaction=nonstopmode \
          '\documentclass{article}\usepackage{amsmath}\begin{document}' \
          '$a$ \expandafter\show\the\textfont2' \
          '\expandafter\show\the\scriptfont2' \
          '\expandafter\show\the\scriptscriptfont2' \
          '\stop'
      ```
     * The metrics themselves were retrieved using the following commands:
     * ``` bash
          tftopl cmsy10
          tftopl cmsy7
          tftopl cmsy5
        ```
     *
     * The output of each of these commands is quite lengthy.  The only part we
     * care about is the FONTDIMEN section. Each value is measured in EMs.
     * @memberof module:fontMetrics
     */
    const SIGMAS = {
        slant: [0.25, 0.25, 0.25],
        space: [0.0, 0.0, 0.0],
        stretch: [0.0, 0.0, 0.0],
        shrink: [0.0, 0.0, 0.0],
        xHeight: [0.431, 0.431, 0.431],
        quad: [1.0, 1.171, 1.472],
        extraSpace: [0.0, 0.0, 0.0],
        num1: [0.677, 0.732, 0.925],
        num2: [0.394, 0.384, 0.387],
        num3: [0.444, 0.471, 0.504],
        denom1: [0.686, 0.752, 1.025],
        denom2: [0.345, 0.344, 0.532],
        sup1: [0.413, 0.503, 0.504],
        sup2: [0.363, 0.431, 0.404],
        sup3: [0.289, 0.286, 0.294],
        sub1: [0.15, 0.143, 0.2],
        sub2: [0.247, 0.286, 0.4],
        supDrop: [0.386, 0.353, 0.494],
        subDrop: [0.05, 0.071, 0.1],
        delim1: [2.39, 1.7, 1.98],
        delim2: [1.01, 1.157, 1.42],
        axisHeight: [0.25, 0.25, 0.25],
    };
    // These font metrics are extracted from TeX by using
    // \font\a=cmex10
    // \showthe\fontdimenX\a
    // where X is the corresponding variable number. These correspond to the font
    // parameters of the extension fonts (family 3). See the TeXbook, page 433
    // const xi1 = 0; // Slant per pt
    // const xi2 = 0; // Interword space
    // const xi3 = 0; // Interword stretch
    // const xi4 = 0; // Interword shrink
    // const xi5 = 0.431; // x-height
    // const xi6 = 1; // Quad width
    // const xi7 = 0; // Extra space
    const xi8 = 0.04; // Default rule thickness, TexBook p.390
    const xi9 = 0.111;
    const xi10 = 0.166;
    const xi11 = 0.2;
    const xi12 = 0.6;
    const xi13 = 0.1;
    // Note: xi14: offset from baseline for superscript TexBook p. 179
    // Note: xi16: offset from baseline for subscript
    // This value determines how large a pt is, for metrics which are defined in
    // terms of pts.
    // This value is also used in katex.less; if you change it make sure the values
    // match.
    const ptPerEm = 10.0;
    /*
     * This is just a mapping from common names to real metrics
     */
    const METRICS = {
        defaultRuleThickness: xi8,
        bigOpSpacing1: xi9,
        bigOpSpacing2: xi10,
        bigOpSpacing3: xi11,
        bigOpSpacing4: xi12,
        bigOpSpacing5: xi13,
        ptPerEm: ptPerEm,
        pxPerEm: (ptPerEm * 4.0) / 3.0,
        doubleRuleSep: 2.0 / ptPerEm,
        // article.cls.txt:455
        arraycolsep: 5.0 / ptPerEm,
        baselineskip: 12.0 / ptPerEm,
        arrayrulewidth: 0.4 / ptPerEm,
        fboxsep: 3 / ptPerEm,
        fboxrule: 0.4 / ptPerEm,
    };
    // These are very rough approximations.  We default to Times New Roman which
    // should have Latin-1 and Cyrillic characters, but may not depending on the
    // operating system.  The metrics do not account for extra height from the
    // accents.  In the case of Cyrillic characters which have both ascenders and
    // descenders we prefer approximations with ascenders, primarily to prevent
    // the fraction bar or root line from intersecting the glyph.
    // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.
    const extraCharacterMap = {
        '\u00a0': '\u0020',
        '\u200b': '\u0020',
        // Latin-1
        Å: 'A',
        Ç: 'C',
        Ð: 'D',
        Þ: 'o',
        å: 'a',
        ç: 'c',
        ð: 'd',
        þ: 'o',
        // Cyrillic
        А: 'A',
        Б: 'B',
        В: 'B',
        Г: 'F',
        Д: 'A',
        Е: 'E',
        Ж: 'K',
        З: '3',
        И: 'N',
        Й: 'N',
        К: 'K',
        Л: 'N',
        М: 'M',
        Н: 'H',
        О: 'O',
        П: 'N',
        Р: 'P',
        С: 'C',
        Т: 'T',
        У: 'y',
        Ф: 'O',
        Х: 'X',
        Ц: 'U',
        Ч: 'h',
        Ш: 'W',
        Щ: 'W',
        Ъ: 'B',
        Ы: 'X',
        Ь: 'B',
        Э: '3',
        Ю: 'X',
        Я: 'R',
        а: 'a',
        б: 'b',
        в: 'a',
        г: 'r',
        д: 'y',
        е: 'e',
        ж: 'm',
        з: 'e',
        и: 'n',
        й: 'n',
        к: 'n',
        л: 'n',
        м: 'm',
        н: 'n',
        о: 'o',
        п: 'n',
        р: 'p',
        с: 'c',
        т: 'o',
        у: 'y',
        ф: 'b',
        х: 'x',
        ц: 'n',
        ч: 'n',
        ш: 'w',
        щ: 'w',
        ъ: 'a',
        ы: 'm',
        ь: 'a',
        э: 'e',
        ю: 'm',
        я: 'r',
    };
    /**
     * This function is a convenience function for looking up information in the
     * METRICS_MAP table. It takes a character as a string, and a font name.
     *
     * Note: the `width` property may be undefined if fontMetricsData.js wasn't
     * built using `Make extended_metrics`.
     * @param fontName e.g. 'Main-Regular', 'Typewriter-Regular', etc...
     */
    function getCharacterMetrics(character, fontName) {
        // console.assert(character.length === 1);
        console.assert(METRICS_MAP[fontName], 'Unknown font "' + fontName + '"');
        let ch = character.charCodeAt(0);
        if (character[0] in extraCharacterMap) {
            ch = extraCharacterMap[character[0]].charCodeAt(0);
        }
        else if (cjkRegex.test(character[0])) {
            ch = 77; // 'M'.charCodeAt(0);
        }
        const metrics = METRICS_MAP[fontName][ch];
        if (!metrics) {
            // console.warn(
            //     'No metrics for ' +
            //     '"' + character + '" (U+' + ('000000' + ch.toString(16)).substr(-6) + ')' +
            //     ' in font "' + fontName + '"');
            // Assume default values.
            // depth + height should be less than 1.0 em
            if (ch === 11034) {
                // Placeholder character
                return {
                    defaultMetrics: true,
                    depth: 0,
                    height: 1.0,
                    italic: 0,
                    skew: 0,
                };
            }
            return {
                defaultMetrics: true,
                depth: 0.2,
                height: 0.7,
                italic: 0,
                skew: 0,
            };
        }
        return {
            defaultMetrics: false,
            depth: metrics[0],
            height: metrics[1],
            italic: metrics[2],
            skew: metrics[3],
        };
    }
    /**
     *
     * @param value If value is a string, it may be suffixed
     * with a unit, which will override the `unit` paramter
     */
    function convertDimenToEm(value, unit, precision = NaN) {
        if (typeof value === 'string') {
            const m = value.match(/([-+]?[0-9.]*)\s*([a-zA-Z]+)/);
            if (!m) {
                value = parseFloat(value);
            }
            else {
                value = parseFloat(m[1]);
                unit = m[2].toLowerCase();
            }
        }
        // If the units are missing, TeX assumes 'pt'
        const f = {
            pt: 1.0,
            mm: 7227 / 2540,
            cm: 7227 / 254,
            ex: 35271 / 8192,
            px: 3.0 / 4.0,
            em: METRICS.ptPerEm,
            bp: 803 / 800,
            dd: 1238 / 1157,
            pc: 12.0,
            in: 72.27,
            mu: 10 / 18,
        }[unit] || 1.0;
        if (isFinite(precision)) {
            const factor = Math.pow(10, precision);
            return Math.round((value / METRICS.ptPerEm) * f * factor) / factor;
        }
        return (value / METRICS.ptPerEm) * f;
    }
    function convertDimenToPx(value, unit) {
        return convertDimenToEm(value, unit) * (4.0 / 3.0) * METRICS.ptPerEm;
    }

    /**
     * This file contains information and classes for the 'math styles' used by TeX,
     * which are specific layout
     * algorithms for math. They get progressively smaller and tighter:
     * - displaystyle is used for expressions laid out on their own (in a block)
     * - textstyle is for expressions displayed on a line (usually wiht some text
     * around)
     * - scriptstyle is for expressions displayed as a superscript for example
     * - scriptscriptstyle is for expressions displayed as a superscript of a superscript
     * - the 'cramped' variations are used in various places, for examples a subscript
     * is using the 'scriptstyle', but cramped (so it's a bit more tight than a
     * superscript which is just using the 'scriptstyle')
     *
     * See Texbook, p.441:
     *
     * A math list is a sequence of items of the various kinds listed in Chapter 17,
     * and TEX typesets a formula by converting a math list to a horizontal list.
     * When such typesetting begins, TEX has two other pieces of information in
     * addition to the math list itself. (a) The starting style tells what style
     * should be used for the math list, unless another style is specified by a
     * style item. For example, the starting style for a displayed formula is D,
     * but for an equation in the text or an equation number it is T; and for a
     * subformula it can be any one of the eight styles defined in Chapter 17.
     *
     * We shall use C to stand for the current style, and we shall say that the
     * math list is being typeset in style C. (b) The typesetting is done either
     * with or without penalties. Formulas in the text of a paragraph are converted
     * to horizontal lists in which additional penalty items are inserted after
     * binary operations and relations, in order to aid in line breaking. Such
     * penalties are not inserted in other cases, because they would serve no
     * useful function.
     *
     * The eight styles are considered to be D > D′ > T > T′ > S > S′ > SS > SS′,
     * in decreasing order. Thus, C ≤ S means that the current style is S, S , SS,
     * or SS . Style C′ means the current style with a prime added if one isn’t
     * there; for example, we have C =T if and only if C = T or C = T'.
     * Style C↑ is the superscript style for C; this means style S if C is D or T,
     * style S′ if C is D′ or T′, style SS if C is S or SS,
     * and style SS if C is S or SS.
     * Finally, style C↓ is the subscript style, which is (C↑) .
     */
    // IDs of the different MATHSTYLES
    const D = 0; // displaystyle
    const Dc = 1; // displaystyle, cramped
    const T = 2; // textstyle
    const Tc = 3;
    const S = 4; // scriptstyle
    const Sc = 5;
    const SS = 6; // scriptscriptstyle
    const SSc = 7;
    /**
     * @property {number} id unique id for the style
     * @property {number} size (which is the same for cramped and uncramped version
     * of a style)
     * @property {number}  multiplier, size multiplier which gives the size difference between
     * a style and textstyle.
     * @property {boolean}  cramped flag
     */
    class Mathstyle {
        constructor(id, size, multiplier, cramped) {
            this.id = id;
            this.size = size;
            this.cramped = cramped;
            this.sizeMultiplier = multiplier;
            this.metrics = Object.keys(SIGMAS).reduce((acc, x) => {
                return { ...acc, [x]: SIGMAS[x][this.size] };
            }, {});
            this.metrics.emPerEx =
                SIGMAS.xHeight[this.size] / SIGMAS.quad[this.size];
        }
        /**
         * Get the style of a superscript given a base in the current style.
         */
        sup() {
            return MATHSTYLES[[S, Sc, S, Sc, SS, SSc, SS, SSc][this.id]];
        }
        /**
         * Get the style of a subscript given a base in the current style.
         */
        sub() {
            return MATHSTYLES[[Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc][this.id]];
        }
        /**
         * Get the style of a fraction numerator given the fraction in the current
         * style.
         */
        fracNum() {
            return MATHSTYLES[[T, Tc, S, Sc, SS, SSc, SS, SSc][this.id]];
        }
        /**
         * Get the style of a fraction denominator given the fraction in the current
         * style.
         */
        fracDen() {
            return MATHSTYLES[[Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc][this.id]];
        }
        /**
         * Get the cramped version of a style (in particular, cramping a cramped style
         * doesn't change the style).
         */
        cramp() {
            return MATHSTYLES[[Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc][this.id]];
        }
        /**
         * CSS class name, for example `displaystyle cramped`
         */
        cls() {
            return [
                'displaystyle textstyle',
                'textstyle',
                'scriptstyle',
                'scriptscriptstyle',
            ][this.size]; // @revisit: use this.id to include 'cramped' variants
        }
        /**
         * CSS class name to adjust from one style to another, like 'reset-textstyle'
         */
        adjustTo(newStyle) {
            // @revisit the values used here
            let result = [
                [
                    '',
                    '',
                    'reset-textstyle scriptstyle',
                    'reset-textstyle scriptscriptstyle',
                ],
                [
                    'reset-textstyle displaystyle textstyle',
                    '',
                    'reset-textstyle scriptstyle',
                    'reset-textstyle scriptscriptstyle',
                ],
                [
                    'reset-scriptstyle textstyle displaystyle',
                    'reset-scriptstyle textstyle',
                    '',
                    'reset-scriptstyle scriptscriptstyle',
                ],
                [
                    'reset-scriptscriptstyle textstyle displaystyle',
                    'reset-scriptscriptstyle textstyle',
                    'reset-scriptscriptstyle scriptstyle',
                    '',
                ],
            ][this.size][newStyle.size];
            if (result.length > 0)
                result = ' ' + result;
            return result;
        }
        /**
         * Return if this style is tightly spaced (scriptstyle/scriptscriptstyle)
         */
        isTight() {
            return this.size >= 2;
        }
    }
    const MATHSTYLES = {
        0: new Mathstyle(D, 0, 1.0, false),
        1: new Mathstyle(Dc, 0, 1.0, true),
        2: new Mathstyle(T, 1, 1.0, false),
        3: new Mathstyle(Tc, 1, 1.0, true),
        4: new Mathstyle(S, 2, 0.7, false),
        5: new Mathstyle(Sc, 2, 0.7, true),
        6: new Mathstyle(SS, 3, 0.5, false),
        7: new Mathstyle(SSc, 3, 0.5, true),
    };
    // Aliases
    MATHSTYLES.displaystyle = MATHSTYLES[0];
    MATHSTYLES.textstyle = MATHSTYLES[2];
    MATHSTYLES.scriptstyle = MATHSTYLES[4];
    MATHSTYLES.scriptscriptstyle = MATHSTYLES[6];

    /**
     * This structure contains the rendering context of the current parse level.
     *
     * It also holds information about the parent context to handle scaling
     * adjustments.
     *
     * When a new scope is entered, a clone of the context is created with `.clone()`
     * so that any further changes remain local to the scope.
     *
     * A scope is defined for example by:
     * - an explicit group enclosed in braces `{...}`
     * - a semi-simple group enclosed in `\bgroup...\endgroup`
     * - an environment delimited by `\begin{<envname>}...\end{<envname>}`
     *
     * @property {Mathstyle} mathstyle
     * @property {number} opacity
     * @property {number} size
     * @property {object} atomIdsSettings - If not undefined, unique IDs should be
     * generated for each span so they can be mapped back to an atom.
     * The `seed` field should be a number to generate a specific range of
     * IDs or the string "random" to generate a random number.
     * Optionally, if a `groupNumbers` property is set to true, an additional
     * span will enclose strings of digits. This is used by read aloud to properly
     * pronounce (and highlight) numbers in expressions.
     * @property {Mathstyle} parentMathstyle
     * @property {number} parentSize
     * @property {object} macros A macros dictionary
     * @property {string} color
     */
    class Context {
        constructor(from) {
            var _a, _b, _c, _d, _e, _f;
            this.macros = (_a = from.macros) !== null && _a !== void 0 ? _a : {};
            this.atomIdsSettings = from.atomIdsSettings;
            this.mathstyle = (_b = from.mathstyle) !== null && _b !== void 0 ? _b : MATHSTYLES.displaystyle;
            this.letterShapeStyle = (_c = from.letterShapeStyle) !== null && _c !== void 0 ? _c : 'tex';
            this.size = (_d = from.size) !== null && _d !== void 0 ? _d : 'size5'; // medium size
            this.parentMathstyle = (_e = from.parentMathstyle) !== null && _e !== void 0 ? _e : this.mathstyle;
            this.parentSize = (_f = from.parentSize) !== null && _f !== void 0 ? _f : this.size;
            this.opacity = from.opacity;
            this.smartFence = from.smartFence;
        }
        /**
         * Returns a new context with the same properties as 'this',
         * except for the ones provided in `override`
         */
        clone(override = {}) {
            const result = new Context(this);
            if (typeof override !== 'undefined') {
                // `'auto'` (or undefined) to indicate that the mathstyle should in
                // fact not be changed. This is used when specifying the mathstyle
                // for some environments.
                Object.assign(result, override);
                if (!override.mathstyle) {
                    result.mathstyle = this.mathstyle;
                }
                else {
                    result.parentMathstyle = this.mathstyle;
                    result.parentSize = this.size;
                    if (typeof override.mathstyle === 'string') {
                        result.mathstyle = MATHSTYLES[override.mathstyle];
                    }
                }
            }
            return result;
        }
        /**
         * Change the mathstyle of this context
         * @param value - `'auto'` to indicate that the mathstyle should in
         * fact not be changed. This is used when specifying the mathstyle for some
         * environments.
         */
        setMathstyle(value) {
            if (value && value !== 'auto') {
                this.mathstyle = MATHSTYLES[value];
            }
        }
        cramp() {
            return this.clone({ mathstyle: this.mathstyle.cramp() });
        }
        sup() {
            return this.clone({ mathstyle: this.mathstyle.sup() });
        }
        sub() {
            return this.clone({ mathstyle: this.mathstyle.sub() });
        }
    }

    const SVG_BODY = {
        // Adapted from https://github.com/KaTeX/KaTeX/blob/master/src/stretchy.js
        overrightarrow: [['rightarrow'], 0.888, 522, 'xMaxYMin'],
        overleftarrow: [['leftarrow'], 0.888, 522, 'xMinYMin'],
        underrightarrow: [['rightarrow'], 0.888, 522, 'xMaxYMin'],
        underleftarrow: [['leftarrow'], 0.888, 522, 'xMinYMin'],
        xrightarrow: [['rightarrow'], 1.469, 522, 'xMaxYMin'],
        xleftarrow: [['leftarrow'], 1.469, 522, 'xMinYMin'],
        Overrightarrow: [['doublerightarrow'], 0.888, 560, 'xMaxYMin'],
        xRightarrow: [['doublerightarrow'], 1.526, 560, 'xMaxYMin'],
        xLeftarrow: [['doubleleftarrow'], 1.526, 560, 'xMinYMin'],
        overleftharpoon: [['leftharpoon'], 0.888, 522, 'xMinYMin'],
        xleftharpoonup: [['leftharpoon'], 0.888, 522, 'xMinYMin'],
        xleftharpoondown: [['leftharpoondown'], 0.888, 522, 'xMinYMin'],
        overrightharpoon: [['rightharpoon'], 0.888, 522, 'xMaxYMin'],
        xrightharpoonup: [['rightharpoon'], 0.888, 522, 'xMaxYMin'],
        xrightharpoondown: [['rightharpoondown'], 0.888, 522, 'xMaxYMin'],
        xlongequal: [['longequal'], 0.888, 334, 'xMinYMin'],
        xtwoheadleftarrow: [['twoheadleftarrow'], 0.888, 334, 'xMinYMin'],
        xtwoheadrightarrow: [['twoheadrightarrow'], 0.888, 334, 'xMaxYMin'],
        overleftrightarrow: [['leftarrow', 'rightarrow'], 0.888, 522],
        overbrace: [['leftbrace', 'midbrace', 'rightbrace'], 1.6, 548],
        underbrace: [
            ['leftbraceunder', 'midbraceunder', 'rightbraceunder'],
            1.6,
            548,
        ],
        underleftrightarrow: [['leftarrow', 'rightarrow'], 0.888, 522],
        xleftrightarrow: [['leftarrow', 'rightarrow'], 1.75, 522],
        xLeftrightarrow: [['doubleleftarrow', 'doublerightarrow'], 1.75, 560],
        xrightleftharpoons: [
            ['leftharpoondownplus', 'rightharpoonplus'],
            1.75,
            716,
        ],
        xleftrightharpoons: [
            ['leftharpoonplus', 'rightharpoondownplus'],
            1.75,
            716,
        ],
        xhookleftarrow: [['leftarrow', 'righthook'], 1.08, 522],
        xhookrightarrow: [['lefthook', 'rightarrow'], 1.08, 522],
        overlinesegment: [['leftlinesegment', 'rightlinesegment'], 0.888, 522],
        underlinesegment: [['leftlinesegment', 'rightlinesegment'], 0.888, 522],
        overgroup: [['leftgroup', 'rightgroup'], 0.888, 342],
        undergroup: [['leftgroupunder', 'rightgroupunder'], 0.888, 342],
        xmapsto: [['leftmapsto', 'rightarrow'], 1.5, 522],
        xtofrom: [['leftToFrom', 'rightToFrom'], 1.75, 528],
        // The next three arrows are from the mhchem package.
        // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
        // document as \xrightarrow or \xrightleftharpoons. Those have
        // min-length = 1.75em, so we set min-length on these next three to match.
        xrightleftarrows: [['baraboveleftarrow', 'rightarrowabovebar'], 1.75, 901],
        xrightequilibrium: [
            ['baraboveshortleftharpoon', 'rightharpoonaboveshortbar'],
            1.75,
            716,
        ],
        xleftequilibrium: [
            ['shortbaraboveleftharpoon', 'shortrightharpoonabovebar'],
            1.75,
            716,
        ],
    };
    // While the images above are sliced, "accents" are stretched
    // The variants (xxx1, xxx2, etc...) are used depending on the length
    // (in number of characters) of the base.
    const SVG_ACCENTS = {
        // viewBoxWidth, viewBoxHeight, height
        widehat1: [1062, 239, 0.24],
        widehat2: [2364, 300, 0.3],
        widehat3: [2364, 360, 0.36],
        widehat4: [2364, 420, 0.42],
        widecheck1: [1062, 239, 0.24],
        widecheck2: [2364, 300, 0.3],
        widecheck3: [2364, 360, 0.36],
        widecheck4: [2364, 420, 0.42],
        widetilde1: [600, 260, 0.26],
        widetilde2: [1033, 286, 0.286],
        widetilde3: [2339, 306, 0.306],
        widetilde4: [2340, 312, 0.34],
    };
    // From https://github.com/KaTeX/KaTeX/blob/master/src/svgGeometry.js
    const PATHS = {
        // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
        doubleleftarrow: `M262 157
l10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3
 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28
 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5
c2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5
 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87
-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7
-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z
m8 0v40h399730v-40zm0 194v40h399730v-40z`,
        // doublerightarrow is from glyph U+21D2 in font KaTeX Main
        doublerightarrow: `M399738 392l
-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5
 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88
-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68
-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18
-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782
c-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3
-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z`,
        // leftarrow is from glyph U+2190 in font KaTeX Main
        leftarrow: `M400000 241H110l3-3c68.7-52.7 113.7-120
 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8
-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247
c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208
 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3
 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202
 l-3-3h399890zM100 241v40h399900v-40z`,
        // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
        leftbrace: `M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117
-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7
 5-6 9-10 13-.7 1-7.3 1-20 1H6z`,
        leftbraceunder: `M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13
 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688
 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7
-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z`,
        // overgroup is from the MnSymbol package (public domain)
        leftgroup: `M400000 80
H435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0
 435 0h399565z`,
        leftgroupunder: `M400000 262
H435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219
 435 219h399565z`,
        // Harpoons are from glyph U+21BD in font KaTeX Main
        leftharpoon: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3
-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5
-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7
-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z`,
        leftharpoonplus: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5
 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3
-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7
-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z
m0 0v40h400000v-40z`,
        leftharpoondown: `M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333
 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5
 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667
-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z`,
        leftharpoondownplus: `M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12
 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7
-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0
v40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z`,
        // hook is from glyph U+21A9 in font KaTeX Main
        lefthook: `M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5
-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3
-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21
 71.5 23h399859zM103 281v-40h399897v40z`,
        leftlinesegment: `M40 281 V428 H0 V94 H40 V241 H400000 v40z
M40 281 V428 H0 V94 H40 V241 H400000 v40z`,
        leftmapsto: `M40 281 V448H0V74H40V241H400000v40z
M40 281 V448H0V74H40V241H400000v40z`,
        // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
        leftToFrom: `M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23
-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8
c28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3
 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z`,
        longequal: `M0 50 h400000 v40H0z m0 194h40000v40H0z
M0 50 h400000 v40H0z m0 194h40000v40H0z`,
        midbrace: `M200428 334
c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14
-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7
 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11
 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z`,
        midbraceunder: `M199572 214
c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14
 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3
 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0
-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z`,
        oiintSize1: `M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6
-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z
m368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8
60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z`,
        oiintSize2: `M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8
-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z
m502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2
c0 110 84 276 504 276s502.4-166 502.4-276z`,
        oiiintSize1: `M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6
-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z
m525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0
85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z`,
        oiiintSize2: `M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8
-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z
m770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1
c0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z`,
        rightarrow: `M0 241v40h399891c-47.3 35.3-84 78-110 128
-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20
 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7
 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85
-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
 151.7 139 205zm0 0v40h399900v-40z`,
        rightbrace: `M400000 542l
-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5
s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1
c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z`,
        rightbraceunder: `M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3
 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237
-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z`,
        rightgroup: `M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0
 3-1 3-3v-38c-76-158-257-219-435-219H0z`,
        rightgroupunder: `M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18
 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z`,
        rightharpoon: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3
-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2
-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58
 69.2 92 94.5zm0 0v40h399900v-40z`,
        rightharpoonplus: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11
-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7
 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z
m0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z`,
        rightharpoondown: `M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8
 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5
-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95
-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z`,
        rightharpoondownplus: `M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8
 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3
 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3
-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z
m0-194v40h400000v-40zm0 0v40h400000v-40z`,
        righthook: `M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3
 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0
-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21
 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z`,
        rightlinesegment: `M399960 241 V94 h40 V428 h-40 V281 H0 v-40z
M399960 241 V94 h40 V428 h-40 V281 H0 v-40z`,
        rightToFrom: `M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23
 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32
-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142
-167z M100 147v40h399900v-40zM0 341v40h399900v-40z`,
        // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
        twoheadleftarrow: `M0 167c68 40
 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69
-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3
-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19
-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101
 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z`,
        twoheadrightarrow: `M400000 167
c-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3
 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42
 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333
-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70
 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z`,
        // tilde1 is a modified version of a glyph from the MnSymbol package
        widetilde1: `M200 55.538c-77 0-168 73.953-177 73.953-3 0-7
-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0
 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0
 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128
-68.267.847-113-73.952-191-73.952z`,
        // ditto tilde2, tilde3, & tilde4
        widetilde2: `M344 55.266c-142 0-300.638 81.316-311.5 86.418
-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9
 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114
c1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751
 181.476 676 181.476c-149 0-189-126.21-332-126.21z`,
        widetilde3: `M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457
-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0
 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697
 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696
 -338 0-409-156.573-744-156.573z`,
        widetilde4: `M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345
-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409
 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9
 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409
 -175.236-744-175.236z`,
        // vec is from glyph U+20D7 in font KaTeX Main
        vec: `M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`,
        // widehat1 is a modified version of a glyph from the MnSymbol package
        widehat1: `M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z`,
        // ditto widehat2, widehat3, & widehat4
        widehat2: `M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
        widehat3: `M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
        widehat4: `M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
        // widecheck paths are all inverted versions of widehat
        widecheck1: `M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,
-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z`,
        widecheck2: `M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
        widecheck3: `M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
        widecheck4: `M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
        // The next ten paths support reaction arrows from the mhchem package.
        // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
        // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
        baraboveleftarrow: `M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202
c4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5
c-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130
s-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47
121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6
s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11
c0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z
M100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z`,
        // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
        rightarrowabovebar: `M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32
-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0
13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39
-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5
-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z`,
        // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
        // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
        baraboveshortleftharpoon: `M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17
c2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21
c-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40
c-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z
M0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z`,
        rightharpoonaboveshortbar: `M0,241 l0,40c399126,0,399993,0,399993,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z`,
        shortbaraboveleftharpoon: `M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,
1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,
-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z
M93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z`,
        shortrightharpoonabovebar: `M53,241l0,40c398570,0,399437,0,399437,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z`,
    };
    /**
     * Generate the HTML markup to represent a SVG span.
     *
     */
    function svgBodyToMarkup(svgBodyName) {
        if (SVG_ACCENTS[svgBodyName]) {
            const height = SVG_ACCENTS[svgBodyName][2];
            const result = `<span class="stretchy" style="height:${height}em">` +
                `<svg width="100%" height="${height}em"` +
                `viewBox="0 0 ${SVG_ACCENTS[svgBodyName][0]} ${SVG_ACCENTS[svgBodyName][1]}"` +
                `preserveAspectRatio="none">` +
                `<path d="${PATHS[svgBodyName]}"></path>` +
                `</svg></span>`;
            return `<span style="height:${height}em;min-width:0">${result}</span>`;
        }
        const [paths, minWidth, viewBoxHeight, align] = SVG_BODY[svgBodyName];
        let widthClasses;
        let aligns;
        const height = viewBoxHeight / 1000;
        if (paths.length === 3) {
            widthClasses = ['slice-1-of-3', 'slice-2-of-3', 'slice-3-of-3'];
            aligns = ['xMinYMin', 'xMidYMin', 'xMaxYMin'];
        }
        else if (paths.length === 2) {
            widthClasses = ['slice-1-of-2', 'slice-2-of-2'];
            aligns = ['xMinYMin', 'xMaxYMin'];
        }
        else {
            widthClasses = ['slice-1-of-1'];
            aligns = [align];
        }
        const body = paths
            .map((path, i) => `<span class="${widthClasses[i]}" style="height:${height}em">` +
            `<svg width="400em" height="${height}em"` +
            `viewBox="0 0 400000 ${viewBoxHeight}"` +
            `preserveAspectRatio="${aligns[i]} slice">` +
            `<path d="${PATHS[path]}"></path>` +
            `</svg></span>`)
            .join('');
        return `<span style="height:${height}em;min-width:${minWidth}em;display:inline-block;">${body}</span>`;
    }
    function svgBodyHeight(svgBodyName) {
        if (SVG_BODY[svgBodyName]) {
            return SVG_BODY[svgBodyName][2] / 1000;
        }
        return SVG_ACCENTS[svgBodyName][2];
    }

    function joinLatex(segments) {
        let sep = '';
        let result = '';
        for (const segment of segments) {
            if (/[a-zA-Z*]/.test(segment[0])) {
                // If the segment begins with a char that *could* be in a command
                // name... insert a separator (if one was needed for the previous segment)
                result += sep;
            }
            // If the segment ends in a command...
            if (/\\[a-zA-Z]+\*?$/.test(segment)) {
                // ... potentially add a space before the next segment
                sep = ' ';
            }
            else {
                sep = '';
            }
            result += segment;
        }
        return result;
    }
    function tokensToString(tokens) {
        const result = joinLatex(tokens.map((token) => {
            var _a;
            return ((_a = {
                '<space>': ' ',
                '<$$>': '$$',
                '<$>': '$',
                '<{>': '{',
                '<}>': '}',
            }[token]) !== null && _a !== void 0 ? _a : token);
        }));
        return result;
    }
    /*
     * Return an array of runs (array of atoms with the same value
     *   for the specified property)
     */
    function getPropertyRuns(atoms, property) {
        const result = [];
        let run = [];
        let currentValue;
        atoms.forEach((atom) => {
            if (atom.type !== 'first') {
                let value;
                if (property === 'variant') {
                    value = atom.variant;
                    if (atom.variantStyle && atom.variantStyle !== 'up') {
                        value += '-' + atom.variantStyle;
                    }
                }
                else {
                    value = atom[property];
                }
                // If the value of this atom is different from the
                // current value, start a new run
                if (value !== currentValue) {
                    if (run.length > 0)
                        result.push(run);
                    run = [atom];
                    currentValue = value;
                }
                else {
                    // Same value, add it to the current run
                    run.push(atom);
                }
            }
        });
        // Push whatever is left
        if (run.length > 0)
            result.push(run);
        return result;
    }
    const MODES_REGISTRY = {};
    function register(name, definition) {
        MODES_REGISTRY[name] = { ...definition };
    }
    function emitLatexRun(parent, run, expandMacro) {
        var _a;
        if ((_a = MODES_REGISTRY[run[0].mode]) === null || _a === void 0 ? void 0 : _a.emitLatexRun) {
            return MODES_REGISTRY[run[0].mode].emitLatexRun(parent, run, expandMacro);
        }
        return '';
    }
    function parseTokens(mode, tokens, onError, options) {
        var _a;
        if ((_a = MODES_REGISTRY[mode]) === null || _a === void 0 ? void 0 : _a.parse) {
            return MODES_REGISTRY[mode].parse(tokens, onError, options);
        }
        return null;
    }
    /*
     * Apply the styling (bold, italic, etc..) as classes to the atom, and return
     * the effective font name to be used for metrics
     * ('Main-Regular', 'Caligraphic-Regualr' etc...)
     */
    function applyStyle(span, style) {
        var _a;
        if ((_a = MODES_REGISTRY[style.mode]) === null || _a === void 0 ? void 0 : _a.applyStyle) {
            return MODES_REGISTRY[style.mode].applyStyle(span, style);
        }
        return '';
    }

    /*
     * See https://tex.stackexchange.com/questions/81752/
     * for a thorough description of the TeXt atom type and their relevance to
     * proper kerning.
     */
    const SPAN_TYPE = [
        '',
        'mord',
        'mbin',
        'mop',
        'mrel',
        'mopen',
        'mclose',
        'mpunct',
        'minner',
        'spacing',
        // 'mtable',
        'first',
        'command',
        'error',
        'placeholder',
        'textord',
        'none',
    ]; // The const assertion prevents widening to string[]
    function isSpanType(type) {
        return SPAN_TYPE.includes(type);
    }
    /*
     * See http://www.tug.org/TUGboat/tb30-3/tb96vieth.pdf for
     * typesetting conventions for mathematical physics (units, etc...)
     */
    const INTER_ATOM_SPACING = {
        'mord+mop': 3,
        'mord+mbin': 4,
        'mord+mrel': 5,
        'mord+minner': 3,
        'mop+mord': 3,
        'mop+mop': 3,
        'mop+mbin': 5,
        'mop+minner': 3,
        'mbin+mord': 4,
        'mbin+mop': 4,
        'mbin+mopen': 4,
        'mbin+minner': 4,
        'mrel+mord': 5,
        'mrel+mop': 5,
        'mrel+mopen': 5,
        'mrel+minner': 5,
        'mclose+mop': 3,
        'mclose+mbin': 4,
        'mclose+mrel': 5,
        'mclose+minner': 3,
        'mpunct+mord': 3,
        'mpunct+mop': 3,
        'mpunct+mbin': 4,
        'mpunct+mrel': 5,
        'mpunct+mopen': 3,
        'mpunct+mpunct': 3,
        'mpunct+minner': 3,
    };
    const INTER_ATOM_TIGHT_SPACING = {
        'mord+mop': 3,
        'mop+mord': 3,
        'mop+mop': 3,
        'mclose+mop': 3,
        'minner+mop': 3,
    };
    /**
     * Return a string made up of the concatenated arguments.
     * Each arguments can be either a string, which is unchanged,
     * or a number, which is converted to a string with at most 2 fractional digits.
     *
     */
    function toString(arg) {
        if (typeof arg === 'string') {
            return arg;
        }
        if (typeof arg === 'number') {
            return Number(Math.ceil(1e2 * arg) / 1e2).toString();
        }
        if (typeof arg === 'undefined') {
            return '';
        }
        if (isArray(arg)) {
            let result = '';
            for (const elem of arg) {
                result += toString(elem);
            }
            return result;
            // } else if (arg) {
            //     result += (arg as number).toString();
        }
        console.error('Span.toStringUnexpected argument type');
        return '';
    }
    //----------------------------------------------------------------------------
    // SPAN
    //----------------------------------------------------------------------------
    /**
     * A span is the most elementary element that can be rendered.
     * It is composed of an optional body of text and an optional list
     * of children (other spans). Each span can be decorated with
     * CSS classes and style attributes.
     *
     * @param content the items 'contained' by this node
     * @param classes list of classes attributes associated with this node


     * @property  type - For example, `'command'`, `'mrel'`, etc...
     * @property classes - A string of space separated CSS classes
     * associated with this element
     * @property cssId - A CSS ID assigned to this span (optional)
     * @property children - An array, potentially empty, of spans which
     * this span encloses
     * @property body - Content of this span. Can be empty.
     * @property style - A set of key/value pairs specifying CSS properties
     * associated with this element.
     * @property height - The measurement from baseline to top, in em.
     * @property depth - The measurement from baseline to bottom, in em.
     * @property width
     */
    class Span {
        constructor(content, classes = '', type = '') {
            // CLASSES
            this.classes = classes;
            // CONTENT
            if (isArray(content)) {
                // Check if isArray first, since an array is also an object
                // Flatten it (i.e. [[a1, a2], b1, b2] -> [a1, a2, b1, b2]
                this.children = [].concat(...content);
            }
            else if (typeof content === 'string') {
                this.body = content;
            }
            else if (content && typeof content === 'object') {
                this.children = [content];
            }
            this.type = type;
            // STYLE
            // CSS style, as an array of key value pairs.
            // Use this.setStyle() to modify it.
            this.style = null;
            // Calculate the dimensions of this span based on its children
            this.updateDimensions();
        }
        /**
         * Update the dimensions of this node based on its children:
         * - height: distance from bottom to top
         * - depth: distance from bottom to baseline
         * - maxFontSize: a size multiplier (typically set with commands such as \huge)
         */
        updateDimensions() {
            let height = 0.0;
            let depth = 0.0;
            let maxFontSize = 1.0;
            if (this.children) {
                this.children.forEach((x) => {
                    if (x.height > height)
                        height = x.height;
                    if (x.depth > depth)
                        depth = x.depth;
                    if (x.maxFontSize > maxFontSize)
                        maxFontSize = x.maxFontSize;
                });
            }
            else if (typeof this.body === 'string') {
                height = METRICS.baselineskip;
                depth = 0;
            }
            this.height = height;
            this.depth = depth;
            this.maxFontSize = maxFontSize;
        }
        selected(isSelected) {
            if (isSelected && !/ML__selected/.test(this.classes)) {
                if (this.classes.length > 0)
                    this.classes += ' ';
                this.classes += 'ML__selected';
            }
            if (!isSelected && /ML__selected/.test(this.classes)) {
                this.classes = this.classes.replace('ML__selected', '');
            }
            if (this.children) {
                this.children.forEach((x) => x.selected(isSelected));
            }
        }
        applyStyle(style) {
            if (!style)
                return;
            //
            // 1. Apply color
            //
            if (style.color) {
                if (style.color !== 'none') {
                    this.setStyle('color', style.color);
                }
                else {
                    this.setStyle('color', '');
                }
            }
            if (style.backgroundColor) {
                if (style.backgroundColor !== 'none') {
                    this.setStyle('background-color', style.backgroundColor);
                }
                else {
                    this.setStyle('background-color', '');
                }
            }
            //
            // 2. Add any custom style classes
            //
            if (style.cssClass) {
                this.classes += ' ' + style.cssClass;
            }
            // If the body is null (for example for a line), we're done.
            if (!this.body)
                return;
            //
            // 3. Determine the font family (i.e. 'ams', 'mathcal', etc...)
            // and apply styling by adding appropriate classes to the atom
            //
            console.assert(typeof this.body === 'string');
            const fontName = applyStyle(this, style);
            //
            // 5. Get the metrics information
            //
            if (this.body && fontName) {
                this.maxFontSize =
                    {
                        size1: 0.5,
                        size2: 0.7,
                        size3: 0.8,
                        size4: 0.9,
                        size5: 1.0,
                        size6: 1.2,
                        size7: 1.44,
                        size8: 1.73,
                        size9: 2.07,
                        size10: 2.49,
                    }[style.fontSize] || 1.0;
                this.height = 0.0;
                this.depth = 0.0;
                this.skew = 0.0;
                this.italic = 0.0;
                for (let i = 0; i < this.body.length; i++) {
                    const metrics = getCharacterMetrics(this.body.charAt(i), fontName);
                    // If we were able to get metrics info for this character, store it.
                    if (metrics) {
                        this.height = Math.max(this.height, metrics.height);
                        this.depth = Math.max(this.depth, metrics.depth);
                        this.skew = metrics.skew;
                        this.italic = metrics.italic;
                    }
                }
            }
        }
        /**
         * Set the value of a CSS property associated with this span.
         * For example, setStyle('border-right', 5.6, 'em');
         *
         * @param prop the CSS property to set
         * @param value a series of strings and numbers that will be concatenated.
         */
        setStyle(prop, ...value) {
            const v = toString(value);
            if (v.length > 0) {
                if (!this.style)
                    this.style = {};
                this.style[prop] = v;
            }
        }
        setTop(top) {
            if (top && top !== 0) {
                if (!this.style)
                    this.style = {};
                this.style['top'] = toString(top) + 'em';
                this.height -= top;
                this.depth += top;
            }
        }
        setLeft(left) {
            if (left && left !== 0) {
                if (!this.style)
                    this.style = {};
                this.style['margin-left'] = toString(left) + 'em';
            }
        }
        setRight(right) {
            if (right && right !== 0) {
                if (!this.style)
                    this.style = {};
                this.style['margin-right'] = toString(right) + 'em';
            }
        }
        setWidth(width) {
            if (width && width !== 0) {
                if (!this.style)
                    this.style = {};
                this.style['width'] = toString(width) + 'em';
            }
        }
        /**
         * Generate the HTML markup to represent this span.
         *
         * @param hskip - Space (in mu, 1/18em) to leave on the left side
         * of the span. Implemented as a Unicode character if possible, a margin-left otherwise.
         * This is used to adjust the inter-spacing between spans of different types,
         * e.g. 'bin' and 'rel', according to the TeX rules (TexBook p.170)
         *
         * @param hscale - If a value is provided, the margins are scaled by
         * this factor.
         *
         * @return HTML markup
         */
        toMarkup(hskip = 1.0, hscale = 1.0) {
            var _a, _b, _c, _d, _e;
            let result = '';
            let body = this.body || '';
            //
            // 1. Calculate the spacing between atoms, based on their type
            // (`mord`, `mbin`, `mrel`, etc...)
            //
            if (this.children) {
                let previousType = 'none';
                for (let i = 0; i < this.children.length; i++) {
                    const child = this.children[i];
                    let spacing = 0;
                    const type = getEffectiveType(this.children, i);
                    const combinedType = previousType + '+' + type;
                    if (child.isTight) {
                        spacing = (_a = INTER_ATOM_TIGHT_SPACING[combinedType]) !== null && _a !== void 0 ? _a : 0;
                    }
                    else {
                        spacing = (_b = INTER_ATOM_SPACING[combinedType]) !== null && _b !== void 0 ? _b : 0;
                    }
                    body += child.toMarkup(spacing, hscale);
                    previousType = type;
                }
            }
            // Collapse 'empty' spans
            if ((body === '\u200b' || (!body && !this.svgBody)) &&
                (!this.classes || this.classes === 'ML__selected') &&
                !this.cssId &&
                !this.style &&
                !this.svgOverlay) {
                result = '';
            }
            else {
                // Note: We can't omit the tag, even if it has no class and no style,
                // as some layouts (vlist) depends on the presence of the tag to function
                result = '<span';
                if (this.cssId) {
                    result += ' id="' + this.cssId + '" ';
                }
                if (this.attributes) {
                    result +=
                        ' ' +
                            Object.keys(this.attributes)
                                .map((attribute) => `${attribute}="${this.attributes[attribute]}"`)
                                .join(' ');
                }
                const classes = this.classes.split(' ');
                // Add the type (mbin, mrel, etc...) if specified
                classes.push((_c = {
                    command: 'ML__command',
                    placeholder: 'ML__placeholder',
                    error: 'ML__error',
                }[this.type]) !== null && _c !== void 0 ? _c : '');
                if (this.caret && this.type === 'command') {
                    classes.push('ML__command-caret');
                }
                // Remove duplicate and empty classes
                let classList = '';
                if (classes.length > 1) {
                    classList = classes
                        .filter((x, e, a) => {
                        return x.length > 0 && a.indexOf(x) === e;
                    })
                        .join(' ');
                }
                else {
                    classList = classes[0];
                }
                if (classList.length > 0) {
                    result += ` class="${classList}"`;
                }
                // If a `hskip` value was provided, add it to the margin-left
                if (hskip) {
                    if ((_d = this.style) === null || _d === void 0 ? void 0 : _d['margin-left']) {
                        // There was already a margin, add to it
                        this.style['margin-left'] =
                            toString(parseFloat(this.style['margin-left']) + hskip / 18) + 'em';
                    }
                    else {
                        if (!this.style)
                            this.style = {};
                        this.style['margin-left'] = toString(hskip / 18) + 'em';
                    }
                }
                if (this.style) {
                    let styleString = '';
                    const isSelected = /ML__selected/.test(this.classes);
                    for (const style in this.style) {
                        if (Object.prototype.hasOwnProperty.call(this.style, style)) {
                            // Render the style property, except the background
                            // of selected spans
                            if (style !== 'background-color' || !isSelected) {
                                styleString +=
                                    style + ':' + this.style[style] + ';';
                            }
                        }
                    }
                    if (styleString.length > 0) {
                        result += ' style="' + styleString + '"';
                    }
                }
                result += '>';
                // If there is some SVG markup associated with this span,
                // include it now
                if (this.svgBody) {
                    result += svgBodyToMarkup(this.svgBody);
                }
                else if (this.svgOverlay) {
                    result += '<span style="';
                    result += 'display: inline-block;';
                    result += 'height:' + (this.height + this.depth) + 'em;';
                    result += 'vertical-align:' + this.depth + 'em;';
                    result += '">';
                    result += body;
                    result += '</span>';
                    result += '<svg ';
                    result += 'style="position:absolute;';
                    result += 'overflow:overlay;';
                    result += 'height:' + (this.height + this.depth) + 'em;';
                    if ((_e = this.style) === null || _e === void 0 ? void 0 : _e.padding) {
                        result += 'top:' + this.style.padding + ';';
                        result += 'left:' + this.style.padding + ';';
                        result +=
                            'width:calc(100% - 2 * ' + this.style.padding + ' );';
                    }
                    else {
                        result += 'top:0;';
                        result += 'left:0;';
                        result += 'width:100%;';
                    }
                    result += 'z-index:2;';
                    result += '"';
                    if (this.svgStyle) {
                        result += ' style="' + this.svgStyle + '"';
                    }
                    result += '>';
                    result += this.svgOverlay;
                    result += '</svg>';
                }
                else {
                    result += body;
                }
                result = result + '</span>';
            }
            if (this.caret && this.type !== 'command') {
                if (this.caret === 'text') {
                    result = result + '<span class="ML__text-caret"></span>';
                }
                else {
                    result = result + '<span class="ML__caret"></span>';
                }
            }
            return result;
        }
        /**
         * Can this span be coalesced with 'span'?
         * This is used to 'coalesce' (i.e. group together) a series of spans that are
         * identical except for their value, and to avoid generating redundant spans.
         * That is: '12' ->
         *      "<span class='mord mathrm'>12</span>"
         * rather than:
         *      "<span class='mord mathrm'>1</span><span class='mord mathrm'>2</span>"
         */
        tryCoalesceWith(span) {
            // Don't coalesce if the tag or type are different
            if (this.type !== span.type)
                return false;
            // Don't coalesce consecutive errors, placeholders or commands
            if (this.type === 'error' ||
                this.type === 'placeholder' ||
                this.type === 'command') {
                return false;
            }
            // Don't coalesce if some of the content is SVG
            if (this.svgBody || !this.body)
                return false;
            if (span.svgBody || !span.body)
                return false;
            // If this span or the candidate span have children, we can't
            // coalesce them, but we'll try to coalesce their children
            const hasChildren = this.children && this.children.length > 0;
            const spanHasChildren = span.children && span.children.length > 0;
            if (hasChildren || spanHasChildren)
                return false;
            // If they have a different number of styles, can't coalesce
            const thisStyleCount = this.style ? this.style.length : 0;
            const spanStyleCount = span.style ? span.style.length : 0;
            if (thisStyleCount !== spanStyleCount)
                return false;
            // For the purpose of our comparison,
            // any 'empty' classes (whitespace)
            const classes = this.classes.trim().replace(/\s+/g, ' ').split(' ');
            const spanClasses = span.classes.trim().replace(/\s+/g, ' ').split(' ');
            // If they have a different number of classes, can't coalesce
            if (classes.length !== spanClasses.length)
                return false;
            // OK, let's do the more expensive comparison now.
            // If they have different classes, can't coalesce
            classes.sort();
            spanClasses.sort();
            for (let i = 0; i < classes.length; i++) {
                // Don't coalesce vertical separators
                // (used in column formating with {l||r} for example
                if (classes[i] === 'vertical-separator')
                    return false;
                if (classes[i] !== spanClasses[i])
                    return false;
            }
            // If the styles are different, can't coalesce
            if (this.style && span.style) {
                for (const style in this.style) {
                    if (Object.prototype.hasOwnProperty.call(this.style, style) &&
                        Object.prototype.hasOwnProperty.call(span.style, style)) {
                        if (this.style[style] !== span.style[style])
                            return false;
                    }
                }
            }
            // OK, the attributes of those spans are compatible.
            // Merge span into this
            this.body += span.body;
            this.height = Math.max(this.height, span.height);
            this.depth = Math.max(this.depth, span.depth);
            this.maxFontSize = Math.max(this.maxFontSize, span.maxFontSize);
            // The italic correction for the coalesced spans is the
            // italic correction of the last span.
            this.italic = span.italic;
            return true;
        }
    }
    function getEffectiveType(xs, i) {
        var _a, _b, _c, _d, _e;
        if (i < 0 || i >= xs.length)
            return 'none';
        const prevType = (_b = (_a = xs[i - 1]) === null || _a === void 0 ? void 0 : _a.type) !== null && _b !== void 0 ? _b : 'none';
        const nextType = (_d = (_c = xs[i + 1]) === null || _c === void 0 ? void 0 : _c.type) !== null && _d !== void 0 ? _d : 'none';
        let result = (_e = xs[i].type) !== null && _e !== void 0 ? _e : 'none';
        if (result === 'first')
            return 'none';
        if (result === 'textord')
            return 'mord';
        if (result === 'mbin') {
            // If a `mbin` span, i.e. "+" is after or before spans
            // of a certain type, consider it to be a `mord` instead.
            // This is to handle proper spacing of, e.g. "-4" vs "1-4"
            if (/first|none|mrel|mpunct|mopen|mbin|mop/.test(prevType) ||
                /none|mrel|mpunct|mclose/.test(nextType)) {
                result = 'mord';
            }
        }
        return result;
    }
    /**
     * Attempts to coalesce (merge) spans, for example consecutive text spans.
     * Return a new tree with coalesced spans.
     *
     */
    function coalesce(spans) {
        if (!spans || spans.length === 0)
            return [];
        spans[0].children = coalesce(spans[0].children);
        const result = [spans[0]];
        for (let i = 1; i < spans.length; i++) {
            if (!result[result.length - 1].tryCoalesceWith(spans[i])) {
                spans[i].children = coalesce(spans[i].children);
                result.push(spans[i]);
            }
        }
        return result;
    }
    //----------------------------------------------------------------------------
    // UTILITY FUNCTIONS
    //----------------------------------------------------------------------------
    function height(spans) {
        if (!spans)
            return 0;
        if (isArray(spans)) {
            return spans.reduce((acc, x) => Math.max(acc, x.height), 0);
        }
        return spans.height;
    }
    function depth(spans) {
        if (!spans)
            return 0;
        if (isArray(spans)) {
            return spans.reduce((acc, x) => Math.max(acc, x.depth), 0);
        }
        return spans.depth;
    }
    function skew(spans) {
        if (!spans)
            return 0;
        if (isArray(spans)) {
            let result = 0;
            for (const span of spans) {
                result += span.skew || 0;
            }
            return result;
        }
        return spans.skew;
    }
    function italic(spans) {
        if (!spans)
            return 0;
        if (isArray(spans)) {
            return spans[spans.length - 1].italic;
        }
        return spans.italic;
    }
    /**
     * Make an element made of a sequence of children with classes
     * @param content the items 'contained' by this node
     * @param classes list of classes attributes associated with this node
     */
    function makeSpan(content, classes = '', type = '') {
        if (isArray(content)) {
            const c = content.filter((x) => Boolean(x));
            if (c.length === 1) {
                return new Span(c[0], classes, type);
            }
            return new Span(c, classes, type);
        }
        return new Span(content, classes, type);
    }
    function makeSymbol(fontFamily, symbol, classes = '', type = '') {
        const result = new Span(symbol, classes, type);
        const metrics = getCharacterMetrics(symbol, fontFamily);
        result.height = metrics.height;
        result.depth = metrics.depth;
        result.skew = metrics.skew;
        result.italic = metrics.italic;
        result.setRight(result.italic);
        return result;
    }
    /**
     * Makes an element placed in each of the vlist elements to ensure that each
     * element has the same max font size. To do this, we create a zero-width space
     * with the correct font size.
    //  * Note: without this, even when fontSize = 0, the fraction bar is no
    //  * longer positioned correctly
     */
    function makeFontSizer(context, fontSize) {
        const fontSizeAdjustment = fontSize
            ? fontSize / context.mathstyle.sizeMultiplier
            : 0;
        const fontSizeInner = new Span('\u200b'); // ZERO WIDTH SPACE
        fontSizeInner.depth = 0;
        fontSizeInner.height = 0;
        if (fontSizeAdjustment !== 1) {
            fontSizeInner.setStyle('font-size', fontSizeAdjustment, fontSizeAdjustment > 0 ? 'em' : '');
            fontSizeInner.attributes = {
                'aria-hidden': 'true',
            };
        }
        if (context.size !== 'size5') {
            return new Span(fontSizeInner, 'fontsize-ensurer reset-' + context.size + ' size5');
        }
        return fontSizeAdjustment !== 0 ? fontSizeInner : null;
    }
    function makeStruts(content, classes = '', type = '') {
        const topStrut = makeSpan('', 'ML__strut');
        topStrut.setStyle('height', height(content), 'em');
        let bottomStrut;
        if (depth(content) !== 0) {
            bottomStrut = makeSpan('', 'ML__strut--bottom');
            bottomStrut.setStyle('height', height(content) + depth(content), 'em');
            bottomStrut.setStyle('vertical-align', -depth(content), 'em');
        }
        let struts;
        if (isArray(content)) {
            struts = [topStrut, bottomStrut, ...content];
        }
        else {
            struts = [topStrut, bottomStrut, content];
        }
        const result = makeSpan(struts, classes, type);
        // result.setStyle('display', 'inline-block');
        return result;
    }
    function makeStyleWrap(type, children, fromStyle, toStyle, classes) {
        classes = classes || '';
        classes += ' style-wrap ';
        const result = makeHlist(children, classes + fromStyle.adjustTo(toStyle));
        result.type = type;
        const multiplier = toStyle.sizeMultiplier / fromStyle.sizeMultiplier;
        result.height *= multiplier; // @revisit. Use spanHeight()? is height set at this point?
        result.depth *= multiplier;
        result.maxFontSize = toStyle.sizeMultiplier;
        return result;
    }
    /**
     * Add some SVG markup to be overlaid on top of the span
     */
    function addSVGOverlay(body, svgMarkup, svgStyle) {
        body.svgOverlay = svgMarkup;
        body.svgStyle = svgStyle;
        return body;
    }
    function makeHlist(spans, classes = '', type = '') {
        // Note: do not try to optimize and avoid creating the span below
        // Some layouts, e.g. vlist, depend on that span being there.
        const result = new Span(spans, classes, type);
        let multiplier = 1.0;
        if (spans instanceof Span) {
            multiplier = spans.maxFontSize;
        }
        else {
            multiplier = spans.reduce((acc, x) => Math.max(acc, x.maxFontSize), multiplier);
        }
        result.height *= multiplier;
        result.depth *= multiplier;
        return result;
    }
    /**
     * Create a new span of type `vlist`, a set of vertically stacked items
     * @param elements  An array of Span and integer. The integer can be either some kerning information
     * or the value of an individual shift of the preceding child if in 'individualShift' mode
     * @param pos The method that will be used to position the elements in the vlist.
     *
     * One of:
     * - `"individualShift"`: each child must be followed by a number indicating how much to shift it (i.e. moved downwards)
     * - `"top"`: posData specifies the topmost point of the vlist (>0 move up)
     * - `"bottom"`: posData specifies the bottommost point of the vlist (>0 move down)
     * - `"shift"`: the baseline of the vlist will be positioned posData away from the baseline
     * of the first child. (>0 moves down)
     */
    function makeVlist(context, elements, pos = 'shift', posData = 0) {
        let listDepth = 0;
        let currPos = 0;
        pos = pos || 'shift';
        // Normalize the elements so that they're all either a number or
        // a single span. If a child is an array of spans,
        // wrap it in a span
        for (let i = 0; i < elements.length; i++) {
            if (isArray(elements[i])) {
                if (elements[i].length === 1) {
                    // If that's an array made up of a single span, use that span
                    elements[i] = elements[i][0];
                }
                else {
                    // Otherwise, wrap it in a span
                    elements[i] = makeSpan(elements[i]);
                }
            }
        }
        if (pos === 'shift') {
            console.assert(elements[0] instanceof Span);
            listDepth = -elements[0].depth - posData;
        }
        else if (pos === 'bottom') {
            listDepth = -posData;
        }
        else if (pos === 'top') {
            let bottom = posData;
            for (const element of elements) {
                if (element instanceof Span) {
                    // It's a Span, use the dimension data
                    bottom -= element.height + element.depth;
                }
                else if (typeof element === 'number') {
                    // It's a kern adjustment
                    bottom -= element;
                }
            }
            listDepth = bottom;
        }
        else if (pos === 'individualShift') {
            // Individual adjustment to each elements.
            // The elements list is made up of a Span followed
            // by a shift adjustment as an integer
            const originalElements = elements;
            elements = [originalElements[0]];
            // Add in kerns to the list of elements to get each element to be
            // shifted to the correct specified shift
            console.assert(originalElements[0] instanceof Span);
            listDepth = -originalElements[1] - originalElements[0].depth;
            currPos = listDepth;
            for (let i = 2; i < originalElements.length; i += 2) {
                console.assert(originalElements[i] instanceof Span);
                const diff = -originalElements[i + 1] -
                    currPos -
                    originalElements[i].depth;
                currPos = currPos + diff;
                console.assert(originalElements[i - 2] instanceof Span);
                const kern = diff -
                    (originalElements[i - 2].height +
                        originalElements[i - 2].depth);
                elements.push(kern);
                elements.push(originalElements[i]);
            }
        }
        else {
            console.assert(false, 'makeVList with unknown method: "' + pos + '"');
        }
        // Make the fontSizer
        let maxFontSize = 1.0;
        for (const element of elements) {
            if (element instanceof Span) {
                maxFontSize = Math.max(maxFontSize, element.maxFontSize);
            }
        }
        const fontSizer = makeFontSizer(context, maxFontSize);
        const newElements = [];
        currPos = listDepth;
        for (const element of elements) {
            if (typeof element === 'number') {
                // It's a kern adjustment
                currPos += element;
            }
            else if (element instanceof Span) {
                const wrap = makeSpan([fontSizer, element]);
                wrap.setTop(-element.depth - currPos);
                newElements.push(wrap);
                currPos += element.height + element.depth;
            }
        }
        const result = makeSpan(newElements, 'vlist');
        // Fix the final height and depth, in case there were kerns at the ends
        // since makeSpan won't take that into account.
        result.depth = Math.max(listDepth, depth(result) || 0);
        result.height = Math.max(-currPos, height(result) || 0);
        return result;
    }
    /**
     * Create a span that consist of a (stretchy) SVG element
     *
     * @param classes list of classes attributes associated with this node
     */
    function makeSVGSpan(svgBodyName) {
        const span = new Span(null);
        span.svgBody = svgBodyName;
        span.height = svgBodyHeight(svgBodyName) / 2;
        span.depth = span.height;
        return span;
    }

    const MATH_SYMBOLS = {};
    // Map a character to some corresponding Latex
    // This is used for some characters such as ² SUPERSCRIPT TWO.
    // This is also an opportunity to specify the prefered form when
    // a unicode character is encountered that maps to multiple commands,
    // for example ≠ could map either to \ne or \neq
    // The table will also be populated by any registered symbol
    // from MATH_SYMBOLS
    // prettier-ignore
    const REVERSE_MATH_SYMBOLS = {
        '<': '<',
        '>': '>',
        'o': 'o',
        '&': '\\&',
        '{': '\\{',
        '}': '\\}',
        '[': '\\lbrack',
        ']': '\\rbrack',
        ':': '\\colon',
        '\u00a0': '~',
        '\u00ac': '\\neg',
        '\u00b7': '\\cdot',
        '\u00bc': '\\frac{1}{4}',
        '\u00bd': '\\frac{1}{2}',
        '\u00be': '\\frac{3}{4}',
        '\u2070': '^{0}',
        '\u2071': '^{i}',
        '\u00b9': '^{1}',
        '\u00b2': '^{2}',
        '\u00b3': '^{3}',
        '\u2020': '\\dagger',
        '\u2021': '\\ddagger',
        '\u2026': '\\ldots',
        '\u2074': '^{4}',
        '\u2075': '^{5}',
        '\u2076': '^{6}',
        '\u2077': '^{7}',
        '\u2078': '^{8}',
        '\u2079': '^{9}',
        '\u207a': '^{+}',
        '\u207b': '^{-}',
        '\u207c': '^{=}',
        '\u207f': '^{n}',
        '\u2080': '_{0}',
        '\u2081': '_{1}',
        '\u2082': '_{2}',
        '\u2083': '_{3}',
        '\u2084': '_{4}',
        '\u2085': '_{5}',
        '\u2086': '_{6}',
        '\u2087': '_{7}',
        '\u2088': '_{8}',
        '\u2089': '_{9}',
        '\u208a': '_{+}',
        '\u208b': '_{-}',
        '\u208c': '_{=}',
        '\u2090': '_{a}',
        '\u2091': '_{e}',
        '\u2092': '_{o}',
        '\u2093': '_{x}',
        '\u2032': '\\prime',
        '\'': '\\prime',
        '\u2190': '\\gets',
        '\u2192': '\\to',
        '\u25b3': '\\triangle',
        '\u25bd': '\\triangledown',
        '\u220b': '\\owns',
        '\u2217': '\\ast',
        '\u2223': '\\vert',
        '\u2225': '\\Vert',
        '\u2227': '\\land',
        '\u2228': '\\lor',
        '\u22c5': '\\cdot',
        '\u22c8': '\\bowtie',
        '\u2260': '\\ne',
        '\u2264': '\\le',
        '\u2265': '\\ge',
        '\u22a5': '\\bot',
        '\u27f7': '\\biconditional',
        '\u27f8': '\\impliedby',
        '\u27f9': '\\implies',
        '\u2102': '\\C',
        '\u2115': '\\N',
        '\u2119': '\\P',
        '\u211a': '\\Q',
        '\u211d': '\\R',
        '\u2124': '\\Z',
    };
    const FUNCTIONS = {};
    const ENVIRONMENTS = {};
    const MACROS = {
        iff: '\\;\u27fa\\;',
        nicefrac: '^{#1}\\!\\!/\\!_{#2}',
        // From bracket.sty, Dirac notation
        bra: '\\mathinner{\\langle{#1}|}',
        ket: '\\mathinner{|{#1}\\rangle}',
        braket: '\\mathinner{\\langle{#1}\\rangle}',
        set: '\\mathinner{\\lbrace #1 \\rbrace}',
        Bra: '\\left\\langle #1\\right|',
        Ket: '\\left|#1\\right\\rangle',
        Braket: '\\left\\langle{#1}\\right\\rangle',
        Set: '\\left\\lbrace #1 \\right\\rbrace',
        // Proof Wiki
        rd: '\\mathrm{d}',
        rD: '\\mathrm{D}',
        // From Wolfram Alpha
        doubleStruckCapitalN: '\\mathbb{N}',
        doubleStruckCapitalR: '\\mathbb{R}',
        doubleStruckCapitalQ: '\\mathbb{Q}',
        doubleStruckCapitalZ: '\\mathbb{Z}',
        doubleStruckCapitalP: '\\mathbb{P}',
        scriptCapitalE: '\\mathscr{E}',
        scriptCapitalH: '\\mathscr{H}',
        scriptCapitalL: '\\mathscr{L}',
        gothicCapitalC: '\\mathfrak{C}',
        gothicCapitalH: '\\mathfrak{H}',
        gothicCapitalI: '\\mathfrak{I}',
        gothicCapitalR: '\\mathfrak{R}',
        imaginaryI: '\\mathrm{i}',
        imaginaryJ: '\\mathrm{j}',
        exponentialE: '\\mathrm{e}',
        differentialD: '\\mathrm{d}',
        capitalDifferentialD: '\\mathrm{D}',
    };
    const RIGHT_DELIM = {
        '(': ')',
        '{': '}',
        '[': ']',
        '|': '|',
        '\\lbrace': '\\rbrace',
        '\\{': '\\}',
        '\\langle': '\\rangle',
        '\\lfloor': '\\rfloor',
        '\\lceil': '\\rceil',
        '\\vert': '\\vert',
        '\\lvert': '\\rvert',
        '\\Vert': '\\Vert',
        '\\lVert': '\\rVert',
        '\\lbrack': '\\rbrack',
        '\\ulcorner': '\\urcorner',
        '\\llcorner': '\\lrcorner',
        '\\lgroup': '\\rgroup',
        '\\lmoustache': '\\rmoustache',
    };
    // Body-text symbols
    // See http://ctan.mirrors.hoobly.com/info/symbols/comprehensive/symbols-a4.pdf, p14
    const TEXT_SYMBOLS = {
        '\\#': '\u0023',
        '\\&': '\u0026',
        '\\$': '$',
        '\\%': '%',
        '\\_': '_',
        '\\euro': '\u20AC',
        '\\maltese': '\u2720',
        '\\{': '{',
        '\\}': '}',
        '\\nobreakspace': '\u00A0',
        '\\ldots': '\u2026',
        '\\textellipsis': '\u2026',
        '\\backslash': '\\',
        '`': '\u2018',
        "'": '\u2019',
        '``': '\u201c',
        "''": '\u201d',
        '\\degree': '\u00b0',
        '\\textasciicircum': '^',
        '\\textasciitilde': '~',
        '\\textasteriskcentered': '*',
        '\\textbackslash': '\\',
        '\\textbraceleft': '{',
        '\\textbraceright': '}',
        '\\textbullet': '•',
        '\\textdollar': '$',
        '\\textsterling': '£',
        '\\textdagger': '\u2020',
        '\\textdaggerdbl': '\u2021',
        '–': '\u2013',
        '—': '\u2014',
        '‘': '\u2018',
        '’': '\u2019',
        '“': '\u201C',
        '”': '\u201D',
        '"': '\u201D',
        '\\ss': '\u00df',
        '\\ae': '\u00E6',
        '\\oe': '\u0153',
        '\\AE': '\u00c6',
        '\\OE': '\u0152',
        '\\O': '\u00d8',
        '\\i': '\u0131',
        '\\j': '\u0237',
        '\\aa': '\u00e5',
        '\\AA': '\u00c5',
    };
    const COMMAND_MODE_CHARACTERS = /[a-zA-Z0-9!@*()-=+{}[\]\\';:?/.,~<>`|'$%#&^_" ]/;
    // Word boundaries for Cyrillic, Polish, French, German, Italian
    // and Spanish. We use \p{L} (Unicode property escapes: "Letter")
    // but Firefox doesn't support it
    // (https://bugzilla.mozilla.org/show_bug.cgi?id=1361876). Booo...
    // See also https://stackoverflow.com/questions/26133593/using-regex-to-match-international-unicode-alphanumeric-characters-in-javascript
    const LETTER = typeof navigator !== 'undefined' &&
        /firefox|edge|Trident/i.test(navigator.userAgent)
        ? /[a-zA-ZаАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяĄąĆćĘęŁłŃńÓóŚśŹźŻżàâäôéèëêïîçùûüÿæœÀÂÄÔÉÈËÊÏÎŸÇÙÛÜÆŒäöüßÄÖÜẞàèéìíîòóùúÀÈÉÌÍÎÒÓÙÚáéíñóúüÁÉÍÑÓÚÜ]/
        : new RegExp('\\p{Letter}', 'u');
    const LETTER_AND_DIGITS = typeof navigator !== 'undefined' &&
        /firefox|edge|Trident/i.test(navigator.userAgent)
        ? /[0-9a-zA-ZаАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяĄąĆćĘęŁłŃńÓóŚśŹźŻżàâäôéèëêïîçùûüÿæœÀÂÄÔÉÈËÊÏÎŸÇÙÛÜÆŒäöüßÄÖÜẞàèéìíîòóùúÀÈÉÌÍÎÒÓÙÚáéíñóúüÁÉÍÑÓÚÜ]/
        : new RegExp('[0-9\\p{Letter}]', 'u');
    /**
     * @param symbol    The LaTeX command for this symbol, for
     * example `\alpha` or `+`
     */
    function defineSymbol(symbol, value, type = 'mord', variant = '') {
        MATH_SYMBOLS[symbol] = {
            type,
            variant,
            value,
        };
        if (!REVERSE_MATH_SYMBOLS[value] && !variant) {
            REVERSE_MATH_SYMBOLS[value] = symbol;
        }
        // We accept all math symbols in text mode as well
        // which is a bit more permissive than TeX
        TEXT_SYMBOLS[symbol] = value;
    }
    /**
     * Define a set of single-character symbols as 'mord' symbols.
     * @param string a string of single character symbols
     */
    function defineSymbols(string) {
        for (let i = 0; i < string.length; i++) {
            const ch = string.charAt(i);
            defineSymbol(ch, ch);
        }
    }
    /**
     * Define a set of single-character symbols as a range of Unicode codepoints
     * @param from First Unicode codepoint
     * @param to Last Unicode codepoint
     */
    function defineSymbolRange(from, to) {
        for (let i = from; i <= to; i++) {
            const ch = String.fromCodePoint(i);
            defineSymbol(ch, ch);
        }
    }
    /**
     * Given a character, return a LaTeX expression matching its Unicode codepoint.
     * If there is a matching symbol (e.g. \alpha) it is returned.
     */
    function charToLatex(parseMode, s) {
        if (parseMode === 'math') {
            return REVERSE_MATH_SYMBOLS[s] || s;
        }
        if (parseMode === 'text') {
            return (Object.keys(TEXT_SYMBOLS).find((x) => TEXT_SYMBOLS[x] === s) || s);
        }
        return s;
    }
    /* Some symbols in the MATHEMATICAL ALPHANUMERICAL SYMBOLS block had
       been previously defined in other blocks. Remap them */
    const MATH_LETTER_EXCEPTIONS = {
        0x1d455: 0x0210e,
        0x1d49d: 0x0212c,
        0x1d4a0: 0x02130,
        0x1d4a1: 0x02131,
        0x1d4a3: 0x0210b,
        0x1d4a4: 0x02110,
        0x1d4a7: 0x02112,
        0x1d4a8: 0x02133,
        0x1d4ad: 0x0211b,
        0x1d4ba: 0x0212f,
        0x1d4bc: 0x0210a,
        0x1d4c4: 0x02134,
        0x1d506: 0x0212d,
        0x1d50b: 0x0210c,
        0x1d50c: 0x02111,
        0x1d515: 0x0211c,
        0x1d51d: 0x02128,
        0x1d53a: 0x02102,
        0x1d53f: 0x0210d,
        0x1d545: 0x02115,
        0x1d547: 0x02119,
        0x1d548: 0x0211a,
        0x1d549: 0x0211d,
        0x1d551: 0x02124,
    };
    const MATH_UNICODE_BLOCKS = [
        { start: 0x1d400, len: 26, offset: 65, style: 'bold' },
        { start: 0x1d41a, len: 26, offset: 97, style: 'bold' },
        { start: 0x1d434, len: 26, offset: 65, style: 'italic' },
        { start: 0x1d44e, len: 26, offset: 97, style: 'italic' },
        { start: 0x1d468, len: 26, offset: 65, style: 'bolditalic' },
        { start: 0x1d482, len: 26, offset: 97, style: 'bolditalic' },
        { start: 0x1d49c, len: 26, offset: 65, variant: 'script' },
        { start: 0x1d4b6, len: 26, offset: 97, variant: 'script' },
        { start: 0x1d4d0, len: 26, offset: 65, variant: 'script', style: 'bold' },
        { start: 0x1d4ea, len: 26, offset: 97, variant: 'script', style: 'bold' },
        { start: 0x1d504, len: 26, offset: 65, variant: 'fraktur' },
        { start: 0x1d51e, len: 26, offset: 97, variant: 'fraktur' },
        { start: 0x1d56c, len: 26, offset: 65, variant: 'fraktur', style: 'bold' },
        { start: 0x1d586, len: 26, offset: 97, variant: 'fraktur', style: 'bold' },
        { start: 0x1d538, len: 26, offset: 65, variant: 'double-struck' },
        { start: 0x1d552, len: 26, offset: 97, variant: 'double-struck' },
        { start: 0x1d5a0, len: 26, offset: 65, variant: 'sans-serif' },
        { start: 0x1d5ba, len: 26, offset: 97, variant: 'sans-serif' },
        {
            start: 0x1d5d4,
            len: 26,
            offset: 65,
            variant: 'sans-serif',
            style: 'bold',
        },
        {
            start: 0x1d5ee,
            len: 26,
            offset: 97,
            variant: 'sans-serif',
            style: 'bold',
        },
        {
            start: 0x1d608,
            len: 26,
            offset: 65,
            variant: 'sans-serif',
            style: 'italic',
        },
        {
            start: 0x1d622,
            len: 26,
            offset: 97,
            variant: 'sans-serif',
            style: 'italic',
        },
        {
            start: 0x1d63c,
            len: 26,
            offset: 65,
            variant: 'sans-serif',
            style: 'bolditalic',
        },
        {
            start: 0x1d656,
            len: 26,
            offset: 97,
            variant: 'sans-serif',
            style: 'bolditalic',
        },
        { start: 0x1d670, len: 26, offset: 65, variant: 'monospace' },
        { start: 0x1d68a, len: 26, offset: 97, variant: 'monospace' },
        { start: 0x1d6a8, len: 25, offset: 0x391, style: 'bold' },
        { start: 0x1d6c2, len: 25, offset: 0x3b1, style: 'bold' },
        { start: 0x1d6e2, len: 25, offset: 0x391, style: 'italic' },
        { start: 0x1d6fc, len: 25, offset: 0x3b1, style: 'italic' },
        { start: 0x1d71c, len: 25, offset: 0x391, style: 'bolditalic' },
        { start: 0x1d736, len: 25, offset: 0x3b1, style: 'bolditalic' },
        {
            start: 0x1d756,
            len: 25,
            offset: 0x391,
            variant: 'sans-serif',
            style: 'bold',
        },
        {
            start: 0x1d770,
            len: 25,
            offset: 0x3b1,
            variant: 'sans-serif',
            style: 'bold',
        },
        {
            start: 0x1d790,
            len: 25,
            offset: 0x391,
            variant: 'sans-serif',
            style: 'bolditalic',
        },
        {
            start: 0x1d7aa,
            len: 25,
            offset: 0x3b1,
            variant: 'sans-serif',
            style: 'bolditalic',
        },
        { start: 0x1d7ce, len: 10, offset: 48, variant: '', style: 'bold' },
        { start: 0x1d7d8, len: 10, offset: 48, variant: 'double-struck' },
        { start: 0x1d7e3, len: 10, offset: 48, variant: 'sans-serif' },
        {
            start: 0x1d7ec,
            len: 10,
            offset: 48,
            variant: 'sans-serif',
            style: 'bold',
        },
        { start: 0x1d7f6, len: 10, offset: 48, variant: 'monospace' },
    ];
    function unicodeToMathVariant(codepoint) {
        var _a;
        if ((codepoint < 0x1d400 || codepoint > 0x1d7ff) &&
            (codepoint < 0x2100 || codepoint > 0x214f)) {
            return { char: String.fromCodePoint(codepoint) };
        }
        // Handle the 'gap' letters by converting them back into their logical range
        for (const c in MATH_LETTER_EXCEPTIONS) {
            if (Object.prototype.hasOwnProperty.call(MATH_LETTER_EXCEPTIONS, c)) {
                if (MATH_LETTER_EXCEPTIONS[c] === codepoint) {
                    codepoint = (_a = c.codePointAt(0)) !== null && _a !== void 0 ? _a : 0;
                    break;
                }
            }
        }
        for (let i = 0; i < MATH_UNICODE_BLOCKS.length; i++) {
            if (codepoint >= MATH_UNICODE_BLOCKS[i].start &&
                codepoint <
                    MATH_UNICODE_BLOCKS[i].start + MATH_UNICODE_BLOCKS[i].len) {
                return {
                    char: String.fromCodePoint(codepoint -
                        MATH_UNICODE_BLOCKS[i].start +
                        MATH_UNICODE_BLOCKS[i].offset),
                    variant: MATH_UNICODE_BLOCKS[i].variant,
                    style: MATH_UNICODE_BLOCKS[i].style,
                };
            }
        }
        return { char: String.fromCodePoint(codepoint) };
    }
    /**
     * Given a character and variant ('double-struck', 'fraktur', etc...)
     * return the corresponding unicode character (a string)
     */
    function mathVariantToUnicode(char, variant, style) {
        if (!/[A-Za-z0-9]/.test(char))
            return char;
        if (!variant && !style)
            return char;
        const codepoint = char.codePointAt(0);
        for (let i = 0; i < MATH_UNICODE_BLOCKS.length; i++) {
            if (!variant || MATH_UNICODE_BLOCKS[i].variant === variant) {
                if (!style || MATH_UNICODE_BLOCKS[i].style === style) {
                    if (codepoint >= MATH_UNICODE_BLOCKS[i].offset &&
                        codepoint <
                            MATH_UNICODE_BLOCKS[i].offset +
                                MATH_UNICODE_BLOCKS[i].len) {
                        const result = MATH_UNICODE_BLOCKS[i].start +
                            codepoint -
                            MATH_UNICODE_BLOCKS[i].offset;
                        return String.fromCodePoint(MATH_LETTER_EXCEPTIONS[result] || result);
                    }
                }
            }
        }
        return char;
    }
    function unicodeCharToLatex(parseMode, char) {
        if (parseMode === 'text') {
            return charToLatex(parseMode, char) || char;
        }
        let result;
        // Codepoint shortcuts have priority over variants
        // That is, "\N" vs "\mathbb{N}"
        // if (CODEPOINT_SHORTCUTS[cp]) return CODEPOINT_SHORTCUTS[cp];
        result = charToLatex(parseMode, char);
        if (result)
            return result;
        const cp = char.codePointAt(0);
        const v = unicodeToMathVariant(cp);
        if (!v.style && !v.variant)
            return '';
        result = v.char;
        if (v.variant) {
            result = '\\' + v.variant + '{' + result + '}';
        }
        if (v.style === 'bold') {
            result = '\\mathbf{' + result + '}';
        }
        else if (v.style === 'italic') {
            result = '\\mathit{' + result + '}';
        }
        else if (v.style === 'bolditalic') {
            result = '\\mathbfit{' + result + '}';
        }
        return '\\mathord{' + result + '}';
    }
    function unicodeStringToLatex(parseMode, s) {
        let result = '';
        let needSpace = false;
        for (const c of s) {
            if (needSpace) {
                if (parseMode === 'text') {
                    result += '{}';
                }
                else {
                    result += ' ';
                }
            }
            needSpace = false;
            const latex = unicodeCharToLatex(parseMode, c);
            if (latex) {
                result += latex;
                needSpace = /\\[a-zA-Z0-9]+\*?$/.test(latex);
            }
            else {
                result += c;
            }
        }
        return result;
    }
    function getValue(mode, symbol) {
        var _a, _b;
        if (mode === 'math') {
            return (_b = (_a = MATH_SYMBOLS[symbol]) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : symbol;
        }
        return TEXT_SYMBOLS[symbol] ? TEXT_SYMBOLS[symbol] : symbol;
    }
    function emit(symbol, parent, atom, emitFn) {
        var _a, _b, _c;
        console.assert(Boolean(atom));
        console.assert(Boolean(symbol), 'Missing command for ', atom.body);
        if ((_a = FUNCTIONS[symbol]) === null || _a === void 0 ? void 0 : _a.emit) {
            return FUNCTIONS[symbol].emit(symbol, parent, atom, emitFn);
        }
        if (MATH_SYMBOLS[symbol] || TEXT_SYMBOLS[symbol]) {
            return symbol;
        }
        if (atom.body && ((_c = (_b = FUNCTIONS[symbol]) === null || _b === void 0 ? void 0 : _b.params) === null || _c === void 0 ? void 0 : _c.length) === 1) {
            return symbol + '{' + emitFn(atom, atom.body) + '}';
        }
        // No custom emit function provided, return the symbol (could be a character)
        return symbol;
    }
    function getEnvironmentDefinition(name) {
        var _a;
        return (_a = ENVIRONMENTS[name]) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * @param symbol    A command (e.g. '\alpha') or a character (e.g. 'a')
     * @param parseMode One of 'math' or 'text'
     * @param macros A macros dictionary
     * @return {object} An info structure about the symbol, or null
     */
    function getInfo(symbol, parseMode, macros) {
        if (!symbol || symbol.length === 0)
            return null;
        let info = null;
        if (symbol.charAt(0) === '\\') {
            // This could be a function or a symbol
            info = FUNCTIONS[symbol];
            if (info) {
                // We've got a match
                return info;
            }
            // It wasn't a function, maybe it's a symbol?
            if (parseMode === 'math') {
                info = MATH_SYMBOLS[symbol];
            }
            else if (TEXT_SYMBOLS[symbol]) {
                info = { value: TEXT_SYMBOLS[symbol] };
            }
            if (!info) {
                // Maybe it's a macro
                const command = symbol.slice(1);
                if (macros === null || macros === void 0 ? void 0 : macros[command]) {
                    let def = macros[command];
                    if (typeof def === 'object') {
                        def = def.def;
                    }
                    let argCount = 0;
                    // Let's see if there are arguments in the definition.
                    if (/(^|[^\\])#1/.test(def))
                        argCount = 1;
                    if (/(^|[^\\])#2/.test(def))
                        argCount = 2;
                    if (/(^|[^\\])#3/.test(def))
                        argCount = 3;
                    if (/(^|[^\\])#4/.test(def))
                        argCount = 4;
                    if (/(^|[^\\])#5/.test(def))
                        argCount = 5;
                    if (/(^|[^\\])#6/.test(def))
                        argCount = 6;
                    if (/(^|[^\\])#7/.test(def))
                        argCount = 7;
                    if (/(^|[^\\])#8/.test(def))
                        argCount = 8;
                    if (/(^|[^\\])#9/.test(def))
                        argCount = 9;
                    info = {
                        type: 'group',
                        mode: 'math',
                        params: [],
                        infix: false,
                    };
                    while (argCount >= 1) {
                        info.params.push({
                            isOptional: false,
                            type: 'math',
                        });
                        argCount -= 1;
                    }
                }
            }
        }
        else {
            if (parseMode === 'math') {
                info = MATH_SYMBOLS[symbol];
            }
            else if (TEXT_SYMBOLS[symbol]) {
                info = { value: TEXT_SYMBOLS[symbol] };
            }
        }
        // Special case `f`, `g` and `h` are recognized as functions.
        if (info &&
            info.type === 'mord' &&
            (info.value === 'f' || info.value === 'g' || info.value === 'h')) {
            info.isFunction = true;
        }
        return info;
    }
    /**
     * Return an array of suggestion for completing string 's'.
     * For example, for 'si', it could return ['sin', 'sinh', 'sim', 'simeq', 'sigma']
     * Infix operators are excluded, since they are deprecated commands.
     */
    function suggest(s) {
        if (s.length <= 1)
            return [];
        const result = [];
        // Iterate over items in the dictionary
        for (const p in FUNCTIONS) {
            if (Object.prototype.hasOwnProperty.call(FUNCTIONS, p)) {
                if (p.startsWith(s) && !FUNCTIONS[p].infix) {
                    result.push({ match: p, frequency: FUNCTIONS[p].frequency });
                }
            }
        }
        for (const p in MATH_SYMBOLS) {
            if (Object.prototype.hasOwnProperty.call(MATH_SYMBOLS, p)) {
                if (p.startsWith(s)) {
                    result.push({ match: p, frequency: MATH_SYMBOLS[p].frequency });
                }
            }
        }
        result.sort((a, b) => {
            if (a.frequency === b.frequency) {
                return a.match.length - b.match.length;
            }
            return (b.frequency || 0) - (a.frequency || 0);
        });
        return result;
    }
    /**
     * An argument template has the following syntax:
     *
     * <placeholder>:<type>
     *
     * where
     * - <placeholder> is a string whose value is displayed when the argument
     *   is missing
     * - <type> is one of 'string', 'color', 'dimen', 'auto', 'text', 'math'
     *
     */
    function parseParamTemplateArgument(argTemplate) {
        let type = 'auto';
        // Parse the type (:type)
        const r = argTemplate.match(/:([^=]+)/);
        if (r)
            type = r[1].trim();
        return type;
    }
    function parseParamTemplate(paramTemplate) {
        if (!paramTemplate)
            return [];
        let result = [];
        let params = paramTemplate.split(']');
        if (params[0].charAt(0) === '[') {
            // We found at least one optional parameter.
            result.push({
                isOptional: true,
                type: parseParamTemplateArgument(params[0].slice(1)),
            });
            // Parse the rest
            for (let i = 1; i <= params.length; i++) {
                result = result.concat(parseParamTemplate(params[i]));
            }
        }
        else {
            params = paramTemplate.split('}');
            if (params[0].charAt(0) === '{') {
                // We found a required parameter
                result.push({
                    isOptional: false,
                    type: parseParamTemplateArgument(params[0].slice(1)),
                });
                // Parse the rest
                for (let i = 1; i <= params.length; i++) {
                    result = result.concat(parseParamTemplate(params[i]));
                }
            }
        }
        return result;
    }
    /**
     * If possible, i.e. if they are all simple atoms, return a string made up of
     * their body
     */
    function parseArgAsString(atoms) {
        let result = '';
        let success = true;
        atoms.forEach((atom) => {
            if (typeof atom.body === 'string') {
                result += atom.body;
            }
            else {
                success = false;
            }
        });
        return success ? result : '';
    }
    /**
     * Define one or more environments to be used with
     *         \begin{<env-name>}...\end{<env-name>}.
     *
     * @param params The number and type of required and optional parameters.
     */
    function defineEnvironment(names, params, parser, isTabular = false) {
        if (typeof names === 'string') {
            names = [names];
        }
        const parsedParams = parseParamTemplate(params);
        // Set default values of functions
        const data = {
            tabular: isTabular,
            // Params: the parameters for this function, an array of
            // {optional, type}
            params: parsedParams,
            // Callback to parse the arguments
            parser: parser,
        };
        for (const name of names) {
            ENVIRONMENTS[name] = data;
        }
    }
    /**
     * Like defineEnvironment, but for a tabular environment, i.e.
     * one whose content is in tabular mode, where '&' indicata a new column
     * and '\\' indicate a new row.
     */
    function defineTabularEnvironment(names, params, parser) {
        defineEnvironment(names, params, parser, true);
    }
    /**
     * Define one of more functions.
     *
     * @param names
     * @param params The number and type of required and optional parameters.
     * For example: '{}' defines a single mandatory parameter
     * '[string]{auto}' defines two params, one optional, one required
     */
    function defineFunction(names, params, options, parseFunction, emitFunction) {
        if (typeof names === 'string') {
            names = [names];
        }
        if (!options)
            options = {};
        // Set default values of functions
        const data = {
            // The parameters for this function, an array of
            // {optional, type}
            params: parseParamTemplate(params),
            mode: options.mode,
            infix: Boolean(options.infix),
            parse: parseFunction,
            emit: emitFunction,
        };
        names.forEach((name) => {
            FUNCTIONS['\\' + name] = data;
        });
    }

    const ACCENTS = {
        acute: '\u02ca',
        grave: '\u02cb',
        dot: '\u02d9',
        ddot: '\u00a8',
        mathring: '\u02da',
        tilde: '\u007e',
        bar: '\u02c9',
        breve: '\u02d8',
        check: '\u02c7',
        hat: '\u005e',
        vec: '\u20d7',
    };
    defineFunction(Object.keys(ACCENTS), '{body:auto}', null, function (name, args) {
        return {
            type: 'accent',
            accent: ACCENTS[name.slice(1)],
            limits: 'accent',
            // supsub attachment and will delegate
            // it to the decomposeAccent
            // (any non-null value would do)
            skipBoundary: true,
            body: args[0],
        };
    });
    defineFunction(['widehat', 'widecheck', 'widetilde'], '{body:auto}', null, (name, args) => {
        const baseString = parseArgAsString(args[0]);
        const accent = name.slice(1) +
            (baseString.length > 5
                ? '4'
                : ['1', '1', '2', '2', '3', '3'][baseString.length]);
        return {
            type: 'accent',
            svgAccent: accent,
            limits: 'accent',
            // supsub attachment and will delegate
            // it to the decomposeAccent
            // (any non-null value would do)
            skipBoundary: true,
            body: args[0],
        };
    });
    defineFunction('utilde', '{body:auto}', null, (_name, args) => {
        const baseString = parseArgAsString(args[0]);
        const accent = 'widetilde' +
            (baseString.length > 5
                ? '4'
                : ['1', '1', '2', '2', '3', '3'][baseString.length]);
        return {
            type: 'overunder',
            body: args[0],
            svgBelow: accent,
            skipBoundary: true,
        };
    }, (_name, _parent, atom, emit) => `\\utilde{${emit(atom, atom.body)}}`);
    /*
     * From plain.tex
     *
     */
    defineFunction('^', '{:string}', {}, (_name, args) => {
        return {
            type: 'mord',
            limits: 'nolimits',
            isSymbol: true,
            isFunction: false,
            body: args[0]
                ? {
                    a: 'â',
                    e: 'ê',
                    i: 'î',
                    o: 'ô',
                    u: 'û',
                    A: 'Â',
                    E: 'Ê',
                    I: 'Î',
                    O: 'Ô',
                    U: 'Û',
                }[args[0]] || '^'
                : '^',
        };
    });
    defineFunction('`', '{:string}', {}, (_name, args) => {
        return {
            type: 'mord',
            limits: 'nolimits',
            isSymbol: true,
            isFunction: false,
            body: args[0]
                ? {
                    a: 'à',
                    e: 'è',
                    i: 'ì',
                    o: 'ò',
                    u: 'ù',
                    A: 'À',
                    E: 'È',
                    I: 'Ì',
                    O: 'Ò',
                    U: 'Ù',
                }[args[0]] || '`'
                : '`',
        };
    });
    defineFunction("'", '{:string}', {}, function (name, args) {
        return {
            type: 'mord',
            limits: 'nolimits',
            isSymbol: true,
            isFunction: false,
            body: args[0]
                ? {
                    a: 'á',
                    e: 'é',
                    i: 'í',
                    o: 'ó',
                    u: 'ú',
                    A: 'Á',
                    E: 'É',
                    I: 'Í',
                    O: 'Ó',
                    U: 'Ú',
                }[args[0]] || '\u005e'
                : '\u005e',
        };
    });
    defineFunction('~', '{:string}', {}, (_name, args) => {
        return {
            type: 'mord',
            limits: 'nolimits',
            isSymbol: true,
            isFunction: false,
            body: args[0]
                ? { n: 'ñ', N: 'Ñ', a: 'ã', o: 'õ', A: 'Ã', O: 'Õ' }[args[0]] || '\u00B4'
                : '\u00B4',
        };
    });
    defineFunction('c', '{:string}', {}, (_name, args) => {
        return {
            type: 'mord',
            limits: 'nolimits',
            isSymbol: true,
            isFunction: false,
            body: args[0] ? { c: 'ç', C: 'Ç' }[args[0]] || '' : '',
        };
    });

    // \enclose, a MathJax extension mapping to the MathML `menclose` tag.
    // The first argument is a comma delimited list of notations, as defined
    // here: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/menclose
    // The second, optional, specifies the style to use for the notations.
    defineFunction('enclose', '{notation:string}[style:string]{body:auto}', null, (_name, args) => {
        const result = {
            type: 'enclose',
            strokeColor: 'currentColor',
            strokeWidth: 1,
            strokeStyle: 'solid',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            captureSelection: true,
            body: args[2],
        };
        // Extract info from style string
        if (args[1]) {
            // Split the string by comma delimited sub-strings, ignoring commas
            // that may be inside (). For example"x, rgb(a, b, c)" would return
            // ['x', 'rgb(a, b, c)']
            const styles = args[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
            for (const s of styles) {
                const shorthand = s.match(/\s*(\S+)\s+(\S+)\s+(.*)/);
                if (shorthand) {
                    result.strokeWidth = convertDimenToPx(shorthand[1], 'px');
                    if (!isFinite(result.strokeWidth)) {
                        result.strokeWidth = 1;
                    }
                    result.strokeStyle = shorthand[2];
                    result.strokeColor = shorthand[3];
                }
                else {
                    const attribute = s.match(/\s*([a-z]*)\s*=\s*"(.*)"/);
                    if (attribute) {
                        if (attribute[1] === 'mathbackground') {
                            result.backgroundcolor = attribute[2];
                        }
                        else if (attribute[1] === 'mathcolor') {
                            result.strokeColor = attribute[2];
                        }
                        else if (attribute[1] === 'padding') {
                            result.padding = convertDimenToPx(attribute[2], 'px');
                        }
                        else if (attribute[1] === 'shadow') {
                            result.shadow = attribute[2];
                        }
                    }
                }
            }
            if (result.strokeStyle === 'dashed') {
                result.svgStrokeStyle = '5,5';
            }
            else if (result.strokeStyle === 'dotted') {
                result.svgStrokeStyle = '1,5';
            }
        }
        result.borderStyle =
            result.strokeWidth +
                'px ' +
                result.strokeStyle +
                ' ' +
                result.strokeColor;
        // Normalize the list of notations.
        result.notation = {};
        args[0]
            .split(/[, ]/)
            .filter((v) => v.length > 0)
            .forEach((x) => {
            result.notation[x.toLowerCase()] = true;
        });
        if (result.notation['updiagonalarrow']) {
            result.notation['updiagonalstrike'] = false;
        }
        if (result.notation['box']) {
            result.notation['left'] = false;
            result.notation['right'] = false;
            result.notation['bottom'] = false;
            result.notation['top'] = false;
        }
        return result;
    });
    defineFunction('cancel', '{body:auto}', null, function (_name, args) {
        return {
            type: 'enclose',
            strokeColor: 'currentColor',
            strokeWidth: 1,
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            notation: { updiagonalstrike: true },
            body: args[0],
        };
    });
    defineFunction('bcancel', '{body:auto}', null, function (name, args) {
        return {
            type: 'enclose',
            strokeColor: 'currentColor',
            strokeWidth: 1,
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            notation: { downdiagonalstrike: true },
            body: args[0],
        };
    });
    defineFunction('xcancel', '{body:auto}', null, function (name, args) {
        return {
            type: 'enclose',
            strokeColor: 'currentColor',
            strokeWidth: 1,
            strokeStyle: 'solid',
            borderStyle: '1px solid currentColor',
            backgroundcolor: 'transparent',
            padding: 'auto',
            shadow: 'auto',
            notation: { updiagonalstrike: true, downdiagonalstrike: true },
            body: args[0],
        };
    });

    /*

    See http://texdoc.net/texmf-dist/doc/latex/amsmath/amsldoc.pdf

    <columns> ::= <column>*<line>
    <column> ::= <line>('l'|'c'|'r')
    <line> ::= '|' | '||' | ''

    'math',
                    frequency 0
    'displaymath',
                    frequency 8

    'equation'      centered, numbered
                    frequency 8

    'subequations'   with an 'equation' environment, appends a letter to eq no
                    frequency 1

    'array',        {columns:text}
                    cells are textstyle math
                    no fence

    'eqnarray'      DEPRECATED see http://www.tug.org/pracjourn/2006-4/madsen/madsen.pdf
                    {rcl}
                    first and last cell in each row is displaystyle math
                    each cell has a margin of \arraycolsep
                    Each line has a eqno
                    frequency 7


    'theorem'       text mode. Prepends in bold 'Theorem <counter>', then body in italics.

    'multline'      single column
                    first row left aligned, last right aligned, others centered
                    last line has an eqn. counter. multline* will omit the counter
                    no output if inside an equation
                    

    'gather'        at most two columns
                    first column centered, second column right aligned
                    frequency 1

    'gathered'      must be in equation environment
                    single column,
                    centered
                    frequency: COMMON
                    optional argument: [b], [t] to vertical align

    'align'        multiple columns,
                    alternating rl
                    there is some 'space' (additional column?) between each pair
                    each line is numbered (except when inside an equation environment)
                    there is an implicit {} at the beginning of left columns

    'aligned'      must be in equation environment
                    frequency: COMMON
                    @{}r@{}l@{\quad}@{}r@{}l@{}

    'split'         must be in an equation environment,
                    two columns, additional columns are interpreted as line breaks
                    first column is right aligned, second column is left aligned
                    entire construct is numbered (as opposed to 'align' where each line is numbered)
                    frequency: 0


    'alignedat'
    From AMSMath:
    ---The alignedat environment was changed to take two arguments rather
    than one: a mandatory argument (as formerly) specifying the number of
    align structures, and a new optional one specifying the placement of the
    environment (parallel to the optional argument of aligned). However,
    aligned is simpler to use, allowing any number of aligned structures
    automatically, and therefore the use of alignedat is deprecated.


     'alignat'      {pairs:number}
                    {rl} alternating as many times as indicated by <pairs> arg
                    no space between column pairs (unlike align)
                    there is an implicit {} at the beginning of left columns
                    frequency: 0

     'flalign'      multiple columns
                    alternate rl
                    third column further away than align...?
                    frequency: 0


    'matrix'        at most 10 columns
                    cells centered
                    no fence
                    no colsep at beginning or end
                    (mathtools package add an optional arg for the cell alignment)
                    frequency: COMMON

    'pmatrix'       fence: ()
                    frequency: COMMON

    'bmatrix'       fence: []
                    frequency: COMMON

    'Bmatrix'       fence: {}
                    frequency: 237

    'vmatrix'       fence: \vert
                    frequency: 368

    'Vmatrix'       fence: \Vert
                    frequency: 41

    'smallmatrix'   displaystyle: scriptstyle (?)
                    frequency: 279

    'cases'
                    frequency: COMMON
                    l@{2}l

    'center'        text mode only?
                    frequency: ?
    */
    // See https://en.wikibooks.org/wiki/LaTeX/Mathematics
    // and http://www.ele.uri.edu/faculty/vetter/Other-stuff/latex/Mathmode.pdf
    /*
    The star at the end of the name of a displayed math environment causes that
    the formula lines won't be numbered. Otherwise they would automatically get a number.

    \notag will also turn off the numbering.
    \shoveright and \shoveleft will force alignment of a line

    The only difference between align and equation is the spacing of the formulas.
    You should attempt to use equation when possible, and align when you have multi-line formulas.
    Equation will have space before/after < 1em if line before/after is short enough.

    Also: equation throws an error when you have an & inside the environment,
    so look out for that when converting between the two.



    Whereas align produces a structure whose width is the full line width, aligned
    gives a width that is the actual width of the contents, thus it can be used as
    a component in a containing expression, e.g. for putting the entire alignment
    in a parenthesis
    */
    defineEnvironment('math', '', () => {
        return { mathstyle: 'textstyle' };
    });
    defineEnvironment('displaymath', '', function () {
        return { mathstyle: 'displaystyle' };
    });
    // defineEnvironment('text', '', {
    //     frequency: 0,
    //     }, function(name, args) {
    //     return {
    //         mathstyle: 'text',         // @todo: not quite right, not a style, a parsemode...
    //     };
    // });
    defineTabularEnvironment('array', '{columns:colspec}', (_name, args) => {
        return {
            colFormat: args[0],
            mathstyle: 'textstyle',
        };
    });
    defineTabularEnvironment(['equation', 'equation', 'subequations'], '', () => {
        return {
            colFormat: [{ align: 'c' }],
        };
    });
    // Note spelling: MULTLINE, not multiline.
    defineTabularEnvironment('multline', '', function () {
        return {
            colFormat: [{ align: 'm' }],
        };
    });
    // An AMS-Math environment
    // See amsmath.dtx:3565
    // Note that some versions of AMS-Math have a gap on the left.
    // More recent version suppresses that gap, but have an option to turn it back on
    // for backward compatibility.
    // Note that technically, 'eqnarray' behaves (slightly) differently. However,
    // is is generally recommended to avoid using eqnarray and use align isntead.
    // https://texblog.net/latex-archive/maths/eqnarray-align-environment/
    defineTabularEnvironment(['align', 'align*', 'aligned', 'eqnarray'], '', (_name, _args, array) => {
        let colCount = 0;
        for (const row of array) {
            colCount = Math.max(colCount, row.length);
        }
        const colFormat = [
            { gap: 0 },
            { align: 'r' },
            { gap: 0 },
            { align: 'l' },
        ];
        let i = 2;
        while (i < colCount) {
            colFormat.push({ gap: 1 });
            colFormat.push({ align: 'r' });
            colFormat.push({ gap: 0 });
            colFormat.push({ align: 'l' });
            i += 2;
        }
        colFormat.push({ gap: 0 });
        return {
            arraycolsep: 0,
            colFormat: colFormat,
            jot: 0.3,
        };
    });
    // defineEnvironment('alignat', '', function(name, args) {
    //     return {
    //     };
    // });
    // defineEnvironment('flalign', '', function(name, args) {
    //     return {
    //     };
    // });
    defineTabularEnvironment('split', '', () => {
        return { colFormat: [{ align: 'r' }, { align: 'l' }] };
    });
    defineTabularEnvironment(['gather', 'gathered'], '', () => {
        // An AMS-Math environment
        // %    The \env{gathered} environment is for several lines that are
        // %    centered independently.
        // From amstex.sty
        // \newenvironment{gathered}[1][c]{%
        //   \relax\ifmmode\else\nonmatherr@{\begin{gathered}}\fi
        //   \null\,%
        //   \if #1t\vtop \else \if#1b\vbox \else \vcenter \fi\fi
        //   \bgroup\Let@\restore@math@cr
        //   \ifinany@\else\openup\jot\fi\ialign
        //   \bgroup\hfil\strut@$\m@th\displaystyle##$\hfil\crcr
        return {
            colFormat: [{ gap: 0.25 }, { align: 'c' }, { gap: 0 }],
            jot: 0.3,
        };
    });
    // defineEnvironment('cardinality', '',  function() {
    //     const result = {};
    //     result.mathstyle = 'textstyle';
    //     result.lFence = '|';
    //     result.rFence = '|';
    //     return result;
    // });
    defineTabularEnvironment([
        'matrix',
        'pmatrix',
        'bmatrix',
        'Bmatrix',
        'vmatrix',
        'Vmatrix',
        'smallmatrix',
        'matrix*',
        'pmatrix*',
        'bmatrix*',
        'Bmatrix*',
        'vmatrix*',
        'Vmatrix*',
        'smallmatrix*',
    ], '[columns:colspec]', (name, args) => {
        var _a;
        // From amstex.sty:
        // \def\matrix{\hskip -\arraycolsep\array{*\c@MaxMatrixCols c}}
        // \def\endmatrix{\endarray \hskip -\arraycolsep}
        const result = {};
        result.mathstyle = 'textstyle';
        switch (name) {
            case 'pmatrix':
            case 'pmatrix*':
                result.leftDelim = '(';
                result.rightDelim = ')';
                break;
            case 'bmatrix':
            case 'bmatrix*':
                result.leftDelim = '[';
                result.rightDelim = ']';
                break;
            case 'Bmatrix':
            case 'Bmatrix*':
                result.leftDelim = '\\lbrace';
                result.rightDelim = '\\rbrace';
                break;
            case 'vmatrix':
            case 'vmatrix*':
                result.leftDelim = '\\vert';
                result.rightDelim = '\\vert';
                break;
            case 'Vmatrix':
            case 'Vmatrix*':
                result.leftDelim = '\\Vert';
                result.rightDelim = '\\Vert';
                break;
            case 'smallmatrix':
            case 'smallmatrix*':
                result.mathstyle = 'scriptstyle';
                break;
            case 'matrix':
            case 'matrix*':
                // Specifying a fence, even a null fence,
                // will prevent the insertion of an initial and final gap
                result.leftDelim = '.';
                result.rightDelim = '.';
                break;
        }
        result.colFormat = (_a = args[0]) !== null && _a !== void 0 ? _a : [
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
            { align: 'c' },
        ];
        return result;
    });
    defineTabularEnvironment('cases', '', () => {
        // From amstex.sty:
        // \def\cases{\left\{\def\arraystretch{1.2}\hskip-\arraycolsep
        //   \array{l@{\quad}l}}
        // \def\endcases{\endarray\hskip-\arraycolsep\right.}
        // From amsmath.dtx
        // \def\env@cases{%
        //   \let\@ifnextchar\new@ifnextchar
        //   \left\lbrace
        //   \def\arraystretch{1.2}%
        //   \array{@{}l@{\quad}l@{}}%
        return {
            arraystretch: 1.2,
            leftDelim: '\\lbrace',
            rightDelim: '.',
            colFormat: [{ align: 'l' }, { gap: 1 }, { align: 'l' }],
        };
    });
    // This is a text mode environment
    /*
    \begin{theorem}
    Let $f$ be a function whose derivative exists in every point, then $f$
    is a continuous function.
    \end{theorem}
    */
    // defineEnvironment('theorem', '', function () {
    //     return {};
    // });
    defineEnvironment('center', '', function () {
        return { colFormat: [{ align: 'c' }] };
    });

    // Extensible (horitontally stretchy) symbols
    defineFunction([
        'overrightarrow',
        'overleftarrow',
        'Overrightarrow',
        'overleftharpoon',
        'overrightharpoon',
        'overleftrightarrow',
        'overbrace',
        'overlinesegment',
        'overgroup',
    ], '{:auto}', null, (name, args) => {
        return {
            type: 'overunder',
            // The body is the argument of the command
            body: args[0],
            // Set the "svgAbove" to the name of a SVG object (which is the same
            // as the command name)
            svgAbove: name.slice(1),
            skipBoundary: true,
            limits: 'overunder',
        };
    }, (name, _parent, atom, emit) => `${name}{${emit(atom, atom.body)}}`);
    defineFunction([
        'underrightarrow',
        'underleftarrow',
        'underleftrightarrow',
        'underbrace',
        'underlinesegment',
        'undergroup',
    ], '{:auto}', null, (name, args) => {
        return {
            type: 'overunder',
            body: args[0],
            // Set the "svgBelow" to the name of a SVG object (which is the same
            // as the command name)
            svgBelow: name.slice(1),
            skipBoundary: true,
            limits: 'overunder',
        };
    }, (name, _parent, atom, emit) => `${name}{${emit(atom, atom.body)}}`);
    defineFunction([
        'xrightarrow',
        'xleftarrow',
        'xRightarrow',
        'xLeftarrow',
        'xleftharpoonup',
        'xleftharpoondown',
        'xrightharpoonup',
        'xrightharpoondown',
        'xlongequal',
        'xtwoheadleftarrow',
        'xtwoheadrightarrow',
        'xleftrightarrow',
        'xLeftrightarrow',
        'xrightleftharpoons',
        'xleftrightharpoons',
        'xhookleftarrow',
        'xhookrightarrow',
        'xmapsto',
        'xtofrom',
        'xrightleftarrows',
        'xrightequilibrium',
        'xleftequilibrium',
    ], '[:auto]{:auto}', null, (name, args) => {
        return {
            type: 'overunder',
            // Set the spacing type
            mathtype: 'mrel',
            // Set the "svgBody" to the name of a SVG object (which is the same
            // as the command name)
            svgBody: name.slice(1),
            overscript: args[1],
            underscript: args[0],
            skipBoundary: true,
        };
    }, (name, _parent, atom, emit) => name +
        (typeof atom.underscript !== 'undefined'
            ? `[${emit(atom, atom.underscript)}]`
            : '') +
        `{${emit(atom, atom.overscript)}}`);

    defineFunction([
        'arccos',
        'arcsin',
        'arctan',
        'arctg',
        'arcctg',
        'arg',
        'ch',
        'cos',
        'cosh',
        'cot',
        'coth',
        'ctg',
        'cth',
        'cotg',
        'csc',
        'cosec',
        'deg',
        'dim',
        'exp',
        'hom',
        'inf',
        'ker',
        'lg',
        'lb',
        'lg',
        // Sometimes used as the log2
        'ln',
        'log',
        'Pr',
        'sec',
        'sh',
        'sin',
        'sinh',
        'sup',
        'tan',
        'tanh',
        'tg',
        'th',
    ], '', null, function (name) {
        return {
            type: 'mop',
            limits: 'nolimits',
            isSymbol: false,
            isFunction: true,
            body: name.slice(1),
            variant: 'main',
            variantStyle: 'up',
        };
    });
    defineFunction(['liminf', 'limsup'], '', null, (name) => {
        return {
            type: 'mop',
            limits: 'limits',
            isSymbol: false,
            body: { '\\liminf': 'lim inf', '\\limsup': 'lim sup' }[name],
            variant: 'main',
        };
    });
    defineFunction(['lim', 'mod'], '', null, function (name) {
        return {
            type: 'mop',
            limits: 'limits',
            isSymbol: false,
            body: name.slice(1),
            variant: 'main',
        };
    });
    // With Limits
    defineFunction(['det', 'max', 'min'], '', null, function (name) {
        return {
            type: 'mop',
            limits: 'limits',
            isSymbol: false,
            isFunction: true,
            body: name.slice(1),
            variant: 'main',
        };
    });
    // Root
    defineFunction('sqrt', '[index:auto]{radicand:auto}', null, (_name, args) => {
        return {
            type: 'surd',
            body: args[1],
            index: args[0],
        };
    }, (name, _parent, atom, emit) => {
        let args = '';
        if (typeof atom.index !== 'undefined') {
            args += `[${emit(atom, atom.index)}]`;
        }
        args += `{${emit(atom, atom.body)}}`;
        return name + args;
    });
    // Fractions
    defineFunction(['frac', 'dfrac', 'tfrac', 'cfrac', 'binom', 'dbinom', 'tbinom'], '{numerator}{denominator}', null, (name, args) => {
        const result = {
            type: 'genfrac',
            numer: args[0],
            denom: args[1],
            mathstyle: 'auto',
        };
        switch (name) {
            case '\\dfrac':
            case '\\frac':
            case '\\tfrac':
            case '\\cfrac':
                result.hasBarLine = true;
                break;
            case '\\\\atopfrac':
                result.hasBarLine = false;
                break;
            case '\\dbinom':
            case '\\binom':
            case '\\tbinom':
                result.hasBarLine = false;
                result.leftDelim = '(';
                result.rightDelim = ')';
                break;
        }
        switch (name) {
            case '\\dfrac':
            case '\\dbinom':
                result.mathstyle = 'displaystyle';
                break;
            case '\\tfrac':
            case '\\tbinom':
                result.mathstyle = 'textstyle';
                break;
        }
        if (name === '\\cfrac') {
            result.continuousFraction = true;
        }
        return result;
    }, (name, _parent, atom, emit) => {
        return `${name}{${emit(atom, atom.numer)}}{${emit(atom, atom.denom)}}`;
    });
    defineFunction(['over', 'atop', 'choose'], '', { infix: true }, (name, args) => {
        const numer = args[0];
        const denom = args[1];
        let hasBarLine = false;
        let leftDelim = null;
        let rightDelim = null;
        switch (name) {
            case '\\atop':
                break;
            case '\\over':
                hasBarLine = true;
                break;
            case '\\choose':
                hasBarLine = false;
                leftDelim = '(';
                rightDelim = ')';
                break;
            default:
                throw new Error('Unrecognized genfrac command');
        }
        return {
            type: 'genfrac',
            numer: numer,
            denom: denom,
            hasBarLine: hasBarLine,
            leftDelim: leftDelim,
            rightDelim: rightDelim,
            mathstyle: 'auto',
        };
    }, (name, _parent, atom, emit) => {
        return `{${emit(atom, atom.numer)}${name} ${emit(atom, atom.denom)}}`;
    });
    // Slashed package
    /*
    defineFunction('\\slashed'
    */
    defineFunction('pdiff', '{numerator}{denominator}', null, (_funcname, args) => {
        return {
            type: 'genfrac',
            numer: args[0],
            denom: args[1],
            numerPrefix: '\u2202',
            denomPrefix: '\u2202',
            hasBarLine: true,
            leftDelim: null,
            rightDelim: null,
            mathstyle: 'auto',
        };
    }, (name, _parent, atom, emit) => {
        return `${name}{${emit(atom, atom.numer)}}{${emit(atom, atom.denom)}}`;
    });
    // Limits, symbols
    defineFunction([
        'sum',
        'prod',
        'bigcup',
        'bigcap',
        'coprod',
        'bigvee',
        'bigwedge',
        'biguplus',
        'bigotimes',
        'bigoplus',
        'bigodot',
        'bigsqcup',
        'smallint',
        'intop',
    ], '', null, (name) => {
        return {
            type: 'mop',
            limits: 'auto',
            isSymbol: true,
            variant: 'main',
            body: {
                coprod: '\u2210',
                bigvee: '\u22c1',
                bigwedge: '\u22c0',
                biguplus: '\u2a04',
                bigcap: '\u22c2',
                bigcup: '\u22c3',
                intop: '\u222b',
                prod: '\u220f',
                sum: '\u2211',
                bigotimes: '\u2a02',
                bigoplus: '\u2a01',
                bigodot: '\u2a00',
                bigsqcup: '\u2a06',
                smallint: '\u222b',
            }[name.slice(1)],
        };
    });
    // No limits, symbols (i.e. display larger in 'display' mode, and
    // centered on the baseline)
    const EXTENSIBLE_SYMBOLS = {
        int: '\u222b',
        iint: '\u222c',
        iiint: '\u222d',
        oint: '\u222e',
        oiint: '\u222f',
        oiiint: '\u2230',
        intclockwise: '\u2231',
        varointclockwise: '\u2232',
        ointctrclockwise: '\u2233',
        intctrclockwise: '\u2a11',
        sqcup: '\u2294',
        sqcap: '\u2293',
        uplus: '\u228e',
        wr: '\u2240',
        amalg: '\u2a3f',
        Cap: '\u22d2',
        Cup: '\u22d3',
        doublecap: '\u22d2',
        doublecup: '\u22d3',
    };
    defineFunction(Object.keys(EXTENSIBLE_SYMBOLS), '', null, function (name) {
        return {
            type: 'mop',
            limits: 'nolimits',
            isSymbol: true,
            body: EXTENSIBLE_SYMBOLS[name.slice(1)],
            variant: { '\u22d2': 'ams', '\u22d3': 'ams' }[EXTENSIBLE_SYMBOLS[name.slice(1)]],
        };
    });
    defineFunction(['Re', 'Im'], '', null, function (name) {
        return {
            type: 'mop',
            limits: 'nolimits',
            isSymbol: false,
            isFunction: true,
            body: { '\\Re': '\u211c', '\\Im': '\u2111' }[name],
            variant: 'fraktur',
        };
    });
    defineFunction('middle', '{:delim}', null, function (name, args) {
        return { type: 'delim', delim: args[0] };
    });
    // TODO
    // Some missing greek letters, but see https://reference.wolfram.com/language/tutorial/LettersAndLetterLikeForms.html
    // koppa, stigma, Sampi
    // See https://tex.stackexchange.com/questions/231878/accessing-archaic-greek-koppa-in-the-birkmult-document-class
    // Capital Alpha, etc...
    // Colon (ratio) (2236)
    // Review:
    // https://en.wikipedia.org/wiki/Help:Displaying_a_formula
    // https://reference.wolfram.com/language/tutorial/LettersAndLetterLikeForms.html
    // ftp://ftp.dante.de/tex-archive/info/symbols/comprehensive/symbols-a4.pdf
    // Media Wiki Reference
    // https://en.wikipedia.org/wiki/Help:Displaying_a_formula
    // MathJax Reference
    // http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands
    // http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm
    // LaTeX Reference
    // http://ctan.sharelatex.com/tex-archive/info/latex2e-help-texinfo/latex2e.html
    // iBooks Author/Pages
    // https://support.apple.com/en-au/HT202501
    // Mathematica Reference
    // https://reference.wolfram.com/language/tutorial/NamesOfSymbolsAndMathematicalObjects.html
    // https://reference.wolfram.com/language/guide/MathematicalTypesetting.html
    /*
        * @todo \sb (equivalent to _) $\mathfrak{sl}\sb 2$ frequency 184
        * @todo \sp (equivalent to ^) $\mathfrak{sl}\sp 2$ frequency 274
        * \intertext    frequency 0


        See http://mirrors.ibiblio.org/CTAN/macros/latex/contrib/mathtools/mathtools.pdf

    */

    /**
     * This module contains some color dictionaries and algorithms to
     * parse a string into a hex RGB color value.s
     * @summary   Parsing of color strings.
     */
    /*
    {\color{apricot}\blacksquare}{\color{aquamarine}\blacksquare}{\color{bittersweet}\blacksquare}{\color{black}\blacksquare}{\color{blue}\blacksquare}{\color{blueGreen}\blacksquare}{\color{blueviolet}\blacksquare}{\color{brickred}\blacksquare}{\color{brown}\blacksquare}{\color{burntorange}\blacksquare}{\color{cadetblue}\blacksquare}{\color{carnationpink}\blacksquare}{\color{cerulean}\blacksquare}{\color{cornflowerblue}\blacksquare}{\color{cyan}\blacksquare}{\color{dandelion}\blacksquare}{\color{darkorchid}\blacksquare}{\color{emerald}\blacksquare}{\color{forestgreen}\blacksquare}{\color{fuchsia}\blacksquare}{\color{goldenrod}\blacksquare}{\color{gray}\blacksquare}{\color{green}\blacksquare}{\color{greenyellow}\blacksquare}{\color{junglegreen}\blacksquare}{\color{lavender}\blacksquare}{\color{limegreen}\blacksquare}{\color{magenta}\blacksquare}{\color{mahogany}\blacksquare}{\color{maroon}\blacksquare}{\color{melon}\blacksquare}{\color{midnightblue}\blacksquare}{\color{mulberry}\blacksquare}{\color{navyblue}\blacksquare}{\color{olivegreen}\blacksquare}{\color{orange}\blacksquare}{\color{orangered}\blacksquare}{\color{orchid}\blacksquare}{\color{peach}\blacksquare}{\color{periwinkle}\blacksquare}{\color{pinegreen}\blacksquare}{\color{plum}\blacksquare}{\color{processblue}\blacksquare}{\color{purple}\blacksquare}{\color{rawsienna}\blacksquare}{\color{red}\blacksquare}{\color{redorange}\blacksquare}{\color{redviolet}\blacksquare}{\color{rhodamine}\blacksquare}{\color{royalblue}\blacksquare}{\color{royalpurple}\blacksquare}{\color{rubinered}\blacksquare}{\color{salmon}\blacksquare}{\color{seagreen}\blacksquare}{\color{sepia}\blacksquare}{\color{skyblue}\blacksquare}{\color{springgreen}\blacksquare}{\color{tan}\blacksquare}{\color{tealblue}\blacksquare}{\color{thistle}\blacksquare}{\color{turquoise}\blacksquare}{\color{violet}\blacksquare}{\color{violetred}\blacksquare}{\color{white}\blacksquare}{\color{wildstrawberry}\blacksquare}{\color{yellow}\blacksquare}{\color{yellowgreen}\blacksquare}{\color{yelloworange}\blacksquare}
    */
    /**
     * First 10 predefined colors used for plotting by Mathematica.
     *
     * Also known as _indexed color scheme #97_.
     */
    const MATHEMATICA_COLORS = {
        m0: '#3f3d99',
        m1: '#993d71',
        m2: '#998b3d',
        m3: '#3d9956',
        m4: '#3d5a99',
        m5: '#993d90',
        m6: '#996d3d',
        m7: '#43993d',
        m8: '#3d7999',
        m9: '#843d99',
    };
    // ColorData97 (Mathematica standard lines)
    // rgb(0.368417, 0.506779, 0.709798),       #5e81b5
    // rgb(0.880722, 0.611041, 0.142051),
    // rgb(0.560181, 0.691569, 0.194885),
    // rgb(0.922526, 0.385626, 0.209179),
    // rgb(0.528488, 0.470624, 0.701351),
    // rgb(0.772079, 0.431554, 0.102387),
    // rgb(0.363898, 0.618501, 0.782349),
    // rgb(1, 0.75, 0),
    // rgb(0.647624, 0.37816, 0.614037),
    // rgb(0.571589, 0.586483, 0.),
    // rgb(0.915, 0.3325, 0.2125),
    // rgb(0.40082222609352647, 0.5220066643438841, 0.85),
    // rgb(0.9728288904374106, 0.621644452187053, 0.07336199581899142),
    // rgb(0.736782672705901, 0.358, 0.5030266573755369),
    // rgb(0.28026441037696703, 0.715, 0.4292089322474965)
    // MathLab colors
    // '#0072bd' // [0, 0.4470, 0.7410]             blue
    // '#d95319' // [0.8500, 0.3250, 0.0980]        orange
    // '#edb120', // [0.9290, 0.6940, 0.1250]       yellow
    // '#7e2f8e', // [0.4940, 0.1840, 0.5560]       purple
    // '#77ac30', // [0.4660, 0.6740, 0.1880]       green
    // '#4dbeee', // [0.3010, 0.7450, 0.9330]       cyan
    // '#a2142f' // [0.6350, 0.0780, 0.1840]	    dark red
    /* Area colors are most appropriate to color a large area */
    const AREA_COLORS = [
        '#d35d60',
        '#7293cb',
        '#e1974d',
        '#84bb5d',
        '#9066a7',
        '#aD6a58',
        '#f5a4ce',
        '#fff590',
        '#212121',
        '#818787',
        '#d4d5d2',
        '#ffffff',
    ];
    /* Line colors are most appropriate to color as a stroke color */
    const LINE_COLORS = [
        '#cc2428',
        '#3769b1',
        '#da7e30',
        '#409852',
        '#6b4c9a',
        '#922426',
        '#e7298a',
        '#ffe907',
        '#000000',
        '#525055',
        '#adafaa',
        '#ffffff',
    ];
    /**
     * 68 colors (+ white) known to dvips used in LaTeX.
     *
     * The color names are based on the names of the _Crayola Crayon_ box of
     * 64 crayons.
     *
     * See:
     * - {@link http://mirror.jmu.edu/pub/CTAN/systems/knuth/local/lib/colordvi.tex | ColorDVI.tex}
     * - {@link https://en.wikibooks.org/w/index.php?title=LaTeX/Colors | Wikibooks:LaTeX/Colors}
     */
    const NAMED_COLORS = {
        apricot: '#FBB982',
        aquamarine: '#00B5BE',
        bittersweet: '#C04F17',
        black: '#221E1F',
        blue: '#2D2F92',
        bluegreen: '#00B3B8',
        blueviolet: '#473992',
        brickred: '#B6321C',
        brown: '#792500',
        burntorange: '#F7921D',
        cadetblue: '#74729A',
        carnationpink: '#F282B4',
        cerulean: '#00A2E3',
        cornflowerblue: '#41B0E4',
        cyan: '#00AEEF',
        dandelion: '#FDBC42',
        darkorchid: '#A4538A',
        emerald: '#00A99D',
        forestgreen: '#009B55',
        fuchsia: '#8C368C',
        goldenrod: '#FFDF42',
        gray: '#949698',
        green: '#00A64F',
        greenyellow: '#DFE674',
        junglegreen: '#00A99A',
        lavender: '#F49EC4',
        limegreen: '#8DC73E',
        magenta: '#EC008C',
        mahogany: '#A9341F',
        maroon: '#AF3235',
        melon: '#F89E7B',
        midnightblue: '#006795',
        mulberry: '#A93C93',
        navyblue: '#006EB8',
        olivegreen: '#3C8031',
        orange: '#F58137',
        orangered: '#ED135A',
        orchid: '#AF72B0',
        peach: '#F7965A',
        periwinkle: '#7977B8',
        pinegreen: '#008B72',
        plum: '#92268F',
        processblue: '#00B0F0',
        purple: '#99479B',
        rawsienna: '#974006',
        red: '#ED1B23',
        redorange: '#F26035',
        redviolet: '#A1246B',
        rhodamine: '#EF559F',
        royalblue: '#0071BC',
        royalpurple: '#613F99',
        rubinered: '#ED017D',
        salmon: '#F69289',
        seagreen: '#3FBC9D',
        sepia: '#671800',
        skyblue: '#46C5DD',
        springgreen: '#C6DC67',
        tan: '#DA9D76',
        tealblue: '#00AEB3',
        thistle: '#D883B7',
        turquoise: '#00B4CE',
        violet: '#58429B',
        violetred: '#EF58A0',
        white: '#FFFFFF',
        wildstrawberry: '#EE2967',
        yellow: '#FFF200',
        yellowgreen: '#98CC70',
        yelloworange: '#FAA21A',
    };
    // Other color lists: SVG colors, x11 colors
    /*
    aliceblue	rgb(240, 248, 255)
    antiquewhite	rgb(250, 235, 215)
    aqua	rgb( 0, 255, 255)
    aquamarine	rgb(127, 255, 212)
    azure	rgb(240, 255, 255)
    beige	rgb(245, 245, 220)
    bisque	rgb(255, 228, 196)
    black	rgb( 0, 0, 0)
    blanchedalmond	rgb(255, 235, 205)
    blue	rgb( 0, 0, 255)
    blueviolet	rgb(138, 43, 226)
    brown	rgb(165, 42, 42)
    burlywood	rgb(222, 184, 135)
    cadetblue	rgb( 95, 158, 160)
    chartreuse	rgb(127, 255, 0)
    chocolate	rgb(210, 105, 30)
    coral	rgb(255, 127, 80)
    cornflowerblue	rgb(100, 149, 237)
    cornsilk	rgb(255, 248, 220)
    crimson	rgb(220, 20, 60)
    cyan	rgb( 0, 255, 255)
    darkblue	rgb( 0, 0, 139)
    darkcyan	rgb( 0, 139, 139)
    darkgoldenrod	rgb(184, 134, 11)
    darkgray	rgb(169, 169, 169)
    darkgreen	rgb( 0, 100, 0)
    darkgrey	rgb(169, 169, 169)
    darkkhaki	rgb(189, 183, 107)
    darkmagenta	rgb(139, 0, 139)
    darkolivegreen	rgb( 85, 107, 47)
    darkorange	rgb(255, 140, 0)
    darkorchid	rgb(153, 50, 204)
    darkred	rgb(139, 0, 0)
    darksalmon	rgb(233, 150, 122)
    darkseagreen	rgb(143, 188, 143)
    darkslateblue	rgb( 72, 61, 139)
    darkslategray	rgb( 47, 79, 79)
    darkslategrey	rgb( 47, 79, 79)
    darkturquoise	rgb( 0, 206, 209)
    darkviolet	rgb(148, 0, 211)
    deeppink	rgb(255, 20, 147)
    deepskyblue	rgb( 0, 191, 255)
    dimgray	rgb(105, 105, 105)
    dimgrey	rgb(105, 105, 105)
    dodgerblue	rgb( 30, 144, 255)
    firebrick	rgb(178, 34, 34)
    floralwhite	rgb(255, 250, 240)
    forestgreen	rgb( 34, 139, 34)
    fuchsia	rgb(255, 0, 255)
    gainsboro	rgb(220, 220, 220)
    ghostwhite	rgb(248, 248, 255)
    gold	rgb(255, 215, 0)
    goldenrod	rgb(218, 165, 32)
    gray	rgb(128, 128, 128)
    grey	rgb(128, 128, 128)
    green	rgb( 0, 128, 0)
    greenyellow	rgb(173, 255, 47)
    honeydew	rgb(240, 255, 240)
    hotpink	rgb(255, 105, 180)
    indianred	rgb(205, 92, 92)
    indigo	rgb( 75, 0, 130)
    ivory	rgb(255, 255, 240)
    khaki	rgb(240, 230, 140)
    lavender	rgb(230, 230, 250)
    lavenderblush	rgb(255, 240, 245)
    lawngreen	rgb(124, 252, 0)
    lemonchiffon	rgb(255, 250, 205)
    lightblue	rgb(173, 216, 230)
    lightcoral	rgb(240, 128, 128)
    lightcyan	rgb(224, 255, 255)
    lightgoldenrodyellow	rgb(250, 250, 210)
    lightgray	rgb(211, 211, 211)
    lightgreen	rgb(144, 238, 144)
    lightgrey	rgb(211, 211, 211)
    lightpink	rgb(255, 182, 193)
    lightsalmon	rgb(255, 160, 122)
    lightseagreen	rgb( 32, 178, 170)
    lightskyblue	rgb(135, 206, 250)
    lightslategray	rgb(119, 136, 153)
    lightslategrey	rgb(119, 136, 153)
    lightsteelblue	rgb(176, 196, 222)
    lightyellow	rgb(255, 255, 224)
    lime	rgb( 0, 255, 0)
    limegreen	rgb( 50, 205, 50)
    linen	rgb(250, 240, 230)
    magenta	rgb(255, 0, 255)
    maroon	rgb(128, 0, 0)
    mediumaquamarine	rgb(102, 205, 170)
    mediumblue	rgb( 0, 0, 205)
    mediumorchid	rgb(186, 85, 211)
    mediumpurple	rgb(147, 112, 219)
    mediumseagreen	rgb( 60, 179, 113)
    mediumslateblue	rgb(123, 104, 238)
    mediumspringgreen	rgb( 0, 250, 154)
    mediumturquoise	rgb( 72, 209, 204)
    mediumvioletred	rgb(199, 21, 133)
    midnightblue	rgb( 25, 25, 112)
    mintcream	rgb(245, 255, 250)
    mistyrose	rgb(255, 228, 225)
    moccasin	rgb(255, 228, 181)
    navajowhite	rgb(255, 222, 173)
    navy	rgb( 0, 0, 128)
    oldlace	rgb(253, 245, 230)
    olive	rgb(128, 128, 0)
    olivedrab	rgb(107, 142, 35)
    orange	rgb(255, 165, 0)
    orangered	rgb(255, 69, 0)
    orchid	rgb(218, 112, 214)
    palegoldenrod	rgb(238, 232, 170)
    palegreen	rgb(152, 251, 152)
    paleturquoise	rgb(175, 238, 238)
    palevioletred	rgb(219, 112, 147)
    papayawhip	rgb(255, 239, 213)
    peachpuff	rgb(255, 218, 185)
    peru	rgb(205, 133, 63)
    pink	rgb(255, 192, 203)
    plum	rgb(221, 160, 221)
    powderblue	rgb(176, 224, 230)
    purple	rgb(128, 0, 128)
    red	rgb(255, 0, 0)
    rosybrown	rgb(188, 143, 143)
    royalblue	rgb( 65, 105, 225)
    saddlebrown	rgb(139, 69, 19)
    salmon	rgb(250, 128, 114)
    sandybrown	rgb(244, 164, 96)
    seagreen	rgb( 46, 139, 87)
    seashell	rgb(255, 245, 238)
    sienna	rgb(160, 82, 45)
    silver	rgb(192, 192, 192)
    skyblue	rgb(135, 206, 235)
    slateblue	rgb(106, 90, 205)
    slategray	rgb(112, 128, 144)
    slategrey	rgb(112, 128, 144)
    snow	rgb(255, 250, 250)
    springgreen	rgb( 0, 255, 127)
    steelblue	rgb( 70, 130, 180)
    tan	rgb(210, 180, 140)
    teal	rgb( 0, 128, 128)
    thistle	rgb(216, 191, 216)
    tomato	rgb(255, 99, 71)
    turquoise	rgb( 64, 224, 208)
    violet	rgb(238, 130, 238)
    wheat	rgb(245, 222, 179)
    white	rgb(255, 255, 255)
    whitesmoke	rgb(245, 245, 245)
    yellow	rgb(255, 255, 0)
    yellowgreen	rgb(154, 205, 50)
         
    */
    /**
     * Return a CSS color (#rrggbb) from a string.
     *
     * Possible formats include:
     * - named colors from the DVI color set: 'Yellow', 'red'... Case insensitive.
     * - colors from the Mathematica set: 'm1'...'m9'
     * - 3-digit hex: `'#d50'`
     * - 6-digit hex: `'#dd5500'`
     * - RGB functional: `'rgb(240, 20, 10)'`
     *
     * In addition, colors can be mixed using the following syntax:
     * `<mix> = <color>![<value>][!<mix>]`
     * For example:
     * - `'blue!20'`  = 20% blue + 80% white
     * - `'blue!20!black'` = 20% + 80% black
     * - `'blue!20!black!30!green'` = (20% + 80% black) * 30 % + 70% green
     *
     * If the input string is prefixed with a dash, the complementary color
     * of the expression is returned.
     *
     * This creative syntax is defined by the {@link http://mirror.jmu.edu/pub/CTAN/macros/latex/contrib/xcolor/xcolor.pdf | `xcolor` LaTeX package}.
     *
     * @param s - An expression representing a color value
     * @return An RGB color expressed as a hex-triplet preceded by `#`
     */
    function stringToColor(s) {
        var _a;
        const colorSpec = s.toLowerCase().split('!');
        let baseRed;
        let baseGreen;
        let baseBlue;
        let red = 255;
        let green = 255;
        let blue = 255;
        let mix = -1;
        // If the string is prefixed with a '-', use the complementary color
        const complementary = colorSpec.length > 0 && colorSpec[0].charAt(0) === '-';
        if (complementary)
            colorSpec[0] = colorSpec[0].slice(1);
        for (let i = 0; i < colorSpec.length; i++) {
            baseRed = red;
            baseGreen = green;
            baseBlue = blue;
            const colorName = (_a = colorSpec[i].match(/([a-z0-9]*)/)) === null || _a === void 0 ? void 0 : _a[1];
            let color = NAMED_COLORS[colorName] || MATHEMATICA_COLORS[colorName];
            if (!color)
                color = colorSpec[i];
            let m = color.match(/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i);
            if ((m === null || m === void 0 ? void 0 : m[1]) && m[2] && m[3]) {
                // It's a six-digit hex number
                red = Math.max(0, Math.min(255, parseInt(m[1], 16)));
                green = Math.max(0, Math.min(255, parseInt(m[2], 16)));
                blue = Math.max(0, Math.min(255, parseInt(m[3], 16)));
            }
            else {
                m = color.match(/^#([0-9a-f]{3})$/i);
                if (m === null || m === void 0 ? void 0 : m[1]) {
                    // It's a three-digit hex number
                    const r1 = parseInt(m[1][0], 16);
                    const g1 = parseInt(m[1][1], 16);
                    const b1 = parseInt(m[1][2], 16);
                    red = Math.max(0, Math.min(255, r1 * 16 + r1));
                    green = Math.max(0, Math.min(255, g1 * 16 + g1));
                    blue = Math.max(0, Math.min(255, b1 * 16 + b1));
                }
                else {
                    // It's a rgb functional
                    m = color.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);
                    if ((m === null || m === void 0 ? void 0 : m[1]) && m[2] && m[3]) {
                        red = Math.max(0, Math.min(255, parseInt(m[1])));
                        green = Math.max(0, Math.min(255, parseInt(m[2])));
                        blue = Math.max(0, Math.min(255, parseInt(m[3])));
                    }
                    else {
                        return null;
                    }
                }
            }
            if (mix >= 0) {
                red = (1.0 - mix) * red + mix * baseRed;
                green = (1.0 - mix) * green + mix * baseGreen;
                blue = (1.0 - mix) * blue + mix * baseBlue;
                mix = -1;
            }
            if (i + 1 < colorSpec.length) {
                mix = Math.max(0, Math.min(100, parseInt(colorSpec[++i]))) / 100.0;
            }
        }
        if (mix >= 0) {
            red = mix * red + (1.0 - mix) * baseRed;
            green = mix * green + (1.0 - mix) * baseGreen;
            blue = mix * blue + (1.0 - mix) * baseBlue;
        }
        if (complementary) {
            red = 255 - red;
            green = 255 - green;
            blue = 255 - blue;
        }
        return ('#' +
            ('00' + Math.round(red).toString(16)).slice(-2) +
            ('00' + Math.round(green).toString(16)).slice(-2) +
            ('00' + Math.round(blue).toString(16)).slice(-2));
    }
    function colorToString(color) {
        let result = color.toUpperCase();
        for (const c in NAMED_COLORS) {
            if (NAMED_COLORS[c] === result) {
                result = c;
                break;
            }
        }
        for (const c in MATHEMATICA_COLORS) {
            if (MATHEMATICA_COLORS[c] === result) {
                result = c;
                break;
            }
        }
        return result;
    }

    defineFunction('ensuremath', '{:math}', {}, (_name, args) => {
        return {
            type: 'group',
            mode: 'math',
            body: args[0],
            skipBoundary: true,
            latexOpen: '\\ensuremath{',
            latexClose: '}',
        };
    }, (_name, _parent, atom, emit) => emit(atom, atom.body));
    defineFunction('color', '{:color}', {}, (_name, args) => {
        return { color: args[0] };
    });
    // From the xcolor package.
    // Unlike what its name might suggest, this command does not set the mode to text
    // That is, it can equally be applied to math and text mode.
    defineFunction('textcolor', '{:color}{content:auto*}', {}, (_name, args) => {
        return { color: args[0] };
    });
    // Can be preceded by e.g. '\fboxsep=4pt' (also \fboxrule)
    // Note:
    // - \boxed: sets content in displaystyle mode (@todo: should change type of argument)
    //      equivalent to \fbox{$$<content>$$}
    // - \fbox: sets content in 'auto' mode (frequency 777)
    // - \framebox[<width>][<alignment>]{<content>} (<alignment> := 'c'|'t'|'b' (center, top, bottom) (frequency 28)
    // @todo
    defineFunction('boxed', '{content:math}', null, (_name, args) => {
        return {
            type: 'box',
            framecolor: 'black',
            skipBoundary: true,
            body: args[0],
        };
    });
    // In LaTeX, \colorbox sets the mode to text
    defineFunction('colorbox', '{background-color:string}{content:auto}', {}, (_name, args) => {
        return {
            type: 'box',
            backgroundcolor: stringToColor(args[0]),
            skipBoundary: true,
            body: args[1],
            verbatimBackgroundcolor: args[0],
        };
    }, (name, _parent, atom, emit) => `${name}{${atom.verbatimBackgroundcolor || colorToString(atom.backgroundcolor)}}{${emit(atom, atom.body)}}`);
    defineFunction('fcolorbox', '{frame-color:string}{background-color:string}{content:auto}', {}, (_name, args) => {
        return {
            type: 'box',
            framecolor: stringToColor(args[0]),
            backgroundcolor: stringToColor(args[1]),
            skipBoundary: true,
            body: args[2],
            verbatimBackgroundcolor: args[1],
            verbatimFramecolor: args[0],
        };
    }, (name, _parent, atom, emit) => `${name}{${atom.verbatimFramecolor || colorToString(atom.framecolor)}{${atom.verbatimBackgroundcolor || colorToString(atom.backgroundcolor)}}{${emit(atom, atom.body)}}`);
    // \bbox, MathJax extension
    // The first argument is a CSS border property shorthand, e.g.
    // \bbox[red], \bbox[5px,border:2px solid red]
    // The MathJax syntax is
    // arglist ::= <arg>[,<arg>[,<arg>]]
    // arg ::= [<background:color>|<padding:dimen>|<style>]
    // style ::= 'border:' <string>
    defineFunction('bbox', '[:bbox]{body:auto}', {}, (_name, args) => {
        if (args[0]) {
            const arg = args[0];
            return {
                type: 'box',
                padding: arg.padding,
                border: arg.border,
                backgroundcolor: arg.backgroundcolor,
                skipBoundary: true,
                body: args[1],
            };
        }
        return {
            type: 'box',
            skipBoundary: true,
            body: args[1],
        };
    }, (name, _parent, atom, emit) => {
        let result = name;
        if (isFinite(atom.padding) ||
            typeof atom.border !== 'undefined' ||
            typeof atom.backgroundcolor !== 'undefined') {
            const bboxParams = [];
            if (isFinite(atom.padding)) {
                bboxParams.push(Math.floor(1e2 * atom.padding) / 1e2 + 'em');
            }
            if (atom.border) {
                bboxParams.push('border:' + atom.border);
            }
            if (atom.backgroundcolor) {
                bboxParams.push(colorToString(atom.backgroundcolor));
            }
            result += `[${bboxParams.join(',')}]`;
        }
        return result + `{${emit(atom, atom.body)}}`;
    });
    defineFunction(['displaystyle', 'textstyle', 'scriptstyle', 'scriptscriptstyle'], '', {}, (name, _args) => {
        return {
            mathstyle: name.slice(1),
        };
    });
    // Size
    defineFunction([
        'tiny',
        'scriptsize',
        'footnotesize',
        'small',
        'normalsize',
        'large',
        'Large',
        'LARGE',
        'huge',
        'Huge',
    ], '', { mode: 'text' }, (name, _args) => {
        return {
            fontSize: {
                tiny: 'size1',
                scriptsize: 'size2',
                footnotesize: 'size3',
                small: 'size4',
                normalsize: 'size5',
                large: 'size6',
                Large: 'size7',
                LARGE: 'size8',
                huge: 'size9',
                Huge: 'size10',
            }[name.slice(1)],
        };
    });
    // \fontseries only works in text mode
    defineFunction('fontseries', '{:string}', { mode: 'text' }, (_name, args) => {
        return { fontSeries: args[0] };
    });
    // SHAPE: italic, small caps
    defineFunction('fontshape', '{:string}', { mode: 'text' }, (_name, args) => {
        return { fontShape: args[0] };
    });
    // FONT FAMILY: Fraktur, Calligraphic, ...
    defineFunction('fontfamily', '{:string}', { mode: 'text' }, (_name, args) => {
        return { fontFamily: args[0] };
    });
    // In LaTeX, the \fontseries, \fontshape, \fontfamily, \fontsize commands
    // do not take effect until \selectfont is encoded. In our implementation,
    // they take effect immediately, and \selectfont is a no-op
    defineFunction('selectfont', '', { mode: 'text' }, (_name, _args) => {
        return {};
    });
    // \bf works in any mode
    // As per the LaTeX 2.09 semantics, it overrides shape, family
    defineFunction('bf', '', {}, (_name, _args) => {
        return { fontSeries: 'b', fontShape: 'n', fontFamily: 'cmr' };
    });
    // Note: These function work a little bit differently than LaTex
    // In LaTeX, \bm{x\mathrm{y}} yield a bold x and an upright y.
    // This is not necesarily intentional, but a side effect of the (current)
    // implementation of \bm
    defineFunction(['boldsymbol', 'bm'], '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', cssClass: 'ML__boldsymbol' };
    });
    // Note: switches to math mode
    defineFunction('bold', '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', variantStyle: 'bold' };
    });
    defineFunction('bfseries', '', { mode: 'text' }, (_name, _args) => {
        return { fontSeries: 'b' };
    });
    defineFunction('mdseries', '', { mode: 'text' }, (_name, _args) => {
        return { fontSeries: 'm' };
    });
    defineFunction('upshape', '', { mode: 'text' }, (_name, _args) => {
        return { fontShape: 'n' };
    });
    defineFunction('slshape', '', { mode: 'text' }, (_name, _args) => {
        return { fontShape: 'sl' };
    });
    // Small caps
    defineFunction('scshape', '', { mode: 'text' }, (_name, _args) => {
        return { fontShape: 'sc' };
    });
    defineFunction('textbf', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontSeries: 'b' };
    });
    defineFunction('textmd', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontSeries: 'm' };
    });
    defineFunction('textup', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontShape: 'n' };
    });
    // @todo: family could be 'none' or 'default'
    // "normal" font of the body text, not necessarily roman
    defineFunction('textnormal', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontShape: 'n', fontSeries: 'm' };
    });
    defineFunction('textsl', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontShape: 'sl' };
    });
    defineFunction('textit', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontShape: 'it' };
    });
    defineFunction('textsc', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontShape: 'sc' };
    });
    defineFunction('textrm', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontFamily: 'roman' };
    });
    defineFunction('textsf', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontFamily: 'sans-serif' };
    });
    defineFunction('texttt', '{:text*}', {}, (_name, _args) => {
        return { mode: 'text', fontFamily: 'monospace' };
    });
    // Note: \mathbf is a no-op in text mode
    defineFunction('mathbf', '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', variant: 'normal', variantStyle: 'bold' };
    });
    defineFunction('mathit', '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', variant: 'normal', variantStyle: 'italic' };
    });
    // From the ISOMath package
    defineFunction('mathbfit', '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', variant: 'normal', variantStyle: 'bolditalic' };
    });
    defineFunction('mathrm', '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', variant: 'normal', variantStyle: 'up' };
    });
    defineFunction('mathsf', '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', variant: 'sans-serif', variantStyle: 'up' };
    });
    defineFunction('mathtt', '{:math*}', {}, (_name, _args) => {
        return { mode: 'math', variant: 'monospace', variantStyle: 'up' };
    });
    defineFunction('it', '', {}, (_name, _args) => {
        return {
            fontSeries: 'm',
            fontShape: 'it',
            fontFamily: 'cmr',
            variantStyle: 'italic',
        };
    });
    // In LaTeX, \rmfamily, \sffamily and \ttfamily are no-op in math mode.
    defineFunction('rmfamily', '', {}, (_name, _args) => {
        return { fontFamily: 'roman' };
    });
    defineFunction('sffamily', '', {}, (_name, _args) => {
        return { fontFamily: 'sans-serif' };
    });
    defineFunction('ttfamily', '', {}, (_name, _args) => {
        return { fontFamily: 'monospace' };
    });
    // In LaTeX, \Bbb and \mathbb are no-op in text mode.
    // They also map lowercase characters to different glyphs.
    // Note that \Bbb has been deprecated for over 20 years (as well as \rm, \it, \bf)
    defineFunction(['Bbb', 'mathbb'], '{:math*}', {}, (_name, _args) => {
        return { variant: 'double-struck', variantStyle: 'up' };
    });
    defineFunction(['frak', 'mathfrak'], '{:math*}', {}, (_name, _args) => {
        return { variant: 'fraktur', variantStyle: 'up' };
    });
    defineFunction('mathcal', '{:math*}', {}, (_name, _args) => {
        return { variant: 'calligraphic', variantStyle: 'up' };
    });
    defineFunction('mathscr', '{:math*}', {}, (_name, _args) => {
        return { variant: 'script', variantStyle: 'up' };
    });
    // Rough synomym for \text{}
    /*
    An \mbox within math mode does not use the current math font; rather it uses
    the typeface of the surrounding running text.
    */
    defineFunction('mbox', '{:text}', null, (_name, args) => {
        return {
            type: 'group',
            mode: 'math',
            body: args[0],
        };
    });
    defineFunction('text', '{:text*}', null, (_name, _args) => {
        return { mode: 'text' };
    });
    /* A MathJax extension: assign a class to the element */
    defineFunction('class', '{name:string}{content:auto*}', null, (_name, args) => {
        return { cssClass: args[0] };
    });
    /* A MathJax extension: assign an ID to the element */
    defineFunction('cssId', '{id:string}{content:auto}', null, (_name, args) => {
        return {
            type: 'group',
            body: args[1],
            cssId: args[0],
        };
    });
    /* Note: in TeX, \em is restricted to text mode. We extend it to math
     * This is the 'switch' variant of \emph, i.e:
     * `\emph{important text}`
     * `{\em important text}`
     */
    defineFunction('em', '', null, (_name, _args) => {
        return { cssClass: 'ML__emph' };
    });
    /* Note: in TeX, \emph is restricted to text mode. We extend it to math */
    defineFunction('emph', '{:auto}', null, (_name, args) => {
        return {
            cssClass: 'ML__emph',
            body: args[0],
            type: 'group',
            skipBoundary: true,
        };
    });
    // Extra data needed for the delimiter parse function down below
    const DELIMITER_SIZES = {
        '\\bigl': { mclass: 'mopen', size: 1 },
        '\\Bigl': { mclass: 'mopen', size: 2 },
        '\\biggl': { mclass: 'mopen', size: 3 },
        '\\Biggl': { mclass: 'mopen', size: 4 },
        '\\bigr': { mclass: 'mclose', size: 1 },
        '\\Bigr': { mclass: 'mclose', size: 2 },
        '\\biggr': { mclass: 'mclose', size: 3 },
        '\\Biggr': { mclass: 'mclose', size: 4 },
        '\\bigm': { mclass: 'mrel', size: 1 },
        '\\Bigm': { mclass: 'mrel', size: 2 },
        '\\biggm': { mclass: 'mrel', size: 3 },
        '\\Biggm': { mclass: 'mrel', size: 4 },
        '\\big': { mclass: 'mord', size: 1 },
        '\\Big': { mclass: 'mord', size: 2 },
        '\\bigg': { mclass: 'mord', size: 3 },
        '\\Bigg': { mclass: 'mord', size: 4 },
    };
    defineFunction([
        'bigl',
        'Bigl',
        'biggl',
        'Biggl',
        'bigr',
        'Bigr',
        'biggr',
        'Biggr',
        'bigm',
        'Bigm',
        'biggm',
        'Biggm',
        'big',
        'Big',
        'bigg',
        'Bigg',
    ], '{:delim}', null, function (name, args) {
        return {
            type: 'sizeddelim',
            size: DELIMITER_SIZES[name].size,
            cls: DELIMITER_SIZES[name].mclass,
            delim: args[0],
        };
    });
    defineFunction([
        'hspace',
        'hspace*',
    ], '{width:skip}', {}, function (_name, args) {
        return {
            type: 'spacing',
            width: args[0] || 0,
        };
    });
    defineFunction([
        'mathop',
        'mathbin',
        'mathrel',
        'mathopen',
        'mathclose',
        'mathpunct',
        'mathord',
        'mathinner',
    ], '{:auto}', null, (name, args) => {
        const result = {
            type: {
                '\\mathop': 'mop',
                '\\mathbin': 'mbin',
                '\\mathrel': 'mrel',
                '\\mathopen': 'mopen',
                '\\mathclose': 'mclose',
                '\\mathpunct': 'mpunct',
                '\\mathord': 'mord',
                '\\mathinner': 'minner',
            }[name],
            body: args[0],
            // A string would be styled as text, but these need to be interpreted
            // as 'math'
            captureSelection: true,
        };
        if (name === '\\mathop') {
            result.limits = 'limits';
            result.isFunction = true;
        }
        return result;
    }, (name, _parent, atom, emit) => {
        return `${name}{${emit(atom, atom.body)}}`;
    });
    // @todo see http://mirrors.ibiblio.org/CTAN/macros/latex/required/amsmath/amsopn.pdf
    // for list of additional operators
    defineFunction(['operatorname', 'operatorname*'], '{operator:math}', null, function (name, args) {
        const result = {
            type: 'mop',
            captureSelection: true,
            body: args[0],
            isFunction: true,
        };
        /*
        The \operatorname commands is defined with:

        \gdef\newmcodes@{\mathcode`\'39\mathcode`\*42\mathcode`\."613A%
        \ifnum\mathcode`\-=45 \else
            \mathchardef\std@minus\mathcode`\-\relax
        \fi
        \mathcode`\-45\mathcode`\/47\mathcode`\:"603A\relax}


        \mathcode assigns to a character its category (2=mbin), its font family (0=cmr),
        and its character code.

        It basically temporarily reassigns to ":.'-/*" the values/properties
        these characters have in text mode (but importantly, not to " " (space))

        */
        result.body.forEach((x) => {
            x.isFunction = false;
            if (!x.variant && !x.variantStyle) {
                // No variant as been specified (as it could have been with
                // \operatorname{\mathit{lim}} for example)
                // Bypass the default auto styling by specifing an upright style
                x.variant = 'main';
                x.variantStyle = 'up';
            }
            x.type = 'mord';
            x.body =
                { '\u2217': '*', '\u2212': '-' }[x.body] || x.body;
        });
        if (name === '\\operatorname') {
            result.limits = 'nolimits';
        }
        else if (name === '\\operatorname*') {
            result.limits = 'limits';
        }
        return result;
    });
    defineFunction('unicode', '{charcode:number}', null, (_name, args) => {
        let codepoint = parseInt(args[0]);
        if (!isFinite(codepoint))
            codepoint = 0x2753; // BLACK QUESTION MARK
        return {
            type: 'mord',
            body: String.fromCodePoint(codepoint),
            codepoint: codepoint,
        };
    }, (name, _parent, atom, _emit) => {
        return `${name}{"${('000000' + atom.codepoint.toString(16))
        .toUpperCase()
        .substr(-6)}}`;
    });
    // A box of the width and height
    defineFunction('rule', '[raise:dimen]{width:dimen}{thickness:dimen}', null, function (name, args) {
        return {
            type: 'rule',
            shift: args[0],
            width: args[1],
            height: args[2],
        };
    });
    // An overline
    defineFunction('overline', '{:auto}', null, (_name, args) => {
        return {
            type: 'line',
            position: 'overline',
            skipBoundary: true,
            body: args[0],
        };
    });
    defineFunction('underline', '{:auto}', null, (_name, args) => {
        return {
            type: 'line',
            position: 'underline',
            skipBoundary: true,
            body: args[0],
        };
    });
    defineFunction('overset', '{annotation:auto}{symbol:auto}', null, function (_name, args) {
        return {
            type: 'overunder',
            overscript: args[0],
            skipBoundary: true,
            body: args[1],
        };
    }, (name, _parent, atom, emit) => {
        return `${name}{${emit(atom, atom.overscript)}}{${emit(atom, atom.body)}}`;
    });
    defineFunction('underset', '{annotation:auto}{symbol:auto}', null, function (_name, args) {
        return {
            type: 'overunder',
            underscript: args[0],
            skipBoundary: true,
            body: args[1],
        };
    }, (name, _parent, atom, emit) => {
        return `${name}{${emit(atom, atom.overscript)}}{${emit(atom, atom.body)}}`;
    });
    defineFunction(['overwithdelims', 'atopwithdelims'], '{numer:auto}{denom:auto}{left-delim:delim}{right-delim:delim}', { infix: true }, function (_name, args) {
        return {
            type: 'genfrac',
            numer: args[0],
            denom: args[1],
            hasBarLine: false,
            leftDelim: args[2],
            rightDelim: args[3],
            mathstyle: 'auto',
        };
    }, (name, _parent, atom, emit) => {
        return `${emit(atom, atom.numer)} ${name}${atom.leftDelim}${atom.rightDelim}${emit(atom, atom.denom)}`;
    });
    defineFunction(['stackrel', 'stackbin'], '{annotation:auto}{symbol:auto}', null, function (name, args) {
        return {
            type: 'overunder',
            overscript: args[0],
            skipBoundary: true,
            body: args[1],
            // Set the correct spacing rule for \stackrel
            mathtype: name === '\\stackrel' ? 'mrel' : 'mbin',
        };
    }, (name, _parent, atom, emit) => `${name}{${emit(atom, atom.overscript)}}{${emit(atom, atom.body)}}`);
    defineFunction('rlap', '{:auto}', null, function (name, args) {
        return {
            type: 'overlap',
            align: 'right',
            skipBoundary: true,
            body: args[0],
        };
    });
    defineFunction('llap', '{:auto}', null, function (name, args) {
        return {
            type: 'overlap',
            align: 'left',
            skipBoundary: true,
            body: args[0],
        };
    });
    defineFunction('mathrlap', '{:auto}', null, function (name, args) {
        return {
            type: 'overlap',
            mode: 'math',
            align: 'right',
            skipBoundary: true,
            body: args[0],
        };
    });
    defineFunction('mathllap', '{:auto}', null, function (name, args) {
        return {
            type: 'overlap',
            mode: 'math',
            align: 'left',
            skipBoundary: true,
            body: args[0],
        };
    });

    // Simple characters allowed in math mode
    defineSymbols('0123456789/@.?!');
    defineSymbolRange(0x0041, 0x005a); // a-z
    defineSymbolRange(0x0061, 0x007a); // A-Z
    // Quantifiers
    defineSymbol('\\forall', '\u2200');
    defineSymbol('\\exists', '\u2203');
    defineSymbol('\\nexists', '\u2204', 'mord', 'ams');
    defineSymbol('\\mid', '\u2223', 'mrel');
    defineSymbol('\\top', '\u22a4');
    defineSymbol('\\bot', '\u22a5');
    // Misc Symbols
    defineSymbol('\\sharp', '\u266f');
    defineSymbol('\\flat', '\u266d');
    defineSymbol('\\natural', '\u266e');
    defineSymbol('\\#', '\u0023');
    defineSymbol('\\&', '\u0026');
    defineSymbol('\\clubsuit', '\u2663');
    defineSymbol('\\heartsuit', '\u2661');
    defineSymbol('\\spadesuit', '\u2660');
    defineSymbol('\\diamondsuit', '\u2662');
    // defineSymbol( '\\cross', '\uF4A0',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
    // defineSymbol( '\\transpose', '\uF3C7',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
    // defineSymbol( '\\conjugate', 'conj'],  MAIN,  'mord', '\uF3C8'); // NOTE: not a real TeX symbol, but Mathematica
    // defineSymbol( '\\conjugatetranspose', '\uF3C9',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
    // defineSymbol( '\\hermitianconjugate', '\uF3CE',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
    defineSymbol('\\differencedelta', '\u2206', 'mrel');
    defineSymbol('\\backslash', '\\');
    defineSymbol('\\nabla', '\u2207');
    defineSymbol('\\partial', '\u2202');
    defineSymbol('\\ell', '\u2113');
    defineSymbol('\\hbar', '\u210f');
    defineSymbol('\\hslash', '\u210f', 'mord', 'ams');
    defineSymbol('\\Finv', '\u2132', 'mord', 'ams');
    defineSymbol('\\Game', '\u2141', 'mord', 'ams');
    defineSymbol('\\wp', '\u2118');
    defineSymbol('\\eth', '\u00f0', 'mord', 'ams');
    defineSymbol('\\mho', '\u2127', 'mord', 'ams');
    defineSymbol('\\Bbbk', '\u006b', 'mord', 'ams');
    defineSymbol('\\N', 'N', 'mord', 'double-struck'); // NOTE: Check if standard Latex
    defineSymbol('\\R', 'R', 'mord', 'double-struck'); // NOTE: Check if standard Latex
    defineSymbol('\\Q', 'Q', 'mord', 'double-struck'); // NOTE: Check if standard Latex
    defineSymbol('\\C', 'C', 'mord', 'double-struck'); // NOTE: Check if standard Latex
    defineSymbol('\\Z', 'Z', 'mord', 'double-struck'); // NOTE: Check if standard Latex
    defineSymbol('\\P', 'P', 'mord', 'double-struck'); // NOTE: Check if standard Latex
    defineSymbol('\\pounds', '\u00a3');
    defineSymbol('\\yen', '\u00a5', 'mord', 'ams');
    defineSymbol('\\euro', '\u20AC'); // NOTE: not TeX built-in, but textcomp package
    // TODO Koppa, Stigma, Sampi
    // Math and Text
    defineSymbol('\\dagger', '\u2020', 'mbin');
    defineSymbol('\\dag', '\u2020', 'mbin');
    defineSymbol('\\ddag', '\u2021', 'mbin');
    defineSymbol('\\ddagger', '\u2021', 'mbin');
    defineSymbol('\\maltese', '\u2720', 'mord', 'ams');
    // Arrow Symbols
    defineSymbol('\\rightarrow', '\u2192', 'mrel');
    defineSymbol('\\to', '\u2192', 'mrel');
    defineSymbol('\\leftarrow', '\u2190', 'mrel');
    defineSymbol('\\gets', '\u2190', 'mrel');
    defineSymbol('\\Rightarrow', '\u21d2', 'mrel');
    defineSymbol('\\Leftarrow', '\u21d0', 'mrel');
    defineSymbol('\\longrightarrow', '\u27f6', 'mrel');
    defineSymbol('\\longleftarrow', '\u27f5', 'mrel');
    defineSymbol('\\Longrightarrow', '\u27f9', 'mrel');
    defineSymbol('\\implies', '\u27f9', 'mrel');
    defineSymbol('\\Longleftarrow', '\u27f8', 'mrel');
    defineSymbol('\\impliedby', '\u27f8', 'mrel');
    defineSymbol('\\dashrightarrow', '\u21e2', 'mrel', 'ams');
    defineSymbol('\\dashleftarrow', '\u21e0', 'mrel', 'ams');
    defineSymbol('\\Rrightarrow', '\u21db', 'mrel', 'ams');
    defineSymbol('\\Lleftarrow', '\u21da', 'mrel', 'ams');
    defineSymbol('\\longleftrightarrow', '\u27f7', 'mrel');
    defineSymbol('\\biconditional', '\u27f7', 'mrel');
    defineSymbol('\\Longleftrightarrow', '\u27fa', 'mrel');
    defineSymbol('\\leftrightarrows', '\u21c6', 'mrel', 'ams');
    defineSymbol('\\rightleftarrows', '\u21c4', 'mrel', 'ams');
    defineSymbol('\\mapsto', '\u21a6', 'mrel');
    defineSymbol('\\longmapsto', '\u27fc', 'mrel');
    defineSymbol('\\uparrow', '\u2191', 'mrel');
    defineSymbol('\\downarrow', '\u2193', 'mrel');
    defineSymbol('\\Uparrow', '\u21d1', 'mrel');
    defineSymbol('\\Downarrow', '\u21d3', 'mrel');
    defineSymbol('\\updownarrow', '\u2195', 'mrel');
    defineSymbol('\\Updownarrow', '\u21d5', 'mrel');
    defineSymbol('\\curvearrowright', '\u21b7', 'mrel', 'ams');
    defineSymbol('\\curvearrowleft', '\u21b6', 'mrel', 'ams');
    defineSymbol('\\hookrightarrow', '\u21aa', 'mrel');
    defineSymbol('\\hookleftarrow', '\u21a9', 'mrel');
    defineSymbol('\\rightharpoonup', '\u21c0', 'mrel');
    defineSymbol('\\leftharpoonup', '\u21bc', 'mrel');
    defineSymbol('\\rightharpoondown', '\u21c1', 'mrel');
    defineSymbol('\\leftharpoondown', '\u21bd', 'mrel');
    defineSymbol('\\rightrightarrows', '\u21c9', 'mrel', 'ams');
    defineSymbol('\\leftleftarrows', '\u21c7', 'mrel', 'ams');
    defineSymbol('\\upuparrows', '\u21c8', 'mrel', 'ams');
    defineSymbol('\\downdownarrows', '\u21ca', 'mrel', 'ams');
    defineSymbol('\\leftarrowtail', '\u21a2', 'mrel', 'ams');
    defineSymbol('\\rightarrowtail', '\u21a3', 'mrel', 'ams');
    defineSymbol('\\looparrowright', '\u21ac', 'mrel', 'ams');
    defineSymbol('\\looparrowleft', '\u21ab', 'mrel', 'ams');
    defineSymbol('\\twoheadleftarrow', '\u219e', 'mrel', 'ams');
    defineSymbol('\\twoheadrightarrow', '\u21a0', 'mrel', 'ams');
    defineSymbol('\\rightleftharpoons', '\u21cc', 'mrel');
    defineSymbol('\\leftrightharpoons', '\u21cb', 'mrel', 'ams');
    defineSymbol('\\Rsh', '\u21b1', 'mrel', 'ams');
    defineSymbol('\\Lsh', '\u21b0', 'mrel', 'ams');
    defineSymbol('\\searrow', '\u2198', 'mrel');
    defineSymbol('\\nearrow', '\u2197', 'mrel');
    defineSymbol('\\swarrow', '\u2199', 'mrel');
    defineSymbol('\\nwarrow', '\u2196', 'mrel');
    defineSymbol('\\circlearrowright', '\u21bb', 'mrel', 'ams');
    defineSymbol('\\circlearrowleft', '\u21ba', 'mrel', 'ams');
    defineSymbol('\\restriction', '\u21be', 'mrel', 'ams');
    defineSymbol('\\upharpoonright', '\u21be', 'mrel', 'ams');
    defineSymbol('\\upharpoonleft', '\u21bf', 'mrel', 'ams');
    defineSymbol('\\downharpoonright', '\u21c2', 'mrel', 'ams');
    defineSymbol('\\downharpoonleft', '\u21c3', 'mrel', 'ams');
    defineSymbol('\\rightsquigarrow', '\u21dd', 'mrel', 'ams');
    defineSymbol('\\leadsto', '\u21dd', 'mrel', 'ams');
    defineSymbol('\\leftrightsquigarrow', '\u21ad', 'mrel', 'ams');
    defineSymbol('\\originalof', '\u22B6', 'mrel');
    defineSymbol('\\laplace', '\u22B6', 'mrel');
    defineSymbol('\\imageof', '\u22B7', 'mrel');
    defineSymbol('\\Laplace', '\u22B7', 'mrel');
    defineSymbol('\\multimap', '\u22b8', 'mrel', 'ams');
    // 'ams' Negated Arrows
    defineSymbol('\\nrightarrow', '\u219b', 'mrel', 'ams');
    defineSymbol('\\nleftarrow', '\u219a', 'mrel', 'ams');
    defineSymbol('\\nRightarrow', '\u21cf', 'mrel', 'ams');
    defineSymbol('\\nLeftarrow', '\u21cd', 'mrel', 'ams');
    defineSymbol('\\nleftrightarrow', '\u21ae', 'mrel', 'ams');
    defineSymbol('\\nLeftrightarrow', '\u21ce', 'mrel', 'ams');
    // 'ams' Negated Binary Relations
    defineSymbol('\\nless', '\u226e', 'mrel', 'ams');
    defineSymbol('\\nleqslant', '\ue010', 'mrel', 'ams');
    defineSymbol('\\lneq', '\u2a87', 'mrel', 'ams');
    defineSymbol('\\lneqq', '\u2268', 'mrel', 'ams');
    defineSymbol('\\nleqq', '\ue011', 'mrel', 'ams');
    defineSymbol('\\unlhd', '\u22b4', 'mbin', 'ams');
    defineSymbol('\\unrhd', '\u22b5', 'mbin', 'ams');
    defineSymbol('\\lvertneqq', '\ue00c', 'mrel', 'ams');
    defineSymbol('\\lnsim', '\u22e6', 'mrel', 'ams');
    defineSymbol('\\lnapprox', '\u2a89', 'mrel', 'ams');
    defineSymbol('\\nprec', '\u2280', 'mrel', 'ams');
    defineSymbol('\\npreceq', '\u22e0', 'mrel', 'ams');
    defineSymbol('\\precnsim', '\u22e8', 'mrel', 'ams');
    defineSymbol('\\precnapprox', '\u2ab9', 'mrel', 'ams');
    defineSymbol('\\nsim', '\u2241', 'mrel', 'ams');
    defineSymbol('\\nshortmid', '\ue006', 'mrel', 'ams');
    defineSymbol('\\nmid', '\u2224', 'mrel', 'ams');
    defineSymbol('\\nvdash', '\u22ac', 'mrel', 'ams');
    defineSymbol('\\nvDash', '\u22ad', 'mrel', 'ams');
    defineSymbol('\\ngtr', '\u226f', 'mrel', 'ams');
    defineSymbol('\\ngeqslant', '\ue00f', 'mrel', 'ams');
    defineSymbol('\\ngeqq', '\ue00e', 'mrel', 'ams');
    defineSymbol('\\gneq', '\u2a88', 'mrel', 'ams');
    defineSymbol('\\gneqq', '\u2269', 'mrel', 'ams');
    defineSymbol('\\gvertneqq', '\ue00d', 'mrel', 'ams');
    defineSymbol('\\gnsim', '\u22e7', 'mrel', 'ams');
    defineSymbol('\\gnapprox', '\u2a8a', 'mrel', 'ams');
    defineSymbol('\\nsucc', '\u2281', 'mrel', 'ams');
    defineSymbol('\\nsucceq', '\u22e1', 'mrel', 'ams');
    defineSymbol('\\succnsim', '\u22e9', 'mrel', 'ams');
    defineSymbol('\\succnapprox', '\u2aba', 'mrel', 'ams');
    defineSymbol('\\ncong', '\u2246', 'mrel', 'ams');
    defineSymbol('\\nshortparallel', '\ue007', 'mrel', 'ams');
    defineSymbol('\\nparallel', '\u2226', 'mrel', 'ams');
    defineSymbol('\\nVDash', '\u22af', 'mrel', 'ams');
    defineSymbol('\\nsupseteqq', '\ue018', 'mrel', 'ams');
    defineSymbol('\\supsetneq', '\u228b', 'mrel', 'ams');
    defineSymbol('\\varsupsetneq', '\ue01b', 'mrel', 'ams');
    defineSymbol('\\supsetneqq', '\u2acc', 'mrel', 'ams');
    defineSymbol('\\varsupsetneqq', '\ue019', 'mrel', 'ams');
    defineSymbol('\\nVdash', '\u22ae', 'mrel', 'ams');
    defineSymbol('\\precneqq', '\u2ab5', 'mrel', 'ams');
    defineSymbol('\\succneqq', '\u2ab6', 'mrel', 'ams');
    defineSymbol('\\nsubseteqq', '\ue016', 'mrel', 'ams');
    // 'ams' Misc
    defineSymbol('\\checkmark', '\u2713', 'mord', 'ams');
    defineSymbol('\\diagup', '\u2571', 'mord', 'ams');
    defineSymbol('\\diagdown', '\u2572', 'mord', 'ams');
    defineSymbol('\\measuredangle', '\u2221', 'mord', 'ams');
    defineSymbol('\\sphericalangle', '\u2222', 'mord', 'ams');
    defineSymbol('\\backprime', '\u2035', 'mord', 'ams');
    defineSymbol('\\backdoubleprime', '\u2036', 'mord', 'ams');
    defineSymbol('\\ast', '\u2217', 'mbin');
    defineSymbol('\\star', '\u22c6', 'mbin');
    defineSymbol('\\diamond', '\u22c4', 'mbin');
    defineSymbol('\\Diamond', '\u25ca', 'mord', 'ams');
    defineSymbol('\\lozenge', '\u25ca', 'mord', 'ams');
    defineSymbol('\\blacklozenge', '\u29eb', 'mord', 'ams');
    defineSymbol('\\bigstar', '\u2605', 'mord', 'ams');
    // 'ams' Hebrew
    defineSymbol('\\aleph', '\u2135');
    defineSymbol('\\beth', '\u2136', 'mord', 'ams');
    defineSymbol('\\daleth', '\u2138', 'mord', 'ams');
    defineSymbol('\\gimel', '\u2137', 'mord', 'ams');
    // 'ams' Delimiters
    defineSymbol('\\lbrace', '{', 'mopen');
    defineSymbol('\\rbrace', '}', 'mclose');
    defineSymbol('\\langle', '\u27e8', 'mopen');
    defineSymbol('\\rangle', '\u27e9', 'mclose');
    defineSymbol('\\lfloor', '\u230a', 'mopen');
    defineSymbol('\\rfloor', '\u230b', 'mclose');
    defineSymbol('\\lceil', '\u2308', 'mopen');
    defineSymbol('\\rceil', '\u2309', 'mclose');
    defineSymbol('\\vert', '\u2223');
    defineSymbol('\\mvert', '\u2223', 'mrel');
    defineSymbol('\\lvert', '\u2223', 'mopen');
    defineSymbol('\\rvert', '\u2223', 'mclose');
    defineSymbol('\\|', '\u2225');
    defineSymbol('\\Vert', '\u2225');
    defineSymbol('\\mVert', '\u2225');
    defineSymbol('\\lVert', '\u2225', 'mopen');
    defineSymbol('\\rVert', '\u2225', 'mclose');
    defineSymbol('\\parallel', '\u2225', 'mrel');
    defineSymbol('\\shortparallel', '\u2225', 'mrel', 'ams');
    defineSymbol('\\lbrack', '[', 'mopen');
    defineSymbol('\\rbrack', ']', 'mclose');
    defineSymbol('\\{', '{', 'mopen');
    defineSymbol('\\}', '}', 'mclose');
    defineSymbol('(', '(', 'mopen');
    defineSymbol(')', ')', 'mclose');
    defineSymbol('[', '[', 'mopen');
    defineSymbol(']', ']', 'mclose');
    defineSymbol('\\ulcorner', '\u250c', 'mopen', 'ams');
    defineSymbol('\\urcorner', '\u2510', 'mclose', 'ams');
    defineSymbol('\\llcorner', '\u2514', 'mopen', 'ams');
    defineSymbol('\\lrcorner', '\u2518', 'mclose', 'ams');
    // Large Delimiters
    defineSymbol('\\lgroup', '\u27ee', 'mopen');
    defineSymbol('\\rgroup', '\u27ef', 'mclose');
    defineSymbol('\\lmoustache', '\u23b0', 'mopen');
    defineSymbol('\\rmoustache', '\u23b1', 'mclose');
    // Relations
    defineSymbol('=', '=', 'mrel');
    defineSymbol('\\ne', '\u2260', 'mrel');
    defineSymbol('\\neq', '\u2260', 'mrel');
    // defineSymbol( '\\longequal', '\uF7D9',  'mrel',  MAIN);   // NOTE: Not TeX
    defineSymbol('<', '<', 'mrel');
    defineSymbol('\\lt', '<', 'mrel');
    defineSymbol('>', '>', 'mrel');
    defineSymbol('\\gt', '>', 'mrel');
    defineSymbol('\\le', '\u2264', 'mrel');
    defineSymbol('\\leq', '\u2264', 'mrel');
    defineSymbol('\\ge', '\u2265', 'mrel');
    defineSymbol('\\geq', '\u2265', 'mrel');
    defineSymbol('\\leqslant', '\u2a7d', 'mrel', 'ams');
    defineSymbol('\\geqslant', '\u2a7e', 'mrel', 'ams');
    defineSymbol('\\ll', '\u226a', 'mrel');
    defineSymbol('\\gg', '\u226b', 'mrel');
    defineSymbol('\\coloneq', '\u2254', 'mrel');
    defineSymbol('\\measeq', '\u225d', 'mrel'); // MEASSURED BY
    defineSymbol('\\eqdef', '\u225e', 'mrel');
    defineSymbol('\\questeq', '\u225f', 'mrel'); // QUESTIONED EQUAL TO
    defineSymbol(':', ':', 'mrel');
    defineSymbol('\\cong', '\u2245', 'mrel');
    defineSymbol('\\equiv', '\u2261', 'mrel');
    defineSymbol('\\prec', '\u227a', 'mrel');
    defineSymbol('\\preceq', '\u2aaf', 'mrel');
    defineSymbol('\\succ', '\u227b', 'mrel');
    defineSymbol('\\succeq', '\u2ab0', 'mrel');
    defineSymbol('\\perp', '\u22a5', 'mrel');
    defineSymbol('\\propto', '\u221d', 'mrel');
    defineSymbol('\\Colon', '\u2237', 'mrel');
    defineSymbol('\\smile', '\u2323', 'mrel');
    defineSymbol('\\frown', '\u2322', 'mrel');
    defineSymbol('\\sim', '\u223c', 'mrel');
    defineSymbol('\\gtrsim', '\u2273', 'mrel', 'ams');
    defineSymbol('\\approx', '\u2248', 'mrel');
    defineSymbol('\\approxeq', '\u224a', 'mrel', 'ams');
    defineSymbol('\\thickapprox', '\u2248', 'mrel', 'ams');
    defineSymbol('\\lessapprox', '\u2a85', 'mrel', 'ams');
    defineSymbol('\\gtrapprox', '\u2a86', 'mrel', 'ams');
    defineSymbol('\\precapprox', '\u2ab7', 'mrel', 'ams');
    defineSymbol('\\succapprox', '\u2ab8', 'mrel', 'ams');
    defineSymbol('\\thicksim', '\u223c', 'mrel', 'ams');
    defineSymbol('\\succsim', '\u227f', 'mrel', 'ams');
    defineSymbol('\\precsim', '\u227e', 'mrel', 'ams');
    defineSymbol('\\backsim', '\u223d', 'mrel', 'ams');
    defineSymbol('\\eqsim', '\u2242', 'mrel', 'ams');
    defineSymbol('\\backsimeq', '\u22cd', 'mrel', 'ams');
    defineSymbol('\\simeq', '\u2243', 'mrel');
    defineSymbol('\\lesssim', '\u2272', 'mrel', 'ams');
    defineSymbol('\\nleq', '\u2270', 'mrel', 'ams');
    defineSymbol('\\ngeq', '\u2271', 'mrel', 'ams');
    defineSymbol('\\smallsmile', '\u2323', 'mrel', 'ams');
    defineSymbol('\\smallfrown', '\u2322', 'mrel', 'ams');
    defineSymbol('\\bowtie', '\u22c8', 'mrel');
    defineSymbol('\\Join', '\u22c8', 'mrel');
    defineSymbol('\\asymp', '\u224d', 'mrel');
    defineSymbol('\\sqsubseteq', '\u2291', 'mrel');
    defineSymbol('\\sqsupseteq', '\u2292', 'mrel');
    defineSymbol('\\leqq', '\u2266', 'mrel', 'ams');
    defineSymbol('\\eqslantless', '\u2a95', 'mrel', 'ams');
    defineSymbol('\\lll', '\u22d8', 'mrel', 'ams');
    defineSymbol('\\lessgtr', '\u2276', 'mrel', 'ams');
    defineSymbol('\\lesseqgtr', '\u22da', 'mrel', 'ams');
    defineSymbol('\\lesseqqgtr', '\u2a8b', 'mrel', 'ams');
    defineSymbol('\\risingdotseq', '\u2253', 'mrel', 'ams');
    defineSymbol('\\fallingdotseq', '\u2252', 'mrel', 'ams');
    defineSymbol('\\subseteqq', '\u2ac5', 'mrel', 'ams');
    defineSymbol('\\Subset', '\u22d0', 'mrel', 'ams');
    defineSymbol('\\sqsubset', '\u228f', 'mrel', 'ams');
    defineSymbol('\\preccurlyeq', '\u227c', 'mrel', 'ams');
    defineSymbol('\\curlyeqprec', '\u22de', 'mrel', 'ams');
    defineSymbol('\\vDash', '\u22a8', 'mrel', 'ams');
    defineSymbol('\\Vvdash', '\u22aa', 'mrel', 'ams');
    defineSymbol('\\bumpeq', '\u224f', 'mrel', 'ams');
    defineSymbol('\\Bumpeq', '\u224e', 'mrel', 'ams');
    defineSymbol('\\geqq', '\u2267', 'mrel', 'ams');
    defineSymbol('\\eqslantgtr', '\u2a96', 'mrel', 'ams');
    defineSymbol('\\ggg', '\u22d9', 'mrel', 'ams');
    defineSymbol('\\gtrless', '\u2277', 'mrel', 'ams');
    defineSymbol('\\gtreqless', '\u22db', 'mrel', 'ams');
    defineSymbol('\\gtreqqless', '\u2a8c', 'mrel', 'ams');
    defineSymbol('\\supseteqq', '\u2ac6', 'mrel', 'ams');
    defineSymbol('\\Supset', '\u22d1', 'mrel', 'ams');
    defineSymbol('\\sqsupset', '\u2290', 'mrel', 'ams');
    defineSymbol('\\succcurlyeq', '\u227d', 'mrel', 'ams');
    defineSymbol('\\curlyeqsucc', '\u22df', 'mrel', 'ams');
    defineSymbol('\\Vdash', '\u22a9', 'mrel', 'ams');
    defineSymbol('\\shortmid', '\u2223', 'mrel', 'ams');
    defineSymbol('\\between', '\u226c', 'mrel', 'ams');
    defineSymbol('\\pitchfork', '\u22d4', 'mrel', 'ams');
    defineSymbol('\\varpropto', '\u221d', 'mrel', 'ams');
    defineSymbol('\\backepsilon', '\u220d', 'mrel', 'ams');
    defineSymbol('\\llless', '\u22d8', 'mrel', 'ams');
    defineSymbol('\\gggtr', '\u22d9', 'mrel', 'ams');
    defineSymbol('\\lhd', '\u22b2', 'mbin', 'ams');
    defineSymbol('\\rhd', '\u22b3', 'mbin', 'ams');
    defineSymbol('\\doteq', '\u2250', 'mrel');
    defineSymbol('\\doteqdot', '\u2251', 'mrel', 'ams');
    defineSymbol('\\Doteq', '\u2251', 'mrel', 'ams');
    defineSymbol('\\eqcirc', '\u2256', 'mrel', 'ams');
    defineSymbol('\\circeq', '\u2257', 'mrel', 'ams');
    defineSymbol('\\lessdot', '\u22d6', 'mbin', 'ams');
    defineSymbol('\\gtrdot', '\u22d7', 'mbin', 'ams');
    // In TeX, '~' is a spacing command (non-breaking space).
    // However, '~' is used as an ASCII Math shortctut character, so define a \\~
    // command which maps to the '~' character
    defineSymbol('\\~', '~', 'mrel');
    defineSymbol('\\leftrightarrow', '\u2194', 'mrel');
    defineSymbol('\\Leftrightarrow', '\u21d4', 'mrel');
    defineSymbol('\\models', '\u22a8', 'mrel');
    defineSymbol('\\vdash', '\u22a2', 'mrel');
    defineSymbol('\\therefore', '\u2234', 'mrel', 'ams');
    defineSymbol('\\because', '\u2235', 'mrel', 'ams');
    defineSymbol('\\dashv', '\u22a3', 'mrel');
    defineSymbol('\\roundimplies', '\u2970', 'mrel');
    // 'ams' Binary Operators
    defineSymbol('+', '+', 'mbin');
    defineSymbol('-', '\u2212', 'mbin');
    defineSymbol('\u2212', '\u2212', 'mbin');
    defineSymbol('\\pm', '\u00b1', 'mbin');
    defineSymbol('\\mp', '\u2213', 'mbin');
    defineSymbol('*', '\u2217', 'mbin');
    defineSymbol('\\times', '\u00d7', 'mbin');
    defineSymbol('\\div', '\u00f7', 'mbin');
    defineSymbol('\\surd', '\u221a');
    defineSymbol('\\divides', '\u2223', 'mbin');
    // From MnSymbol package
    defineSymbol('\\ltimes', '\u22c9', 'mbin', 'ams');
    defineSymbol('\\rtimes', '\u22ca', 'mbin', 'ams');
    defineSymbol('\\leftthreetimes', '\u22cb', 'mbin', 'ams');
    defineSymbol('\\rightthreetimes', '\u22cc', 'mbin', 'ams');
    defineSymbol('\\intercal', '\u22ba', 'mbin', 'ams');
    defineSymbol('\\dotplus', '\u2214', 'mbin', 'ams');
    defineSymbol('\\doublebarwedge', '\u2a5e', 'mbin', 'ams');
    defineSymbol('\\divideontimes', '\u22c7', 'mbin', 'ams');
    defineSymbol('\\centerdot', '\u22c5', 'mbin', 'ams');
    defineSymbol('\\cdot', '\u22c5', 'mbin');
    defineSymbol('\\infty', '\u221e');
    defineSymbol('\\prime', '\u2032');
    defineSymbol('\\doubleprime', '\u2033'); // NOTE: Not in TeX, but Mathematica
    defineSymbol('\\angle', '\u2220');
    defineSymbol('`', '\u2018');
    defineSymbol('\\$', '$');
    defineSymbol('\\%', '%');
    defineSymbol('\\_', '_');
    // Note: In TeX, greek symbols are only available in Math mode
    defineSymbol('\\alpha', '\u03b1');
    defineSymbol('\\beta', '\u03b2');
    defineSymbol('\\gamma', '\u03b3');
    defineSymbol('\\delta', '\u03b4');
    defineSymbol('\\epsilon', '\u03f5');
    defineSymbol('\\varepsilon', '\u03b5');
    defineSymbol('\\zeta', '\u03b6');
    defineSymbol('\\eta', '\u03b7');
    defineSymbol('\\theta', '\u03b8');
    defineSymbol('\\vartheta', '\u03d1');
    defineSymbol('\\iota', '\u03b9');
    defineSymbol('\\kappa', '\u03ba');
    defineSymbol('\\varkappa', '\u03f0', 'mord', 'ams');
    defineSymbol('\\lambda', '\u03bb');
    defineSymbol('\\mu', '\u03bc');
    defineSymbol('\\nu', '\u03bd');
    defineSymbol('\\xi', '\u03be');
    defineSymbol('\\omicron', 'o');
    defineSymbol('\\pi', '\u03c0');
    defineSymbol('\\varpi', '\u03d6');
    defineSymbol('\\rho', '\u03c1');
    defineSymbol('\\varrho', '\u03f1');
    defineSymbol('\\sigma', '\u03c3');
    defineSymbol('\\varsigma', '\u03c2');
    defineSymbol('\\tau', '\u03c4');
    defineSymbol('\\phi', '\u03d5');
    defineSymbol('\\varphi', '\u03c6');
    defineSymbol('\\upsilon', '\u03c5');
    defineSymbol('\\chi', '\u03c7');
    defineSymbol('\\psi', '\u03c8');
    defineSymbol('\\omega', '\u03c9');
    defineSymbol('\\Gamma', '\u0393');
    defineSymbol('\\Delta', '\u0394');
    defineSymbol('\\Theta', '\u0398');
    defineSymbol('\\Lambda', '\u039b');
    defineSymbol('\\Xi', '\u039e');
    defineSymbol('\\Pi', '\u03a0');
    defineSymbol('\\Sigma', '\u03a3');
    defineSymbol('\\Upsilon', '\u03a5');
    defineSymbol('\\Phi', '\u03a6');
    defineSymbol('\\Psi', '\u03a8');
    defineSymbol('\\Omega', '\u03a9');
    // 'ams' Greek
    defineSymbol('\\digamma', '\u03dd', 'mord', 'ams');
    defineSymbol('\\emptyset', '\u2205');
    defineSymbol('\\varnothing', '\u2205', 'mord', 'ams');
    defineSymbol('\\cap', '\u2229', 'mbin');
    defineSymbol('\\cup', '\u222a', 'mbin');
    defineSymbol('\\setminus', '\u2216', 'mbin');
    defineSymbol('\\smallsetminus', '\u2216', 'mbin', 'ams');
    defineSymbol('\\complement', '\u2201', 'mord', 'ams');
    defineSymbol('\\in', '\u2208', 'mrel');
    defineSymbol('\\notin', '\u2209', 'mrel');
    defineSymbol('\\not', '\u0338', 'mrel');
    defineSymbol('\\ni', '\u220b', 'mrel');
    defineSymbol('\\owns', '\u220b', 'mrel');
    defineSymbol('\\subset', '\u2282', 'mrel');
    defineSymbol('\\supset', '\u2283', 'mrel');
    defineSymbol('\\subseteq', '\u2286', 'mrel');
    defineSymbol('\\supseteq', '\u2287', 'mrel');
    defineSymbol('\\subsetneq', '\u228a', 'mrel', 'ams');
    defineSymbol('\\varsubsetneq', '\ue01a', 'mrel', 'ams');
    defineSymbol('\\subsetneqq', '\u2acb', 'mrel', 'ams');
    defineSymbol('\\varsubsetneqq', '\ue017', 'mrel', 'ams');
    defineSymbol('\\nsubset', '\u2284', 'mrel', 'ams'); // NOTE: Not TeX?
    defineSymbol('\\nsupset', '\u2285', 'mrel', 'ams'); // NOTE: Not TeX?
    defineSymbol('\\nsubseteq', '\u2288', 'mrel', 'ams');
    defineSymbol('\\nsupseteq', '\u2289', 'mrel', 'ams');
    // See http://tex.stackexchange.com/questions/41476/lengths-and-when-to-use-them
    defineSymbol('\\ ', '\u00a0', 'spacing');
    defineSymbol('~', '\u00a0', 'spacing');
    defineSymbol('\\space', '\u00a0', 'spacing');
    defineSymbol('\\!', null, 'spacing');
    defineSymbol('\\,', null, 'spacing');
    defineSymbol('\\:', null, 'spacing');
    defineSymbol('\\;', null, 'spacing');
    defineSymbol('\\enskip', null, 'spacing');
    // \enspace is a TeX command (not LaTeX) equivalent to a \skip
    defineSymbol('\\enspace', null, 'spacing');
    defineSymbol('\\quad', null, 'spacing');
    defineSymbol('\\qquad', null, 'spacing');
    // Punctuation
    defineSymbol('\\colon', ':', 'mpunct');
    defineSymbol('\\cdotp', '\u22c5', 'mpunct');
    defineSymbol('\\cdots', '\u22ef', 'minner');
    defineSymbol('\\ddots', '\u22f1', 'minner');
    defineSymbol('\\ldots', '\u2026', 'minner');
    defineSymbol('\\mathellipsis', '\u2026', 'minner');
    defineSymbol('\\vdots', '\u22ee');
    defineSymbol('\\ldotp', '\u002e', 'mpunct');
    defineSymbol(',', ',', 'mpunct');
    defineSymbol(';', ';', 'mpunct');
    defineSymbol('\\land', '\u2227', 'mbin');
    defineSymbol('\\wedge', '\u2227', 'mbin');
    defineSymbol('\\lor', '\u2228', 'mbin');
    defineSymbol('\\vee', '\u2228', 'mbin');
    defineSymbol('\\lnot', '\u00ac');
    defineSymbol('\\neg', '\u00ac');
    defineSymbol('\\barwedge', '\u22bc', 'mbin', 'ams');
    defineSymbol('\\veebar', '\u22bb', 'mbin', 'ams');
    defineSymbol('\\nor', '\u22bb', 'mbin', 'ams'); // NOTE: Not TeX, Mathematica
    defineSymbol('\\curlywedge', '\u22cf', 'mbin', 'ams');
    defineSymbol('\\curlyvee', '\u22ce', 'mbin', 'ams');
    defineSymbol('\\square', '\u25a1', 'mord', 'ams');
    defineSymbol('\\Box', '\u25a1', 'mord', 'ams');
    defineSymbol('\\blacksquare', '\u25a0', 'mord', 'ams');
    defineSymbol('\\boxminus', '\u229f', 'mbin', 'ams');
    defineSymbol('\\boxplus', '\u229e', 'mbin', 'ams');
    defineSymbol('\\boxtimes', '\u22a0', 'mbin', 'ams');
    defineSymbol('\\boxdot', '\u22a1', 'mbin', 'ams');
    defineSymbol('\\circ', '\u2218', 'mbin');
    defineSymbol('\\bigcirc', '\u25ef', 'mbin');
    defineSymbol('\\bullet', '\u2219', 'mbin');
    defineSymbol('\\circleddash', '\u229d', 'mbin', 'ams');
    defineSymbol('\\circledast', '\u229b', 'mbin', 'ams');
    defineSymbol('\\oplus', '\u2295', 'mbin');
    defineSymbol('\\ominus', '\u2296', 'mbin');
    defineSymbol('\\otimes', '\u2297', 'mbin');
    defineSymbol('\\odot', '\u2299', 'mbin');
    defineSymbol('\\circledcirc', '\u229a', 'mbin', 'ams');
    defineSymbol('\\oslash', '\u2298', 'mbin');
    defineSymbol('\\circledS', '\u24c8', 'mord', 'ams');
    defineSymbol('\\circledR', '\u00ae', 'mord', 'ams');
    defineSymbol('\\triangle', '\u25b3');
    defineSymbol('\\bigtriangleup', '\u25b3', 'mbin');
    defineSymbol('\\vartriangle', '\u25b3', 'mrel', 'ams');
    defineSymbol('\\triangleq', '\u225c', 'mrel', 'ams');
    defineSymbol('\\triangledown', '\u25bd', 'mord', 'ams');
    defineSymbol('\\bigtriangledown', '\u25bd', 'mbin');
    defineSymbol('\\triangleleft', '\u25c3', 'mbin');
    defineSymbol('\\vartriangleleft', '\u22b2', 'mrel', 'ams');
    defineSymbol('\\trianglelefteq', '\u22b4', 'mrel', 'ams');
    defineSymbol('\\ntriangleleft', '\u22ea', 'mrel', 'ams');
    defineSymbol('\\ntrianglelefteq', '\u22ec', 'mrel', 'ams');
    defineSymbol('\\triangleright', '\u25b9', 'mbin');
    defineSymbol('\\vartriangleright', '\u22b3', 'mrel', 'ams');
    defineSymbol('\\trianglerighteq', '\u22b5', 'mrel', 'ams');
    defineSymbol('\\ntriangleright', '\u22eb', 'mrel', 'ams');
    defineSymbol('\\ntrianglerighteq', '\u22ed', 'mrel', 'ams');
    defineSymbol('\\blacktriangle', '\u25b2', 'mord', 'ams');
    defineSymbol('\\blacktriangledown', '\u25bc', 'mord', 'ams');
    defineSymbol('\\blacktriangleleft', '\u25c0', 'mrel', 'ams');
    defineSymbol('\\blacktriangleright', '\u25b6', 'mrel', 'ams');
    defineSymbol('\\/', '/');
    defineSymbol('|', '\u2223', 'textord');
    defineSymbol('\\And', '\u0026', 'mbin');
    defineSymbol('\\imath', '\u0131');
    defineSymbol('\\jmath', '\u0237');
    defineSymbol('\\degree', '\u00b0');
    defineSymbol("'", '\u2032'); // Prime
    defineSymbol('"', '\u201D'); // Double Prime
    // defineSymbol( "\'', '\u2033',  'mord',  MAIN);       // Double Prime

    /**
     * This module deals with creating delimiters of various sizes. The TeXbook
     * discusses these routines on page 441-442, in the "Another subroutine sets box
     * x to a specified variable delimiter" paragraph.
     *
     * There are three main routines here. `makeSmallDelim` makes a delimiter in the
     * normal font, but in either text, script, or scriptscript style.
     * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
     * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
     * smaller pieces that are stacked on top of one another.
     *
     * The functions take a parameter `center`, which determines if the delimiter
     * should be centered around the axis.
     *
     * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
     * one of the given sizes. This is used for things like `\bigl`.
     * `customSizedDelim` makes a delimiter with a given total height+depth. It is
     * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
     * delimiter which surrounds an expression of a given height an depth. It is
     * used in `\left` and `\right`.
     * @summary   Handling of delimiters surrounds symbols.
     */
    /**
     * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
     * font, but is restyled to either be in textstyle, scriptstyle, or
     * scriptscriptstyle.
     */
    function makeSmallDelim(type, delim, style, center, context, classes = '') {
        const text = makeSymbol('Main-Regular', getValue('math', delim));
        const span = makeStyleWrap(type, text, context.mathstyle, style, classes);
        if (center) {
            span.setTop((1 - context.mathstyle.sizeMultiplier / style.sizeMultiplier) *
                context.mathstyle.metrics.axisHeight);
        }
        span.setStyle('color', context.color);
        if (typeof context.opacity === 'number') {
            span.setStyle('opacity', context.opacity);
        }
        return span;
    }
    /**
     * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
     * Size3, or Size4 fonts. It is always rendered in textstyle.
     */
    function makeLargeDelim(type, delim, size, center, context, classes = '') {
        const result = makeStyleWrap(type, makeSymbol('Size' + size + '-Regular', getValue('math', delim), 'delimsizing size' + size), context.mathstyle, MATHSTYLES.textstyle, classes);
        if (center) {
            result.setTop((1 - context.mathstyle.sizeMultiplier) *
                context.mathstyle.metrics.axisHeight);
        }
        result.setStyle('color', context.color);
        if (typeof context.opacity === 'number') {
            result.setStyle('opacity', context.opacity);
        }
        return result;
    }
    /**
     * Make an inner span with the given offset and in the given font. This is used
     * in `makeStackedDelim` to make the stacking pieces for the delimiter.
     */
    function makeInner(symbol, font) {
        let sizeClass = '';
        // Apply the correct CSS class to choose the right font.
        if (font === 'Size1-Regular') {
            sizeClass = ' delim-size1';
        }
        else if (font === 'Size4-Regular') {
            sizeClass = ' delim-size4';
        }
        return makeSymbol(font, getValue('math', symbol), 'delimsizinginner' + sizeClass);
    }
    /**
     * Make a stacked delimiter out of a given delimiter, with the total height at
     * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
     */
    function makeStackedDelim(type, delim, heightTotal, center, context, classes = '') {
        // There are four parts, the top, an optional middle, a repeated part, and a
        // bottom.
        let top;
        let middle;
        let repeat;
        let bottom;
        top = repeat = bottom = getValue('math', delim);
        middle = null;
        // Also keep track of what font the delimiters are in
        let font = 'Size1-Regular';
        // We set the parts and font based on the symbol. Note that we use
        // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
        // repeats of the arrows
        if (delim === '\\vert' ||
            delim === '\\lvert' ||
            delim === '\\rvert' ||
            delim === '\\mvert' ||
            delim === '\\mid') {
            repeat = top = bottom = '\u2223';
        }
        else if (delim === '\\Vert' ||
            delim === '\\lVert' ||
            delim === '\\rVert' ||
            delim === '\\mVert' ||
            delim === '\\|') {
            repeat = top = bottom = '\u2225';
        }
        else if (delim === '\\uparrow') {
            repeat = bottom = '\u23d0';
        }
        else if (delim === '\\Uparrow') {
            repeat = bottom = '\u2016';
        }
        else if (delim === '\\downarrow') {
            top = repeat = '\u23d0';
        }
        else if (delim === '\\Downarrow') {
            top = repeat = '\u2016';
        }
        else if (delim === '\\updownarrow') {
            top = '\u2191';
            repeat = '\u23d0';
            bottom = '\u2193';
        }
        else if (delim === '\\Updownarrow') {
            top = '\u21d1';
            repeat = '\u2016';
            bottom = '\u21d3';
        }
        else if (delim === '[' || delim === '\\lbrack') {
            top = '\u23a1';
            repeat = '\u23a2';
            bottom = '\u23a3';
            font = 'Size4-Regular';
        }
        else if (delim === ']' || delim === '\\rbrack') {
            top = '\u23a4';
            repeat = '\u23a5';
            bottom = '\u23a6';
            font = 'Size4-Regular';
        }
        else if (delim === '\\lfloor') {
            repeat = top = '\u23a2';
            bottom = '\u23a3';
            font = 'Size4-Regular';
        }
        else if (delim === '\\lceil') {
            top = '\u23a1';
            repeat = bottom = '\u23a2';
            font = 'Size4-Regular';
        }
        else if (delim === '\\rfloor') {
            repeat = top = '\u23a5';
            bottom = '\u23a6';
            font = 'Size4-Regular';
        }
        else if (delim === '\\rceil') {
            top = '\u23a4';
            repeat = bottom = '\u23a5';
            font = 'Size4-Regular';
        }
        else if (delim === '(') {
            top = '\u239b';
            repeat = '\u239c';
            bottom = '\u239d';
            font = 'Size4-Regular';
        }
        else if (delim === ')') {
            top = '\u239e';
            repeat = '\u239f';
            bottom = '\u23a0';
            font = 'Size4-Regular';
        }
        else if (delim === '\\{' || delim === '\\lbrace') {
            top = '\u23a7';
            middle = '\u23a8';
            bottom = '\u23a9';
            repeat = '\u23aa';
            font = 'Size4-Regular';
        }
        else if (delim === '\\}' || delim === '\\rbrace') {
            top = '\u23ab';
            middle = '\u23ac';
            bottom = '\u23ad';
            repeat = '\u23aa';
            font = 'Size4-Regular';
        }
        else if (delim === '\\lgroup') {
            top = '\u23a7';
            bottom = '\u23a9';
            repeat = '\u23aa';
            font = 'Size4-Regular';
        }
        else if (delim === '\\rgroup') {
            top = '\u23ab';
            bottom = '\u23ad';
            repeat = '\u23aa';
            font = 'Size4-Regular';
        }
        else if (delim === '\\lmoustache') {
            top = '\u23a7';
            bottom = '\u23ad';
            repeat = '\u23aa';
            font = 'Size4-Regular';
        }
        else if (delim === '\\rmoustache') {
            top = '\u23ab';
            bottom = '\u23a9';
            repeat = '\u23aa';
            font = 'Size4-Regular';
        }
        else if (delim === '\\surd') {
            top = '\ue001';
            bottom = '\u23b7';
            repeat = '\ue000';
            font = 'Size4-Regular';
        }
        else if (delim === '\\ulcorner') {
            top = '\u250c';
            repeat = bottom = ' ';
        }
        else if (delim === '\\urcorner') {
            top = '\u2510';
            repeat = bottom = ' ';
        }
        else if (delim === '\\llcorner') {
            bottom = '\u2514';
            repeat = top = ' ';
        }
        else if (delim === '\\lrcorner') {
            top = '\u2518';
            repeat = top = ' ';
        }
        // Get the metrics of the four sections
        const topMetrics = getCharacterMetrics(getValue('math', top), font);
        const topHeightTotal = topMetrics.height + topMetrics.depth;
        const repeatMetrics = getCharacterMetrics(getValue('math', repeat), font);
        const repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
        const bottomMetrics = getCharacterMetrics(getValue('math', bottom), font);
        const bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
        let middleHeightTotal = 0;
        let middleFactor = 1;
        if (middle !== null) {
            const middleMetrics = getCharacterMetrics(getValue('math', middle), font);
            middleHeightTotal = middleMetrics.height + middleMetrics.depth;
            middleFactor = 2; // repeat symmetrically above and below middle
        }
        // Calculate the minimal height that the delimiter can have.
        // It is at least the size of the top, bottom, and optional middle combined.
        const minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;
        // Compute the number of copies of the repeat symbol we will need
        const repeatCount = Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal));
        // Compute the total height of the delimiter including all the symbols
        const realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal;
        // The center of the delimiter is placed at the center of the axis. Note
        // that in this context, 'center' means that the delimiter should be
        // centered around the axis in the current style, while normally it is
        // centered around the axis in textstyle.
        let axisHeight = context.mathstyle.metrics.axisHeight;
        if (center) {
            axisHeight *= context.mathstyle.sizeMultiplier;
        }
        // Calculate the depth
        const depth = realHeightTotal / 2 - axisHeight;
        // Now, we start building the pieces that will go into the vlist
        // Keep a list of the inner pieces
        const inners = [];
        // Add the bottom symbol
        inners.push(makeInner(bottom, font));
        if (middle === null) {
            // Add that many symbols
            for (let i = 0; i < repeatCount; i++) {
                inners.push(makeInner(repeat, font));
            }
        }
        else {
            // When there is a middle bit, we need the middle part and two repeated
            // sections
            for (let i = 0; i < repeatCount; i++) {
                inners.push(makeInner(repeat, font));
            }
            inners.push(makeInner(middle, font));
            for (let i = 0; i < repeatCount; i++) {
                inners.push(makeInner(repeat, font));
            }
        }
        // Add the top symbol
        inners.push(makeInner(top, font));
        // Finally, build the vlist
        const inner = makeVlist(context, inners, 'bottom', depth);
        inner.setStyle('color', context.color);
        if (typeof context.opacity === 'number') {
            inner.setStyle('opacity', context.opacity);
        }
        return makeStyleWrap(type, makeSpan(inner, 'delimsizing mult'), context.mathstyle, MATHSTYLES.textstyle, classes);
    }
    // There are three kinds of delimiters, delimiters that stack when they become
    // too large
    const stackLargeDelimiters = [
        '(',
        ')',
        '[',
        '\\lbrack',
        ']',
        '\\rbrack',
        '\\{',
        '\\lbrace',
        '\\}',
        '\\rbrace',
        '\\lfloor',
        '\\rfloor',
        '\\lceil',
        '\\rceil',
        '\\surd',
    ];
    // delimiters that always stack
    const stackAlwaysDelimiters = [
        '\\uparrow',
        '\\downarrow',
        '\\updownarrow',
        '\\Uparrow',
        '\\Downarrow',
        '\\Updownarrow',
        '|',
        '\\|',
        '\\vert',
        '\\Vert',
        '\\lvert',
        '\\rvert',
        '\\lVert',
        '\\rVert',
        '\\mvert',
        '\\mid',
        '\\lgroup',
        '\\rgroup',
        '\\lmoustache',
        '\\rmoustache',
    ];
    // and delimiters that never stack
    const stackNeverDelimiters = [
        '<',
        '>',
        '\\langle',
        '\\rangle',
        '/',
        '\\backslash',
        '\\lt',
        '\\gt',
    ];
    // Metrics of the different sizes. Found by looking at TeX's output of
    // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
    // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
    const sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
    /**
     * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
     */
    function makeSizedDelim(type, delim, size, context, classes = '') {
        if (delim === '.') {
            // Empty delimiters still count as elements, even though they don't
            // show anything.
            return makeNullFence(type, context, classes);
            // return makeSpan('', classes);
        }
        // < and > turn into \langle and \rangle in delimiters
        if (delim === '<' || delim === '\\lt') {
            delim = '\\langle';
        }
        else if (delim === '>' || delim === '\\gt') {
            delim = '\\rangle';
        }
        // Sized delimiters are never centered.
        if (stackLargeDelimiters.includes(delim) ||
            stackNeverDelimiters.includes(delim)) {
            return makeLargeDelim(type, delim, size, false, context, classes);
        }
        else if (stackAlwaysDelimiters.includes(delim)) {
            return makeStackedDelim(type, delim, sizeToMaxHeight[size], false, context, classes);
        }
        console.assert(false, "Unknown delimiter '" + delim + "'");
        return null;
    }
    // Delimiters that never stack try small delimiters and large delimiters only
    const stackNeverDelimiterSequence = [
        { type: 'small', mathstyle: MATHSTYLES.scriptscriptstyle },
        { type: 'small', mathstyle: MATHSTYLES.scriptstyle },
        { type: 'small', mathstyle: MATHSTYLES.textstyle },
        { type: 'large', size: 1 },
        { type: 'large', size: 2 },
        { type: 'large', size: 3 },
        { type: 'large', size: 4 },
    ];
    // Delimiters that always stack try the small delimiters first, then stack
    const stackAlwaysDelimiterSequence = [
        { type: 'small', mathstyle: MATHSTYLES.scriptscriptstyle },
        { type: 'small', mathstyle: MATHSTYLES.scriptstyle },
        { type: 'small', mathstyle: MATHSTYLES.textstyle },
        { type: 'stack' },
    ];
    // Delimiters that stack when large try the small and then large delimiters, and
    // stack afterwards
    const stackLargeDelimiterSequence = [
        { type: 'small', mathstyle: MATHSTYLES.scriptscriptstyle },
        { type: 'small', mathstyle: MATHSTYLES.scriptstyle },
        { type: 'small', mathstyle: MATHSTYLES.textstyle },
        { type: 'large', size: 1 },
        { type: 'large', size: 2 },
        { type: 'large', size: 3 },
        { type: 'large', size: 4 },
        { type: 'stack' },
    ];
    /*
     * Get the font used in a delimiter based on what kind of delimiter it is.
     */
    function delimTypeToFont(info) {
        if (info.type === 'small') {
            return 'Main-Regular';
        }
        else if (info.type === 'large') {
            return 'Size' + info.size + '-Regular';
        }
        console.assert(info.type === 'stack');
        return 'Size4-Regular';
    }
    /**
     * Traverse a sequence of types of delimiters to decide what kind of delimiter
     * should be used to create a delimiter of the given height+depth.
     * @param delim - a character value (not a command)
     */
    function traverseSequence(delim, height, sequence, context) {
        // Here, we choose the index we should start at in the sequences. In smaller
        // sizes (which correspond to larger numbers in style.size) we start earlier
        // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
        // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
        const start = Math.min(2, 3 - context.mathstyle.size);
        for (let i = start; i < sequence.length; i++) {
            if (sequence[i].type === 'stack') {
                // This is always the last delimiter, so we just break the loop now.
                break;
            }
            const metrics = getCharacterMetrics(delim, delimTypeToFont(sequence[i]));
            if (metrics.defaultMetrics) {
                // If we don't have metrics info for this character,
                // assume we'll construct as a small delimiter
                return { type: 'small', mathstyle: MATHSTYLES.scriptstyle };
            }
            let heightDepth = metrics.height + metrics.depth;
            // Small delimiters are scaled down versions of the same font, so we
            // account for the style change size.
            if (sequence[i].type === 'small') {
                heightDepth *= sequence[i].mathstyle.sizeMultiplier;
            }
            // Check if the delimiter at this size works for the given height.
            if (heightDepth > height) {
                return sequence[i];
            }
        }
        // If we reached the end of the sequence, return the last sequence element.
        return sequence[sequence.length - 1];
    }
    /**
     * Make a delimiter of a given height+depth, with optional centering. Here, we
     * traverse the sequences, and create a delimiter that the sequence tells us to.
     *
     * @param type - 'mopen' or 'mclose'
     */
    function makeCustomSizedDelim(type, delim, height, center, context, classes = '') {
        if (!delim || delim.length === 0 || delim === '.') {
            return makeNullFence(type, context, type);
        }
        if (delim === '<' || delim === '\\lt') {
            delim = '\\langle';
        }
        else if (delim === '>' || delim === '\\gt') {
            delim = '\\rangle';
        }
        // Decide what sequence to use
        let sequence;
        if (stackNeverDelimiters.includes(delim)) {
            sequence = stackNeverDelimiterSequence;
        }
        else if (stackLargeDelimiters.includes(delim)) {
            sequence = stackLargeDelimiterSequence;
        }
        else {
            sequence = stackAlwaysDelimiterSequence;
        }
        // Look through the sequence
        const delimType = traverseSequence(getValue('math', delim), height, sequence, context);
        // Depending on the sequence element we decided on,
        // call the appropriate function.
        if (delimType.type === 'small') {
            return makeSmallDelim(type, delim, delimType.mathstyle, center, context, 'ML__small-delim ' + classes);
        }
        if (delimType.type === 'large') {
            return makeLargeDelim(type, delim, delimType.size, center, context, classes);
        }
        console.assert(delimType.type === 'stack');
        return makeStackedDelim(type, delim, height, center, context, classes);
    }
    /**
     * Make a delimiter for use with `\left` and `\right`, given a height and depth
     * of an expression that the delimiters surround.
     * See tex.web:14994
     */
    function makeLeftRightDelim(type, delim, height, depth, context, classes = '') {
        // If this is the empty delimiter, return a null fence
        if (delim === '.') {
            return makeNullFence(type, context, classes);
        }
        // We always center \left/\right delimiters, so the axis is always shifted
        const axisHeight = context.mathstyle.metrics.axisHeight * context.mathstyle.sizeMultiplier;
        // Taken from TeX source, tex.web, function make_left_right
        const delimiterFactor = 901; // plain.tex:327, texboox:152
        const delimiterShortfall = 5.0 / METRICS.ptPerEm; // plain.tex:345, texboox:152
        const maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
        const totalHeight = Math.max((maxDistFromAxis / 500) * delimiterFactor, 2 * maxDistFromAxis - delimiterShortfall);
        // Finally, we defer to `makeCustomSizedDelim` with our calculated total
        // height
        return makeCustomSizedDelim(type, delim, totalHeight, true, context, classes);
    }
    /**
     *
     * @param type either 'mopen', 'mclose' or null
     */
    function makeNullFence(type, context, classes) {
        return makeSpan('', 'sizing' + // @todo not useful, redundant with 'nulldelimiter'
            // 'reset-' + context.size, 'size5',                 // @todo: that seems like a lot of resizing... do we need both?
            context.mathstyle.adjustTo(MATHSTYLES.textstyle) +
            ' nulldelimiter ' + // The null delimiter has a width, specified by class 'nulldelimiter'
            (classes || ''), type);
    }

    // See https://tex.stackexchange.com/questions/58098/what-are-all-the-font-styles-i-can-use-in-math-mode
    /*
     * Return an array of runs with the same mode
     */
    function getModeRuns(atoms) {
        const result = [];
        let run = [];
        let currentMode = 'NONE';
        atoms.forEach((atom) => {
            if (atom.type !== 'first') {
                if (atom.mode !== currentMode) {
                    if (run.length > 0)
                        result.push(run);
                    run = [atom];
                    currentMode = atom.mode;
                }
                else {
                    run.push(atom);
                }
            }
        });
        // Push whatever is left
        if (run.length > 0)
            result.push(run);
        return result;
    }
    /**
     *
     * @param {Atom} parent the parent or predecessor of the atom list
     * @param {Atom[]} atoms the list of atoms to transform to LaTeX
     * @param {boolean} expandMacro true if macros should be expanded
     * @result {string} a LaTeX string
     */
    function latexifyArray(parent, atoms, expandMacro) {
        if (atoms.length === 0)
            return '';
        if (atoms[0].type === 'first') {
            if (atoms.length === 1)
                return '';
            // Remove the 'first' atom, if present
            atoms = atoms.slice(1);
        }
        if (atoms.length === 0)
            return '';
        return joinLatex(getPropertyRuns(atoms, 'cssClass').map((x) => {
            const result = joinLatex(getPropertyRuns(x, 'color').map((x) => joinLatex(getModeRuns(x).map((x) => emitLatexRun(parent, x, expandMacro)))));
            if (x[0].cssClass &&
                (typeof parent === 'undefined' ||
                    parent.cssClass !== x[0].cssClass)) {
                if (x[0].cssClass === 'ML__boldsymbol') {
                    return '\\boldsymbol{' + result + '}';
                }
                else if (x[0].cssClass === 'ML__emph') {
                    return '\\emph{' + result + '}';
                }
                return '\\class{' + x[0].cssClass + '}{' + result + '}';
            }
            return result;
        }));
    }
    /**
     * Given an atom or an array of atoms, return a LaTeX string representation
     */
    function latexify(parent, value, expandMacro) {
        let result = '';
        if (isArray(value)) {
            result = latexifyArray(parent, value, expandMacro);
        }
        else if (typeof value === 'number' || typeof value === 'boolean') {
            result = value.toString();
        }
        else if (typeof value === 'string') {
            result = value.replace(/\s/g, '~');
        }
        else if (typeof value !== 'undefined' &&
            value !== null &&
            isFunction(value.toLatex)) {
            result = value.toLatex(expandMacro);
        }
        return result;
    }
    /**
     * Return a LaTeX representation of the atom.
     *
     * @param {boolean} expandMacro - If true, macros are fully expanded. This will
     * no longer round-trip.
     *
     */
    function atomToLatex(atom, expandMacro) {
        expandMacro = typeof expandMacro === 'undefined' ? false : expandMacro;
        // If we have some verbatim latex for this atom, use it.
        // This allow non-significant punctuation to be preserved when possible.
        if (!expandMacro && atom.latex) {
            return atom.latex;
        }
        let result = '';
        let col = 0;
        let row = 0;
        let i = 0;
        const command = atom.symbol;
        let segments = [];
        const emit$1 = (parent, atom) => latexify(parent, atom, expandMacro);
        // atom.mode=='text' is handled in the switch by looking at atom.type===''
        switch (atom.type) {
            case 'group':
                if (command) {
                    // This is a macro
                    result = expandMacro ? emit$1(atom, atom.body) : atom.latex;
                }
                else {
                    result =
                        atom.latexOpen || (atom.cssId || atom.cssClass ? '' : '{');
                    if (atom.cssId)
                        result += '\\cssId{' + atom.cssId + '}{';
                    if (atom.cssClass === 'ML__emph') {
                        result += `\\emph{${emit$1(atom, atom.body)}`;
                    }
                    else {
                        if (atom.cssClass) {
                            result += '\\class{' + atom.cssClass + '}{';
                        }
                        result += emit$1(atom, atom.body);
                        if (atom.cssClass)
                            result += '}';
                    }
                    if (atom.cssId)
                        result += '}';
                    result +=
                        atom.latexClose || (atom.cssId || atom.cssClass ? '' : '}');
                }
                break;
            case 'array':
                result += '\\begin{' + atom.environmentName + '}';
                if (atom.environmentName === 'array') {
                    result += '{';
                    if (typeof atom.colFormat !== 'undefined') {
                        for (i = 0; i < atom.colFormat.length; i++) {
                            if (atom.colFormat[i].align) {
                                result += atom.colFormat[i].align;
                            }
                            else if (atom.colFormat[i].rule) {
                                result += '|';
                            }
                        }
                    }
                    result += '}';
                }
                for (row = 0; row < atom.array.length; row++) {
                    for (col = 0; col < atom.array[row].length; col++) {
                        if (col > 0)
                            result += ' & ';
                        result += emit$1(atom, atom.array[row][col]);
                    }
                    // Adds a separator between rows (but not after the last row)
                    if (row < atom.array.length - 1) {
                        result += ' \\\\ ';
                    }
                }
                result += '\\end{' + atom.environmentName + '}';
                break;
            case 'root':
                result = emit$1(atom, atom.body);
                break;
            case 'leftright':
                if (atom.inner) {
                    segments = [
                        '\\left' + (atom.leftDelim || '.'),
                        emit$1(atom, atom.body),
                        '\\right' + (atom.rightDelim || '.'),
                    ];
                }
                else {
                    if (expandMacro) {
                        // If we're in 'expandMacro' mode (i.e. interchange format
                        // used, e.g., on the clipboard for maximum compatibility
                        // with other LaTeX renderers), drop the `\mleft(` and `\mright`)
                        // commands
                        segments = [
                            atom.leftDelim === '.' ? '' : atom.leftDelim,
                            emit$1(atom, atom.body),
                            atom.rightDelim === '.' ? '' : atom.rightDelim,
                        ];
                    }
                    else {
                        segments = [
                            '\\mleft' + (atom.leftDelim || '.'),
                            emit$1(atom, atom.body),
                            '\\mright' + (atom.rightDelim || '.'),
                        ];
                    }
                }
                result += joinLatex(segments);
                break;
            case 'delim':
            case 'sizeddelim':
                result += command + '{' + atom.delim + '}';
                break;
            case 'rule':
                result += command;
                if (atom.shift) {
                    result += `[${emit$1(atom, atom.shift)}em]`;
                }
                result += `{${emit$1(atom, atom.width)}em}{${emit$1(atom, atom.height)}em}`;
                break;
            case 'mord':
            case 'minner':
            case 'mbin':
            case 'mrel':
            case 'mpunct':
            case 'mopen':
            case 'mclose':
            case 'textord':
                if (command === '\\char"') {
                    result += atom.latex;
                }
                else {
                    result += emit(command, null, atom, emit$1);
                }
                break;
            case 'mop':
                if (atom.body !== '\u200b') {
                    // Not ZERO-WIDTH
                    if (command === '\\mathop') {
                        // The argument to mathop is math, therefor atom.body can be an expression
                        result += command + '{' + emit$1(atom, atom.body) + '}';
                    }
                    else if (command === '\\operatorname') {
                        // The argument to `\operatorname` is 'math' and needs to be latexified
                        result += command + '{' + emit$1(atom, atom.body) + '}';
                    }
                    else {
                        result += command;
                        if (/^\\.*[a-zA-Z0-9]$/.test(command)) {
                            // Add a space after commands, to avoid, e.g.
                            // '\sin' + 'x' -> '\sinx' instead of '\sin x'
                            result += ' ';
                        }
                    }
                }
                if (atom.explicitLimits) {
                    if (atom.limits === 'limits')
                        result += '\\limits ';
                    if (atom.limits === 'nolimits')
                        result += '\\nolimits ';
                }
                break;
            case 'spacing':
                // Three kinds of spacing commands:
                // \hskip and \kern which take one implicit parameter
                // \hspace and hspace* with take one *explicit* parameter
                // \quad, etc... which take no parameters.
                result += command;
                if (command === '\\hspace' || command === '\\hspace*') {
                    result += '{';
                    if (atom.width) {
                        result += Number(atom.width).toString() + 'em';
                    }
                    else {
                        result += '0em';
                    }
                    result += '}';
                }
                else {
                    result += ' ';
                    if (atom.width) {
                        result += Number(atom.width).toString() + 'em ';
                    }
                }
                break;
            case 'enclose':
                result += command;
                if (command === '\\enclose') {
                    result += '{' + Object.keys(atom.notation).join(' ') + '}';
                    // \enclose can have optional parameters...
                    let style = '';
                    let sep = '';
                    if (atom.backgroundColor &&
                        atom.backgroundColor !== 'transparent') {
                        style +=
                            sep +
                                'mathbackground="' +
                                colorToString(atom.backgroundColor) +
                                '"';
                        sep = ',';
                    }
                    if (atom.shadow && atom.shadow !== 'auto') {
                        style += sep + 'shadow="' + atom.shadow + '"';
                        sep = ',';
                    }
                    if (atom.strokeWidth !== 1 || atom.strokeStyle !== 'solid') {
                        style += sep + atom.borderStyle;
                        sep = ',';
                    }
                    else if (atom.strokeColor &&
                        atom.strokeColor !== 'currentColor') {
                        style +=
                            sep +
                                'mathcolor="' +
                                colorToString(atom.strokeColor) +
                                '"';
                        sep = ',';
                    }
                    if (style) {
                        result += `[${style}]`;
                    }
                }
                result += `{${emit$1(atom, atom.body)}}`;
                break;
            case 'mathstyle':
                result += '\\' + atom.mathstyle;
                break;
            case 'space':
                result += atom.symbol;
                break;
            case 'placeholder':
                result += '\\placeholder{}';
                break;
            case 'first':
            case 'command':
            case 'msubsup':
                break;
            case 'error':
                result += atom.latex;
                break;
            case '':
                console.assert(atom.mode === 'text', 'Null atom type in mode ' + atom.mode);
                console.error('Attempting to emit a text atom');
                break;
            default:
                result = emit(command, null, atom, emit$1);
                console.assert(Boolean(result), 'Missing custom emiter for ', command || atom.body);
                if (!result) {
                    result += command;
                }
                break;
        }
        if (typeof atom.superscript !== 'undefined') {
            let sup = emit$1(atom, atom.superscript);
            if (sup.length === 1) {
                if (sup === '\u2032') {
                    // PRIME
                    sup = '\\prime ';
                }
                else if (sup === '\u2033') {
                    // DOUBLE-PRIME
                    sup = '\\doubleprime ';
                }
                result += '^' + sup;
            }
            else {
                result += '^{' + sup + '}';
            }
        }
        if (typeof atom.subscript !== 'undefined') {
            const sub = emit$1(atom, atom.subscript);
            if (sub.length === 1) {
                result += '_' + sub;
            }
            else {
                result += '_{' + sub + '}';
            }
        }
        return result;
    }

    const ATOM_REGISTRY = {};
    // A table of size -> font size for the different sizing functions
    const SIZING_MULTIPLIER = {
        size1: 0.5,
        size2: 0.7,
        size3: 0.8,
        size4: 0.9,
        size5: 1.0,
        size6: 1.2,
        size7: 1.44,
        size8: 1.73,
        size9: 2.07,
        size10: 2.49,
    };
    function registerAtomType(name, decompose) {
        ATOM_REGISTRY[name] = { decompose: decompose };
    }
    /**
     * Return a list of spans equivalent to atoms.
     * A span is the most elementary type possible, for example 'text'
     * or 'vlist', while the input atoms may be more abstract and complex,
     * such as 'genfrac'
     *
     * @param context Font family, variant, size, color, and other info useful
     * to render an expression
     * @param atoms - A single atom or an array of atoms
     */
    function decompose(inputContext, atoms) {
        var _a, _b;
        function isDigit(atom) {
            return (atom.type === 'mord' &&
                Boolean(atom.symbol) &&
                /^[0-9,.]$/.test(atom.symbol));
        }
        function isText(atom) {
            return atom.mode === 'text';
        }
        // We can be passed either a Context object, or
        // a simple object with some properties set.
        const context = inputContext instanceof Context
            ? inputContext
            : new Context(inputContext);
        // In most cases we want to display selection,
        // except if the atomIdsSettings.groupNumbers flag is set which is used for
        // read aloud.
        const displaySelection = !context.atomIdsSettings || !context.atomIdsSettings.groupNumbers;
        let result = [];
        if (isArray(atoms)) {
            if (atoms.length === 0) {
                return [];
            }
            else if (atoms.length === 1) {
                result = atoms[0].decompose(context);
                if (result && displaySelection && atoms[0].isSelected) {
                    result.forEach((x) => x.selected(true));
                }
                console.assert(!result || isArray(result));
            }
            else {
                let selection = [];
                let digitOrTextStringID = '';
                let lastWasDigit = true;
                let phantomBase = null;
                for (let i = 0; i < atoms.length; i++) {
                    // If this is a scaffolding supsub, we'll use the
                    // phantomBase from the previous atom to position the supsub.
                    // Otherwise, no need for the phantomBase
                    if (atoms[i].body !== '\u200b' ||
                        (!atoms[i].superscript && !atoms[i].subscript)) {
                        phantomBase = null;
                    }
                    if (((_a = context.atomIdsSettings) === null || _a === void 0 ? void 0 : _a.groupNumbers) &&
                        digitOrTextStringID &&
                        ((lastWasDigit && isDigit(atoms[i])) ||
                            (!lastWasDigit && isText(atoms[i])))) {
                        context.atomIdsSettings.overrideID = digitOrTextStringID;
                    }
                    const span = atoms[i].decompose(context, phantomBase);
                    if (context.atomIdsSettings) {
                        context.atomIdsSettings.overrideID = null;
                    }
                    if (span) {
                        // The result from decompose is always an array
                        // Flatten it (i.e. [[a1, a2], b1, b2] -> [a1, a2, b1, b2]
                        const flat = [].concat(...span);
                        phantomBase = flat;
                        // If this is a digit or text run, keep track of it
                        if ((_b = context.atomIdsSettings) === null || _b === void 0 ? void 0 : _b.groupNumbers) {
                            if (isDigit(atoms[i]) || isText(atoms[i])) {
                                if (!digitOrTextStringID ||
                                    lastWasDigit !== isDigit(atoms[i])) {
                                    // changed from text to digits or vice-versa
                                    lastWasDigit = isDigit(atoms[i]);
                                    digitOrTextStringID = atoms[i].id;
                                }
                            }
                            if ((!(isDigit(atoms[i]) || isText(atoms[i])) ||
                                atoms[i].superscript ||
                                atoms[i].subscript) &&
                                digitOrTextStringID) {
                                // Done with digits/text
                                digitOrTextStringID = '';
                            }
                        }
                        if (displaySelection && atoms[i].isSelected) {
                            selection = selection.concat(flat);
                            selection.forEach((x) => x.selected(true));
                        }
                        else {
                            if (selection.length > 0) {
                                // There was a selection, but we're out of it now
                                // Append the selection
                                result = [...result, ...selection];
                                selection = [];
                            }
                            result = result.concat(flat);
                        }
                    }
                }
                // Is there a leftover selection?
                if (selection.length > 0) {
                    result = [...result, ...selection];
                    selection = [];
                }
            }
        }
        else if (atoms) {
            // This is a single atom, decompose it
            result = atoms.decompose(context);
            if (result && displaySelection && atoms.isSelected) {
                result.forEach((x) => x.selected(true));
            }
        }
        if (!result || result.length === 0)
            return null;
        console.assert(isArray(result) && result.length > 0);
        // If the mathstyle changed between the parent and the current atom,
        // account for the size difference
        if (context.mathstyle !== context.parentMathstyle) {
            const factor = context.mathstyle.sizeMultiplier /
                context.parentMathstyle.sizeMultiplier;
            for (const span of result) {
                console.assert(!isArray(span));
                console.assert(typeof span.height === 'number' && isFinite(span.height));
                span.height *= factor;
                span.depth *= factor;
            }
        }
        // If the size changed between the parent and the current group,
        // account for the size difference
        if (context.size !== context.parentSize) {
            const factor = SIZING_MULTIPLIER[context.size] /
                SIZING_MULTIPLIER[context.parentSize];
            for (const span of result) {
                console.assert(!isArray(span));
                console.assert(typeof span.height === 'number' && isFinite(span.height));
                span.height *= factor;
                span.depth *= factor;
            }
        }
        return result;
    }
    /**
     * An atom is an object encapsulating an elementary mathematical unit,
     * independent of its graphical representation.
     *
     * It keeps track of the content, while the dimensions, position and style
     * are tracked by Span objects which are created by the `decompose()` functions.
     *
     * @param style A set of additional properties to append to
     * the atom
     * @property mode - `'display'`, `'command'`, etc...
     * @property type - Type can be one of:
     * - `mord`: ordinary symbol, e.g. `x`, `\alpha`
     * - `textord`: ordinary characters
     * - `mop`: operators, including special functions, `\sin`, `\sum`, `\cap`.
     * - `mbin`: binary operator: `+`, `*`, etc...
     * - `mrel`: relational operator: `=`, `\ne`, etc...
     * - `mpunct`: punctuation: `,`, `:`, etc...
     * - `mopen`: opening fence: `(`, `\langle`, etc...
     * - `mclose`: closing fence: `)`, `\rangle`, etc...
     * - `minner`: special layout cases, overlap, `\left...\right`
     *
     * In addition to these basic types, which correspond to the TeX atom types,
     * some atoms represent more complex compounds, including:
     * - `space` and `spacing`: blank space between atoms
     * - `mathstyle`: to change the math style used: `display` or `text`.
     * The layout rules are different for each, the latter being more compact and
     * intended to be incorporated with surrounding non-math text.
     * - `root`: a group, which has no parent (only one per formula)
     * - `group`: a simple group of atoms, for example from a `{...}`
     * - `sizing`: set the size of the font used
     * - `rule`: draw a line, for the `\rule` command
     * - `line`: used by `\overline` and `\underline` commands
     * - `box`: a border drawn around an expression and change its background color
     * - `overlap`: display a symbol _over_ another
     * - `overunder`: displays an annotation above or below a symbol
     * - `array`: a group, which has children arranged in rows. Used
     * by environments such as `matrix`, `cases`, etc...
     * - `genfrac`: a generalized fraction: a numerator and denominator, separated
     * by an optional line, and surrounded by optional fences
     * - `surd`: a surd, aka root
     * - `leftright`: used by the `\left` and `\right` commands
     * - `delim`: some delimiter
     * - `sizeddelim`: a delimiter that can grow
     *
     * The following types are used by the editor:
     * - `command` indicate a command being entered. The text is displayed in
     * blue in the editor.
     * - `error`: indicate a command that is unknown, for example `\xyzy`. The text
     * is displayed with a wavy red underline in the editor.
     * - `placeholder`: indicate a temporary item. Placeholders are displayed
     * as a dashed square in the editor.
     * - `first`: a special, empty, atom put as the first atom in math lists in
     * order to be able to position the caret before the first element. Aside from
     * the caret, they display nothing.
     *
     * @property captureSelection if true, this atom does not let its
     * children be selected. Used by the `\enclose` annotations, for example.
     *
     * @property skipBoundary if true, when the caret reaches the
     * first position in this element's body, it automatically moves to the
     * outside of the element. Conversely, when the caret reaches the position
     * right after this element, it automatically moves to the last position
     * inside this element.
     */
    class Atom {
        constructor(mode, type, body = '', style = {}) {
            console.assert(type === 'first' || Boolean(mode));
            this.mode = mode;
            this.type = type;
            this.body = body;
            // Append all the properties in extras to this
            // This can override the mode, type and body
            this.applyStyle(style);
        }
        toLatex(expandMacro = false) {
            return atomToLatex(this, expandMacro);
        }
        getStyle() {
            return {
                mode: this.mode,
                color: this.isPhantom ? 'transparent' : this.color,
                backgroundColor: this.isPhantom
                    ? 'transparent'
                    : this.backgroundColor,
                variant: this.variant,
                variantStyle: this.variantStyle,
                fontFamily: this.fontFamily,
                fontShape: this.fontShape,
                fontSeries: this.fontSeries,
                fontSize: this.fontSize,
                cssId: this.cssId,
                cssClass: this.cssClass,
            };
        }
        applyStyle(style) {
            Object.assign(this, style);
            if (this.fontFamily === 'none') {
                this.fontFamily = '';
            }
            if (this.fontShape === 'auto') {
                this.fontShape = '';
            }
            if (this.fontSeries === 'auto') {
                this.fontSeries = '';
            }
            if (this.color === 'none') {
                this.color = '';
            }
            if (this.backgroundColor === 'none') {
                this.backgroundColor = '';
            }
            if (this.fontSize === 'auto') {
                this.fontSize = '';
            }
            if (this.fontSize) {
                this.maxFontSize = SIZING_MULTIPLIER[this.fontSize];
            }
            if (this.mode === 'text') {
                // @revisit. Use type = 'text' for text atoms?
                // A root can be in text mode (root created when creating a representation
                // of the selection, for copy/paste for example)
                if (this.type !== 'root')
                    this.type = '';
            }
        }
        getInitialBaseElement() {
            let result;
            if (isArray(this.body) && this.body.length > 0) {
                if (this.body[0].type !== 'first') {
                    result = this.body[0].getInitialBaseElement();
                }
                else if (this.body[1]) {
                    result = this.body[1].getInitialBaseElement();
                }
            }
            return result || this;
        }
        getFinalBaseElement() {
            if (isArray(this.body) && this.body.length > 0) {
                return this.body[this.body.length - 1].getFinalBaseElement();
            }
            return this;
        }
        isCharacterBox() {
            const base = this.getInitialBaseElement();
            return /minner|mbin|mrel|mpunct|mopen|mclose|textord/.test(base.type);
        }
        forEach(cb) {
            cb(this);
            if (isArray(this.body)) {
                for (const atom of this.body)
                    if (atom)
                        atom.forEach(cb);
            }
            else if (this.body && typeof this.body === 'object') {
                // Note: body can be null, for example 'first' or 'rule'
                // (and null is an object)
                cb(this.body);
            }
            if (this.superscript) {
                for (const atom of this.superscript)
                    if (atom)
                        atom.forEach(cb);
            }
            if (this.subscript) {
                for (const atom of this.subscript)
                    if (atom)
                        atom.forEach(cb);
            }
            if (this.overscript) {
                for (const atom of this.overscript)
                    if (atom)
                        atom.forEach(cb);
            }
            if (this.underscript) {
                for (const atom of this.underscript)
                    if (atom)
                        atom.forEach(cb);
            }
            if (this.numer) {
                for (const atom of this.numer)
                    if (atom)
                        atom.forEach(cb);
            }
            if (this.denom) {
                for (const atom of this.denom)
                    if (atom)
                        atom.forEach(cb);
            }
            if (this.index) {
                for (const atom of this.index)
                    if (atom)
                        atom.forEach(cb);
            }
            if (this.array) {
                for (const row of this.array) {
                    for (const cell of row) {
                        for (const atom of cell)
                            atom.forEach(cb);
                    }
                }
            }
        }
        /**
         * Iterate over all the child atoms of this atom, this included,
         * and return an array of all the atoms for which the predicate callback
         * is true.
         */
        filter(cb) {
            let result = [];
            if (cb(this))
                result.push(this);
            for (const relation of [
                'body',
                'superscript',
                'subscript',
                'overscript',
                'underscript',
                'numer',
                'denom',
                'index',
            ]) {
                if (isArray(this[relation])) {
                    for (const atom of this[relation]) {
                        if (atom)
                            result = result.concat(atom.filter(cb));
                    }
                }
            }
            if (isArray(this.array)) {
                for (const row of this.array) {
                    for (const cell of row) {
                        if (cell)
                            result = result.concat(cell.filter(cb));
                    }
                }
            }
            return result;
        }
        decomposeGroup(context) {
            // The scope of the context is this group, so clone it
            // so that any changes to it will be discarded when finished
            // with this group.
            // Note that the mathstyle property is optional and could be undefined
            // If that's the case, clone() returns a clone of the
            // context with the same mathstyle.
            const localContext = context.clone({
                mathstyle: this.mathstyle ? MATHSTYLES[this.mathstyle] : undefined,
            });
            const span = makeSpan(decompose(localContext, this.body), '', 'mord'); // @revisit
            if (this.cssId)
                span.cssId = this.cssId;
            span.applyStyle({
                backgroundColor: this.backgroundColor,
                cssClass: this.cssClass,
            });
            return span;
        }
        decomposeOverlap(context) {
            const inner = makeSpan(decompose(context, this.body), 'inner'); // @revisit
            return makeSpan([inner, makeSpan(null, 'fix')], this.align === 'left' ? 'llap' : 'rlap', 'mord');
        }
        decomposeRule(context) {
            const mathstyle = context.mathstyle;
            const result = makeSpan('', 'rule', 'mord');
            let shift = this.shift && !isNaN(this.shift) ? this.shift : 0;
            shift = shift / mathstyle.sizeMultiplier;
            const width = this.width / mathstyle.sizeMultiplier;
            const height = this.height / mathstyle.sizeMultiplier;
            result.setStyle('border-right-width', width, 'em');
            result.setStyle('border-top-width', height, 'em');
            result.setStyle('margin-top', -(height - shift), 'em');
            result.setStyle('border-color', context['color']); // @revisit
            result.width = width;
            result.height = height + shift;
            result.depth = -shift;
            return result;
        }
        /**
         * Return a representation of this, but decomposed in an array of Spans
         *
         * @param context Font variant, size, color, etc...
         * @param phantomBase If not null, the spans to use to
         * calculate the placement of the supsub
         */
        decompose(context, phantomBase = null) {
            var _a;
            let result = null;
            if (!this.type ||
                /mord|minner|mbin|mrel|mpunct|mopen|mclose|textord/.test(this.type)) {
                // The body of these atom types is *often* a string, but it can
                // be a atom list (for example a command inside a \text{} or \mathop{})
                if (typeof this.body === 'string') {
                    result = this.makeSpan(context, this.body);
                }
                else {
                    result = this.makeSpan(context, decompose(context, this.body));
                }
                result.type = isSpanType(this.type) ? this.type : '';
            }
            else if (this.type === 'group' || this.type === 'root') {
                result = this.decomposeGroup(context);
            }
            else if (this.type === 'delim') {
                result = makeSpan(null, '');
                result.delim = this.delim;
            }
            else if (this.type === 'sizeddelim') {
                result = this.bind(context, makeSizedDelim(this.cls, this.delim, this.size, context));
            }
            else if (this.type === 'overlap') {
                // For llap (18), rlap (270), clap (0)
                // smash (common), mathllap (0), mathrlap (0), mathclap (0)
                // See https://www.tug.org/TUGboat/tb22-4/tb72perlS.pdf
                // and https://tex.stackexchange.com/questions/98785/what-are-the-different-kinds-of-vertical-spacing-and-horizontal-spacing-commands
                result = this.decomposeOverlap(context);
            }
            else if (this.type === 'rule') {
                result = this.decomposeRule(context);
            }
            else if (this.type === 'msubsup') {
                // The caret for this atom type is handled by its elements
                result = makeSpan('\u200b', '', 'mord');
                if (phantomBase) {
                    result.height = phantomBase[0].height;
                    result.depth = phantomBase[0].depth;
                }
            }
            else if (this.type === 'space') {
                // A space literal
                result = this.makeSpan(context, ' ');
            }
            else if (this.type === 'spacing') {
                // A spacing command (\quad, etc...)
                if (this.body === '\u200b') {
                    // ZERO-WIDTH SPACE
                    result = this.makeSpan(context, '\u200b');
                }
                else if (this.body === '\u00a0') {
                    if (this.mode === 'math') {
                        result = this.makeSpan(context, ' ');
                    }
                    else {
                        result = this.makeSpan(context, '\u00a0');
                    }
                }
                else if (this.width) {
                    result = makeSpan('\u200b', 'mspace ');
                    if (this.width > 0) {
                        result.setWidth(this.width);
                    }
                    else {
                        result.setStyle('margin-left', this.width, 'em');
                    }
                }
                else {
                    const spacingCls = (_a = {
                        '\\qquad': 'qquad',
                        '\\quad': 'quad',
                        '\\enspace': 'enspace',
                        '\\;': 'thickspace',
                        '\\:': 'mediumspace',
                        '\\,': 'thinspace',
                        '\\!': 'negativethinspace',
                    }[this.symbol]) !== null && _a !== void 0 ? _a : 'mediumspace';
                    result = makeSpan('\u200b', 'mspace ' + spacingCls);
                }
            }
            else if (this.type === 'mathstyle') {
                context.setMathstyle(this.mathstyle);
            }
            else if (this.type === 'command' || this.type === 'error') {
                console.assert(typeof this.body === 'string');
                result = this.makeSpan(context, this.body);
                result.classes = ''; // Override fonts and other attributes.
                if (this.isError) {
                    result.classes += ' ML__error';
                }
                if (this.isSuggestion) {
                    result.classes += ' ML__suggestion';
                }
            }
            else if (this.type === 'placeholder') {
                result = this.makeSpan(context, '⬚');
            }
            else if (this.type === 'first') {
                // the `first` pseudo-type is used as a placeholder as
                // the first element in a children list. This makes
                // managing the list, and the caret selection, easier.
                // ZERO-WIDTH SPACE
                result = this.makeSpan(context, '\u200b');
            }
            else {
                console.assert(ATOM_REGISTRY[this.type], 'Unknown Atom type: "' + this.type + '"');
                result = ATOM_REGISTRY[this.type].decompose(context, this);
            }
            if (!result)
                return null;
            if (this.caret &&
                this.type !== 'msubsup' &&
                this.type !== 'command' &&
                this.type !== 'placeholder' &&
                this.type !== 'first') {
                if (isArray(result)) {
                    if (!(this.type === 'leftright' &&
                        (this.superscript || this.subscript))) {
                        result[result.length - 1].caret = this.caret;
                    }
                }
                else {
                    result.caret = this.caret;
                }
            }
            if (this.containsCaret) {
                if (isArray(result)) {
                    // For a /mleft.../mright, tag the first and last atom in the
                    // list with the "ML__contains-caret" style (it's the open and
                    // closing fence, respectively)
                    result[0].classes =
                        (result[0].classes || '') + ' ML__contains-caret';
                    result[result.length - 1].classes =
                        (result[result.length - 1].classes || '') +
                            ' ML__contains-caret';
                }
                else {
                    result.classes = (result.classes || '') + ' ML__contains-caret';
                }
            }
            // Finally, attach any necessary superscript, subscripts
            if (!this.limits && (this.superscript || this.subscript)) {
                // If `limits` is set, the attachment of sup/sub was handled
                // in the atom decomposition (e.g. mop, accent)
                if (isArray(result)) {
                    const lastSpan = result[result.length - 1];
                    result[result.length - 1] = this.attachSupsub(context, lastSpan, lastSpan.type);
                }
                else {
                    result = [this.attachSupsub(context, result, result.type)];
                }
            }
            return isArray(result) ? result : [result];
        }
        attachSupsub(context, nucleus, type) {
            // If no superscript or subscript, nothing to do.
            if (!this.superscript && !this.subscript)
                return nucleus;
            // Superscript and subscripts are discussed in the TeXbook
            // on page 445-446, rules 18(a-f).
            // TeX:14859-14945
            const mathstyle = context.mathstyle;
            let supmid = null;
            let submid = null;
            if (this.superscript) {
                const sup = decompose(context.sup(), this.superscript);
                supmid = makeSpan(sup, mathstyle.adjustTo(mathstyle.sup()));
            }
            if (this.subscript) {
                const sub = decompose(context.sub(), this.subscript);
                submid = makeSpan(sub, mathstyle.adjustTo(mathstyle.sub()));
            }
            // Rule 18a, p445
            let supShift = 0;
            let subShift = 0;
            if (!this.isCharacterBox()) {
                supShift = height(nucleus) - mathstyle.metrics.supDrop;
                subShift = depth(nucleus) + mathstyle.metrics.subDrop;
            }
            // Rule 18c, p445
            let minSupShift;
            if (mathstyle === MATHSTYLES.displaystyle) {
                minSupShift = mathstyle.metrics.sup1; // sigma13
            }
            else if (mathstyle.cramped) {
                minSupShift = mathstyle.metrics.sup3; // sigma15
            }
            else {
                minSupShift = mathstyle.metrics.sup2; // sigma14
            }
            // scriptspace is a font-size-independent size, so scale it
            // appropriately @revisit: do we really need to do this scaling? It's in em...
            const multiplier = MATHSTYLES.textstyle.sizeMultiplier * mathstyle.sizeMultiplier;
            const scriptspace = 0.5 / METRICS.ptPerEm / multiplier;
            let supsub = null;
            if (submid && supmid) {
                // Rule 18e
                supShift = Math.max(supShift, minSupShift, supmid.depth + 0.25 * mathstyle.metrics.xHeight);
                subShift = Math.max(subShift, mathstyle.metrics.sub2);
                const ruleWidth = METRICS.defaultRuleThickness;
                if (supShift - depth(supmid) - (height(submid) - subShift) <
                    4 * ruleWidth) {
                    subShift =
                        4 * ruleWidth -
                            (supShift - supmid.depth) +
                            height(submid);
                    const psi = 0.8 * mathstyle.metrics.xHeight -
                        (supShift - depth(supmid));
                    if (psi > 0) {
                        supShift += psi;
                        subShift -= psi;
                    }
                }
                supsub = makeVlist(context, [submid, subShift, supmid, -supShift], 'individualShift');
                // Subscripts shouldn't be shifted by the nucleus' italic correction.
                // Account for that by shifting the subscript back the appropriate
                // amount. Note we only do this when the nucleus is a single symbol.
                if (this.isSymbol) {
                    supsub.children[0].setLeft(-italic(nucleus));
                }
            }
            else if (submid && !supmid) {
                // Rule 18b
                subShift = Math.max(subShift, mathstyle.metrics.sub1, height(submid) - 0.8 * mathstyle.metrics.xHeight);
                supsub = makeVlist(context, [submid], 'shift', subShift);
                supsub.children[0].setRight(scriptspace);
                if (this.isCharacterBox()) {
                    supsub.children[0].setLeft(-italic(nucleus));
                }
            }
            else if (!submid && supmid) {
                // Rule 18c, d
                supShift = Math.max(supShift, minSupShift, supmid.depth + 0.25 * mathstyle.metrics.xHeight);
                supsub = makeVlist(context, [supmid], 'shift', -supShift);
                supsub.children[0].setRight(scriptspace);
            }
            // Display the caret *following* the superscript and subscript,
            // so attach the caret to the 'msubsup' element.
            const supsubContainer = makeSpan(supsub, 'msubsup');
            if (this.caret) {
                supsubContainer.caret = this.caret;
                this.caret = '';
            }
            return makeSpan([nucleus, supsubContainer], '', type);
        }
        attachLimits(context, nucleus, nucleusShift, slant) {
            const limitAbove = this.superscript
                ? makeSpan(decompose(context.sup(), this.superscript), context.mathstyle.adjustTo(context.mathstyle.sup()))
                : null;
            const limitBelow = this.subscript
                ? makeSpan(decompose(context.sub(), this.subscript), context.mathstyle.adjustTo(context.mathstyle.sub()))
                : null;
            return makeLimitsStack(context, nucleus, nucleusShift, slant, limitAbove, limitBelow);
        }
        /**
         * Add an ID attribute to both the span and this atom so that the atom
         * can be retrieved from the span later on (e.g. when the span is clicked on)
         */
        bind(context, span) {
            if (this.type !== 'first' && this.body !== '\u200b') {
                this.id = makeID(context);
                if (this.id) {
                    if (!span.attributes)
                        span.attributes = {};
                    span.attributes['data-atom-id'] = this.id;
                }
            }
            return span;
        }
        /**
         * Create a span with the specified body and with a class attribute
         * equal to the type ('mbin', 'inner', 'spacing', etc...)
         *
         */
        makeSpan(context, body) {
            // Ensure that the atom type is a valid Span type, or use ''
            console.assert(isSpanType(this.type));
            const type = this.type === 'textord'
                ? 'mord'
                : isSpanType(this.type)
                    ? this.type
                    : '';
            const result = makeSpan(body, '', type);
            // The font family is determined by:
            // - the base font family associated with this atom (optional). For example,
            // some atoms such as some functions ('\sin', '\cos', etc...) or some
            // symbols ('\Z') have an explicit font family. This overrides any
            // other font family
            // - the user-specified font family that has been explicitly applied to
            // this atom
            // - the font family automatically determined in math mode, for example
            // which italicizes some characters, but which can be overridden
            const style = this.getStyle();
            style.letterShapeStyle = context.letterShapeStyle;
            result.applyStyle(style);
            // Apply size correction
            const size = (style === null || style === void 0 ? void 0 : style.fontSize) ? style.fontSize : 'size5';
            if (size !== context.parentSize) {
                result.classes += ' sizing reset-' + context.parentSize;
                result.classes += ' ' + size;
            }
            else if (context.parentSize !== context.size) {
                result.classes += ' sizing reset-' + context.parentSize;
                result.classes += ' ' + context.size;
            }
            result.maxFontSize = Math.max(result.maxFontSize, context.mathstyle.sizeMultiplier || 1.0);
            // Set other attributes
            if (this.mode === 'text')
                result.classes += ' ML__text';
            if (context.mathstyle.isTight())
                result.isTight = true;
            // The italic correction applies only in math mode
            if (this.mode !== 'math')
                result.italic = 0;
            result.setRight(result.italic); // Italic correction
            if (typeof context.opacity === 'number') {
                result.setStyle('opacity', context.opacity);
            }
            // To retrieve the atom from a span, for example when the span is clicked
            // on, attach a randomly generated ID to the span and associate it
            // with the atom.
            this.bind(context, result);
            if (this.caret) {
                // If this has a super/subscript, the caret will be attached
                // to the 'msubsup' atom, so no need to have it here.
                if (!this.superscript && !this.subscript) {
                    result.caret = this.caret;
                    this.caret = '';
                    if (context.mathstyle.isTight())
                        result.isTight = true;
                }
            }
            return result;
        }
    }
    function makeID(context) {
        let result;
        if (context.atomIdsSettings) {
            if (typeof context.atomIdsSettings.seed === 'number') {
                result = context.atomIdsSettings.overrideID
                    ? context.atomIdsSettings.overrideID
                    : context.atomIdsSettings.seed.toString(36);
                context.atomIdsSettings.seed += 1;
            }
            else {
                result =
                    Date.now().toString(36).slice(-2) +
                        Math.floor(Math.random() * 0x186a0).toString(36);
            }
        }
        return result;
    }
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    /**
     * Combine a nucleus with an atom above and an atom below. Used to form
     * limits.
     *
     * @param context
     * @param nucleus The base over and under which the atoms will
     * be placed.
     * @param nucleusShift The vertical shift of the nucleus from
     * the baseline.
     * @param slant For operators that have a slant, such as \int,
     * indicate by how much to horizontally offset the above and below atoms
     */
    function makeLimitsStack(context, nucleus, nucleusShift, slant, above, below) {
        // If nothing above and nothing below, nothing to do.
        if (!above && !below)
            return nucleus;
        // IE8 clips \int if it is in a display: inline-block. We wrap it
        // in a new span so it is an inline, and works.
        // @todo: revisit
        nucleus = makeSpan(nucleus);
        let aboveShift = 0;
        let belowShift = 0;
        if (above) {
            aboveShift = Math.max(METRICS.bigOpSpacing1, METRICS.bigOpSpacing3 - depth(above));
        }
        if (below) {
            belowShift = Math.max(METRICS.bigOpSpacing2, METRICS.bigOpSpacing4 - height(below));
        }
        let result = null;
        if (below && above) {
            const bottom = METRICS.bigOpSpacing5 +
                height(below) +
                depth(below) +
                belowShift +
                depth(nucleus) +
                nucleusShift;
            result = makeVlist(context, [
                METRICS.bigOpSpacing5,
                below,
                belowShift,
                nucleus,
                aboveShift,
                above,
                METRICS.bigOpSpacing5,
            ], 'bottom', bottom);
            // Here, we shift the limits by the slant of the symbol. Note
            // that we are supposed to shift the limits by 1/2 of the slant,
            // but since we are centering the limits adding a full slant of
            // margin will shift by 1/2 that.
            result.children[0].setLeft(-slant);
            result.children[2].setLeft(slant);
        }
        else if (below && !above) {
            const top = height(nucleus) - nucleusShift;
            result = makeVlist(context, [METRICS.bigOpSpacing5, below, belowShift, nucleus], 'top', top);
            // See comment above about slants
            result.children[0].setLeft(-slant);
        }
        else if (!below && above) {
            const bottom = depth(nucleus) + nucleusShift;
            result = makeVlist(context, [nucleus, aboveShift, above, METRICS.bigOpSpacing5], 'bottom', bottom);
            // See comment above about slants
            result.children[1].setLeft(slant);
        }
        return makeSpan(result, 'op-limits', 'mop');
    }
    /**
     * Return an atom suitable for use as the root of a formula.
     */
    function makeRoot(parseMode, body = []) {
        const result = new Atom(parseMode, 'root', body || []);
        if (isArray(result.body) &&
            (result.body.length === 0 || result.body[0].type !== 'first')) {
            result.body.unshift(new Atom(parseMode, 'first'));
        }
        return result;
    }
    function isAtomArray(arg) {
        return isArray(arg);
    }

    function stringToCodepoints(str) {
        const result = [];
        for (let i = 0; i < str.length; i++) {
            let code = str.charCodeAt(i);
            if (code === 0x0d && str.charCodeAt(i + 1) === 0x0a) {
                code = 0x0a;
                i++;
            }
            if (code === 0x0d || code === 0x0c)
                code = 0x0a;
            if (code === 0x00)
                code = 0xfffd;
            // Decode a surrogate pair into an astral codepoint.
            if (code >= 0xd800 && code <= 0xdbff) {
                const nextCode = str.charCodeAt(i + 1);
                if (nextCode >= 0xdc00 && nextCode <= 0xdfff) {
                    const lead = code - 0xd800;
                    const trail = nextCode - 0xdc00;
                    code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
                    // N = ((H - 0xD800) * 0x400) + (L - 0xDC00) + 0x10000;
                    i++;
                }
            }
            result.push(code);
        }
        return result;
    }
    const ZWJ = 0x200d; // Zero-width joiner
    // const ZWSP = 0x200b; // Zero-width space
    /* The following codepoints should combine with the previous ones */
    const EMOJI_COMBINATOR = [
        [ZWJ, 1],
        [0xfe0e, 2],
        [0x1f3fb, 5],
        [0x1f9b0, 4],
        [0xe0020, 96],
    ];
    let emojiCombinator;
    // Regional indicator: a pair of codepoints indicating some flags
    const REGIONAL_INDICATOR = [0x1f1e6, 0x1f1ff];
    function isEmojiCombinator(code) {
        var _a;
        if (typeof emojiCombinator === 'undefined') {
            emojiCombinator = {};
            EMOJI_COMBINATOR.forEach((x) => {
                for (let i = x[0]; i <= x[0] + x[1] - 1; i++) {
                    emojiCombinator[i] = true;
                }
            });
        }
        return (_a = emojiCombinator[code]) !== null && _a !== void 0 ? _a : false;
    }
    function isRegionalIndicator(code) {
        return code >= REGIONAL_INDICATOR[0] && code <= REGIONAL_INDICATOR[1];
    }
    /**
     * Return a string or an array of graphemes.
     * This includes:
     * - emoji with skin and hair modifiers
     * - emoji combination (for example "female pilot")
     * - text emoji with an emoji presentation style modifier
     *      - U+1F512 U+FE0E 🔒︎
     *      - U+1F512 U+FE0F 🔒️
     * - flags represented as two regional indicator codepoints
     * - flags represented as a flag emoji + zwj + an emoji tag
     * - other combinations (for example, rainbow flag)
     */
    function splitGraphemes(str) {
        // If it's all ASCII, short-circuit the grapheme splitting...
        if (/^[\x20-\xFF]*$/.test(str))
            return str;
        const result = [];
        const codePoints = stringToCodepoints(str);
        let index = 0;
        while (index < codePoints.length) {
            const code = codePoints[index++];
            const next = codePoints[index];
            // Combine sequences
            if (next === ZWJ) {
                // Zero-width joiner sequences are:
                // ZWJ_SEQUENCE := (CHAR + ZWJ)+
                const baseIndex = index - 1;
                index += 2;
                while (codePoints[index] === ZWJ) {
                    index += 2;
                }
                result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex + 1)));
            }
            else if (isEmojiCombinator(next)) {
                // Combine emoji sequences
                // See http://unicode.org/reports/tr51/#def_emoji_tag_sequence
                const baseIndex = index - 1; // The previous character is the 'base'
                while (isEmojiCombinator(codePoints[index])) {
                    index += codePoints[index] === ZWJ ? 2 : 1;
                }
                result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex)));
            }
            else if (isRegionalIndicator(code)) {
                // Some (but not all) flags are represented by a sequence of two
                // "regional indicators" codepoints.
                index += 1;
                result.push(String.fromCodePoint(...codePoints.slice(index - 2, 2)));
            }
            else {
                result.push(String.fromCodePoint(code));
            }
        }
        return result;
    }

    /**
     * ## Reference
     * TeX source code:
     * {@link  http://tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web | Tex.web}
     *
     */
    /**
     * Given a LaTeX expression represented as a character string,
     * the Lexer class will scan and return Tokens for the lexical
     * units in the string.
     *
     * @param s A string of LaTeX
     */
    class Tokenizer {
        constructor(s) {
            this.obeyspaces = false;
            this.s = splitGraphemes(s);
            this.pos = 0;
        }
        /**
         * @return True if we reached the end of the stream
         */
        end() {
            return this.pos >= this.s.length;
        }
        /**
         * Return the next char and advance
         */
        get() {
            return this.pos < this.s.length ? this.s[this.pos++] : '';
        }
        /**
         * Return the next char, but do not advance
         */
        peek() {
            return this.s[this.pos];
        }
        /**
         * Return the next substring matching regEx and advance.
         */
        match(regEx) {
            // this.s can either be a string, if it's made up only of ASCII chars
            // or an array of graphemes, if it's more complicated.
            let execResult;
            if (typeof this.s === 'string') {
                execResult = regEx.exec(this.s.slice(this.pos));
            }
            else {
                execResult = regEx.exec(this.s.slice(this.pos).join(''));
            }
            if (execResult === null || execResult === void 0 ? void 0 : execResult[0]) {
                this.pos += execResult[0].length;
                return execResult[0];
            }
            return null;
        }
        /**
         * Return the next token, or null.
         */
        next() {
            // If we've reached the end, exit
            if (this.end())
                return null;
            // Handle white space
            // In text mode, spaces are significant,
            // however they are coalesced unless \obeyspaces
            if (!this.obeyspaces && this.match(/^[ \f\n\r\t\v\xA0\u2028\u2029]+/)) {
                // Note that browsers are inconsistent in their definitions of the
                // `\s` metacharacter, so we use an explicit pattern instead.
                // - IE:          `[ \f\n\r\t\v]`
                // - Chrome:      `[ \f\n\r\t\v\u00A0]`
                // - Firefox:     `[ \f\n\r\t\v\u00A0\u2028\u2029]`
                // - \f \u000C: form feed (FORM FEED)
                // - \n \u000A: linefeed (LINE FEED)
                // - \r \u000D: carriage return
                // - \t \u0009: tab (CHARACTER TABULATION)
                // - \v \u000B: vertical tab (LINE TABULATION)
                // - \u00A0: NON-BREAKING SPACE
                // - \u2028: LINE SEPARATOR
                // - \u2029: PARAGRAPH SEPARATOR
                return '<space>';
            }
            else if (this.obeyspaces &&
                this.match(/^[ \f\n\r\t\v\xA0\u2028\u2029]/)) {
                // Don't coalesce when this.obeyspaces is true (different regex from above)
                return '<space>';
            }
            const next = this.get();
            // Is it a command?
            if (next === '\\') {
                if (!this.end()) {
                    // A command is either a string of letters and asterisks...
                    let command = this.match(/^[a-zA-Z*]+/);
                    if (command) {
                        // Spaces after a 'control word' are ignored
                        // (but not after a 'control symbol' (single char)
                        this.match(/^[ \f\n\r\t\v\xA0\u2028\u2029]*/);
                    }
                    else {
                        // ... or a single non-letter character
                        command = this.get();
                        if (command === ' ') {
                            // The `\ ` command is equivalent to a single space
                            return '<space>';
                        }
                    }
                    return '\\' + command;
                }
            }
            else if (next === '{') {
                // This is a group start
                return '<{>';
            }
            else if (next === '}') {
                // This is a group end
                return '<}>';
            }
            else if (next === '^') {
                if (this.peek() === '^') {
                    // It might be a ^^ command (inline hex character)
                    this.get();
                    let hex = this.match(/^\^\^[0-9a-f][0-9a-f][0-9a-f][0-9a-f]/);
                    if (hex) {
                        // It's a ^^^^ hex char
                        return String.fromCodePoint(parseInt(hex.slice(2), 16));
                    }
                    hex = this.match(/^[0-9a-f][0-9a-f]/);
                    if (hex) {
                        return String.fromCodePoint(parseInt(hex, 16));
                    }
                }
                return next;
            }
            else if (next === '#') {
                // This could be either a param token, or a literal # (used for
                // colorspecs, for example). A param token is a '#' followed by
                // - a digit 0-9 followed by a non-alpha, non-digit
                // - or '?'.
                // Otherwise, it's a literal '#'.
                if (!this.end()) {
                    let isParam = false;
                    if (/[0-9?]/.test(this.peek())) {
                        // Could be a param
                        isParam = true;
                        // Need to look ahead to the following char
                        if (this.pos + 1 < this.s.length) {
                            const after = this.s[this.pos + 1];
                            isParam = /[^0-9A-Za-z]/.test(after);
                        }
                    }
                    if (isParam) {
                        return '#' + this.get();
                    }
                    return '#';
                }
            }
            else if (next === '$') {
                // Mode switch
                if (this.peek() === '$') {
                    // $$
                    this.get();
                    return '<$$>';
                }
                // $
                return '<$>';
            }
            return next;
        }
    }
    // Some primitive commands need to be handled in the expansion phase
    // (the 'gullet')
    function expand(lex, args) {
        var _a, _b, _c, _d;
        let result = [];
        let token = lex.next();
        if (token) {
            if (token === '\\relax') ;
            else if (token === '\\noexpand') {
                // Do not expand the next token
                token = lex.next();
                if (token) {
                    result.push(token);
                }
            }
            else if (token === '\\obeyspaces') {
                lex.obeyspaces = true;
            }
            else if (token === '\\space' || token === '~') {
                // The `\space` command is equivalent to a single space
                // The ~ is an 'active character' (a single character macro)
                // that maps to <space>
                result.push('<space>');
            }
            else if (token === '\\bgroup') {
                // Begin group, synonym for opening brace
                result.push('<{>');
            }
            else if (token === '\\egroup') {
                // End group, synonym for closing brace
                result.push('<}>');
            }
            else if (token === '\\string') {
                // Turn the next token into a string
                token = lex.next();
                if (token) {
                    if (token[0] === '\\') {
                        Array.from(token).forEach((x) => result.push(x === '\\' ? '\\backslash' : x));
                    }
                    else if (token === '<{>') {
                        result.push('\\{');
                    }
                    else if (token === '<space>') {
                        result.push('~');
                    }
                    else if (token === '<}>') {
                        result.push('\\}');
                    }
                }
            }
            else if (token === '\\csname') {
                // Turn the next tokens, until `\endcsname`, into a command
                while (lex.peek() === '<space>') {
                    lex.next();
                }
                let command = '';
                let done = false;
                let tokens = [];
                do {
                    if (tokens.length === 0) {
                        // We're out of tokens to look at, get some more
                        if (/^#[0-9?]$/.test(lex.peek())) {
                            // Expand parameters (but not commands)
                            const param = lex.get().slice(1);
                            tokens = tokenize((_b = (_a = args === null || args === void 0 ? void 0 : args[param]) !== null && _a !== void 0 ? _a : args === null || args === void 0 ? void 0 : args['?']) !== null && _b !== void 0 ? _b : '\\placeholder{}', args);
                            token = tokens[0];
                        }
                        else {
                            token = lex.next();
                            tokens = token ? [token] : [];
                        }
                    }
                    done = tokens.length === 0;
                    if (!done && token === '\\endcsname') {
                        done = true;
                        tokens.shift();
                    }
                    if (!done) {
                        done =
                            token === '<$>' ||
                                token === '<$$>' ||
                                token === '<{>' ||
                                token === '<}>' ||
                                (token.length > 1 && token[0] === '\\');
                    }
                    if (!done) {
                        command += tokens.shift();
                    }
                } while (!done);
                if (command) {
                    result.push('\\' + command);
                }
                result = result.concat(tokens);
            }
            else if (token === '\\endcsname') ;
            else if (token.length > 1 && token[0] === '#') {
                // It's a parameter to expand
                const param = token.slice(1);
                result = result.concat(tokenize((_d = (_c = args === null || args === void 0 ? void 0 : args[param]) !== null && _c !== void 0 ? _c : args === null || args === void 0 ? void 0 : args['?']) !== null && _d !== void 0 ? _d : '\\placeholder{}', args));
            }
            else {
                result.push(token);
            }
        }
        return result;
    }
    /**
     * Create Tokens from a stream of LaTeX
     *
     * @param s - A string of LaTeX. It can include comments (with the `%`
     * marker) and multiple lines.
     */
    function tokenize(s, args) {
        // Merge multiple lines into one, and remove comments
        const lines = s.toString().split(/\r?\n/);
        let stream = '';
        let sep = '';
        for (const line of lines) {
            stream += sep;
            sep = ' ';
            // Remove everything after a % (comment marker)
            // (but \% should be preserved...)
            const m = line.match(/((?:\\%)|[^%])*/);
            if (m !== null)
                stream += m[0];
        }
        const tokenizer = new Tokenizer(stream);
        let result = [];
        do {
            result = result.concat(expand(tokenizer, args));
        } while (!tokenizer.end());
        return result;
    }

    /**
     * Gengrac -- Generalized fraction
     *
     * Decompose fractions, binomials, and in general anything made
     * of two expressions on top of each other, optionally separated by a bar,
     * and optionally surrounded by fences (parentheses, brackets, etc...)
     *
     * Depending on the type of fraction the mathstyle is either
     * display math or inline math (which is indicated by 'textstyle'). This value can
     * also be set to 'auto', which indicates it should use the current mathstyle
     */
    registerAtomType('genfrac', (context, atom) => {
        const mathstyle = atom.mathstyle === 'auto'
            ? context.mathstyle
            : MATHSTYLES[atom.mathstyle];
        const newContext = context.clone({ mathstyle: mathstyle });
        let numer = [];
        if (atom.numerPrefix) {
            numer.push(makeSpan(atom.numerPrefix, 'mord'));
        }
        const numeratorStyle = atom.continuousFraction
            ? mathstyle
            : mathstyle.fracNum();
        numer = numer.concat(decompose(newContext.clone({ mathstyle: numeratorStyle }), atom.numer));
        const numerReset = makeHlist(numer, context.mathstyle.adjustTo(numeratorStyle));
        let denom = [];
        if (atom.denomPrefix) {
            denom.push(makeSpan(atom.denomPrefix, 'mord'));
        }
        const denominatorStyle = atom.continuousFraction
            ? mathstyle
            : mathstyle.fracDen();
        denom = denom.concat(decompose(newContext.clone({ mathstyle: denominatorStyle }), atom.denom));
        const denomReset = makeHlist(denom, context.mathstyle.adjustTo(denominatorStyle));
        const ruleWidth = !atom.hasBarLine
            ? 0
            : METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
        // Rule 15b from TeXBook Appendix G, p.444
        //
        // 15b. If C > T, set u ← σ8 and v ← σ11. Otherwise set u ← σ9 or σ10,according
        // as θ ̸= 0 or θ = 0, and set v ← σ12. (The fraction will be typeset with
        // its numerator shifted up by an amount u with respect to the current
        // baseline, and with the denominator shifted down by v, unless the boxes
        // are unusually large.)
        let numShift;
        let clearance = 0;
        let denomShift;
        if (mathstyle.size === MATHSTYLES.displaystyle.size) {
            numShift = mathstyle.metrics.num1; // set u ← σ8
            if (ruleWidth > 0) {
                clearance = 3 * ruleWidth; //  φ ← 3θ
            }
            else {
                clearance = 7 * METRICS.defaultRuleThickness; // φ ← 7 ξ8
            }
            denomShift = mathstyle.metrics.denom1; // v ← σ11
        }
        else {
            if (ruleWidth > 0) {
                numShift = mathstyle.metrics.num2; // u ← σ9
                clearance = ruleWidth; //  φ ← θ
            }
            else {
                numShift = mathstyle.metrics.num3; // u ← σ10
                clearance = 3 * METRICS.defaultRuleThickness; // φ ← 3 ξ8
            }
            denomShift = mathstyle.metrics.denom2; // v ← σ12
        }
        const numerDepth = numerReset ? depth(numerReset) : 0;
        const denomHeight = denomReset ? height(denomReset) : 0;
        let frac;
        if (ruleWidth === 0) {
            // Rule 15c from Appendix G
            // No bar line between numerator and denominator
            const candidateClearance = numShift - numerDepth - (denomHeight - denomShift);
            if (candidateClearance < clearance) {
                numShift += 0.5 * (clearance - candidateClearance);
                denomShift += 0.5 * (clearance - candidateClearance);
            }
            frac = makeVlist(newContext, [numerReset, -numShift, denomReset, denomShift], 'individualShift');
        }
        else {
            // Rule 15d from Appendix G
            // There is a bar line between the numerator and the denominator
            const axisHeight = mathstyle.metrics.axisHeight;
            const numerLine = axisHeight + 0.5 * ruleWidth;
            const denomLine = axisHeight - 0.5 * ruleWidth;
            if (numShift - numerDepth - numerLine < clearance) {
                numShift += clearance - (numShift - numerDepth - numerLine);
            }
            if (denomLine - (denomHeight - denomShift) < clearance) {
                denomShift += clearance - (denomLine - (denomHeight - denomShift));
            }
            const mid = makeSpan(null, ' frac-line');
            mid.applyStyle(atom.getStyle());
            // Manually set the height of the line because its height is
            // created in CSS
            mid.height = ruleWidth / 2;
            mid.depth = ruleWidth / 2;
            const elements = [];
            if (numerReset) {
                elements.push(numerReset);
                elements.push(-numShift);
            }
            elements.push(mid);
            elements.push(ruleWidth / 2 - axisHeight);
            if (denomReset) {
                elements.push(denomReset);
                elements.push(denomShift);
            }
            frac = makeVlist(newContext, elements, 'individualShift');
        }
        // Add a 'mfrac' class to provide proper context for
        // other css selectors (such as 'frac-line')
        frac.classes += ' mfrac';
        // Since we manually change the style sometimes (with \dfrac or \tfrac),
        // account for the possible size change here.
        frac.height *= mathstyle.sizeMultiplier / context.mathstyle.sizeMultiplier;
        frac.depth *= mathstyle.sizeMultiplier / context.mathstyle.sizeMultiplier;
        // if (!atom.leftDelim && !atom.rightDelim) {
        //     return makeOrd(frac,
        //         context.parentMathstyle.adjustTo(mathstyle) +
        //         ((context.parentSize !== context.size) ?
        //             (' sizing reset-' + context.parentSize + ' ' + context.size) : ''));
        // }
        // Rule 15e of Appendix G
        const delimSize = mathstyle.size === MATHSTYLES.displaystyle.size
            ? mathstyle.metrics.delim1
            : mathstyle.metrics.delim2;
        // Optional delimiters
        const leftDelim = atom.bind(context, makeCustomSizedDelim('mopen', atom.leftDelim, delimSize, true, context.clone({ mathstyle: mathstyle })));
        const rightDelim = atom.bind(context, makeCustomSizedDelim('mclose', atom.rightDelim, delimSize, true, context.clone({ mathstyle: mathstyle })));
        leftDelim.applyStyle(atom.getStyle());
        rightDelim.applyStyle(atom.getStyle());
        return [
            atom.bind(context, 
            // makeStruts(
            makeSpan([leftDelim, frac, rightDelim], context.parentSize !== context.size
                ? 'sizing reset-' + context.parentSize + ' ' + context.size
                : '', 'mord')
            // )
            ),
        ];
    });

    registerAtomType('array', (context, atom) => {
        var _a;
        // See http://tug.ctan.org/macros/latex/base/ltfsstrc.dtx
        // and http://tug.ctan.org/macros/latex/base/lttab.dtx
        let colFormat = atom.colFormat;
        if (colFormat && colFormat.length === 0) {
            colFormat = [{ align: 'l' }];
        }
        if (!colFormat) {
            colFormat = [
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
                { align: 'l' },
            ];
        }
        // Fold the array so that there are no more columns of content than
        // there are columns prescribed by the column format.
        const array = [];
        let colMax = 0; // Maximum number of columns of content
        for (const colSpec of colFormat) {
            if (colSpec.align)
                colMax++;
        }
        for (const row of atom.array) {
            let colIndex = 0;
            while (colIndex < row.length) {
                const newRow = [];
                const lastCol = Math.min(row.length, colIndex + colMax);
                while (colIndex < lastCol) {
                    newRow.push(row[colIndex++]);
                }
                array.push(newRow);
            }
        }
        // If the last row is empty, ignore it.
        if (array[array.length - 1].length === 1 &&
            array[array.length - 1][0].length === 0) {
            array.pop();
        }
        const mathstyle = MATHSTYLES[atom.mathstyle] || context.mathstyle;
        // Row spacing
        // Default \arraystretch from lttab.dtx
        const arraystretch = atom.arraystretch || 1;
        const arraycolsep = typeof atom.arraycolsep === 'number'
            ? atom.arraycolsep
            : METRICS.arraycolsep;
        const arrayskip = arraystretch * METRICS.baselineskip;
        const arstrutHeight = 0.7 * arrayskip;
        const arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx
        let totalHeight = 0;
        let nc = 0;
        const body = [];
        const nr = array.length;
        for (let r = 0; r < nr; ++r) {
            const inrow = array[r];
            nc = Math.max(nc, inrow.length);
            let height$1 = arstrutHeight; // \@array adds an \@arstrut
            let depth$1 = arstrutDepth; // to each row (via the template)
            const outrow = { cells: [], height: 0, depth: 0, pos: 0 };
            for (let c = 0; c < inrow.length; ++c) {
                const localContext = context.clone({
                    mathstyle: MATHSTYLES[atom.mathstyle],
                });
                const cell = decompose(localContext, inrow[c]) || [];
                const elt = [makeSpan(null, '', 'mord')].concat(cell);
                depth$1 = Math.max(depth$1, depth(elt));
                height$1 = Math.max(height$1, height(elt));
                outrow.cells.push(elt);
            }
            let jot = r === nr - 1 ? 0 : atom.jot || 0;
            if ((_a = atom.rowGaps) === null || _a === void 0 ? void 0 : _a[r]) {
                jot = atom.rowGaps[r];
                if (jot > 0) {
                    // \@argarraycr
                    jot += arstrutDepth;
                    if (depth$1 < jot) {
                        depth$1 = jot; // \@xargarraycr
                    }
                    jot = 0;
                }
            }
            outrow.height = height$1;
            outrow.depth = depth$1;
            totalHeight += height$1;
            outrow.pos = totalHeight;
            totalHeight += depth$1 + jot; // \@yargarraycr
            body.push(outrow);
        }
        const offset = totalHeight / 2 + mathstyle.metrics.axisHeight;
        const contentCols = [];
        for (let colIndex = 0; colIndex < nc; colIndex++) {
            const col = [];
            for (const row of body) {
                const elem = row.cells[colIndex];
                if (!elem) {
                    continue;
                }
                elem.depth = row.depth;
                elem.height = row.height;
                col.push(elem);
                col.push(row.pos - offset);
            }
            if (col.length > 0) {
                contentCols.push(makeVlist(context, col, 'individualShift'));
            }
        }
        // Iterate over each column description.
        // Each `colDesc` will indicate whether to insert a gap, a rule or
        // a column from 'contentCols'
        const cols = [];
        let prevColContent = false;
        let prevColRule = false;
        let currentContentCol = 0;
        let firstColumn = !atom.leftDelim;
        for (const colDesc of colFormat) {
            if (colDesc.align && currentContentCol >= contentCols.length) {
                break;
            }
            else if (colDesc.align && currentContentCol < contentCols.length) {
                // If an alignment is specified, insert a column of content
                if (prevColContent) {
                    // If no gap was provided, insert a default gap between
                    // consecutive columns of content
                    cols.push(makeColGap(2 * arraycolsep));
                }
                else if (prevColRule || firstColumn) {
                    // If the previous column was a rule or this is the first column
                    // add a smaller gap
                    cols.push(makeColGap(arraycolsep));
                }
                cols.push(makeSpan(contentCols[currentContentCol], 'col-align-' + colDesc.align));
                currentContentCol++;
                prevColContent = true;
                prevColRule = false;
                firstColumn = false;
            }
            else if (typeof colDesc.gap !== 'undefined') {
                // Something to insert in between columns of content
                if (typeof colDesc.gap === 'number') {
                    // It's a number, indicating how much space, in em,
                    // to leave in between columns
                    cols.push(makeColGap(colDesc.gap));
                }
                else {
                    // It's a mathlist
                    // Create a column made up of the mathlist
                    // as many times as there are rows.
                    cols.push(makeColOfRepeatingElements(context, body, offset, colDesc.gap));
                }
                prevColContent = false;
                prevColRule = false;
                firstColumn = false;
            }
            else if (colDesc.rule) {
                // It's a rule.
                const separator = makeSpan(null, 'vertical-separator');
                separator.setStyle('height', totalHeight, 'em');
                // result.setTop((1 - context.mathstyle.sizeMultiplier) *
                //     context.mathstyle.metrics.axisHeight);
                separator.setStyle('margin-top', 3 * context.mathstyle.metrics.axisHeight - offset, 'em');
                separator.setStyle('vertical-align', 'top');
                // separator.setStyle('display', 'inline-block');
                let gap = 0;
                if (prevColRule) {
                    gap = METRICS.doubleRuleSep - METRICS.arrayrulewidth;
                }
                else if (prevColContent) {
                    gap = arraycolsep - METRICS.arrayrulewidth;
                }
                separator.setLeft(gap);
                cols.push(separator);
                prevColContent = false;
                prevColRule = true;
                firstColumn = false;
            }
        }
        if (prevColContent && !atom.rightDelim) {
            // If the last column was content, add a small gap
            cols.push(makeColGap(arraycolsep));
        }
        if ((!atom.leftDelim || atom.leftDelim === '.') &&
            (!atom.rightDelim || atom.rightDelim === '.')) {
            // There are no delimiters around the array, just return what
            // we've built so far.
            return [makeSpan(cols, 'mtable', 'mord')];
        }
        // There is at least one delimiter. Wrap the core of the array with
        // appropriate left and right delimiters
        // const inner = makeSpan(makeSpan(cols, 'mtable'), 'mord');
        const inner = makeSpan(cols, 'mtable');
        const innerHeight = height(inner);
        const innerDepth = depth(inner);
        return [
            makeSpan([
                atom.bind(context, makeLeftRightDelim('mopen', atom.leftDelim, innerHeight, innerDepth, context)),
                inner,
                atom.bind(context, makeLeftRightDelim('mclose', atom.rightDelim, innerHeight, innerDepth, context)),
            ], '', 'mord'),
        ];
    });
    /**
     * Used in `decomposeArray` to create a column separator span.
     *
     */
    function makeColGap(width) {
        const separator = makeSpan('\u200b', 'arraycolsep');
        separator.setWidth(width);
        return separator;
    }
    /**
     * Used in decomposeArray to create a column of repeating elements.
     */
    function makeColOfRepeatingElements(context, body, offset, elem) {
        const col = [];
        for (const row of body) {
            const cell = makeSpan(decompose(context, elem));
            cell.depth = row.depth;
            cell.height = row.height;
            col.push(cell);
            col.push(row.pos - offset);
        }
        return makeVlist(context, col, 'individualShift');
    }

    // An `overunder` atom has the following attributes:
    // - body: atoms[]: atoms displayed on the base line
    // - svgBody: string. A SVG graphic displayed on the base line (if present, the body is ignored)
    // - overscript: atoms[]: atoms displayed above the body
    // - svgAbove: string. A named SVG graphic above the element
    // - underscript: atoms[]: atoms displayed below the body
    // - svgBelow: string. A named SVG graphic below the element
    // - skipBoundary: boolean. If true, ignore atom boundary when keyboard navigating
    registerAtomType('overunder', (context, atom) => {
        const body = atom.svgBody
            ? makeSVGSpan(atom.svgBody)
            : decompose(context, atom.body);
        const annotationStyle = context.clone({
            mathstyle: MATHSTYLES.scriptstyle,
        });
        let above;
        let below;
        if (atom.svgAbove) {
            above = makeSVGSpan(atom.svgAbove);
        }
        else if (atom.overscript) {
            above = makeSpan(decompose(annotationStyle, atom.overscript), context.mathstyle.adjustTo(annotationStyle.mathstyle));
        }
        if (atom.svgBelow) {
            below = makeSVGSpan(atom.svgBelow);
        }
        else if (atom.underscript) {
            below = makeSpan(decompose(annotationStyle, atom.underscript), context.mathstyle.adjustTo(annotationStyle.mathstyle));
        }
        if (above && below) {
            // Pad the above and below if over a "base"
            below.setLeft(0.3);
            below.setRight(0.3);
            above.setLeft(0.3);
            above.setRight(0.3);
        }
        let result = makeOverunderStack(context, body, above, below, isSpanType(atom.type) ? atom.type : 'mord');
        if (atom.superscript || atom.subscript) {
            result = atom.attachLimits(context, result, 0, 0);
        }
        return [result];
    });
    /**
     * Combine a nucleus with an atom above and an atom below. Used to form
     * stacks for the 'overunder' atom type .
     *
     * @param nucleus The base over and under which the atoms will
     * be placed.
     * @param type The type ('mop', 'mrel', etc...) of the result
     */
    function makeOverunderStack(context, nucleus, above, below, type) {
        // If nothing above and nothing below, nothing to do.
        if (!above && !below)
            return isArray(nucleus) ? makeSpan(nucleus) : nucleus;
        let aboveShift = 0;
        let belowShift = 0;
        if (above) {
            aboveShift = Math.max(METRICS.bigOpSpacing1, METRICS.bigOpSpacing3 - depth(above));
        }
        if (below) {
            belowShift = Math.max(METRICS.bigOpSpacing2, METRICS.bigOpSpacing4 - height(below));
        }
        let result = null;
        if (below && above) {
            const bottom = height(below) + depth(below) + depth(nucleus);
            result = makeVlist(context, [
                0,
                below,
                belowShift,
                nucleus,
                aboveShift,
                above,
                METRICS.bigOpSpacing2,
            ], 'bottom', bottom);
        }
        else if (below && !above) {
            const top = height(nucleus);
            result = makeVlist(context, [0, below, belowShift, nucleus], 'top', top);
        }
        else if (above && !below) {
            result = makeVlist(context, [
                depth(nucleus),
                nucleus,
                Math.max(METRICS.bigOpSpacing2, aboveShift),
                above,
            ], 'bottom', depth(nucleus));
        }
        return makeSpan(result, 'op-over-under', type);
    }

    registerAtomType('accent', (context, atom) => {
        // Accents are handled in the TeXbook pg. 443, rule 12.
        const mathstyle = context.mathstyle;
        // Build the base atom
        let base = decompose(context.cramp(), atom.body);
        if (atom.superscript || atom.subscript) {
            // If there is a supsub attached to the accent
            // apply it to the base.
            // Note this does not give the same result as TeX when there
            // are stacked accents, e.g. \vec{\breve{\hat{\acute{...}}}}^2
            base = [atom.attachSupsub(context, makeSpan(base, '', 'mord'), 'mord')];
        }
        // Calculate the skew of the accent. This is based on the line "If the
        // nucleus is not a single character, let s = 0; otherwise set s to the
        // kern amount for the nucleus followed by the \skewchar of its font."
        // Note that our skew metrics are just the kern between each character
        // and the skewchar.
        let skew$1 = 0;
        if (isArray(atom.body) &&
            atom.body.length === 1 &&
            atom.body[0].isCharacterBox()) {
            skew$1 = skew(base);
        }
        // calculate the amount of space between the body and the accent
        let clearance = Math.min(height(base), mathstyle.metrics.xHeight);
        let accentBody;
        if (atom.svgAccent) {
            accentBody = makeSVGSpan(atom.svgAccent);
            clearance = -clearance + METRICS.bigOpSpacing1;
        }
        else {
            // Build the accent
            const accent = makeSymbol('Main-Regular', atom.accent, 'math');
            // Remove the italic correction of the accent, because it only serves to
            // shift the accent over to a place we don't want.
            accent.italic = 0;
            // The \vec character that the fonts use is a combining character, and
            // thus shows up much too far to the left. To account for this, we add a
            // specific class which shifts the accent over to where we want it.
            const vecClass = atom.accent === '\u20d7' ? ' accent-vec' : '';
            accentBody = makeSpan(makeSpan(accent), 'accent-body' + vecClass);
        }
        accentBody = makeVlist(context, [base, -clearance, accentBody]);
        // Shift the accent over by the skew. Note we shift by twice the skew
        // because we are centering the accent, so by adding 2*skew to the left,
        // we shift it to the right by 1*skew.
        accentBody.children[1].setLeft(2 * skew$1);
        return [makeSpan([accentBody], 'accent', 'mord')];
    });

    registerAtomType('enclose', (context, atom) => {
        const base = makeSpan(decompose(context, atom.body), '', 'mord');
        // Account for the padding
        const padding = typeof atom.padding === 'number' ? atom.padding : METRICS.fboxsep;
        // The 'ML__notation' class is required to prevent the span from being omitted
        // during rendering (it looks like an empty, no-op span)
        const notation = makeSpan('', 'ML__notation');
        notation.setStyle('position', 'absolute');
        notation.setStyle('height', height(base) + depth(base) + 2 * padding, 'em');
        notation.height = height(base) + padding;
        notation.depth = depth(base) + padding;
        if (padding !== 0) {
            notation.setStyle('width', 'calc(100% + ' + 2 * padding + 'em)');
        }
        else {
            notation.setStyle('width', '100%');
        }
        notation.setStyle('top', '0');
        notation.setStyle('left', -padding, 'em');
        notation.setStyle('z-index', '-1'); // Ensure the box is *behind* the base
        if (atom.backgroundcolor) {
            notation.setStyle('background-color', atom.backgroundcolor);
        }
        if (atom.notation.box)
            notation.setStyle('border', atom.borderStyle);
        if (atom.notation.actuarial) {
            notation.setStyle('border-top', atom.borderStyle);
            notation.setStyle('border-right', atom.borderStyle);
        }
        if (atom.notation.madruwb) {
            notation.setStyle('border-bottom', atom.borderStyle);
            notation.setStyle('border-right', atom.borderStyle);
        }
        if (atom.notation.roundedbox) {
            notation.setStyle('border-radius', (height(base) + depth(base)) / 2, 'em');
            notation.setStyle('border', atom.borderStyle);
        }
        if (atom.notation.circle) {
            notation.setStyle('border-radius', '50%');
            notation.setStyle('border', atom.borderStyle);
        }
        if (atom.notation.top)
            notation.setStyle('border-top', atom.borderStyle);
        if (atom.notation.left)
            notation.setStyle('border-left', atom.borderStyle);
        if (atom.notation.right) {
            notation.setStyle('border-right', atom.borderStyle);
        }
        if (atom.notation.bottom) {
            notation.setStyle('border-bottom', atom.borderStyle);
        }
        let svg = '';
        if (atom.notation.horizontalstrike) {
            svg += '<line x1="3%"  y1="50%" x2="97%" y2="50%"';
            svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}"`;
            svg += ' stroke-linecap="round"';
            if (atom.svgStrokeStyle) {
                svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
            }
            svg += '/>';
        }
        if (atom.notation.verticalstrike) {
            svg += '<line x1="50%"  y1="3%" x2="50%" y2="97%"';
            svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}"`;
            svg += ' stroke-linecap="round"';
            if (atom.svgStrokeStyle) {
                svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
            }
            svg += '/>';
        }
        if (atom.notation.updiagonalstrike) {
            svg += '<line x1="3%"  y1="97%" x2="97%" y2="3%"';
            svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}"`;
            svg += ' stroke-linecap="round"';
            if (atom.svgStrokeStyle) {
                svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
            }
            svg += '/>';
        }
        if (atom.notation.downdiagonalstrike) {
            svg += '<line x1="3%"  y1="3%" x2="97%" y2="97%"';
            svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}"`;
            svg += ' stroke-linecap="round"';
            if (atom.svgStrokeStyle) {
                svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
            }
            svg += '/>';
        }
        // if (atom.notation.updiagonalarrow) {
        //     const t = 1;
        //     const length = Math.sqrt(w * w + h * h);
        //     const f = 1 / length / 0.075 * t;
        //     const wf = w * f;
        //     const hf = h * f;
        //     const x = w - t / 2;
        //     let y = t / 2;
        //     if (y + hf - .4 * wf < 0 ) y = 0.4 * wf - hf;
        //     svg += '<line ';
        //     svg += `x1="1" y1="${h - 1}px" x2="${x - .7 * wf}px" y2="${y + .7 * hf}px"`;
        //     svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}"`;
        //     svg += ' stroke-linecap="round"';
        //     if (atom.svgStrokeStyle) {
        //         svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
        //     }
        //     svg += '/>';
        //     svg += '<polygon points="';
        //     svg += `${x},${y} ${x - wf - .4 * hf},${y + hf - .4 * wf} `;
        //     svg += `${x - .7 * wf},${y + .7 * hf} ${x - wf + .4 * hf},${y + hf + .4 * wf} `;
        //     svg += `${x},${y}`;
        //     svg += `" stroke='none' fill="${atom.strokeColor}"`;
        //     svg += '/>';
        // }
        // if (atom.notation.phasorangle) {
        //     svg += '<path d="';
        //     svg += `M ${h / 2},1 L1,${h} L${w},${h} "`;
        //     svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}" fill="none"`;
        //     if (atom.svgStrokeStyle) {
        //         svg += ' stroke-linecap="round"';
        //         svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
        //     }
        //     svg += '/>';
        // }
        // if (atom.notation.radical) {
        //     svg += '<path d="';
        //     svg += `M 0,${.6 * h} L1,${h} L${emToPx(padding) * 2},1 "`;
        //     svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}" fill="none"`;
        //     if (atom.svgStrokeStyle) {
        //         svg += ' stroke-linecap="round"';
        //         svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
        //     }
        //     svg += '/>';
        // }
        // if (atom.notation.longdiv) {
        //     svg += '<path d="';
        //     svg += `M ${w} 1 L1 1 a${emToPx(padding)} ${h / 2}, 0, 0, 1, 1 ${h} "`;
        //     svg += ` stroke-width="${atom.strokeWidth}" stroke="${atom.strokeColor}" fill="none"`;
        //     if (atom.svgStrokeStyle) {
        //         svg += ' stroke-linecap="round"';
        //         svg += ` stroke-dasharray="${atom.svgStrokeStyle}"`;
        //     }
        //     svg += '/>';
        // }
        if (svg) {
            let svgStyle;
            if (atom.shadow !== 'none') {
                if (atom.shadow === 'auto') {
                    svgStyle =
                        'filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)';
                }
                else {
                    svgStyle = 'filter: drop-shadow(' + atom.shadow + ')';
                }
            }
            addSVGOverlay(notation, svg, svgStyle);
        }
        const result = makeSpan([notation, base]);
        // Set its position as relative so that the box can be absolute positioned
        // over the base
        result.setStyle('position', 'relative');
        result.setStyle('display', 'inline');
        // The padding adds to the width and height of the pod
        result.height = height(base) + padding;
        result.depth = depth(base) + padding;
        result.setLeft(padding);
        result.setRight(padding);
        return [result];
    });

    registerAtomType('box', (context, atom) => {
        // The padding extends outside of the base
        const padding = typeof atom.padding === 'number' ? atom.padding : METRICS.fboxsep;
        // Base is the main content "inside" the box
        const content = makeSpan(decompose(context, atom.body), '', 'mord');
        content.setStyle('vertical-align', -depth(content), 'em');
        content.setStyle('height', 0);
        const base = makeSpan(content, '', 'mord');
        // This span will represent the box (background and border)
        // It's positioned to overlap the base
        // The 'ML__box' class is required to prevent the span from being omitted
        // during rendering (it looks like an empty, no-op span)
        const box = makeSpan('', 'ML__box');
        box.setStyle('position', 'absolute');
        box.setStyle('height', height(base) + depth(base) + 2 * padding, 'em');
        if (padding !== 0) {
            box.setStyle('width', 'calc(100% + ' + 2 * padding + 'em)');
        }
        else {
            box.setStyle('width', '100%');
        }
        box.setStyle('top', -padding, 'em');
        box.setStyle('left', -padding, 'em');
        box.setStyle('z-index', '-1'); // Ensure the box is *behind* the base
        box.setStyle('box-sizing', 'border-box');
        if (atom.backgroundcolor) {
            box.setStyle('background-color', atom.backgroundcolor);
        }
        if (atom.framecolor) {
            box.setStyle('border', METRICS.fboxrule + 'em solid ' + atom.framecolor);
        }
        if (atom.border)
            box.setStyle('border', atom.border);
        base.setStyle('display', 'inline-block');
        base.setStyle('height', height(base) + depth(base), 'em');
        // The result is a span that encloses the box and the base
        const result = makeSpan([box, base]);
        // Set its position as relative so that the box can be absolute positioned
        // over the base
        result.setStyle('position', 'relative');
        result.setStyle('vertical-align', -padding + depth(base), 'em');
        // The padding adds to the width and height of the pod
        result.height = height(base) + padding;
        result.depth = depth(base) + padding;
        result.setLeft(padding);
        result.setRight(padding);
        result.setStyle('height', result.height + result.depth - 2 * padding, 'em');
        result.setStyle('top', -padding, 'em');
        result.setStyle('display', 'inline-block');
        return [result];
    });

    /**
     * Operators are handled in the TeXbook pg. 443-444, rule 13(a).
     */
    registerAtomType('mop', (context, atom) => {
        var _a;
        const mathstyle = context.mathstyle;
        let base;
        let baseShift = 0;
        let slant = 0;
        if (atom.isSymbol) {
            // If this is a symbol, create the symbol.
            // Most symbol operators get larger in displaystyle (rule 13)
            const large = mathstyle.size === MATHSTYLES.displaystyle.size &&
                atom.symbol !== '\\smallint';
            base = makeSymbol(large ? 'Size2-Regular' : 'Size1-Regular', atom.body, 'op-symbol ' + (large ? 'large-op' : 'small-op'), 'mop');
            // Shift the symbol so its center lies on the axis (rule 13). It
            // appears that our fonts have the centers of the symbols already
            // almost on the axis, so these numbers are very small. Note we
            // don't actually apply this here, but instead it is used either in
            // the vlist creation or separately when there are no limits.
            baseShift =
                (base.height - base.depth) / 2 -
                    mathstyle.metrics.axisHeight * mathstyle.sizeMultiplier;
            // The slant of the symbol is just its italic correction.
            slant = base.italic;
            base.applyStyle({
                color: atom.isPhantom ? 'transparent' : atom.color,
                backgroundColor: atom.isPhantom
                    ? 'transparent'
                    : atom.backgroundColor,
                cssId: atom.cssId,
                cssClass: atom.cssClass,
                letterShapeStyle: context.letterShapeStyle,
            });
        }
        else if (isArray(atom.body)) {
            // If this is a list, decompose that list.
            base = makeSpan(decompose(context, atom.body), '', 'mop');
        }
        else {
            // Otherwise, this is a text operator. Build the text from the
            // operator's name.
            console.assert(atom.type === 'mop');
            base = atom.makeSpan(context, atom.body);
        }
        // Bind the generated span and this atom so the atom can be retrieved
        // from the span later.
        atom.bind(context, base);
        if (atom.isSymbol)
            base.setTop(baseShift);
        let result = base;
        if (atom.superscript || atom.subscript) {
            const limits = (_a = atom.limits) !== null && _a !== void 0 ? _a : 'auto';
            if (limits === 'limits' ||
                (limits === 'auto' &&
                    mathstyle.size === MATHSTYLES.displaystyle.size)) {
                result = atom.attachLimits(context, base, baseShift, slant);
            }
            else {
                result = atom.attachSupsub(context, base, 'mop');
            }
        }
        return [result];
    });

    /**
     * \overline and \underline
     */
    registerAtomType('line', (context, atom) => {
        const mathstyle = context.mathstyle;
        // TeXBook:443. Rule 9 and 10
        const inner = decompose(context.cramp(), atom.body);
        const ruleWidth = METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
        const line = makeSpan(null, context.mathstyle.adjustTo(MATHSTYLES.textstyle) +
            ' ' +
            atom.position +
            '-line');
        line.height = ruleWidth;
        line.maxFontSize = 1.0;
        let vlist;
        if (atom.position === 'overline') {
            vlist = makeVlist(context, [inner, 3 * ruleWidth, line, ruleWidth]);
        }
        else {
            const innerSpan = makeSpan(inner);
            vlist = makeVlist(context, [ruleWidth, line, 3 * ruleWidth, innerSpan], 'top', height(innerSpan));
        }
        return [makeSpan(vlist, atom.position, 'mord')];
    });

    /**
     *  \left....\right
     *
     * Note that we can encounter malformed \left...\right, for example
     * a \left without a matching \right or vice versa. In that case, the
     * leftDelim (resp. rightDelim) will be undefined. We still need to handle
     * those cases.
     *
     */
    registerAtomType('leftright', (context, atom) => {
        if (!atom.body) {
            // No body, only a delimiter
            if (atom.leftDelim) {
                return new Atom('math', 'mopen', atom.leftDelim).decompose(context);
            }
            if (atom.rightDelim) {
                return new Atom('math', 'mclose', atom.rightDelim).decompose(context);
            }
            return null;
        }
        // The scope of the context is this group, so make a copy of it
        // so that any changes to it will be discarded when finished
        // with this group.
        const localContext = context.clone();
        const inner = decompose(localContext, atom.body);
        const mathstyle = localContext.mathstyle;
        let innerHeight = 0;
        let innerDepth = 0;
        let result = [];
        // Calculate its height and depth
        // The size of delimiters is the same, regardless of what mathstyle we are
        // in. Thus, to correctly calculate the size of delimiter we need around
        // a group, we scale down the inner size based on the size.
        innerHeight = height(inner) * mathstyle.sizeMultiplier;
        innerDepth = depth(inner) * mathstyle.sizeMultiplier;
        // Add the left delimiter to the beginning of the expression
        if (atom.leftDelim) {
            result.push(atom.bind(context, makeLeftRightDelim('mopen', atom.leftDelim, innerHeight, innerDepth, localContext, 'ML__open')));
            result[result.length - 1].applyStyle(atom.getStyle());
        }
        if (inner) {
            // Replace the delim (\middle) spans with proper ones now that we know
            // the height/depth
            for (let i = 0; i < inner.length; i++) {
                if (inner[i].delim) {
                    const savedCaret = inner[i].caret;
                    const savedSelected = /ML__selected/.test(inner[i].classes);
                    inner[i] = atom.bind(context, makeLeftRightDelim('minner', inner[i].delim, innerHeight, innerDepth, localContext));
                    inner[i].caret = savedCaret;
                    inner[i].selected(savedSelected);
                }
            }
            result = result.concat(inner);
        }
        // Add the right delimiter to the end of the expression.
        if (atom.rightDelim) {
            let delim = atom.rightDelim;
            let classes;
            if (delim === '?') {
                if (context.smartFence) {
                    // Use a placeholder delimiter matching the open delimiter
                    delim = {
                        '(': ')',
                        '\\{': '\\}',
                        '\\lbrace': '\\rbrace',
                        '\\langle': '\\rangle',
                        '\\lfloor': '\\rfloor',
                        '\\lceil': '\\rceil',
                        '\\vert': '\\vert',
                        '\\lvert': '\\rvert',
                        '\\Vert': '\\Vert',
                        '\\lVert': '\\rVert',
                        '\\lbrack': '\\rbrack',
                        '\\ulcorner': '\\urcorner',
                        '\\llcorner': '\\lrcorner',
                        '\\lgroup': '\\rgroup',
                        '\\lmoustache': '\\rmoustache',
                    }[atom.leftDelim];
                    delim = delim || atom.leftDelim;
                    classes = 'ML__smart-fence__close';
                }
                else {
                    delim = '.';
                }
            }
            result.push(atom.bind(context, makeLeftRightDelim('mclose', delim, innerHeight, innerDepth, localContext, (classes || '') + ' ML__close')));
            result[result.length - 1].applyStyle(atom.getStyle());
        }
        // If the `inner` flag is set, return the `inner` element (that's the
        // behavior for the regular `\left...\right`
        if (atom.inner)
            return [makeSpan(result, mathstyle.cls(), 'minner')];
        // Otherwise, include a `\mathopen{}...\mathclose{}`. That's the
        // behavior for `\mleft...\mright`, which allows for tighter spacing
        // for example in `\sin\mleft(x\mright)`
        return result;
    });

    registerAtomType('surd', (context, atom) => {
        // See the TeXbook pg. 443, Rule 11.
        // http://www.ctex.org/documents/shredder/src/texbook.pdf
        const mathstyle = context.mathstyle;
        // First, we do the same steps as in overline to build the inner group
        // and line
        console.assert(isArray(atom.body));
        const inner = decompose(context.cramp(), atom.body);
        const ruleWidth = METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
        let phi = ruleWidth;
        if (mathstyle.id < MATHSTYLES.textstyle.id) {
            phi = mathstyle.metrics.xHeight;
        }
        // Calculate the clearance between the body and line
        let lineClearance = ruleWidth + phi / 4;
        const innerTotalHeight = Math.max(2 * phi, (height(inner) + depth(inner)) * mathstyle.sizeMultiplier);
        const minDelimiterHeight = innerTotalHeight + (lineClearance + ruleWidth);
        // Create a \surd delimiter of the required minimum size
        const delim = makeSpan(makeCustomSizedDelim('', '\\surd', minDelimiterHeight, false, context), 'sqrt-sign');
        delim.applyStyle(atom.getStyle());
        const delimDepth = delim.height + delim.depth - ruleWidth;
        // Adjust the clearance based on the delimiter size
        if (delimDepth > height(inner) + depth(inner) + lineClearance) {
            lineClearance =
                (lineClearance +
                    delimDepth -
                    (height(inner) + depth(inner))) /
                    2;
        }
        // Shift the delimiter so that its top lines up with the top of the line
        delim.setTop(delim.height - height(inner) - (lineClearance + ruleWidth));
        const line = makeSpan(null, context.mathstyle.adjustTo(MATHSTYLES.textstyle) + ' sqrt-line');
        line.applyStyle(atom.getStyle());
        line.height = ruleWidth;
        const body = makeVlist(context, [inner, lineClearance, line, ruleWidth]);
        if (typeof atom.index === 'undefined') {
            return [atom.bind(context, makeSpan([delim, body], 'sqrt', 'mord'))];
        }
        // Handle the optional root index
        // The index is always in scriptscript style
        const newcontext = context.clone({
            mathstyle: MATHSTYLES.scriptscriptstyle,
        });
        const root = makeSpan(decompose(newcontext, atom.index), mathstyle.adjustTo(MATHSTYLES.scriptscriptstyle));
        // Figure out the height and depth of the inner part
        const innerRootHeight = Math.max(delim.height, body.height);
        const innerRootDepth = Math.max(delim.depth, body.depth);
        // The amount the index is shifted by. This is taken from the TeX
        // source, in the definition of `\r@@t`.
        const toShift = 0.6 * (innerRootHeight - innerRootDepth);
        // Build a VList with the superscript shifted up correctly
        const rootVlist = makeVlist(context, [root], 'shift', -toShift);
        // Add a class surrounding it so we can add on the appropriate
        // kerning
        return [
            atom.bind(context, makeSpan([makeSpan(rootVlist, 'root'), delim, body], 'sqrt', 'mord')),
        ];
    });

    // Each entry indicate the font-name (to be used to calculate font metrics)
    // and the CSS classes (for proper markup styling) for each possible
    // variant combinations.
    const VARIANTS = {
        // Handle some special characters which are only available in "main" font (not "math")
        main: ['Main-Regular', 'ML__cmr'],
        'main-italic': ['Main-Italic', 'ML__cmr ML__it'],
        'main-bold': ['Main-Bold', 'ML__cmr ML__bold'],
        'main-bolditalic': ['Main-BoldItalic', 'ML__cmr ML_bold ML__it'],
        normal: ['Main-Regular', 'ML__cmr'],
        'normal-bold': ['Main-Bold', 'ML__mathbf'],
        'normal-italic': ['Math-Italic', 'ML__mathit'],
        'normal-bolditalic': ['Math-BoldItalic', 'ML__mathbfit'],
        // Extended math symbols, arrows, etc.. at their standard Unicode codepoints
        ams: ['AMS-Regular', 'ML__ams'],
        'ams-bold': ['AMS-Regular', 'ML__ams'],
        'ams-italic': ['AMS-Regular', 'ML__ams'],
        'ams-bolditalic': ['AMS-Regular', 'ML__ams'],
        'sans-serif': ['SansSerif-Regular', 'ML__sans'],
        'sans-serif-bold': ['SansSerif-Regular', 'ML__sans ML__bold'],
        'sans-serif-italic': ['SansSerif-Regular', 'ML__sans'],
        'sans-serif-bolditalic': ['SansSerif-Regular', 'ML__sans'],
        calligraphic: ['Caligraphic-Regular', 'ML__cal'],
        'calligraphic-bold': ['Caligraphic-Regular', 'ML__cal ML__bold'],
        'calligraphic-italic': ['Caligraphic-Regular', 'ML__cal ML__it'],
        'calligraphic-bolditalic': [
            'Caligraphic-Regular',
            'ML__cal ML__bold ML__it',
        ],
        script: ['Script-Regular', 'ML__script'],
        'script-bold': ['Script-Regular', 'ML__script ML__bold'],
        'script-italic': ['Script-Regular', 'ML__script ML__it'],
        'script-bolditalic': ['Script-Regular', 'ML__script ML__bold ML__it'],
        fraktur: ['Fraktur-Regular', 'ML__frak'],
        'fraktur-bold': ['Fraktur-Regular', 'ML__frak'],
        'fraktur-italic': ['Fraktur-Regular', 'ML__frak'],
        'fraktur-bolditalic': ['Fraktur-Regular', 'ML__frak'],
        monospace: ['Typewriter-Regular', 'ML__tt'],
        'monospace-bold': ['Typewriter-Regular', 'ML__tt ML__bold'],
        'monospace-italic': ['Typewriter-Regular', 'ML__tt ML__it'],
        'monospace-bolditalic': ['Typewriter-Regular', 'ML__tt ML__bold ML__it'],
        // Blackboard characters are 'A-Z' in the AMS font
        'double-struck': ['AMS-Regular', 'ML__bb'],
        'double-struck-bold': ['AMS-Regular', 'ML__bb'],
        'double-struck-italic': ['AMS-Regular', 'ML__bb'],
        'double-struck-bolditalic': ['AMS-Regular', 'ML__bb'],
    };
    const VARIANT_REPERTOIRE = {
        'double-struck': /^[A-Z ]$/,
        script: /^[A-Z ]$/,
        calligraphic: /^[0-9A-Z ]$/,
        fraktur: /^[0-9A-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^’‘]$/,
        monospace: /^[0-9A-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039b\u039e\u03A0\u03A3\u03A5\u03A8\u03a9]$/,
        'sans-serif': /^[0-9A-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039b\u039e\u03A0\u03A3\u03A5\u03A8\u03a9]$/,
    };
    const GREEK_LOWERCASE = /^[\u03b1-\u03c9]|\u03d1|\u03d5|\u03d6|\u03f1|\u03f5]$/;
    const GREEK_UPPERCASE = /^[\u0393|\u0394|\u0398|\u039b|\u039E|\u03A0|\u03A3|\u03a5|\u03a6|\u03a8|\u03a9]$/;
    const LETTER_SHAPE_RANGES = [
        /^[a-z]$/,
        /^[A-Z]$/,
        GREEK_LOWERCASE,
        GREEK_UPPERCASE,
    ];
    // The letterShapeStyle property indicates which characters should be
    // automatically italicized (see LETTER_SHAPE_RANGES)
    const LETTER_SHAPE_MODIFIER = {
        iso: ['it', 'it', 'it', 'it'],
        tex: ['it', 'it', 'it', 'up'],
        french: ['it', 'up', 'up', 'up'],
        upright: ['up', 'up', 'up', 'up'],
    };
    // See http://ctan.math.illinois.edu/macros/latex/base/fntguide.pdf
    function emitLatexMathRun(context, run, expandMacro) {
        let contextValue = context.variant;
        if (context.variantStyle && context.variantStyle !== 'up') {
            contextValue += '-' + context.variantStyle;
        }
        return joinLatex(getPropertyRuns(run, 'color').map((x) => {
            const result = joinLatex(getPropertyRuns(x, 'variant').map((x) => {
                let value = x[0].variant;
                if (x[0].variantStyle && x[0].variantStyle !== 'up') {
                    value += '-' + x[0].variantStyle;
                }
                // Check if all the atoms in this run have a base
                // variant identical to the current variant
                // If so, we can skip wrapping them
                if (x.every((x) => {
                    const info = getInfo(x.symbol, context.mode, null);
                    if (!info || !(info.variant || info.variantStyle)) {
                        return false;
                    }
                    let styledValue = x.variant;
                    if (x.variantStyle && x.variantStyle !== 'up') {
                        styledValue += '-' + x.variantStyle;
                    }
                    return styledValue === value;
                })) {
                    return joinLatex(x.map((x) => x.toLatex(expandMacro)));
                }
                let command = '';
                if (value && value !== contextValue) {
                    command = {
                        calligraphic: '\\mathcal{',
                        fraktur: '\\mathfrak{',
                        'double-struck': '\\mathbb{',
                        script: '\\mathscr{',
                        monospace: '\\mathtt{',
                        'sans-serif': '\\mathsf{',
                        normal: '\\mathrm{',
                        'normal-italic': '\\mathit{',
                        'normal-bold': '\\mathbf{',
                        'normal-bolditalic': '\\mathbfit{',
                        ams: '',
                        'ams-italic': '\\mathit{',
                        'ams-bold': '\\mathbf{',
                        'ams-bolditalic': '\\mathbfit{',
                        main: '',
                        'main-italic': '\\mathit{',
                        'main-bold': '\\mathbf{',
                        'main-bolditalic': '\\mathbfit{',
                    }[value];
                    console.assert(typeof command !== 'undefined');
                }
                return (command +
                    joinLatex(x.map((x) => x.toLatex(expandMacro))) +
                    (command ? '}' : ''));
            }));
            if (x[0].color && (!context || context.color !== x[0].color)) {
                return ('\\textcolor{' +
                    colorToString(x[0].color) +
                    '}{' +
                    result +
                    '}');
            }
            return result;
        }));
    }
    function applyStyle$1(atom, style) {
        // letterShapeStyle will usually be set automatically, except when the
        // locale cannot be determined, in which case its value will be 'auto'
        // which we default to 'tex'
        const letterShapeStyle = style.letterShapeStyle === 'auto' || !style.letterShapeStyle
            ? 'tex'
            : style.letterShapeStyle;
        let variant = style.variant || 'normal';
        let variantStyle = style.variantStyle || '';
        // 1. Remap to "main" font some characters that don't exist
        // in the "math" font
        // There are two fonts that include the roman italic characters, "main-it" and "math"
        // They are similar, but the "math" font has some different kernings ('f')
        // and some slightly different character shape. It doesn't include a few
        // characters, so for those characters, "main" has to be used instead
        // \imath, \jmath and \pound don't exist in "math" font,
        // so use "main" italic instead.
        if (variant === 'normal' &&
            !variantStyle &&
            /\u00a3|\u0131|\u0237/.test(atom.body)) {
            variant = 'main';
            variantStyle = 'italic';
        }
        // 2. If no explicit variant style, auto-italicize some symbols,
        // depending on the letterShapeStyle
        if (variant === 'normal' && !variantStyle && atom.body.length === 1) {
            LETTER_SHAPE_RANGES.forEach((x, i) => {
                if (x.test(atom.body) &&
                    LETTER_SHAPE_MODIFIER[letterShapeStyle][i] === 'it') {
                    variantStyle = 'italic';
                }
            });
        }
        // 3. Map the variant + variantStyle to a font
        if (variantStyle === 'up') {
            variantStyle = '';
        }
        const styledVariant = variantStyle ? variant + '-' + variantStyle : variant;
        console.assert(VARIANTS[styledVariant]);
        const [fontName, classes] = VARIANTS[styledVariant];
        // 4. If outside the font repertoire, switch to system font
        // (return NULL to use default metrics)
        if (VARIANT_REPERTOIRE[variant] &&
            !VARIANT_REPERTOIRE[variant].test(atom.body)) {
            // Map to unicode character
            atom.body = mathVariantToUnicode(atom.body, variant, variantStyle);
            atom.variant = '';
            atom.variantStyle = '';
            // Return NULL to use default metrics
            return null;
        }
        // Lowercase greek letters have an incomplete repertoire (no bold)
        // so, for \mathbf to behave correctly, add a 'lcGreek' class.
        if (GREEK_LOWERCASE.test(atom.body)) {
            atom.classes += ' lcGreek';
        }
        // 5. Assign classes based on the font
        if (classes) {
            atom.classes += ' ' + classes;
        }
        return fontName;
    }
    register('math', {
        emitLatexRun: emitLatexMathRun,
        applyStyle: applyStyle$1,
    });

    function emitStringTextRun(_context, run, _expandMacro) {
        let needSpace = false;
        return joinLatex(run.map((x) => {
            let result = '';
            let space = '';
            if (x.latex) {
                result = x.latex;
            }
            else if (typeof x.body === 'string') {
                result = unicodeStringToLatex('text', x.body);
            }
            else if (x.symbol) {
                result = x.symbol.replace(/\\/g, '\\backslash ');
            }
            if (needSpace && (!result || /^[a-zA-Z0-9*]/.test(result))) {
                space = '{}';
            }
            needSpace = /\\[a-zA-Z0-9]+\*?$/.test(result);
            return space + result;
        }));
    }
    function emitFontShapeTextRun(context, run, expandMacro) {
        return joinLatex(getPropertyRuns(run, 'fontShape').map((x) => {
            const result = emitStringTextRun(context, x);
            if (x[0].fontShape === 'it') {
                return '\\textit{' + result + '}';
            }
            if (x[0].fontShape === 'sl') {
                return '\\textsl{' + result + '}';
            }
            if (x[0].fontShape === 'sc') {
                return '\\textsc{' + result + '}';
            }
            if (x[0].fontShape === 'n') {
                return '\\textup{' + result + '}';
            }
            if (x[0].fontShape) {
                return '\\fontshape{' + x[0].fontShape + '}' + result;
            }
            return result;
        }));
    }
    function emitFontSeriesTextRun(context, run, expandMacro) {
        return joinLatex(getPropertyRuns(run, 'fontSeries').map((x) => {
            const result = emitFontShapeTextRun(context, x);
            if (x[0].fontSeries === 'b') {
                return '\\textbf{' + result + '}';
            }
            if (x[0].fontSeries === 'l') {
                return '\\textlf{' + result + '}';
            }
            if (x[0].fontSeries === 'm') {
                return '\\textmd{' + result + '}';
            }
            if (x[0].fontSeries) {
                return '\\fontseries{' + x[0].fontSeries + '}' + result;
            }
            return result;
        }));
    }
    function emitSizeTextRun(context, run, expandMacro) {
        return joinLatex(getPropertyRuns(run, 'fontSize').map((x) => {
            const result = emitFontSeriesTextRun(context, x);
            const command = {
                size1: 'tiny',
                size2: 'scriptsize',
                size3: 'footnotesize',
                size4: 'small',
                size5: 'normalsize',
                size6: 'large',
                size7: 'Large',
                size8: 'LARGE',
                size9: 'huge',
                size10: 'Huge',
            }[x[0].fontSize] || '';
            if (command) {
                return '\\' + command + ' ' + result;
            }
            return result;
        }));
    }
    function emitFontFamilyTextRun(context, run, expandMacro) {
        return joinLatex(getPropertyRuns(run, 'fontFamily').map((x) => {
            const result = emitSizeTextRun(context, x);
            const command = {
                roman: 'textrm',
                monospace: 'texttt',
                'sans-serif': 'textsf',
            }[x[0].fontFamily] || '';
            if (command) {
                return '\\' + command + '{' + result + '}';
            }
            if (x[0].fontFamily) {
                return '\\fontfamily{' + x[0].fontFamily + '}' + result;
            }
            return result;
        }));
    }
    function emitStyledTextRun(context, run, expandMacro) {
        return emitFontFamilyTextRun(context, run);
    }
    function emitColorRun(context, run, expandMacro) {
        return joinLatex(getPropertyRuns(run, 'color').map((x) => {
            const result = emitStyledTextRun(context, x);
            if (x[0].color &&
                x[0].color !== 'none' &&
                (!context || context.color !== x[0].color)) {
                // If there is a color specified, and it is different
                // from our context color, output a command
                return ('\\textcolor{' +
                    colorToString(x[0].color) +
                    '}{' +
                    result +
                    '}');
            }
            return result;
        }));
    }
    function emitLatexTextRun(context, run, expandMacro) {
        const result = emitColorRun(context, run);
        const allAtomsHaveShapeOrSeriesOrFontFamily = run.every((x) => x.fontSeries || x.fontShape || x.fontFamily);
        if (!allAtomsHaveShapeOrSeriesOrFontFamily ||
            run[0].mode !== context.mode) {
            // Wrap in text, only if there isn't a shape or series on
            // all the atoms, because if so, it will be wrapped in a
            // \\textbf, \\textit, etc... and the \\text would be redundant
            return `\\text{${result}}`;
        }
        return result;
    }
    const TEXT_FONT_CLASS = {
        roman: '',
        'sans-serif': 'ML__sans',
        monospace: 'ML__tt',
    };
    /**
     * Return the font-family name
     */
    function applyStyle$2(span, style) {
        const fontFamily = style.fontFamily;
        if (TEXT_FONT_CLASS[fontFamily]) {
            span.classes += ' ' + TEXT_FONT_CLASS[fontFamily];
        }
        else if (fontFamily) {
            // Not a well-known family. Use a style.
            span.setStyle('font-family', fontFamily);
        }
        if (style.fontShape) {
            span.classes +=
                ' ' +
                    ({
                        it: 'ML__it',
                        sl: 'ML__shape_sl',
                        sc: 'ML__shape_sc',
                        ol: 'ML__shape_ol',
                    }[style.fontShape] || '');
        }
        if (style.fontSeries) {
            const m = style.fontSeries.match(/(.?[lbm])?(.?[cx])?/);
            if (m) {
                span.classes +=
                    ' ' +
                        ({
                            ul: 'ML__series_ul',
                            el: 'ML__series_el',
                            l: 'ML__series_l',
                            sl: 'ML__series_sl',
                            m: '',
                            sb: 'ML__series_sb',
                            b: 'ML__bold',
                            eb: 'ML__series_eb',
                            ub: 'ML__series_ub',
                        }[m[1] || ''] || '');
                span.classes +=
                    ' ' +
                        ({
                            uc: 'ML__series_uc',
                            ec: 'ML__series_ec',
                            c: 'ML__series_c',
                            sc: 'ML__series_sc',
                            n: '',
                            sx: 'ML__series_sx',
                            x: 'ML__series_x',
                            ex: 'ML__series_ex',
                            ux: 'ML__series_ux',
                        }[m[2] || ''] || '');
            }
        }
        // Always use the metrics of 'Main-Regular' in text mode
        return 'Main-Regular';
    }
    // Given an array of tokens, return an array of atoms
    // options.args
    // options.macros
    // options.smartFence
    // options.style
    // options.parser
    function parse(tokens, error, options) {
        let result = [];
        let atom;
        while (tokens.length > 0) {
            const token = tokens.shift();
            if (token === '<space>') {
                atom = new Atom('text', '', ' ', options.style);
                atom.symbol = ' ';
                result.push(atom);
            }
            else if (token[0] === '\\') {
                // Invoke the 'main' parser to handle the command
                tokens.unshift(token);
                let atoms;
                [atoms, tokens] = options.parse('text', tokens, options);
                result = [...result, ...atoms];
            }
            else if (token.length === 1) {
                const info = getInfo(token, 'text', options.macros);
                if (!info) {
                    error({ code: 'unexpected-token' });
                }
                else if (!info.mode || info.mode.includes('text')) {
                    atom = new Atom('text', info ? info.type : '', // @todo: revisit. Use 'text' type?
                    info ? info.value : token, options.style);
                    atom.symbol = token;
                    atom.latex = charToLatex('text', token);
                    result.push(atom);
                }
                else {
                    error({ code: 'unexpected-token' });
                }
            }
            else if (token === '<$>' || token === '<$$>') {
                // Mode-shift
                const subtokens = tokens.slice(0, tokens.findIndex((x) => x === token));
                tokens = tokens.slice(subtokens.length + 1);
                const [atoms] = options.parse('math', subtokens, options);
                result = [...result, ...atoms];
            }
            else if (token === '<{>' || token === '<}>') ;
            else {
                error({
                    code: 'unexpected-token',
                    arg: token,
                });
            }
        }
        return [result, tokens];
    }
    register('text', {
        emitLatexRun: emitLatexTextRun,
        applyStyle: applyStyle$2,
        parse: (tokens, error, options) => parse(tokens, error, options)[0],
    });

    // Performance to check first char of string: https://jsben.ch/QLjdZ
    function isLiteral(token) {
        return !/^<({|}|\$|\$\$|space)>$/.test(token);
    }
    /**
     * Transform a list of tokens into a list of atoms.
     *

     * @property tokens - An array of tokens generated by the lexer.
     * @property args - Optional arguments to substitute the `#` token.
     * @property macros - A dictionary of objects, index by the name of
     * the macro, with the following keys:
     *    * args: an integer, the number of arguments, default 0. They can be referenced as #0,
     *       #1, #2... inside the definition of the macro
     *    * def: a string, the definition of the macro, which can reference other macros
     * @property index - The current token to be parsed: index in `this.tokens`
     * @property atoms - Accumulated result of the parsing by
     * `parseAtom()`
     * @property style - The font, weight, color, etc. to apply to the
     * upcoming tokens
     * @property parseMode - The parse mode indicates the syntax rules to
     * use to parse the upcoming tokens.
     * @property tabularMode - When in tabular mode, `'&'` is interpreted as
     *  a column separator and `'\'` as a row separator. Used for matrixes, etc...
     * @property endCount - Counter to prevent deadlock. If `end()` is
     * called too many times (1,000) in a row for the same token, bail.
     */
    class Parser {
        /**
         * @param tokens - An array of tokens generated by the lexer.
         * @param args - An optional list of arguments. `#n` tokens will be
         * substituted with the corresponding element in the args object. This is used
         * when parsing macros.
         */
        constructor(tokens, args, macros, onError) {
            this.index = 0;
            this.style = {};
            this.parseMode = 'math';
            this.smartFence = false;
            this.tabularMode = false; // For arrays, matrix, etc.: ifferent parsing rules apply.
            this.atoms = [];
            this.endCount = 0;
            this.tokens = tokens;
            this.args = args;
            this.macros = macros;
            this.onError = (err) => onError({
                before: tokensToString(this.tokens.slice(this.index, this.index + 10)),
                after: tokensToString(this.tokens.slice(Math.max(0, this.index - 10), this.index)),
                ...err,
            });
        }
        swapAtoms(newAtoms = []) {
            const result = this.atoms;
            this.atoms = newAtoms;
            return result;
        }
        swapParseMode(mode) {
            const result = this.parseMode;
            this.parseMode = mode;
            return result;
        }
        /**
         * True if we've reached the end of the token stream
         */
        end() {
            // To prevent a deadlock, count how many times end() is called without the
            // index advancing. If it happens more than 1,000 times in a row,
            // assume something is broken and pretend the stream is finished.
            this.endCount++;
            return this.index >= this.tokens.length || this.endCount > 1000;
        }
        get() {
            this.endCount = 0;
            return this.index < this.tokens.length ? this.tokens[this.index++] : '';
        }
        peek() {
            return this.tokens[this.index];
        }
        /**
         * @return True if the next token matches the input, and advance
         */
        match(input) {
            if (this.tokens[this.index] === input) {
                this.index++;
                return true;
            }
            return false;
        }
        /**
         * Return the last atom that can have a subsup attached to it.
         * If there isn't one, insert a `msubsup` and return it.
         */
        lastSubsupAtom() {
            const lastAtom = this.atoms.length === 0
                ? undefined
                : this.atoms[this.atoms.length - 1];
            if (!lastAtom ||
                (lastAtom.type !== 'mop' &&
                    lastAtom.type !== 'leftright' &&
                    lastAtom.type !== 'msubsup')) {
                if (!(lastAtom === null || lastAtom === void 0 ? void 0 : lastAtom.limits) || (lastAtom === null || lastAtom === void 0 ? void 0 : lastAtom.limits) === 'nolimits') {
                    this.atoms.push(new Atom(this.parseMode, 'msubsup', '\u200b'));
                }
            }
            return this.atoms[this.atoms.length - 1];
        }
        /**
         * @return True if the next token matches the specified regular expression pattern.
         */
        hasPattern(pattern) {
            return pattern.test(this.tokens[this.index]);
        }
        hasInfixCommand() {
            const index = this.index;
            if (index < this.tokens.length && this.tokens[index][0] === '\\') {
                const info = getInfo(this.tokens[index], this.parseMode, this.macros);
                if ((info === null || info === void 0 ? void 0 : info.mode) && !info.mode.includes(this.parseMode))
                    return false;
                return info === null || info === void 0 ? void 0 : info.infix;
            }
            return false;
        }
        matchColumnSeparator() {
            const index = this.index;
            if (this.tabularMode && this.tokens[index] === '&') {
                this.index++;
                return true;
            }
            return false;
        }
        matchRowSeparator() {
            const index = this.index;
            if (this.tabularMode &&
                (this.tokens[index] === '\\\\' || this.tokens[index] === '\\cr')) {
                this.index++;
                return true;
            }
            return false;
        }
        /**
         * Return the appropriate value for a placeholder, either a default
         * one, or if a value was provided for #? via args, that value.
         */
        placeholder() {
            var _a;
            if (!this.args || typeof this.args['?'] === 'undefined') {
                // U+2753 = BLACK QUESTION MARK ORNAMENT
                const result = new Atom(this.parseMode, 'placeholder', '?', this.style);
                result.captureSelection = true;
                return [result];
            }
            if (typeof ((_a = this.args) === null || _a === void 0 ? void 0 : _a['?']) === 'string') {
                // If there is a specific value defined for the placeholder,
                // use it.
                return parseString(this.args['?'], this.parseMode, null, this.macros, false, this.onError);
            }
            return this.args['?'];
        }
        // matchToken(type: string): boolean {
        //     if (this.hasToken(type)) {
        //         this.index++;
        //         return true;
        //     }
        //     return false;
        // }
        matchWhitespace() {
            let found = false;
            while (this.match('<space>')) {
                found = true;
            }
            return found;
        }
        skipUntilToken(input) {
            let token = this.tokens[this.index];
            while (token && token !== input) {
                token = this.tokens[++this.index];
            }
            if (token === input) {
                this.index++;
            }
        }
        skipFiller() {
            let done = false;
            do {
                const skippedSpace = this.matchWhitespace();
                const skippedRelax = this.match('\\relax');
                done = !skippedSpace && !skippedRelax;
            } while (!done);
        }
        /**
         * Keywords are used to specify dimensions, and for various other
         * syntactic constructs.
         *
         * Unlike commands, they are not case sensitive.
         *
         * There are 25 keywords:
         *
         * at by bp cc cm dd depth em ex fil fill filll height in minus
         * mm mu pc plus pt sp spread to true width
         *
         * TeX: 8212
         * @return true if the expected keyword is present
         */
        matchKeyword(keyword) {
            const savedIndex = this.index;
            let done = this.end();
            let value = '';
            while (!done) {
                const token = this.get();
                if (isLiteral(token)) {
                    value += token;
                    done = this.end() || value.length >= keyword.length;
                }
                else {
                    done = true;
                }
            }
            const hasKeyword = keyword.toUpperCase() === value.toUpperCase();
            if (!hasKeyword) {
                this.index = savedIndex;
            }
            return hasKeyword;
        }
        /**
         * Return a sequence of characters as a string.
         * i.e. 'abcd' returns 'abcd'.
         * Terminates on the first non-literal token encountered
         * e.g. '<{>', '<}>' etc...
         * Will also terminate on character literal ']'
         */
        scanString() {
            let result = '';
            let done = this.end();
            while (!done) {
                if (this.match('<space>')) {
                    result += ' ';
                }
                else {
                    const token = this.peek();
                    if (this.peek() === ']') {
                        done = true;
                    }
                    else if (isLiteral(token)) {
                        result += this.get();
                    }
                    else if (token[0] === '\\') {
                        // TeX will give a 'Missing \endcsname inserted' error
                        // if it encounters any command when expecting a string.
                        // We're a bit more lax.
                        this.onError({ code: 'unbalanced-braces' });
                        result += this.get();
                    }
                    else {
                        // It's '<{>', '<}>', '<$>' or '<$$>
                        done = true;
                    }
                }
                done = done || this.end();
            }
            return result;
        }
        /**
         * Return the literal tokens, as a string, until a matching closing "}"
         */
        matchLiteralArg() {
            var _a;
            let result = '';
            if (this.match('<{>')) {
                let depth = 1;
                while (depth > 0 && !this.end()) {
                    const token = this.get();
                    if (token === '<}>') {
                        depth -= 1;
                        if (depth > 0) {
                            // Don't include final '}'
                            result += '}';
                        }
                    }
                    else if (token === '<{>') {
                        depth += 1;
                        result += '{';
                    }
                    else {
                        result += (_a = {
                            '<space>': ' ',
                            '<$$>': '$$',
                            '<$>': '$',
                        }[token]) !== null && _a !== void 0 ? _a : token;
                    }
                }
            }
            return result;
        }
        /**
         * Return a CSS color (#rrggbb)
         */
        scanColor() {
            return stringToColor(this.scanString());
        }
        /**
         * Return as a number a group of characters representing a
         * numerical quantity.
         *
         * From TeX:8695 (scan_int):
         * An integer number can be preceded by any number of spaces and `+' or
         * `-' signs. Then comes either a decimal constant (i.e., radix 10), an
         * octal constant (i.e., radix 8, preceded by '), a hexadecimal constant
         * (radix 16, preceded by "), an alphabetic constant (preceded by `), or
         * an internal variable.
         */
        scanNumber(isInteger = true) {
            var _a, _b;
            let negative = false;
            let token = this.peek();
            while (token === '<space>' || token === '+' || token === '-') {
                this.get();
                if (token === '-')
                    negative = !negative;
                token = this.peek();
            }
            isInteger = Boolean(isInteger);
            let radix = 10;
            let digits = /[0-9]/;
            if (this.match("'")) {
                // Apostrophe indicates an octal value
                radix = 8;
                digits = /[0-7]/;
                isInteger = true;
            }
            else if (this.match('"') || this.match('x')) {
                // Double-quote indicates a hex value
                // The 'x' prefix notation for the hexadecimal numbers is a MathJax extension.
                // For example: 'x3a'
                radix = 16;
                // Hex digits have to be upper-case
                digits = /[0-9A-F]/;
                isInteger = true;
            }
            else if (this.match('`')) {
                // A backtick indicates an alphabetic constant: a letter, or a single-letter command
                token = this.get();
                if (token) {
                    if (token.startsWith('\\') && token.length === 2) {
                        return (negative ? -1 : 1) * ((_a = token.codePointAt(1)) !== null && _a !== void 0 ? _a : 0);
                    }
                    return (negative ? -1 : 1) * ((_b = token.codePointAt(0)) !== null && _b !== void 0 ? _b : 0);
                }
                return NaN;
            }
            let value = '';
            while (this.hasPattern(digits)) {
                value += this.get();
            }
            // Parse the fractional part, if applicable
            if (!isInteger && (this.match('.') || this.match(','))) {
                value += '.';
                while (this.hasPattern(digits)) {
                    value += this.get();
                }
            }
            const result = isInteger ? parseInt(value, radix) : parseFloat(value);
            return negative ? -result : result;
        }
        /**
         * Return as a floating point number a dimension in pt (1 em = 10 pt)
         *
         * See TeX:8831
         * @todo: note that some units depend on the font (em, ex). So it might be
         * better to return a dimen struct with the value + unit and resolve
         * later when we have a font context....
         */
        scanDimen() {
            const value = this.scanNumber(false);
            this.matchWhitespace();
            let result;
            if (this.matchKeyword('pt')) {
                result = convertDimenToEm(value, 'pt');
            }
            else if (this.matchKeyword('mm')) {
                result = convertDimenToEm(value, 'mm');
            }
            else if (this.matchKeyword('cm')) {
                result = convertDimenToEm(value, 'cm');
            }
            else if (this.matchKeyword('ex')) {
                result = convertDimenToEm(value, 'ex');
            }
            else if (this.matchKeyword('px')) {
                result = convertDimenToEm(value, 'px');
            }
            else if (this.matchKeyword('em')) {
                result = convertDimenToEm(value, 'em');
            }
            else if (this.matchKeyword('bp')) {
                result = convertDimenToEm(value, 'bp');
            }
            else if (this.matchKeyword('dd')) {
                result = convertDimenToEm(value, 'dd');
            }
            else if (this.matchKeyword('pc')) {
                result = convertDimenToEm(value, 'pc');
            }
            else if (this.matchKeyword('in')) {
                result = convertDimenToEm(value, 'in');
            }
            else if (this.matchKeyword('mu')) {
                result = convertDimenToEm(value, 'mu');
            }
            else {
                // If the units are missing, TeX assumes 'pt'
                this.onError({ code: 'missing-unit' });
                result = convertDimenToEm(value, 'pt');
            }
            return result;
        }
        scanSkip() {
            const result = this.scanDimen();
            // We parse, but ignore, the optional 'plus' and 'minus'
            // arguments.
            this.matchWhitespace();
            // 'plus', optionally followed by 'minus'
            // ('minus' cannot come before 'plus')
            // dimen or 'hfill'
            if (this.matchKeyword('plus')) {
                // @todo there could also be a \hFilLlL command here
                this.scanDimen();
            }
            this.matchWhitespace();
            if (this.matchKeyword('minus')) {
                // @todo there could also be a \hFilLlL command here
                this.scanDimen();
            }
            return result;
        }
        scanColspec() {
            this.matchWhitespace();
            const result = [];
            while (!this.end() && !(this.peek() === '<}>' || this.peek() === ']')) {
                const literal = this.get();
                if (literal === 'c' || literal === 'r' || literal === 'l') {
                    result.push({ align: literal });
                }
                else if (literal === '|') {
                    result.push({ rule: true });
                }
                else if (literal === '@') {
                    if (this.match('<{>')) {
                        const savedParsemode = this.swapParseMode('math');
                        result.push({
                            gap: this.parse((token) => token === '<}>'),
                        });
                        this.swapParseMode(savedParsemode);
                    }
                    if (!this.match('<}>')) {
                        this.onError({ code: 'unbalanced-braces' });
                    }
                }
            }
            return result;
        }
        /**
         * Parse a `\(...\)` or `\[...\]` sequence
         * @return group for the sequence or null
         */
        parseModeSet() {
            let final = '';
            if (this.match('\\('))
                final = '\\)';
            if (!final && this.match('\\['))
                final = '\\]';
            if (!final)
                return null;
            const savedParsemode = this.swapParseMode('math');
            const result = new Atom('math', 'group');
            result.mathstyle = final === '\\)' ? 'textstyle' : 'displaystyle';
            result.body = this.parse((token) => token === final);
            if (!this.match(final)) {
                this.onError({ code: 'unbalanced-mode-shift' });
            }
            this.swapParseMode(savedParsemode);
            if (!result.body || result.body.length === 0)
                return null;
            return result;
        }
        /**
         * Parse a `$...$` or `$$...$$` sequence
         */
        parseModeShift() {
            let final = '';
            if (this.match('<$>'))
                final = '<$>';
            if (!final && this.match('<$$>'))
                final = '<$$>';
            if (!final)
                return null;
            const result = new Atom('math', 'group');
            result.mathstyle = final === '<$>' ? 'textstyle' : 'displaystyle';
            result.latexOpen = final === '<$>' ? '$' : '$$';
            result.latexClose = result.latexOpen;
            const savedParsemode = this.swapParseMode('math');
            result.body = this.parse((token) => token === final);
            if (!this.match(final)) {
                this.onError({ code: 'unbalanced-mode-shift' });
            }
            this.swapParseMode(savedParsemode);
            if (!result.body || result.body.length === 0)
                return null;
            return result;
        }
        /**
         * Parse a \begin{env}...\end{end} sequence
         */
        parseEnvironment() {
            // An environment starts with a \begin command
            if (!this.match('\\begin'))
                return null;
            // The \begin command is immediately followed by the environment
            // name, as a string argument
            const envName = this.parseArgument('string');
            if (!envName)
                return null;
            const def = getEnvironmentDefinition(envName);
            if (!def) {
                this.onError({
                    code: 'unknown-environment',
                    arg: envName,
                });
                return null;
            }
            // If the environment has some arguments, parse them
            const args = [];
            if (def === null || def === void 0 ? void 0 : def.params) {
                for (const param of def.params) {
                    // Parse an argument
                    if (param.isOptional) {
                        // If it's not present, scanArg returns null,
                        // but push it on the list of arguments anyway.
                        // The null value will be interpreted as unspecified
                        // optional value by the command parse function.
                        args.push(this.parseOptionalArgument(param.type));
                    }
                    else {
                        const arg = this.parseArgument(param.type);
                        if (!arg) {
                            this.onError({
                                code: 'missing-argument',
                                arg: envName,
                            });
                        }
                        args.push(arg);
                    }
                }
            }
            // Some environments change the mode
            const savedMode = this.parseMode;
            const savedTabularMode = this.tabularMode;
            const saveAtoms = this.swapAtoms([]);
            // @todo: since calling scanImplicitGroup(), may not need to save/restore the atoms
            this.tabularMode = def.tabular;
            const array = [];
            const rowGaps = [];
            let row = [];
            let done = false;
            do {
                if (this.end()) {
                    this.onError({ code: 'unbalanced-environment', arg: envName });
                    done = true;
                }
                if (!done && this.match('\\end')) {
                    if (this.parseArgument('string') !== envName) {
                        this.onError({
                            code: 'unbalanced-environment',
                            arg: envName,
                        });
                    }
                    done = true;
                }
                if (!done) {
                    if (this.matchColumnSeparator()) {
                        row.push(this.swapAtoms([]));
                    }
                    else if (this.matchRowSeparator()) {
                        row.push(this.swapAtoms([]));
                        let gap = 0;
                        this.matchWhitespace();
                        if (this.match('[')) {
                            gap = this.scanDimen();
                            this.matchWhitespace();
                            this.match(']');
                        }
                        rowGaps.push(gap || 0);
                        array.push(row);
                        row = [];
                    }
                    else {
                        this.atoms = this.atoms.concat(this.parse((token) => token === '<}>' ||
                            token === '&' ||
                            token === '\\end' ||
                            token === '\\cr' ||
                            token === '\\\\'));
                    }
                }
            } while (!done);
            row.push(this.swapAtoms([]));
            if (row.length > 0)
                array.push(row);
            const newAtoms = this.swapAtoms(saveAtoms);
            // If we're in tabular mode, we should end up with an empty atoms list
            console.assert(!this.tabularMode || newAtoms.length === 0, 'Leftover atoms in tabular mode');
            this.parseMode = savedMode;
            this.tabularMode = savedTabularMode;
            if (!def.tabular && newAtoms.length === 0)
                return null;
            if (def.tabular && array.length === 0)
                return null;
            const result = new Atom(this.parseMode, 'array', newAtoms);
            Object.assign(result, def.parser(envName, args, array));
            result.array = array;
            result.rowGaps = rowGaps;
            result.environmentName = envName;
            return result;
        }
        /**
         * Parse a sequence until a group end marker, such as
         * `}`, `\end`, `&`, etc...
         *
         * Returns an array of atoms or an empty array if the sequence
         * terminates right away.
         *
         * @param done - A predicate indicating if a
         * token signals the end of an implicit group
         */
        parse(done) {
            var _a;
            const savedStyle = this.style;
            if (!done) {
                // Default group end marker
                done = (token) => token === '<}>';
            }
            // To handle infix commands, we'll keep track of their prefix
            // (tokens coming before them) and their arguments
            let infix = '';
            let infixInfo = null;
            let infixArgs = [];
            let prefix = null;
            const saveAtoms = this.swapAtoms([]);
            while (!this.end() && !done(this.peek())) {
                if (this.hasInfixCommand() && !infix) {
                    // The next token is an infix and we have not seen one yet
                    // (there can be only one infix command per implicit group).
                    infix = this.get();
                    // The current parseMode, this.parseMode, may no longer have the value
                    // it had when we encountered the infix. However, since all infix are
                    // only defined in 'math' mode, we can use the 'math' constant
                    // for the parseMode
                    infixInfo = getInfo(infix, 'math', this.macros);
                    if (infixInfo) {
                        infixArgs = this.parseArguments(infixInfo)[1];
                    }
                    // Save the math list so far and start a new one
                    prefix = this.swapAtoms([]);
                }
                else {
                    this.parseToken();
                }
            }
            let result;
            if (infix) {
                console.assert(Boolean(infixInfo));
                infixArgs.unshift(this.swapAtoms(saveAtoms)); // suffix
                if (prefix)
                    infixArgs.unshift(prefix);
                result = [
                    new Atom(this.parseMode, infixInfo.type, (_a = infixInfo.value) !== null && _a !== void 0 ? _a : infix.slice(1), // Functions don't have
                    infixInfo.parse ? infixInfo.parse(infix, infixArgs) : null),
                ];
                result[0].symbol = infix;
            }
            else {
                result = this.swapAtoms(saveAtoms);
            }
            this.style = savedStyle;
            return result;
        }
        /**
         * Parse a group enclosed in a pair of braces: `{...}`.
         *
         * Return either a group Atom or null if not a group.
         *
         * Return a group Atom with an empty body if an empty
         * group (i.e. `{}`).
         */
        parseGroup() {
            if (!this.match('<{>'))
                return null;
            const result = new Atom(this.parseMode, 'group');
            result.body = this.parse((token) => token === '<}>');
            if (!this.match('<}>')) {
                this.onError({ code: 'unbalanced-braces' });
            }
            result.latexOpen = '{';
            result.latexClose = '}';
            return result;
        }
        scanSmartFence() {
            this.matchWhitespace();
            if (!this.match('('))
                return null;
            // We've found an open paren... Convert to a `\mleft...\mright`
            const result = new Atom(this.parseMode, 'leftright');
            result.leftDelim = '(';
            result.inner = false; // It's a `\mleft`, not a `\left`
            const saveAtoms = this.swapAtoms([]);
            let nestLevel = 1;
            while (!this.end() && nestLevel !== 0) {
                if (this.match('('))
                    nestLevel += 1;
                if (this.match(')'))
                    nestLevel -= 1;
                if (nestLevel !== 0)
                    this.parseToken();
            }
            if (nestLevel === 0)
                this.match(')');
            result.rightDelim = nestLevel === 0 ? ')' : '?';
            result.body = this.swapAtoms(saveAtoms);
            return result;
        }
        /**
         * Scan a delimiter, e.g. '(', '|', '\vert', '\ulcorner'
         *
         * @return The delimiter (as a character or command) or null
         */
        scanDelim() {
            this.matchWhitespace();
            const token = this.get();
            if (!token) {
                this.onError({ code: 'unexpected-end-of-string' });
                return null;
            }
            let delim = '.';
            if (token[0] === '\\' || isLiteral(token)) {
                delim = token;
            }
            const info = getInfo(delim, 'math', this.macros);
            if (!info) {
                this.onError({ code: 'unknown-command', arg: delim });
                return null;
            }
            if (info.mode && !info.mode.includes(this.parseMode)) {
                this.onError({ code: 'unexpected-delimiter', arg: delim });
                return null;
            }
            if (info.type === 'mopen' || info.type === 'mclose') {
                return delim;
            }
            // Some symbols are not of type mopen/mclose, but are still
            // valid delimiters...
            // '?' is a special delimiter used as a 'placeholder'
            // (when the closing delimiter is displayed greyed out)
            if (/^(\.|\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(delim)) {
                return delim;
            }
            this.onError({ code: 'unexpected-delimiter', arg: delim });
            return null;
        }
        /**
         * Parse a `/left.../right` sequence.
         *
         * Note: the `/middle` command can occur multiple times inside a
         * `/left.../right` sequence, and is handled separately.
         *
         * Return either an atom of type `'leftright'` or null
         */
        parseLeftRight() {
            if (this.match('\\right') || this.match('\\mright')) {
                // We have an unbalanced left/right (there's a \right, but no \left)
                this.onError({ code: 'unbalanced-braces' });
                return null;
            }
            const savedStyle = this.style;
            let close = '\\right';
            if (!this.match('\\left')) {
                if (!this.match('\\mleft'))
                    return null;
                close = '\\mright';
            }
            const leftDelim = this.scanDelim();
            if (!leftDelim)
                return null;
            const saveAtoms = this.swapAtoms([]);
            while (!this.end() && !this.match(close)) {
                this.parseToken();
            }
            this.style = savedStyle;
            // If we've reached the end and there was no `\right` or
            // there isn't a valid delimiter after `\right`, we'll
            // consider the `\right` missing and set the `rightDelim` to undefined
            const rightDelim = this.scanDelim();
            const result = new Atom(this.parseMode, 'leftright');
            result.leftDelim = leftDelim;
            result.rightDelim = rightDelim !== null && rightDelim !== void 0 ? rightDelim : undefined;
            result.inner = close === 'right';
            result.body = this.swapAtoms(saveAtoms);
            return result;
        }
        /**
         * Parse a subscript/superscript: `^` and `_`.
         *
         * Modify the last atom accordingly.
         *
         */
        parseSupSub() {
            var _a, _b;
            // No sup/sub in text or command mode.
            if (this.parseMode !== 'math')
                return false;
            // Apply the subscript/superscript to the last rendered atom.
            // If none is present (beginning of the list, i.e. `{^2}`,
            // an empty atom will be created, equivalent to `{{}^2}`
            let result = false;
            let token = this.peek();
            while (token === '^' || token === '_' || token === "'") {
                const supsub = token === '_' ? 'subscript' : 'superscript';
                if (this.match('^') || this.match('_')) {
                    const arg = this.parseArgument('math');
                    if (arg) {
                        const atom = this.lastSubsupAtom();
                        atom[supsub] = ((_a = atom[supsub]) !== null && _a !== void 0 ? _a : []).concat(arg);
                        result = true;
                    }
                }
                else if (this.match("'")) {
                    // A single quote (prime) is actually equivalent to a
                    // '^{\prime}'
                    const base = this.lastSubsupAtom();
                    const atom = new Atom(base.mode, 'mord', '\u2032');
                    atom.symbol = '\\prime';
                    base.superscript = (_b = base.superscript) !== null && _b !== void 0 ? _b : [];
                    base.superscript.push(atom);
                    result = true;
                }
                token = this.peek();
            }
            return result;
        }
        /**
         * Parse a `\limits` or `\nolimits` command.
         *
         * This will change the placement of limits to be either above or below
         * (if `\limits`) or in the superscript/subscript position (if `\nolimits`).
         *
         * This overrides the calculation made for the placement, which is usually
         * dependent on the displaystyle (`inlinemath` prefers `\nolimits`, while
         * `displaymath` prefers `\limits`).
         */
        parseLimits() {
            // Note: technically, \limits and \nolimits are only applicable
            // after an operator. However, we apply them in all cases. They
            // will simply be ignored when not applicable (i.e. on a literal)
            // which is actually consistent with TeX.
            if (this.match('\\limits')) {
                const lastAtom = this.lastSubsupAtom();
                lastAtom.limits = 'limits';
                // Record that the limits was set through an explicit command
                // so we can generate the appropriate LaTeX later
                lastAtom.explicitLimits = true;
                return true;
            }
            if (this.match('\\nolimits')) {
                const lastAtom = this.lastSubsupAtom();
                lastAtom.limits = 'nolimits';
                // Record that the limits was set through an explicit command
                // so we can generate the appropriate LaTeX later
                lastAtom.explicitLimits = true;
                return true;
            }
            return false;
        }
        parseArguments(info) {
            if (!info || !info.params)
                return [undefined, []];
            let explicitGroup;
            const args = [];
            let i = info.infix ? 2 : 0;
            while (i < info.params.length) {
                const param = info.params[i];
                // Parse an argument
                if (param.isOptional) {
                    args.push(this.parseOptionalArgument(param.type));
                }
                else if (param.type.endsWith('*')) {
                    // For example 'math*'.
                    // In this case, indicate that a 'yet-to-be-parsed'
                    // argument (and 'explicit group') is present
                    explicitGroup = param.type.slice(0, -1);
                }
                else {
                    const arg = this.parseArgument(param.type);
                    if (arg) {
                        args.push(arg);
                    }
                    else {
                        // Report an error
                        this.onError({ code: 'missing-argument' });
                        args.push(this.placeholder());
                    }
                }
                i += 1;
            }
            return [explicitGroup, args];
        }
        /**
         * Parse a math field, an argument to a function.
         *
         * An argument can either be a single atom or
         * a sequence of atoms enclosed in braces.
         *
         * @param parseMode Temporarily overrides the parser parsemode. For
         * example: `'dimen'`, `'color'`, `'text'`, etc...
         */
        // parseArgument(parseMode: 'string'): string;
        // parseArgument(parseMode: 'color'): string;
        parseArgument(parseMode) {
            var _a;
            this.skipFiller();
            parseMode = parseMode === 'auto' ? this.parseMode : parseMode;
            let result;
            // An argument (which is called a 'math field' in TeX)
            // could be a single character or symbol, as in `\frac12`
            // Note that ``\frac\sqrt{-1}\alpha\beta`` is equivalent to
            // ``\frac{\sqrt}{-1}{\beta}``
            if (!this.match('<{>')) {
                if (parseMode === 'delim') {
                    return (_a = this.scanDelim()) !== null && _a !== void 0 ? _a : '.';
                }
                else if (/^(math|text)$/.test(parseMode)) {
                    // Parse a single token.
                    const savedParseMode = this.swapParseMode(parseMode);
                    const atom = this.parseSimpleToken();
                    this.swapParseMode(savedParseMode);
                    return atom;
                }
            }
            const savedParseMode = this.parseMode;
            this.parseMode = parseMode;
            const saveAtoms = this.swapAtoms([]);
            if (parseMode === 'string') {
                result = this.scanString();
                this.skipUntilToken('<}>');
            }
            else if (parseMode === 'number') {
                result = this.scanNumber();
                this.skipUntilToken('<}>');
            }
            else if (parseMode === 'dimen') {
                result = this.scanDimen();
                this.skipUntilToken('<}>');
            }
            else if (parseMode === 'skip') {
                result = this.scanSkip();
                this.skipUntilToken('<}>');
            }
            else if (parseMode === 'colspec') {
                result = this.scanColspec();
                this.skipUntilToken('<}>');
            }
            else if (parseMode === 'color') {
                result = this.scanColor() || '#ffffff';
                this.skipUntilToken('<}>');
            }
            else if (parseMode === 'delim') {
                result = this.scanDelim() || '.';
                this.skipUntilToken('<}>');
            }
            else {
                console.assert(/^(math|text)$/.test(parseMode), 'Unexpected parse mode: "' + parseMode + '"');
                // Collect an array of tokens until a balanced "}"
                const initialIndex = this.index;
                let depth = 1;
                do {
                    const token = this.get();
                    if (token === '<}>')
                        depth -= 1;
                    if (token === '<{>')
                        depth += 1;
                } while (depth > 0 && !this.end());
                result = parseTokens(parseMode, this.tokens.slice(initialIndex, this.index - 1), this.onError, {
                    args: this.args,
                    macros: this.macros,
                    smartFence: this.smartFence,
                    style: this.style,
                    parse: (mode, tokens, options) => {
                        const parser = new Parser(tokens, options.args, options.macros, this.onError);
                        parser.parseMode = mode;
                        parser.style = options.style;
                        result = parser.parse();
                        return [result, tokens.slice(parser.index)];
                    },
                });
                if (!result) {
                    // No mode-specific result. Try again from the start
                    this.index = initialIndex;
                    do {
                        this.atoms = this.atoms.concat(this.parse());
                    } while (!this.match('<}>') && !this.end());
                }
            }
            this.parseMode = savedParseMode;
            const atoms = this.swapAtoms(saveAtoms);
            return result ? result : atoms;
        }
        parseOptionalArgument(parseMode) {
            var _a;
            parseMode = parseMode === 'auto' ? this.parseMode : parseMode;
            this.matchWhitespace();
            if (!this.match('['))
                return null;
            const savedParseMode = this.parseMode;
            this.parseMode = parseMode;
            const saveAtoms = this.swapAtoms();
            let result;
            while (!this.end() && !this.match(']')) {
                if (parseMode === 'string') {
                    result = this.scanString();
                }
                else if (parseMode === 'number') {
                    result = this.scanNumber();
                }
                else if (parseMode === 'dimen') {
                    result = this.scanDimen();
                }
                else if (parseMode === 'skip') {
                    result = this.scanSkip();
                }
                else if (parseMode === 'colspec') {
                    result = this.scanColspec();
                }
                else if (parseMode === 'color') {
                    result = (_a = this.scanColor()) !== null && _a !== void 0 ? _a : '#ffffff';
                }
                else if (parseMode === 'bbox') {
                    // The \bbox command takes a very particular argument:
                    // a comma delimited list of up to three arguments:
                    // a color, a dimension and a string.
                    // Split the string by comma delimited sub-strings, ignoring commas
                    // that may be inside (). For example"x, rgb(a, b, c)" would return
                    // ['x', 'rgb(a, b, c)']
                    const list = this.scanString()
                        .toLowerCase()
                        .trim()
                        .split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
                    const bboxParam = {};
                    for (const elem of list) {
                        const color = stringToColor(elem);
                        if (color) {
                            bboxParam.backgroundcolor = color;
                        }
                        else {
                            const m = elem.match(/^\s*([0-9.]+)\s*([a-z][a-z])/);
                            if (m) {
                                bboxParam.padding = convertDimenToEm(m[1], m[2]);
                            }
                            else {
                                const m = elem.match(/^\s*border\s*:\s*(.*)/);
                                if (m) {
                                    bboxParam.border = m[1];
                                }
                            }
                        }
                    }
                    result = bboxParam;
                }
                else {
                    console.assert(parseMode === 'math', 'Unexpected parse mode: "' + parseMode + '"');
                    this.atoms = this.atoms.concat(this.parse((token) => token === ']'));
                }
            }
            this.parseMode = savedParseMode;
            const atoms = this.swapAtoms(saveAtoms);
            return result ? result : atoms;
        }
        parseSimpleToken() {
            const token = this.get();
            if (!token)
                return null;
            let result = null;
            if (token === '<space>') {
                if (this.parseMode === 'text') {
                    result = new Atom('text', '', ' ', this.style);
                    result.symbol = ' ';
                }
            }
            else if (token[0] === '\\') {
                // COMMAND
                if (token === '\\placeholder') {
                    result = new Atom(this.parseMode, 'placeholder', this.parseArgument('string'), this.style);
                    result.captureSelection = true;
                }
                else if (token === '\\char') {
                    // \char has a special syntax and requires a non-braced integer
                    // argument
                    const initialIndex = this.index;
                    let codepoint = Math.floor(this.scanNumber(true));
                    if (!isFinite(codepoint) ||
                        codepoint < 0 ||
                        codepoint > 0x10ffff) {
                        codepoint = 0x2753; // BLACK QUESTION MARK
                    }
                    result = new Atom(this.parseMode, this.parseMode === 'math' ? 'mord' : '', String.fromCodePoint(codepoint));
                    result.symbol = '\\char';
                    result.latex =
                        '\\char' +
                            tokensToString(this.tokens.slice(initialIndex, this.index));
                }
                else if (token === '\\hskip' || token === '\\kern') {
                    // \hskip and \kern have a special syntax and requires a non-braced
                    // 'skip' argument
                    const width = this.scanSkip();
                    if (isFinite(width)) {
                        result = new Atom(this.parseMode, 'spacing', null, this.style);
                        result.width = width;
                        result.symbol = token;
                        result.latex = token;
                    }
                }
                else {
                    result = this.scanMacro(token);
                    if (!result) {
                        // This wasn't a macro, so let's see if it's a regular command
                        const info = getInfo(token, this.parseMode, {});
                        if (!info) {
                            // An unknown command
                            this.onError({
                                code: 'unknown-command',
                                arg: token,
                            });
                            result = new Atom('math', 'error', token);
                            result.symbol = token;
                            result.latex = token;
                            return [result];
                        }
                        if (info.mode && !info.mode.includes(this.parseMode)) {
                            // Command invalid in this mode
                            this.onError({
                                code: 'invalid-command',
                                arg: token,
                            });
                            result = new Atom('math', 'error', token);
                            result.symbol = token;
                            result.latex = token;
                            return [result];
                        }
                        // Parse the arguments
                        // If explicitGroup is not empty, an explicit group is expected
                        // to follow the command and will be parsed *after* the
                        // command has been processed.
                        // This is used for commands such as \textcolor{color}{content}
                        // that need to apply the color to the content *after* the
                        // style has been changed.
                        // In definitions, this is indicated with a parameter type
                        // of 'auto*'
                        const initialIndex = this.index;
                        const [explicitGroup, args] = this.parseArguments(info);
                        if (!args)
                            return null; // Some required arguments were missing...
                        if (info.infix) {
                            // Infix commands should be handled in scanImplicitGroup
                            // If we find an infix command here, it's a syntax error
                            // (second infix command in a group) and should be ignored.
                            this.onError({
                                code: 'too-many-infix-commands',
                                arg: token,
                            });
                        }
                        else {
                            //  Invoke the parse() function if present
                            if (info.parse) {
                                const attributes = info.parse(token, args);
                                if (attributes.type) {
                                    // A type was provided: create a new Atom
                                    result = new Atom(this.parseMode, info.type, explicitGroup
                                        ? this.parseArgument(explicitGroup)
                                        : null, { ...this.style, ...attributes });
                                }
                                else {
                                    // No type provided -> the parse function will modify
                                    // the current style rather than create a new Atom.
                                    const savedMode = this.parseMode;
                                    if (attributes.mode) {
                                        // Change to 'text' (or 'math') mode if necessary
                                        this.parseMode = attributes.mode;
                                        delete attributes.mode;
                                    }
                                    if (attributes.mathstyle) {
                                        this.parseMode = 'math';
                                        const atom = new Atom('math', 'mathstyle');
                                        atom.mathstyle = attributes.mathstyle;
                                        this.atoms.push(atom);
                                    }
                                    // If an explicit group is expected, process it now
                                    if (explicitGroup) {
                                        // Create a temporary style
                                        const saveStyle = this.style;
                                        this.style = {
                                            ...this.style,
                                            ...attributes,
                                        };
                                        result = this.parseArgument(explicitGroup);
                                        this.style = saveStyle;
                                    }
                                    else {
                                        // Merge the new style info with the current style
                                        this.style = {
                                            ...this.style,
                                            ...attributes,
                                        };
                                    }
                                    this.parseMode = savedMode;
                                }
                            }
                            else {
                                // The new atom will inherit the style of this atom
                                // Only override the variant if it is not '' or undefined
                                const style = {
                                    ...this.style,
                                    variant: info.variant || this.style.variant,
                                    variantStyle: info.variantStyle ||
                                        this.style.variantStyle,
                                };
                                result = new Atom(this.parseMode, info.type || 'mop', info.value || token, style);
                            }
                            if (result instanceof Atom &&
                                !/^\\(llap|rlap|class|cssId)$/.test(token)) {
                                result.symbol = token;
                                const argString = tokensToString(this.tokens.slice(initialIndex, this.index));
                                if (argString) {
                                    result.latex = result.symbol + argString;
                                }
                                if (result.isFunction && this.smartFence) {
                                    // The atom was a function that may be followed by
                                    // an argument, like `\sin(`
                                    const smartFence = this.scanSmartFence();
                                    if (smartFence) {
                                        result = [result, smartFence];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (isLiteral(token)) {
                // Literal
                const info = getInfo(token, this.parseMode, this.macros);
                if (info) {
                    const style = { ...this.style };
                    result = new Atom(this.parseMode, info.type, info.value || token, style);
                    if (info.isFunction) {
                        result.isFunction = true;
                    }
                }
                else {
                    result = new Atom(this.parseMode, this.parseMode === 'math' ? 'mord' : '', token, this.style);
                }
                result.symbol = token;
                result.latex = unicodeCharToLatex(this.parseMode, token);
                if ((info === null || info === void 0 ? void 0 : info.isFunction) && this.smartFence) {
                    // The atom was a function that may be followed by
                    // an argument, like `f(`.
                    const smartFence = this.scanSmartFence();
                    if (smartFence) {
                        result = [result, smartFence];
                    }
                }
            }
            else if (token === '<}>') {
                this.onError({ latex: '', code: 'unbalanced-braces' });
            }
            else {
                this.onError({
                    latex: '',
                    code: 'unexpected-token',
                    arg: token,
                });
            }
            // Always return an array of atoms
            return result && !isArray(result)
                ? [result]
                : result;
        }
        /**
         * Attempt to scan the macro name and return an atom list if successful.
         * Otherwise, it wasn't a macro.
         */
        scanMacro(macro) {
            var _a;
            const macroName = macro.slice(1);
            if (!this.macros || !this.macros[macroName])
                return null;
            const initialIndex = this.index;
            const args = [];
            let def;
            let argCount = 0;
            if (typeof this.macros[macroName] === 'string') {
                def = this.macros[macroName];
                // Let's see if there are arguments in the definition.
                if (/(^|[^\\])#1/.test(def))
                    argCount = 1;
                if (/(^|[^\\])#2/.test(def))
                    argCount = 2;
                if (/(^|[^\\])#3/.test(def))
                    argCount = 3;
                if (/(^|[^\\])#4/.test(def))
                    argCount = 4;
                if (/(^|[^\\])#5/.test(def))
                    argCount = 5;
                if (/(^|[^\\])#6/.test(def))
                    argCount = 6;
                if (/(^|[^\\])#7/.test(def))
                    argCount = 7;
                if (/(^|[^\\])#8/.test(def))
                    argCount = 8;
                if (/(^|[^\\])#9/.test(def))
                    argCount = 9;
            }
            else {
                def = this.macros[macroName].def;
                argCount = this.macros[macroName].args || 0;
            }
            for (let i = 1; i <= argCount; i++) {
                // Parse each argument as a string. We don't know yet
                // what the proper parse mode is, so defer parsing till later
                // when invoking `parseString`
                args[i] = this.matchLiteralArg();
            }
            // Carry forward the placeholder argument, if any.
            args['?'] = (_a = this.args) === null || _a === void 0 ? void 0 : _a['?'];
            // Group the result of the macro expansion, and set the
            // captureSelection attribute so that it is handled as an unbreakable
            // unit
            const atom = new Atom(this.parseMode, 'group', parseString(def, this.parseMode, args, this.macros, false, this.onError));
            atom.captureSelection = true;
            atom.symbol = macro;
            atom.latex = macro + tokensToString(this.tokens.slice(initialIndex));
            return atom;
        }
        /**
         * Make an atom for the current token or token group and
         * add it to the parser's current atoms
         */
        parseToken() {
            let result = this.parseEnvironment() ||
                this.parseModeShift() ||
                this.parseModeSet() ||
                this.parseGroup() ||
                this.parseLeftRight();
            if (!result && (this.parseSupSub() || this.parseLimits()))
                return true;
            if (!result)
                result = this.parseSimpleToken();
            // If we have an atom to add, push it at the end of the current math list
            // We could have no atom for tokens that were skipped, a ' ' in math mode
            // for example
            if (isArray(result)) {
                this.atoms = this.atoms.concat(result);
            }
            else if (result) {
                this.atoms.push(result);
            }
            return result !== null;
        }
    }
    /**
     * Given a string of LaTeX, return a corresponding math list (array of atoms).
     * @param args - If there are any placeholder tokens, e.g.
     * `#0`, `#1`, etc... they will be replaced by the value provided by `args`.
     * @param smartFence - If true, promote plain fences, e.g. `(`,
     * as `\left...\right` or `\mleft...\mright`
     */
    function parseString(s, parseMode, args, macros, smartFence = false, onError) {
        let atoms = [];
        const parser = new Parser(tokenize(s, args), args, macros, (err) => {
            if (typeof onError === 'function') {
                onError({ ...err, latex: s });
            }
        });
        parser.parseMode = parseMode || 'math'; // other possible values: 'text', 'color', etc...
        if (smartFence)
            parser.smartFence = true;
        while (!parser.end()) {
            const more = parser.parse();
            if (more) {
                atoms = atoms.concat(more);
            }
        }
        return atoms;
    }

    var _a, _b;
    // The URL of the bundled MathLive library. Used later to locate the `fonts`
    // directory, relative to the library
    // If loaded via a <script> tag, `document.currentScript.src` is this location
    // If loaded via a module (e.g. `import ...`),`import.meta.url` is this location.
    // However, `import.meta` is not supported by WebPack. So, use a super-hacky-alternative
    // to get the URL.
    // See https://github.com/webpack/webpack/issues/6719
    // Adapted from https://jakedeichert.com/blog/2020/02/a-super-hacky-alternative-to-import-meta-url/
    function getFileUrl() {
        const stackTraceFrames = String(new Error().stack)
            .replace(/^Error.*\n/, '')
            .split('\n');
        if (stackTraceFrames.length === 0)
            return '';
        // 0 = this getFileUrl frame (because the Error is created here)
        // 1 = the caller of getFileUrl (the file path we want to grab)
        const callerFrame = stackTraceFrames[0];
        // Extract the script's complete url
        const m = callerFrame.match(/http.*js/);
        if (!m)
            return '';
        return m[0];
    }
    const gScriptUrl = (_b = (_a = document.currentScript) === null || _a === void 0 ? void 0 : _a.src) !== null && _b !== void 0 ? _b : getFileUrl();
    async function loadFonts(fontsDirectory, onError) {
        var _a;
        function makeFontFace(name, source, descriptors = {}) {
            return new FontFace(name, `url(${source}.woff2) format('woff2'), url(${source}.woff) format('woff')`, descriptors);
        }
        // If the "mathlive-fonts.css" stylesheet is included in the <head> of the
        // page, it will include a `--ML__static-fonts` variable.
        // In that case, don't load the fonts dynamically
        const useStaticFonts = (_a = getComputedStyle(document.documentElement).getPropertyValue('--ML__static-fonts')) !== null && _a !== void 0 ? _a : false;
        if (useStaticFonts)
            return;
        if ('fonts' in document) {
            const fontFamilies = [
                'KaTeX_Main',
                'KaTeX_Math',
                'KaTeX_AMS',
                'KaTeX_Caligraphic',
                'KaTeX_Fraktur',
                'KaTeX_SansSerif',
                'KaTeX_Script',
                'KaTeX_Size1',
                'KaTeX_Size2',
                'KaTeX_Size3',
                'KaTeX_Size4',
            ];
            // for (const fontFace of document.fonts.values()) { console.log(fontFace.family)}
            let fontsLoaded = false;
            // Firefox returns true for fonts that are not loaded...
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1252821 🤦‍♂️
            // So, if on Firefox, always assume that the fonts are not loaded.
            if (!/firefox/i.test(navigator.userAgent)) {
                try {
                    fontsLoaded = fontFamilies.every((x) => document['fonts'].check('16px ' + x));
                }
                catch (e) {
                    fontsLoaded = false;
                }
            }
            if (!fontsLoaded) {
                if (document.body.classList.contains('ML__fonts-loading')) {
                    return;
                }
                document.body.classList.add('ML__fonts-loading');
                // Locate the `fonts` folder relative to the script URL
                const fontsFolder = new URL(fontsDirectory !== null && fontsDirectory !== void 0 ? fontsDirectory : './fonts', gScriptUrl).toString();
                const fonts = [
                    ['KaTeX_Main-Regular'],
                    ['KaTeX_Main-BoldItalic', { style: 'italic', weight: 'bold' }],
                    ['KaTeX_Main-Bold', { weight: 'bold' }],
                    ['KaTeX_Main-Italic', { style: 'italic' }],
                    ['KaTeX_Math-Italic', { style: 'italic' }],
                    ['KaTeX_Math-BoldItalic', { style: 'italic', weight: 'bold' }],
                    ['KaTeX_AMS-Regular'],
                    ['KaTeX_Caligraphic-Regular'],
                    ['KaTeX_Caligraphic-Bold', { weight: 'bold' }],
                    ['KaTeX_Fraktur-Regular'],
                    ['KaTeX_Fraktur-Bold', { weight: 'bold' }],
                    ['KaTeX_SansSerif-Regular', { style: 'italic' }],
                    ['KaTeX_SansSerif-Bold', { weight: 'bold' }],
                    ['KaTeX_SansSerif-Italic', { style: 'italic' }],
                    ['KaTeX_Script-Regular'],
                    ['KaTeX_Typewriter-Regular'],
                    ['KaTeX_Size1-Regular'],
                    ['KaTeX_Size2-Regular'],
                    ['KaTeX_Size3-Regular'],
                    ['KaTeX_Size4-Regular'],
                ].map((x) => makeFontFace(x[0].replace(/-[a-zA-Z]+$/, ''), fontsFolder + '/' + x[0], x[1]));
                try {
                    const loadedFonts = (await Promise.all(fonts.map((x) => {
                        try {
                            return x.load();
                        }
                        catch (e) {
                            if (typeof onError === 'function') {
                                onError({
                                    code: 'font-not-found',
                                    arg: e,
                                });
                            }
                        }
                        return undefined;
                    })));
                    // Render them at the same time
                    loadedFonts.forEach((font) => document['fonts'].add(font));
                    document.body.classList.remove('ML__fonts-loading');
                }
                catch (err) {
                    console.error(err);
                }
            }
        }
    }

    function hashCode(s) {
        let hash = 0;
        if (s.length === 0) {
            return hash;
        }
        for (let i = 0; i < s.length; i++) {
            const char = s.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash;
    }

    function inject(element, css) {
        var _a, _b;
        if (!css)
            return null;
        let root = (_a = element === null || element === void 0 ? void 0 : element.getRootNode()) !== null && _a !== void 0 ? _a : document === null || document === void 0 ? void 0 : document.head;
        if (!root)
            return null;
        if (root === document)
            root = document.head;
        const id = hashCode(css).toString(36);
        const el = root.querySelector(`style[data-id="${id}"]`);
        if (el) {
            const refCount = parseFloat((_b = el.getAttribute('data-refcount')) !== null && _b !== void 0 ? _b : '0');
            el.setAttribute('data-refcount', Number(refCount + 1).toString());
        }
        else {
            // Make a new node holding the stylesheet
            const styleNode = document.createElement('style');
            // styleNode.setAttribute('media', 'screen')
            // styleNode.setAttribute('media', 'only screen and (max-width : 1024px)')
            styleNode.type = 'text/css';
            styleNode.dataset.id = id;
            styleNode.dataset.refcount = '1';
            styleNode.appendChild(document.createTextNode(css));
            root.appendChild(styleNode);
        }
        return {
            release: () => {
                var _a;
                const el = document.head.querySelector(`style[data-id="${id}"]`);
                if (el) {
                    const refCount = parseFloat((_a = el.getAttribute('data-refcount')) !== null && _a !== void 0 ? _a : '0');
                    if (refCount === 1) {
                        el.remove();
                    }
                    else {
                        el.setAttribute('data-refcount', Number(refCount - 1).toString());
                    }
                }
            },
        };
    }

    function isEmptyMathlist(atoms) {
        return (atoms.length === 0 || (atoms.length === 1 && atoms[0].type === 'first'));
    }
    function removeSuggestion(model) {
        const siblings = model.siblings();
        // Remove all `suggestion` atoms
        for (let i = siblings.length - 1; i >= 0; i--) {
            if (siblings[i].isSuggestion) {
                siblings.splice(i, 1);
            }
        }
    }
    /**
     * Clear the verbatim Latex property for the parent node and its parents.
     * This will cause the latex value to be re-calculated.
     */
    function invalidateVerbatimLatex(model) {
        let depth = 1;
        let atom = model.ancestor(depth);
        while (atom) {
            atom.latex = undefined;
            depth += 1;
            atom = model.ancestor(depth);
        }
    }

    function pathToString(path, extent) {
        let result = '';
        for (const segment of path) {
            result += segment.relation + ':' + segment.offset + '/';
        }
        if (extent) {
            result += '#' + extent;
        }
        return result;
    }
    function pathFromString(string) {
        // Reset the path
        const result = { path: [], extent: 0 };
        // Parse the selection extent, if present
        const components = string.split('#');
        if (components.length > 1) {
            result.extent = parseInt(components[1]);
        }
        // Parse the segments
        const segments = components[0].split('/');
        for (const segment of segments) {
            const m2 = segment.match(/([^:]*):(.*)/);
            if (m2) {
                result.path.push({
                    relation: m2[1],
                    offset: parseInt(m2[2]),
                });
            }
        }
        return result;
    }
    /**
     * Given two paths, return a path representing their common ancestor.
     */
    function pathCommonAncestor(p, q) {
        const result = [];
        const maxIndex = Math.min(p.length - 1, q.length - 1);
        let i = 0;
        while (i <= maxIndex &&
            p[i].relation === q[i].relation &&
            p[i].offset === q[i].offset) {
            result.push(p[i]);
            i += 1;
        }
        return result;
    }
    /**
     *
     * @return 0 if the paths are identical
     *  - 1 if they are siblings
     *  - >1 if they are not siblings
     */
    function pathDistance(p, q) {
        let result = 0;
        let i = -1;
        let done = false;
        while (!done) {
            i += 1;
            done = i >= p.length || i >= q.length;
            done =
                done ||
                    !(p[i].relation === q[i].relation && p[i].offset === q[i].offset);
        }
        if (i === p.length && i === q.length) {
            // They're identical
            result = 0;
        }
        else if (i + 1 === p.length &&
            i + 1 === q.length &&
            p[i].relation === q[i].relation) {
            // They're siblings
            result = 1;
        }
        else {
            result = 2;
        }
        return result;
    }
    function clone(path) {
        return pathFromString(pathToString(path)).path;
    }

    /**
     * Convert an array row/col into an array index.
     */
    function arrayIndex(array, rowCol) {
        let result = 0;
        for (let i = 0; i < rowCol.row; i++) {
            for (let j = 0; j < array[i].length; j++) {
                result += 1;
            }
        }
        result += rowCol.col;
        return result;
    }
    /**
     * Convert an array index (scalar) to an array row/col.
     * @return {object}
     * - row: number
     * - col: number
     */
    function arrayColRow(array, index) {
        let i;
        if (typeof index === 'string') {
            const m = index.match(/cell([0-9]*)$/);
            if (m)
                i = parseInt(m[1]);
        }
        else {
            i = index;
        }
        const result = { row: 0, col: 0 };
        while (i > 0) {
            result.col += 1;
            if (!array[result.row] || result.col >= array[result.row].length) {
                result.col = 0;
                result.row += 1;
            }
            i -= 1;
        }
        return result;
    }
    /**
     * Return the array cell corresponding to colrow or null (for example in
     * a sparse array)
     */
    function arrayCell(array, colrow) {
        var _a;
        if (typeof colrow !== 'object')
            colrow = arrayColRow(array, colrow);
        let result;
        if (isArray(array[colrow.row])) {
            result = (_a = array[colrow.row][colrow.col]) !== null && _a !== void 0 ? _a : null;
        }
        // If the 'first' math atom is missing, insert it
        if (result && (result.length === 0 || result[0].type !== 'first')) {
            result.unshift(new Atom('math', 'first'));
        }
        return result;
    }
    /**
     * Total numbers of cells (include sparse cells) in the array.
     */
    function arrayCellCount(array) {
        let result = 0;
        let numRows = 0;
        let numCols = 1;
        for (const row of array) {
            numRows += 1;
            if (row.length > numCols)
                numCols = row.length;
        }
        result = numRows * numCols;
        return result;
    }
    /**
     * Adjust colRow to point to the next/previous available row
     * If no more rows, go to the next/previous column
     * If no more columns, return null
     */
    function arrayAdjustRow(array, colRow, dir) {
        const result = { ...colRow };
        result.row += dir;
        if (result.row < 0) {
            result.col += dir;
            result.row = array.length - 1;
            if (result.col < 0)
                return null;
            while (result.row >= 0 && !arrayCell(array, result)) {
                result.row -= 1;
            }
            if (result.row < 0)
                return null;
        }
        else if (result.row >= array.length) {
            result.col += dir;
            result.row = 0;
            while (result.row < array.length && !arrayCell(array, result)) {
                result.row += 1;
            }
            if (result.row > array.length - 1)
                return null;
        }
        return result;
    }

    class ModelPrivate {
        constructor(options, listeners, hooks, target) {
            this.options = {
                mode: 'math',
                removeExtraneousParentheses: false,
                ...options,
            };
            this.root = makeRoot(this.options.mode);
            this.path = [{ relation: 'body', offset: 0 }];
            this.extent = 0;
            this.setListeners(listeners);
            this.setHooks(hooks);
            this.mathfield = target;
            this.suppressChangeNotifications = false;
        }
        clone() {
            const result = new ModelPrivate(this.options, this.listeners, this.hooks, this.mathfield);
            result.root = this.root;
            result.path = clone(this.path);
            return result;
        }
        setListeners(listeners) {
            this.listeners = listeners;
        }
        setHooks(hooks) {
            this.hooks = {
                announce: (hooks === null || hooks === void 0 ? void 0 : hooks.announce) ? hooks.announce
                    : (_target, _command, _modelBefore, _atoms) => {
                        return;
                    },
                moveOut: (hooks === null || hooks === void 0 ? void 0 : hooks.moveOut) ? hooks.moveOut
                    : () => {
                        return true;
                    },
                tabOut: (hooks === null || hooks === void 0 ? void 0 : hooks.tabOut) ? hooks.tabOut
                    : () => {
                        return true;
                    },
            };
        }
        announce(command, // @revisit: be more explicit
        modelBefore, atoms = []) {
            this.hooks.announce(this.mathfield, command, modelBefore, atoms);
        }
        /**
         * Return a string representation of the selection.
         * @todo This is a bad name for this function, since it doesn't return
         * a representation of the content, which one might expect...
         */
        toString() {
            return pathToString(this.path, this.extent);
        }
        /**
         * @return array of children of the parent
         */
        siblings() {
            var _a;
            if (this.path.length === 0)
                return [];
            let siblings;
            if (this.parent().array) {
                siblings = arrayCell(this.parent().array, this.relation());
            }
            else {
                siblings = (_a = this.parent()[this.relation()]) !== null && _a !== void 0 ? _a : [];
                if (typeof siblings === 'string')
                    siblings = [];
            }
            // If the 'first' atom is missing, insert it
            if (siblings.length === 0 || siblings[0].type !== 'first') {
                siblings.unshift(new Atom(this.parent().mode, 'first'));
            }
            return siblings;
        }
        anchorOffset() {
            return this.path.length > 0
                ? this.path[this.path.length - 1].offset
                : 0;
        }
        focusOffset() {
            return this.path.length > 0
                ? this.path[this.path.length - 1].offset + this.extent
                : 0;
        }
        /**
         * Offset of the first atom included in the selection
         * i.e. `=1` => selection starts with and includes first atom
         * With expression _x=_ and atoms :
         * - 0: _<first>_
         * - 1: _x_
         * - 2: _=_
         *
         * - if caret is before _x_:  `start` = 0, `end` = 0
         * - if caret is after _x_:   `start` = 1, `end` = 1
         * - if _x_ is selected:      `start` = 1, `end` = 2
         * - if _x=_ is selected:   `start` = 1, `end` = 3
         */
        startOffset() {
            return Math.min(this.focusOffset(), this.anchorOffset());
        }
        /**
         * Offset of the first atom not included in the selection
         * i.e. max value of `siblings.length`
         * `endOffset - startOffset = extent`
         */
        endOffset() {
            return Math.max(this.focusOffset(), this.anchorOffset());
        }
        /**
         * Sibling, relative to `anchor`
         * `sibling(0)` = start of selection
         * `sibling(-1)` = sibling immediately left of start offset
         */
        sibling(offset) {
            return this.siblings()[this.startOffset() + offset];
        }
        // @revisit: move ancestor, and anything related to the selection to model-selection
        /**
         * @param ancestor distance from self to ancestor.
         * - `ancestor` = 0: self
         * - `ancestor` = 1: parent
         * - `ancestor` = 2: grand-parent
         * - etc...
         */
        ancestor(ancestor) {
            // If the requested ancestor goes beyond what's available,
            // return null
            if (ancestor > this.path.length)
                return null;
            // Start with the root
            let result = this.root;
            // Iterate over the path segments, selecting the appropriate
            for (let i = 0; i < this.path.length - ancestor; i++) {
                const segment = this.path[i];
                if (result.array) {
                    result = arrayCell(result.array, segment.relation)[segment.offset];
                }
                else if (!result[segment.relation]) {
                    // There is no such relation... (the path got out of sync with the tree)
                    return null;
                }
                else {
                    // Make sure the 'first' atom has been inserted, otherwise
                    // the segment.offset might be invalid
                    if (result[segment.relation].length === 0 ||
                        result[segment.relation][0].type !== 'first') {
                        result[segment.relation].unshift(new Atom(result[segment.relation][0].mode, 'first'));
                    }
                    const offset = Math.min(segment.offset, result[segment.relation].length - 1);
                    result = result[segment.relation][offset];
                }
            }
            return result;
        }
        parent() {
            return this.ancestor(1);
        }
        relation() {
            return this.path.length > 0
                ? this.path[this.path.length - 1].relation
                : '';
        }
        /**
         * If necessary, insert a `first` atom in the sibling list.
         * If there's already a `first` atom, do nothing.
         * The `first` atom is used as a 'placeholder' to hold the blinking caret when
         * the caret is positioned at the very beginning of the mathlist.
         */
        insertFirstAtom() {
            this.siblings();
        }
    }

    function selectionWillChange(model) {
        var _a;
        if (typeof ((_a = model.listeners) === null || _a === void 0 ? void 0 : _a.onSelectionWillChange) === 'function' &&
            !model.suppressChangeNotifications) {
            model.listeners.onSelectionWillChange(model);
        }
    }
    function selectionDidChange(model) {
        var _a;
        if (typeof ((_a = model.listeners) === null || _a === void 0 ? void 0 : _a.onSelectionDidChange) === 'function' &&
            !model.suppressChangeNotifications) {
            model.listeners.onSelectionDidChange(model);
        }
    }
    function contentWillChange(model) {
        var _a;
        if (typeof ((_a = model.listeners) === null || _a === void 0 ? void 0 : _a.onContentWillChange) === 'function' &&
            !model.suppressChangeNotifications) {
            model.listeners.onContentWillChange(model);
        }
    }
    function contentDidChange(model) {
        var _a;
        if (typeof ((_a = model.listeners) === null || _a === void 0 ? void 0 : _a.onContentDidChange) === 'function' &&
            !model.suppressChangeNotifications) {
            model.listeners.onContentDidChange(model);
        }
    }
    /*
    // type User = { name: string };

    // interface UserEvents {
    //     login(user: User): void;
    //     logout(): string;
    // }

    type Filter<T, Cond, U extends keyof T = keyof T> = {
        [K in U]: T[K] extends Cond ? K : never;
    }[U];

    type In<T> = T extends (...args: infer U) => any ? U : [];
    type Out<T> = T extends () => infer U ? U : never;

    // Extract an array type of valid event keys
    type EventKey<T> = Filter<T, Function> & string;

    // Extract the argument/return types of a valid event
    type Arguments<T> = T extends (...args: infer U) => any ? U : [];
    type Result<T> = T extends () => infer U ? U : never;

    type EventIn<T, K extends EventKey<T>> = In<T[K]>;
    type EventOut<T, K extends EventKey<T>> = Out<T[K]> | void;

    export type Listener<T, K extends EventKey<T> = EventKey<T>> = (
        ...args: EventIn<T, K>
    ) => EventOut<T, K>;

    export type ListenerMap<T> = Partial<{ [K in EventKey<T>]: Listener<T, K> }>;

    interface Emitter<T> {
        on<K extends EventKey<T>>(key: K, fn: Listener<T, K>): typeof fn;
    }

    // import { EventEmitter } from 'events';
    // const ee = (new EventEmitter() as unknown) as Emitter<UserEvents>;

    // ee.on('login', (user: string) => {});
    // ee.on('logout', () => {
    //     return 'done';
    // });
    */

    /**
     * Return true if the atom could be a part of a number
     * i.e. "-12354.568"
     */
    function isNumber(atom) {
        if (!atom)
            return false;
        return ((atom.type === 'mord' && /[0-9.]/.test(atom.body)) ||
            (atom.type === 'mpunct' && atom.body === ','));
    }
    /**
     * Return a `{start:, end:}` for the offsets of the command around the insertion
     * point, or null.
     * - `start` is the first atom which is of type `command`
     * - `end` is after the last atom of type `command`
     */
    function getCommandOffsets(model) {
        const siblings = model.siblings();
        if (siblings.length <= 1)
            return null;
        let start = Math.min(model.endOffset(), siblings.length - 1);
        // let start = Math.max(0, model.endOffset());
        if (siblings[start].type !== 'command')
            return null;
        while (start > 0 && siblings[start].type === 'command')
            start -= 1;
        let end = model.startOffset() + 1;
        while (end <= siblings.length - 1 && siblings[end].type === 'command') {
            end += 1;
        }
        if (end > start) {
            return { start: start + 1, end: end };
        }
        return null;
    }
    function positionInsertionPointAfterCommitedCommand(model) {
        const siblings = model.siblings();
        const command = getCommandOffsets(model);
        let i = command.start;
        while (i < command.end && !siblings[i].isSuggestion) {
            i++;
        }
        setSelection(model, i - 1);
    }
    function getAnchorMode(model) {
        const anchor = selectionIsCollapsed(model)
            ? getAnchor(model)
            : model.sibling(1);
        let result;
        if (anchor) {
            if (anchor.type === 'command') {
                return 'command';
            }
            result = anchor.mode;
        }
        let i = 1;
        let ancestor = model.ancestor(i);
        while (!result && ancestor) {
            if (ancestor)
                result = ancestor.mode;
            i += 1;
            ancestor = model.ancestor(i);
        }
        return result;
    }
    // @revisit any
    function getAnchorStyle(model) {
        const anchor = selectionIsCollapsed(model)
            ? getAnchor(model)
            : model.sibling(1);
        let result;
        if (anchor && anchor.type !== 'first') {
            if (anchor.type === 'command') {
                return {};
            }
            result = {
                color: anchor.color,
                backgroundColor: anchor.backgroundColor,
                fontFamily: anchor.fontFamily,
                fontShape: anchor.fontShape,
                fontSeries: anchor.fontSeries,
                fontSize: anchor.fontSize,
            };
        }
        let i = 1;
        let ancestor = model.ancestor(i);
        while (!result && ancestor) {
            if (ancestor) {
                result = {
                    color: ancestor.color,
                    backgroundColor: ancestor.backgroundColor,
                    fontFamily: ancestor.fontFamily,
                    fontShape: ancestor.fontShape,
                    fontSeries: ancestor.fontSeries,
                    fontSize: ancestor.fontSize,
                };
            }
            i += 1;
            ancestor = model.ancestor(i);
        }
        return result;
    }
    /**
     * Move to the next/previous placeholder or empty child list.
     * @return False if no placeholder found and did not move
     */
    function leap(model, dir = 1, callHooks = true) {
        var _a;
        const savedSuppressChangeNotifications = model.suppressChangeNotifications;
        model.suppressChangeNotifications = true;
        const oldPath = model.clone();
        const oldExtent = model.extent;
        move(model, dir);
        if (getAnchor(model).type === 'placeholder') {
            // If we're already at a placeholder, move by one more (the placeholder
            // is right after the insertion point)
            move(model, dir);
        }
        // Candidate placeholders are atom of type 'placeholder'
        // or empty children list (except for the root: if the root is empty,
        // it is not a valid placeholder)
        const placeholders = filter(model, (path, atom) => atom.type === 'placeholder' ||
            (path.length > 1 && model.siblings().length === 1), dir);
        // If no placeholders were found, call handler or move to the next focusable
        // element in the document
        if (placeholders.length === 0) {
            // Restore the selection
            setPath(model, oldPath, oldExtent);
            if (callHooks) {
                if (((_a = model.hooks) === null || _a === void 0 ? void 0 : _a.tabOut) &&
                    model.hooks.tabOut(model, dir > 0 ? 'forward' : 'backward') &&
                    document.activeElement) {
                    const focussableElements = `a[href]:not([disabled]),
                    button:not([disabled]),
                    textarea:not([disabled]),
                    input[type=text]:not([disabled]),
                    select:not([disabled]),
                    [contentEditable="true"],
                    [tabindex]:not([disabled]):not([tabindex="-1"])`;
                    // Get all the potentially focusable elements
                    // and exclude (1) those that are invisible (width and height = 0)
                    // (2) not the active element
                    // (3) the ancestor of the active element
                    const focussable = Array.prototype.filter.call(document.querySelectorAll(focussableElements), (element) => ((element.offsetWidth > 0 ||
                        element.offsetHeight > 0) &&
                        !element.contains(document.activeElement)) ||
                        element === document.activeElement);
                    let index = focussable.indexOf(document.activeElement) + dir;
                    if (index < 0)
                        index = focussable.length - 1;
                    if (index >= focussable.length)
                        index = 0;
                    focussable[index].focus();
                }
            }
            model.suppressChangeNotifications = savedSuppressChangeNotifications;
            return false;
        }
        // Set the selection to the next placeholder
        selectionWillChange(model);
        setPath(model, placeholders[0]);
        if (getAnchor(model).type === 'placeholder')
            setSelectionExtent(model, -1);
        model.announce('move', oldPath);
        selectionDidChange(model);
        model.suppressChangeNotifications = savedSuppressChangeNotifications;
        return true;
    }
    /**
     * @param offset
     * - &gt;0: index of the child in the group where the selection will start from
     * - <0: index counting from the end of the group
     * @param extent Number of items in the selection:
     * - 0: collapsed selection, single insertion point
     * - &gt;0: selection extending _after_ the offset
     * - <0: selection extending _before_ the offset
     * - `'end'`: selection extending to the end of the group
     * - `'start'`: selection extending to the beginning of the group
     * @param relation e.g. `'body'`, `'superscript'`, etc...
     * @return False if the relation is invalid (no such children)
     */
    function setSelection(model, offset = 0, extent = 0, relation = '') {
        // If no relation ("children", "superscript", etc...) is specified
        // keep the current relation
        const oldRelation = model.path[model.path.length - 1].relation;
        if (!relation)
            relation = oldRelation;
        // If the relation is invalid, exit and return false
        const parent = model.parent();
        if (!parent && relation !== 'body')
            return false;
        const arrayRelation = relation.startsWith('cell');
        if ((!arrayRelation && !parent[relation]) ||
            (arrayRelation && !parent.array)) {
            return false;
        }
        const relationChanged = relation !== oldRelation;
        // Temporarily set the path to the potentially new relation to get the
        // right siblings
        model.path[model.path.length - 1].relation = relation;
        // Invoking siblings() will have the side-effect of adding the 'first'
        // atom if necessary
        // ... and we want the siblings with the potentially new relation...
        const siblings = model.siblings();
        const siblingsCount = siblings.length;
        // Restore the relation
        model.path[model.path.length - 1].relation = oldRelation;
        const oldExtent = model.extent;
        if (extent === 'end') {
            extent = siblingsCount - offset - 1;
        }
        else if (extent === 'start') {
            extent = -offset;
        }
        setSelectionExtent(model, extent);
        const extentChanged = model.extent !== oldExtent;
        setSelectionExtent(model, oldExtent);
        // Calculate the new offset, and make sure it is in range
        // (setSelection can be called with an offset that greater than
        // the number of children, for example when doing an up from a
        // numerator to a smaller denominator, e.g. "1/(x+1)".
        if (offset < 0) {
            offset = siblingsCount + offset;
        }
        offset = Math.max(0, Math.min(offset, siblingsCount - 1));
        const oldOffset = model.path[model.path.length - 1].offset;
        const offsetChanged = oldOffset !== offset;
        if (relationChanged || offsetChanged || extentChanged) {
            if (relationChanged) {
                adjustPlaceholder(model);
            }
            selectionWillChange(model);
            model.path[model.path.length - 1].relation = relation;
            model.path[model.path.length - 1].offset = offset;
            setSelectionExtent(model, extent);
            selectionDidChange(model);
        }
        return true;
    }
    /**
     * Move the anchor to the next permissible atom
     */
    function next(model, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        const NEXT_RELATION = {
            body: 'numer',
            numer: 'denom',
            denom: 'index',
            index: 'overscript',
            overscript: 'underscript',
            underscript: 'subscript',
            subscript: 'superscript',
        };
        if (model.anchorOffset() === model.siblings().length - 1) {
            adjustPlaceholder(model);
            // We've reached the end of this list.
            // Is there another list to consider?
            let relation = NEXT_RELATION[model.relation()];
            const parent = model.parent();
            while (relation && !parent[relation]) {
                relation = NEXT_RELATION[relation];
            }
            // We found a new relation/set of siblings...
            if (relation) {
                setSelection(model, 0, 0, relation);
                return;
            }
            // No more siblings, check if we have a sibling cell in an array
            if (model.parent().array) {
                const maxCellCount = arrayCellCount(model.parent().array);
                let cellIndex = parseInt(model.relation().match(/cell([0-9]*)$/)[1]) + 1;
                while (cellIndex < maxCellCount) {
                    const cell = arrayCell(model.parent().array, cellIndex);
                    // Some cells could be null (sparse array), so skip them
                    if (cell && setSelection(model, 0, 0, 'cell' + cellIndex)) {
                        selectionDidChange(model);
                        return;
                    }
                    cellIndex += 1;
                }
            }
            // No more siblings, go up to the parent.
            if (model.path.length === 1) {
                // Invoke handler and perform default if they return true.
                if (model.suppressChangeNotifications ||
                    !((_a = model.hooks) === null || _a === void 0 ? void 0 : _a.moveOut) ||
                    model.hooks.moveOut(model, 'forward')) {
                    // We're at the root, so loop back
                    model.path[0].offset = 0;
                }
            }
            else {
                // We've reached the end of the siblings. If we're a group
                // with skipBoundary, when exiting, move one past the next atom
                const skip = !options.iterateAll && model.parent().skipBoundary;
                model.path.pop();
                if (skip) {
                    next(model, options);
                }
            }
            selectionDidChange(model);
            return;
        }
        // Still some siblings to go through. Move on to the next one.
        setSelection(model, model.anchorOffset() + 1);
        const anchor = getAnchor(model);
        // Dive into its components, if the new anchor is a compound atom,
        // and allows capture of the selection by its sub-elements
        if (anchor && !anchor.captureSelection) {
            let relation;
            if (anchor.array) {
                // Find the first non-empty cell in this array
                let cellIndex = 0;
                relation = '';
                const maxCellCount = arrayCellCount(anchor.array);
                while (!relation && cellIndex < maxCellCount) {
                    // Some cells could be null (sparse array), so skip them
                    if (arrayCell(anchor.array, cellIndex)) {
                        relation = 'cell' + cellIndex.toString();
                    }
                    cellIndex += 1;
                }
                console.assert(relation);
                model.path.push({ relation: relation, offset: 0 });
                setSelection(model, 0, 0, relation);
                return;
            }
            relation = 'body';
            while (relation) {
                if (isArray(anchor[relation])) {
                    model.path.push({ relation: relation, offset: 0 });
                    model.insertFirstAtom();
                    if (!options.iterateAll && anchor.skipBoundary) {
                        next(model, options);
                    }
                    return;
                }
                relation = NEXT_RELATION[relation];
            }
        }
    }
    function previous(model, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        const PREVIOUS_RELATION = {
            numer: 'body',
            denom: 'numer',
            index: 'denom',
            overscript: 'index',
            underscript: 'overscript',
            subscript: 'underscript',
            superscript: 'subscript',
        };
        if (!options.iterateAll &&
            model.anchorOffset() === 1 &&
            model.parent() &&
            model.parent().skipBoundary) {
            setSelection(model, 0);
        }
        if (model.anchorOffset() < 1) {
            // We've reached the first of these siblings.
            // Is there another set of siblings to consider?
            let relation = PREVIOUS_RELATION[model.relation()];
            while (relation && !setSelection(model, -1, 0, relation)) {
                relation = PREVIOUS_RELATION[relation];
            }
            // Ignore the body of the subsup scaffolding and of
            // 'mop' atoms (for example, \sum): their body is not editable.
            const parentType = model.parent() ? model.parent().type : 'none';
            if (relation === 'body' &&
                (parentType === 'msubsup' || parentType === 'mop')) {
                relation = null;
            }
            // We found a new relation/set of siblings...
            if (relation)
                return;
            adjustPlaceholder(model);
            selectionWillChange(model);
            // No more siblings, check if we have a sibling cell in an array
            if (model.relation().startsWith('cell')) {
                let cellIndex = parseInt(model.relation().match(/cell([0-9]*)$/)[1]) - 1;
                while (cellIndex >= 0) {
                    const cell = arrayCell(model.parent().array, cellIndex);
                    if (cell && setSelection(model, -1, 0, 'cell' + cellIndex)) {
                        selectionDidChange(model);
                        return;
                    }
                    cellIndex -= 1;
                }
            }
            // No more siblings, go up to the parent.
            if (model.path.length === 1) {
                // Invoke handler and perform default if they return true.
                if (model.suppressChangeNotifications ||
                    !((_a = model.hooks) === null || _a === void 0 ? void 0 : _a.moveOut) ||
                    model.hooks.moveOut(model, 'backward')) {
                    // We're at the root, so loop back
                    model.path[0].offset = model.root.body.length - 1;
                }
            }
            else {
                model.path.pop();
                setSelection(model, model.anchorOffset() - 1);
            }
            selectionDidChange(model);
            return;
        }
        // If the new anchor is a compound atom, dive into its components
        const anchor = getAnchor(model);
        // Only dive in if the atom allows capture of the selection by
        // its sub-elements
        if (!anchor.captureSelection) {
            let relation;
            if (anchor.array) {
                relation = '';
                const maxCellCount = arrayCellCount(anchor.array);
                let cellIndex = maxCellCount - 1;
                while (!relation && cellIndex < maxCellCount) {
                    // Some cells could be null (sparse array), so skip them
                    if (arrayCell(anchor.array, cellIndex)) {
                        relation = 'cell' + cellIndex.toString();
                    }
                    cellIndex -= 1;
                }
                cellIndex += 1;
                console.assert(relation);
                model.path.push({
                    relation: relation,
                    offset: arrayCell(anchor.array, cellIndex).length - 1,
                });
                setSelection(model, -1, 0, relation);
                return;
            }
            relation = 'superscript';
            while (relation) {
                if (isArray(anchor[relation])) {
                    model.path.push({
                        relation: relation,
                        offset: anchor[relation].length - 1,
                    });
                    setSelection(model, -1, 0, relation);
                    return;
                }
                relation = PREVIOUS_RELATION[relation];
            }
        }
        // There wasn't a component to navigate to, so...
        // Still some siblings to go through: move on to the previous one.
        setSelection(model, model.anchorOffset() - 1);
        if (!options.iterateAll &&
            model.sibling(0) &&
            model.sibling(0).skipBoundary) {
            previous(model, options);
        }
    }
    function move(model, dist, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : { extend: false };
        const extend = (_a = options.extend) !== null && _a !== void 0 ? _a : false;
        removeSuggestion(model);
        if (extend) {
            extend(model, dist, options);
        }
        else {
            const oldPath = model.clone();
            // const previousParent = model.parent();
            // const previousRelation = model.relation();
            // const previousSiblings = model.siblings();
            if (dist > 0) {
                if (collapseSelectionForward(model))
                    dist--;
                while (dist > 0) {
                    next(model);
                    dist--;
                }
            }
            else if (dist < 0) {
                if (collapseSelectionBackward(model))
                    dist++;
                while (dist !== 0) {
                    previous(model);
                    dist++;
                }
            }
            // ** @todo: can't do that without updating the path.
            // If the siblings list we left was empty, remove the relation
            // if (previousSiblings.length <= 1) {
            //     if (['superscript', 'subscript', 'index'].includes(previousRelation)) {
            //         previousParent[previousRelation] = null;
            //     }
            // }
            model.announce('move', oldPath);
        }
        return true;
    }
    function up(model, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : { extend: false };
        const extend = (_a = options.extend) !== null && _a !== void 0 ? _a : false;
        collapseSelectionBackward(model);
        const relation = model.relation();
        if (relation === 'denom') {
            if (extend) {
                selectionWillChange(model);
                model.path.pop();
                model.path[model.path.length - 1].offset -= 1;
                setSelectionExtent(model, 1);
                selectionDidChange(model);
            }
            else {
                setSelection(model, model.anchorOffset(), 0, 'numer');
            }
            model.announce('moveUp');
        }
        else if (model.parent().array) {
            // In an array
            let colRow = arrayColRow(model.parent().array, relation);
            colRow = arrayAdjustRow(model.parent().array, colRow, -1);
            if (colRow && arrayCell(model.parent().array, colRow)) {
                model.path[model.path.length - 1].relation =
                    'cell' + arrayIndex(model.parent().array, colRow);
                setSelection(model, model.anchorOffset());
                model.announce('moveUp');
            }
            else {
                move(model, -1, options);
            }
        }
        else {
            model.announce('line');
        }
        return true;
    }
    function down(model, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : { extend: false };
        const extend = (_a = options.extend) !== null && _a !== void 0 ? _a : false;
        collapseSelectionForward(model);
        const relation = model.relation();
        if (relation === 'numer') {
            if (extend) {
                selectionWillChange(model);
                model.path.pop();
                model.path[model.path.length - 1].offset -= 1;
                setSelectionExtent(model, 1);
                selectionDidChange(model);
            }
            else {
                setSelection(model, model.anchorOffset(), 0, 'denom');
            }
            model.announce('moveDown');
        }
        else if (model.parent().array) {
            // In an array
            let colRow = arrayColRow(model.parent().array, relation);
            colRow = arrayAdjustRow(model.parent().array, colRow, +1);
            // @revisit: validate this codepath
            if (colRow && arrayCell(model.parent().array, colRow)) {
                model.path[model.path.length - 1].relation =
                    'cell' + arrayIndex(model.parent().array, colRow);
                setSelection(model, model.anchorOffset());
                model.announce('moveDown');
            }
            else {
                move(model, +1, options);
            }
        }
        else {
            model.announce('line');
        }
        return true;
    }
    /**
     * Change the range of the selection
     *
     * @param dist - The change (positive or negative) to the extent
     * of the selection. The anchor point does not move.
     */
    function extend(model, dist) {
        let offset = model.path[model.path.length - 1].offset;
        let extent = 0;
        const oldPath = model.clone();
        extent = model.extent + dist;
        const newFocusOffset = offset + extent;
        if (newFocusOffset < 0 && extent !== 0) {
            // We're trying to extend beyond the first element.
            // Go up to the parent.
            if (model.path.length > 1) {
                selectionWillChange(model);
                model.path.pop();
                // model.path[model.path.length - 1].offset -= 1;
                setSelectionExtent(model, -1);
                selectionDidChange(model);
                model.announce('move', oldPath);
                return true;
            }
            // @todo exit left extend
            // If we're at the very beginning, nothing to do.
            offset = model.path[model.path.length - 1].offset;
            extent = model.extent;
        }
        else if (newFocusOffset >= model.siblings().length) {
            // We're trying to extend beyond the last element.
            // Go up to the parent
            if (model.path.length > 1) {
                selectionWillChange(model);
                model.path.pop();
                model.path[model.path.length - 1].offset -= 1;
                setSelectionExtent(model, 1);
                selectionDidChange(model);
                model.announce('move', oldPath);
                return true;
            }
            // @todo exit right extend
            if (selectionIsCollapsed(model)) {
                offset -= 1;
            }
            extent -= 1;
        }
        setSelection(model, offset, extent);
        model.announce('move', oldPath);
        return true;
    }
    /**
     * Move the selection focus to the next/previous point of interest.
     * A point of interest is an atom of a different type (mbin, mord, etc...)
     * than the current focus.
     * If `extend` is true, the selection will be extended. Otherwise, it is
     * collapsed, then moved.
     * @param dir +1 to skip forward, -1 to skip back
     */
    function skip(model, dir, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : { extend: false };
        const extend = (_a = options.extend) !== null && _a !== void 0 ? _a : false;
        dir = dir < 0 ? -1 : +1;
        const oldPath = model.clone();
        const siblings = model.siblings();
        const focus = model.focusOffset();
        let offset = focus + dir;
        if (extend)
            offset = Math.min(Math.max(0, offset), siblings.length - 1);
        if (offset < 0 || offset >= siblings.length) {
            // If we've reached the end, just move out of the list
            move(model, dir, options);
            return;
        }
        if (siblings[offset] && siblings[offset].mode === 'text') {
            // We're in a text zone, skip word by word
            offset = wordBoundaryOffset(model, offset, dir);
            if (offset < 0 && !extend) {
                setSelection(model, 0);
                return;
            }
            if (offset > siblings.length) {
                setSelection(model, siblings.length - 1);
                move(model, dir, options);
                return;
            }
        }
        else {
            const type = siblings[offset] ? siblings[offset].type : '';
            if ((type === 'mopen' && dir > 0) || (type === 'mclose' && dir < 0)) {
                // We're right before (or after) an opening (or closing)
                // fence. Skip to the balanced element (in level, but not necessarily in
                // fence symbol).
                let level = type === 'mopen' ? 1 : -1;
                offset += dir > 0 ? 1 : -1;
                while (offset >= 0 && offset < siblings.length && level !== 0) {
                    if (siblings[offset].type === 'mopen') {
                        level += 1;
                    }
                    else if (siblings[offset].type === 'mclose') {
                        level -= 1;
                    }
                    offset += dir;
                }
                if (level !== 0) {
                    // We did not find a balanced element. Just move a little.
                    offset = focus + dir;
                }
                if (dir > 0)
                    offset = offset - 1;
            }
            else {
                while (siblings[offset] &&
                    siblings[offset].mode === 'math' &&
                    siblings[offset].type === type) {
                    offset += dir;
                }
                offset -= dir > 0 ? 1 : 0;
            }
        }
        if (extend) {
            const anchor = model.anchorOffset();
            setSelection(model, anchor, offset - anchor);
        }
        else {
            setSelection(model, offset);
        }
        model.announce('move', oldPath);
    }
    function jumpToMathFieldBoundary(model, dir = 1, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : { extend: false };
        dir = dir < 0 ? -1 : +1;
        const oldPath = model.clone();
        const path = [{ relation: 'body', offset: model.path[0].offset }];
        let extent;
        if ((_a = !options.extend) !== null && _a !== void 0 ? _a : false) {
            // Change the anchor to the end/start of the root expression
            path[0].offset = dir < 0 ? 0 : model.root.body.length - 1;
            extent = 0;
        }
        else {
            // Don't change the anchor, but update the extent
            if (dir < 0) {
                if (path[0].offset > 0) {
                    extent = -path[0].offset;
                }
            }
            else {
                if (path[0].offset < model.siblings().length - 1) {
                    extent = model.siblings().length - 1 - path[0].offset;
                }
            }
        }
        setPath(model, path, extent);
        model.announce('move', oldPath);
        return true;
    }
    /**
     * @return The currently selected atoms, or `null` if the
     * selection is collapsed
     */
    function getSelectedAtoms(model) {
        if (selectionIsCollapsed(model))
            return null;
        const result = [];
        const siblings = model.siblings();
        const firstOffset = model.startOffset() + 1;
        const lastOffset = model.endOffset() + 1;
        for (let i = firstOffset; i < lastOffset; i++) {
            if (siblings[i] && siblings[i].type !== 'first') {
                result.push(siblings[i]);
            }
        }
        return result;
    }
    /**
     * @return True if `atom` is within the selection range
     * @todo: poorly named, since this is specific to the selection, not the math
     * field
     */
    // export function contains(model: Model, atom) {
    //     if (selectionIsCollapsed(model)) return false;
    //     const siblings = model.siblings();
    //     const firstOffset = model.startOffset();
    //     const lastOffset = model.endOffset();
    //     for (let i = firstOffset; i < lastOffset; i++) {
    //         if (atomContains(siblings[i], atom)) return true;
    //     }
    //     return false;
    // }
    /**
     * Select all the atoms in the current group, that is all the siblings.
     * When the selection is in a numerator, the group is the numerator. When
     * the selection is a superscript or subscript, the group is the supsub.
     * When the selection is in a text zone, the "group" is a word.
     */
    function selectGroup(model) {
        const siblings = model.siblings();
        if (getAnchorMode(model) === 'text') {
            let start = model.startOffset();
            let end = model.endOffset();
            //
            while (siblings[start] &&
                siblings[start].mode === 'text' &&
                LETTER_AND_DIGITS.test(siblings[start].body)) {
                start -= 1;
            }
            while (siblings[end] &&
                siblings[end].mode === 'text' &&
                LETTER_AND_DIGITS.test(siblings[end].body)) {
                end += 1;
            }
            end -= 1;
            if (start >= end) {
                // No word found. Select a single character
                setSelection(model, model.endOffset() - 1, 1);
                return true;
            }
            setSelection(model, start, end - start);
        }
        else {
            // In a math zone, select all the sibling nodes
            if (model.sibling(0).type === 'mord' &&
                /[0-9,.]/.test(model.sibling(0).body)) {
                // In a number, select all the digits
                let start = model.startOffset();
                let end = model.endOffset();
                //
                while (isNumber(siblings[start]))
                    start -= 1;
                while (isNumber(siblings[end]))
                    end += 1;
                end -= 1;
                setSelection(model, start, end - start);
            }
            else {
                setSelection(model, 0, 'end');
            }
        }
        return true;
    }
    function selectAll(model) {
        model.path = [{ relation: 'body', offset: 0 }];
        return setSelection(model, 0, 'end');
    }
    /**
     * @return {boolean} True if the selection is an insertion point.
     */
    function selectionIsCollapsed(model) {
        return model.extent === 0;
    }
    function setSelectionExtent(model, extent) {
        model.extent = extent;
        return true;
    }
    function collapseSelectionForward(model) {
        if (model.extent === 0)
            return false;
        setSelection(model, model.endOffset());
        return true;
    }
    function collapseSelectionBackward(model) {
        if (model.extent === 0)
            return false;
        setSelection(model, model.startOffset());
        return true;
    }
    function moveAfterParent(model) {
        if (model.path.length > 1) {
            const oldPath = model.clone();
            model.path.pop();
            setSelectionExtent(model, 0);
            model.announce('move', oldPath);
            return true;
        }
        model.announce('plonk');
        return false;
    }
    /**
     * The atom where the selection starts.
     *
     * When the selection is extended the anchor remains fixed. The anchor
     * could be either before or after the focus.
     */
    function getAnchor(model) {
        if (model.parent().array) {
            return arrayCell(model.parent().array, model.relation())[model.anchorOffset()];
        }
        const siblings = model.siblings();
        return siblings[Math.min(siblings.length - 1, model.anchorOffset())];
    }
    /**
     * Extend the selection between `from` and `to` nodes
     *
     * @param {object} options
     * - options.extendToWordBoundary
     * @return true if the range was actually changed
     */
    function setRange(model, from, to, options = {
        extendToWordBoundary: false,
    }) {
        // Measure the 'distance' between `from` and `to`
        const distance = pathDistance(from, to);
        if (distance === 0) {
            // `from` and `to` are equal.
            if (options.extendToWordBoundary) {
                from = wordBoundary(model, from, -1);
                to = wordBoundary(model, to, +1);
                return setRange(model, from, to);
            }
            // Set the path to a collapsed insertion point
            return setPath(model, clone(from), 0);
        }
        if (distance === 1) {
            const extent = to[to.length - 1].offset - from[from.length - 1].offset;
            if (options.extendToWordBoundary) {
                from = wordBoundary(model, from, extent < 0 ? +1 : -1);
                to = wordBoundary(model, to, extent < 0 ? -1 : +1);
                return setRange(model, from, to);
            }
            // They're siblings, set an extent
            return setPath(model, clone(from), extent);
        }
        // They're neither identical, not siblings.
        // Find the common ancestor between the nodes
        let commonAncestor = pathCommonAncestor(from, to);
        const ancestorDepth = commonAncestor.length;
        if (from.length === ancestorDepth ||
            to.length === ancestorDepth ||
            from[ancestorDepth].relation !== to[ancestorDepth].relation) {
            return setPath(model, commonAncestor, -1);
        }
        commonAncestor.push(from[ancestorDepth]);
        commonAncestor = clone(commonAncestor);
        let extent = to[ancestorDepth].offset - from[ancestorDepth].offset + 1;
        if (extent <= 0) {
            if (to.length > ancestorDepth + 1) {
                // axb/c+y -> select from y to x
                commonAncestor[ancestorDepth].relation = to[ancestorDepth].relation;
                commonAncestor[ancestorDepth].offset = to[ancestorDepth].offset;
                commonAncestor[commonAncestor.length - 1].offset -= 1;
                extent = -extent + 2;
            }
            else {
                // x+(ayb/c) -> select from y to x
                commonAncestor[ancestorDepth].relation = to[ancestorDepth].relation;
                commonAncestor[ancestorDepth].offset = to[ancestorDepth].offset;
                extent = -extent + 1;
            }
        }
        else if (to.length <= from.length) {
            // axb/c+y -> select from x to y
            commonAncestor[commonAncestor.length - 1].offset -= 1;
        }
        else if (to.length > from.length) {
            commonAncestor[ancestorDepth].offset -= 1;
        }
        return setPath(model, commonAncestor, extent);
    }
    /**
     *
     * @param  extent the length of the selection
     * @return true if the path has actually changed
     */
    function setPath(model, inSelection, extent = 0) {
        let selection;
        // Convert to a path array if necessary
        if (typeof inSelection === 'string') {
            selection = pathFromString(inSelection);
        }
        else if (isArray(inSelection)) {
            // need to temporarily change the path of this to use 'sibling()'
            const newPath = clone(inSelection);
            const oldPath = model.path;
            model.path = newPath;
            if (extent === 0 && getAnchor(model).type === 'placeholder') {
                // select the placeholder
                newPath[newPath.length - 1].offset = model.anchorOffset() - 1;
                extent = 1;
            }
            selection = {
                path: newPath,
                extent: extent || 0,
            };
            model.path = oldPath;
        }
        else {
            selection = inSelection;
        }
        const pathChanged = pathDistance(model.path, selection.path) !== 0;
        const extentChanged = selection.extent !== model.extent;
        if (pathChanged || extentChanged) {
            if (pathChanged) {
                adjustPlaceholder(model);
            }
            selectionWillChange(model);
            model.path = clone(selection.path);
            if (model.siblings().length < model.anchorOffset()) {
                // The new path is out of bounds.
                // Reset the path to something valid
                console.warn('Invalid selection: ' +
                    model.toString() +
                    ' in "' +
                    model.root.toLatex(false) +
                    '"');
                model.path = [{ relation: 'body', offset: 0 }];
                model.extent = 0;
            }
            else {
                setSelectionExtent(model, selection.extent);
            }
            selectionDidChange(model);
        }
        return pathChanged || extentChanged;
    }
    /**
     * Locate the offset before the insertion point that would indicate
     * a good place to select as an implicit argument.
     * For example with '1+\sin(x)', if the insertion point is at the
     * end, the implicit arg offset would be after the plus. As a result,
     * inserting a fraction after the sin would yield: '1+\frac{\sin(c)}{\placeholder{}}'
     */
    function getImplicitArgOffset(model) {
        const siblings = model.siblings();
        let result = model.startOffset();
        if (siblings[result].mode === 'text') {
            while (result >= 1 && siblings[result].mode === 'text') {
                result--;
            }
        }
        else {
            // Find the first 'mrel', etc... to the left of the insertion point
            while (result >= 1 &&
                /^(mord|surd|msubsup|leftright|mop)$/.test(siblings[result].type)) {
                result--;
            }
        }
        return result;
    }
    /**
     *
     * @param cb - A callback called for each selected atom in the
     * mathlist.
     */
    function forEachSelected(model, cb, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.recursive = (_a = options.recursive) !== null && _a !== void 0 ? _a : false;
        const siblings = model.siblings();
        const firstOffset = model.startOffset() + 1;
        const lastOffset = model.endOffset() + 1;
        if (options.recursive) {
            for (let i = firstOffset; i < lastOffset; i++) {
                if (siblings[i] && siblings[i].type !== 'first') {
                    siblings[i].forEach(cb);
                }
            }
        }
        else {
            for (let i = firstOffset; i < lastOffset; i++) {
                if (siblings[i] && siblings[i].type !== 'first') {
                    cb(siblings[i]);
                }
            }
        }
    }
    function getContentFromSiblings(model, start, end) {
        const siblings = model.siblings();
        if (isEmptyMathlist(siblings))
            return '';
        if (siblings[0].type === 'first' && start === 0) {
            start = 1;
        }
        if (model.parent().type === 'root' &&
            start === 1 &&
            end === siblings.length - 1) {
            // It's the entire sibling list. Get the parent's latex
            return model.parent().toLatex(false);
        }
        let result = '';
        let i = start;
        while (i <= end) {
            result += siblings[i].toLatex(false);
            i++;
        }
        return result;
    }
    /**
     * When changing the selection, if the former selection is an empty list,
     * insert a placeholder if necessary. For example, if in an empty numerator.
     */
    function adjustPlaceholder(model) {
        // Should we insert a placeholder?
        // Check if we're an empty list that is the child of a fraction
        const siblings = model.siblings();
        if (siblings && siblings.length <= 1) {
            let placeholder;
            const relation = model.relation();
            if (relation === 'numer') {
                placeholder = 'numerator';
            }
            else if (relation === 'denom') {
                placeholder = 'denominator';
            }
            else if (model.parent().type === 'surd' && relation === 'body') {
                // Surd (roots)
                placeholder = 'radicand';
            }
            else if (model.parent().type === 'overunder' && relation === 'body') {
                placeholder = 'base';
            }
            else if (relation === 'underscript' || relation === 'overscript') {
                placeholder = 'annotation';
            }
            if (placeholder) {
                // ◌ ⬚
                // const placeholderAtom = [
                //     new Atom('math', 'placeholder', '⬚', getAnchorStyle(model)),
                // ];
                // Array.prototype.splice.apply(
                //     siblings,
                //     [1, 0].concat(placeholderAtom)
                // );
                // @revisit
                siblings.splice(1, 0, new Atom('math', 'placeholder', '⬚', getAnchorStyle(model)));
            }
        }
    }
    function wordBoundary(model, path, dir) {
        dir = dir < 0 ? -1 : +1;
        const iter = new ModelPrivate();
        iter.path = clone(path);
        iter.root = model.root;
        let i = 0;
        while (iter.sibling(i) &&
            iter.sibling(i).mode === 'text' &&
            LETTER_AND_DIGITS.test(iter.sibling(i).body)) {
            i += dir;
        }
        if (!iter.sibling(i))
            i -= dir;
        iter.path[iter.path.length - 1].offset += i;
        return iter.path;
    }
    /*
     * Calculates the offset of the "next word".
     * This is inspired by the behavior of text editors on macOS, namely:
        blue   yellow
          ^-
             ^-------
     * That is:

     * (1) If starts with an alphanumerical character, find the first alphanumerical
     * character which is followed by a non-alphanumerical character
     *
     * The behavior regarding non-alphanumeric characters is less consistent.
     * Here's the behavior we use:
     *
     *   +=-()_:”     blue
     * ^---------
     *   +=-()_:”     blue
     *      ^---------
     *   +=-()_:”blue
     *      ^--------
     *
     * (2) If starts in whitespace, skip whitespace, then find first non-whitespace*
     *    followed by whitespace
     * (*) Pages actually uses the character class of the first non-whitespace
     * encountered.
     *
     * (3) If starts in a non-whitespace, non alphanumerical character, find the first
     *      whitespace
     *
     */
    function wordBoundaryOffset(model, offset, dir) {
        dir = dir < 0 ? -1 : +1;
        const siblings = model.siblings();
        if (!siblings[offset])
            return offset;
        if (siblings[offset].mode !== 'text')
            return offset;
        let result;
        if (LETTER_AND_DIGITS.test(siblings[offset].body)) {
            // (1) We start with an alphanumerical character
            let i = offset;
            let match;
            do {
                match =
                    siblings[i].mode === 'text' &&
                        LETTER_AND_DIGITS.test(siblings[i].body);
                i += dir;
            } while (siblings[i] && match);
            result = siblings[i] ? i - 2 * dir : i - dir;
        }
        else if (/\s/.test(siblings[offset].body)) {
            // (2) We start with whitespace
            // Skip whitespace
            let i = offset;
            while (siblings[i] &&
                siblings[i].mode === 'text' &&
                /\s/.test(siblings[i].body)) {
                i += dir;
            }
            if (!siblings[i]) {
                // We've reached the end
                result = i - dir;
            }
            else {
                let match = true;
                do {
                    match =
                        siblings[i].mode === 'text' &&
                            !/\s/.test(siblings[i].body);
                    i += dir;
                } while (siblings[i] && match);
                result = siblings[i] ? i - 2 * dir : i - dir;
            }
        }
        else {
            // (3)
            let i = offset;
            // Skip non-whitespace
            while (siblings[i] &&
                siblings[i].mode === 'text' &&
                !/\s/.test(siblings[i].body)) {
                i += dir;
            }
            result = siblings[i] ? i : i - dir;
            let match = true;
            while (siblings[i] && match) {
                match =
                    siblings[i].mode === 'text' &&
                        /\s/.test(siblings[i].body);
                if (match)
                    result = i;
                i += dir;
            }
            result = siblings[i] ? i - 2 * dir : i - dir;
        }
        return result - (dir > 0 ? 0 : 1);
    }
    /**
     * Iterate over each atom in the expression, starting with the focus.
     *
     * Return an array of all the paths for which the callback predicate
     * returned true.
     *
     * @param {function} cb - A predicate being passed a path and the atom at this
     * path. Return true to include the designated atom in the result.
     * @param {number} dir - `+1` to iterate forward, `-1` to iterate backward.
     * @return The paths (as a string) for all the atoms which the predicate is true
     */
    function filter(model, cb, dir = +1) {
        dir = dir < 0 ? -1 : +1;
        const result = [];
        const iter = new ModelPrivate();
        iter.path = clone(model.path);
        iter.extent = model.extent;
        iter.root = model.root;
        if (dir >= 0) {
            collapseSelectionForward(iter);
        }
        else {
            collapseSelectionBackward(iter);
            move(iter, 1);
        }
        const initialAnchor = getAnchor(iter);
        do {
            if (cb.bind(iter)(iter.path, getAnchor(iter))) {
                result.push(iter.toString());
            }
            if (dir >= 0) {
                next(iter, { iterateAll: true });
            }
            else {
                previous(iter, { iterateAll: true });
            }
        } while (initialAnchor !== getAnchor(iter));
        return result;
    }

    const DEFAULT_KEYBOARD_LAYOUT = platform() === 'apple'
        ? {
            id: 'apple.en-intl',
            displayName: 'English (international)',
            platform: 'apple',
            locale: 'en',
            score: 0,
            mapping: {
                KeyA: ['a', 'A', 'å', 'Å'],
                KeyB: ['b', 'B', '∫', 'ı'],
                KeyC: ['c', 'C', 'ç', 'Ç'],
                KeyD: ['d', 'D', '∂', 'Î'],
                KeyE: ['e', 'E', '´', '´'],
                KeyF: ['f', 'F', 'ƒ', 'Ï'],
                KeyG: ['g', 'G', '©', '˝'],
                KeyH: ['h', 'H', '˙', 'Ó'],
                KeyI: ['i', 'I', 'ˆ', 'ˆ'],
                KeyJ: ['j', 'J', '∆', 'Ô'],
                KeyK: ['k', 'K', '˚', ''],
                KeyL: ['l', 'L', '¬', 'Ò'],
                KeyM: ['m', 'M', 'µ', 'Â'],
                KeyN: ['n', 'N', '˜', '˜'],
                KeyO: ['o', 'O', 'ø', 'Ø'],
                KeyP: ['p', 'P', 'π', '∏'],
                KeyQ: ['q', 'Q', 'œ', 'Œ'],
                KeyR: ['r', 'R', '®', '‰'],
                KeyS: ['s', 'S', 'ß', 'Í'],
                KeyT: ['t', 'T', '†', 'ˇ'],
                KeyU: ['u', 'U', '¨', '¨'],
                KeyV: ['v', 'V', '√', '◊'],
                KeyW: ['w', 'W', '∑', '„'],
                KeyX: ['x', 'X', '≈', '˛'],
                KeyY: ['y', 'Y', '¥', 'Á'],
                KeyZ: ['z', 'Z', 'Ω', '¸'],
                Digit1: ['1', '!', '¡', '⁄'],
                Digit2: ['2', '@', '™', '€'],
                Digit3: ['3', '#', '£', '‹'],
                Digit4: ['4', '$', '¢', '›'],
                Digit5: ['5', '%', '∞', 'ﬁ'],
                Digit6: ['6', 'ˆ', '§', 'ﬂ'],
                Digit7: ['7', '&', '¶', '‡'],
                Digit8: ['8', '*', '•', '°'],
                Digit9: ['9', '(', 'ª', '·'],
                Digit0: ['0', ')', 'º', '‚'],
                Space: [' ', ' ', ' ', ' '],
                Minus: ['-', '_', '–', '—'],
                Equal: ['=', '+', '≠', '±'],
                BracketLeft: ['[', '{', '“', '”'],
                BracketRight: [']', '}', '‘', '’'],
                Backslash: ['\\', '|', '«', '»'],
                Semicolon: [';', ':', '…', 'Ú'],
                Quote: ["'", '"', 'æ', 'Æ'],
                Backquote: ['`', '˜', '`', '`'],
                Comma: [',', '<', '≤', '¯'],
                Period: ['.', '>', '≥', '˘'],
                Slash: ['/', '?', '÷', '¿'],
                NumpadDivide: ['/', '/', '/', '/'],
                NumpadMultiply: ['*', '*', '*', '*'],
                NumpadSubtract: ['-', '-', '-', '-'],
                NumpadAdd: ['+', '+', '+', '+'],
                Numpad1: ['1', '1', '1', '1'],
                Numpad2: ['2', '2', '2', '2'],
                Numpad3: ['3', '3', '3', '3'],
                Numpad4: ['4', '4', '4', '4'],
                Numpad5: ['5', '5', '5', '5'],
                Numpad6: ['6', '6', '6', '6'],
                Numpad7: ['7', '7', '7', '7'],
                Numpad8: ['8', '8', '8', '8'],
                Numpad9: ['9', '9', '9', '9'],
                Numpad0: ['0', '0', '0', '0'],
                NumpadDecimal: ['.', '.', '.', '.'],
                IntlBackslash: ['§', '±', '§', '±'],
                NumpadEqual: ['=', '=', '=', '='],
                AudioVolumeUp: ['', '=', '', '='],
            },
        }
        : platform() === 'windows'
            ? {
                id: 'windows.en-intl',
                displayName: 'English (international)',
                platform: 'windows',
                locale: 'en',
                score: 0,
                mapping: {
                    KeyA: ['a', 'A', 'á', 'Á'],
                    KeyB: ['b', 'B', '', ''],
                    KeyC: ['c', 'C', '©', '¢'],
                    KeyD: ['d', 'D', 'ð', 'Ð'],
                    KeyE: ['e', 'E', 'é', 'É'],
                    KeyF: ['f', 'F', '', ''],
                    KeyG: ['g', 'G', '', ''],
                    KeyH: ['h', 'H', '', ''],
                    KeyI: ['i', 'I', 'í', 'Í'],
                    KeyJ: ['j', 'J', '', ''],
                    KeyK: ['k', 'K', '', ''],
                    KeyL: ['l', 'L', 'ø', 'Ø'],
                    KeyM: ['m', 'M', 'µ', ''],
                    KeyN: ['n', 'N', 'ñ', 'Ñ'],
                    KeyO: ['o', 'O', 'ó', 'Ó'],
                    KeyP: ['p', 'P', 'ö', 'Ö'],
                    KeyQ: ['q', 'Q', 'ä', 'Ä'],
                    KeyR: ['r', 'R', '®', ''],
                    KeyS: ['s', 'S', 'ß', '§'],
                    KeyT: ['t', 'T', 'þ', 'Þ'],
                    KeyU: ['u', 'U', 'ú', 'Ú'],
                    KeyV: ['v', 'V', '', ''],
                    KeyW: ['w', 'W', 'å', 'Å'],
                    KeyX: ['x', 'X', '', ''],
                    KeyY: ['y', 'Y', 'ü', 'Ü'],
                    KeyZ: ['z', 'Z', 'æ', 'Æ'],
                    Digit1: ['1', '!', '¡', '¹'],
                    Digit2: ['2', '@', '²', ''],
                    Digit3: ['3', '#', '³', ''],
                    Digit4: ['4', '$', '¤', '£'],
                    Digit5: ['5', '%', '€', ''],
                    Digit6: ['6', '^', '¼', ''],
                    Digit7: ['7', '&', '½', ''],
                    Digit8: ['8', '*', '¾', ''],
                    Digit9: ['9', '(', '‘', ''],
                    Digit0: ['0', ')', '’', ''],
                    Space: [' ', ' ', '', ''],
                    Minus: ['-', '_', '¥', ''],
                    Equal: ['=', '+', '×', '÷'],
                    BracketLeft: ['[', '{', '«', ''],
                    BracketRight: [']', '}', '»', ''],
                    Backslash: ['\\', '|', '¬', '¦'],
                    Semicolon: [';', ':', '¶', '°'],
                    Quote: ["'", '"', '´', '¨'],
                    Backquote: ['`', '~', '', ''],
                    Comma: [',', '<', 'ç', 'Ç'],
                    Period: ['.', '>', '', ''],
                    Slash: ['/', '?', '¿', ''],
                    NumpadDivide: ['/', '/', '', ''],
                    NumpadMultiply: ['*', '*', '', ''],
                    NumpadSubtract: ['-', '-', '', ''],
                    NumpadAdd: ['+', '+', '', ''],
                    IntlBackslash: ['\\', '|', '', ''],
                },
            }
            : {
                id: 'linux.en',
                displayName: 'English',
                platform: 'linux',
                locale: 'en',
                score: 0,
                mapping: {
                    KeyA: ['a', 'A', 'a', 'A'],
                    KeyB: ['b', 'B', 'b', 'B'],
                    KeyC: ['c', 'C', 'c', 'C'],
                    KeyD: ['d', 'D', 'd', 'D'],
                    KeyE: ['e', 'E', 'e', 'E'],
                    KeyF: ['f', 'F', 'f', 'F'],
                    KeyG: ['g', 'G', 'g', 'G'],
                    KeyH: ['h', 'H', 'h', 'H'],
                    KeyI: ['i', 'I', 'i', 'I'],
                    KeyJ: ['j', 'J', 'j', 'J'],
                    KeyK: ['k', 'K', 'k', 'K'],
                    KeyL: ['l', 'L', 'l', 'L'],
                    KeyM: ['m', 'M', 'm', 'M'],
                    KeyN: ['n', 'N', 'n', 'N'],
                    KeyO: ['o', 'O', 'o', 'O'],
                    KeyP: ['p', 'P', 'p', 'P'],
                    KeyQ: ['q', 'Q', 'q', 'Q'],
                    KeyR: ['r', 'R', 'r', 'R'],
                    KeyS: ['s', 'S', 's', 'S'],
                    KeyT: ['t', 'T', 't', 'T'],
                    KeyU: ['u', 'U', 'u', 'U'],
                    KeyV: ['v', 'V', 'v', 'V'],
                    KeyW: ['w', 'W', 'w', 'W'],
                    KeyX: ['x', 'X', 'x', 'X'],
                    KeyY: ['y', 'Y', 'y', 'Y'],
                    KeyZ: ['z', 'Z', 'z', 'Z'],
                    Digit1: ['1', '!', '1', '!'],
                    Digit2: ['2', '@', '2', '@'],
                    Digit3: ['3', '#', '3', '#'],
                    Digit4: ['4', '$', '4', '$'],
                    Digit5: ['5', '%', '5', '%'],
                    Digit6: ['6', '^', '6', '^'],
                    Digit7: ['7', '&', '7', '&'],
                    Digit8: ['8', '*', '8', '*'],
                    Digit9: ['9', '(', '9', '('],
                    Digit0: ['0', ')', '0', ')'],
                    Space: [' ', ' ', ' ', ' '],
                    Minus: ['-', '_', '-', '_'],
                    Equal: ['=', '+', '=', '+'],
                    BracketLeft: ['[', '{', '[', '{'],
                    BracketRight: [']', '}', ']', '}'],
                    Backslash: ['\\', '|', '\\', '|'],
                    Semicolon: [';', ':', ';', ':'],
                    Quote: ["'", '"', "'", '"'],
                    Backquote: ['`', '~', '`', '~'],
                    Comma: [',', '<', ',', '<'],
                    Period: ['.', '>', '.', '>'],
                    Slash: ['/', '?', '/', '?'],
                    NumpadDivide: ['/', '/', '/', '/'],
                    NumpadMultiply: ['*', '*', '*', '*'],
                    NumpadSubtract: ['-', '-', '-', '-'],
                    NumpadAdd: ['+', '+', '+', '+'],
                    Numpad1: ['1', '1', '1', '1'],
                    Numpad2: ['2', '2', '2', '2'],
                    Numpad3: ['3', '3', '3', '3'],
                    Numpad4: ['4', '4', '4', '4'],
                    Numpad5: ['5', '5', '5', '5'],
                    Numpad6: ['6', '6', '6', '6'],
                    Numpad7: ['7', '7', '7', '7'],
                    Numpad8: ['8', '8', '8', '8'],
                    Numpad9: ['9', '9', '9', '9'],
                    Numpad0: ['0', '0', '0', '0'],
                    NumpadDecimal: ['', '.', '', '.'],
                    IntlBackslash: ['<', '>', '|', '¦'],
                    NumpadEqual: ['=', '=', '=', '='],
                    NumpadComma: ['.', '.', '.', '.'],
                    NumpadParenLeft: ['(', '(', '(', '('],
                    NumpadParenRight: [')', ')', ')', ')'],
                },
            };
    /* prettier-ignore */
    const BASE_LAYOUT_MAPPING = {
        enter: '[Enter]',
        escape: '[Escape]',
        backspace: '[Backspace]',
        tab: '[Tab]',
        space: '[Space]',
        pausebreak: '[Pause]',
        insert: '[Insert]',
        home: '[Home]',
        pageup: '[PageUp]',
        delete: '[Delete]',
        end: '[End]',
        pagedown: '[PageDown]',
        right: '[ArrowRight]',
        left: '[ArrowLeft]',
        down: '[ArrowDown]',
        up: '[ArrowUp]',
        numpad0: '[Numpad0]',
        numpad1: '[Numpad1]',
        numpad2: '[Numpad2]',
        numpad3: '[Numpad3]',
        numpad4: '[Numpad4]',
        numpad5: '[Numpad5]',
        numpad6: '[Numpad6]',
        numpad7: '[Numpad7]',
        numpad8: '[Numpad8]',
        numpad9: '[Numpad9]',
        'numpad_divide': '[NumpadDivide]',
        'numpad_multiply': '[NumpadMultiply]',
        'numpad_subtract': '[NumpadSubtract]',
        'numpad_add': '[NumpadAdd]',
        'numpad_decimal': '[NumpadDecimal]',
        'numpad_separator': '[NumpadComma]',
        capslock: '[Capslock]',
        f1: '[F1]',
        f2: '[F2]',
        f3: '[F3]',
        f4: '[F4]',
        f5: '[F5]',
        f6: '[F6]',
        f7: '[F7]',
        f8: '[F8]',
        f9: '[F9]',
        f10: '[F10]',
        f11: '[F11]',
        f12: '[F12]',
        f13: '[F13]',
        f14: '[F14]',
        f15: '[F15]',
        f16: '[F16]',
        f17: '[F17]',
        f18: '[F18]',
        f19: '[F19]',
    };
    const gKeyboardLayouts = [];
    let gKeyboardLayout;
    function platform() {
        let result = 'linux';
        if ((navigator === null || navigator === void 0 ? void 0 : navigator.platform) && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)) {
            if (/^(mac)/i.test(navigator.platform)) {
                result = 'apple';
            }
            else if (/^(win)/i.test(navigator.platform)) {
                result = 'windows';
            }
            else if (/(android)/i.test(navigator.userAgent)) {
                result = 'linux';
            }
            else if (/(iphone)/i.test(navigator.userAgent) ||
                /(ipod)/i.test(navigator.userAgent) ||
                /(ipad)/i.test(navigator.userAgent)) {
                result = 'apple';
            }
            else if (/\bCrOS\b/i.test(navigator.userAgent)) {
                result = 'linux';
            }
        }
        return result;
    }
    function register$1(layout) {
        if (layout.platform === platform()) {
            gKeyboardLayouts.push(layout);
        }
    }
    /** Given the current estimated keyboard layout,
     *  return the unmodified key for the event.
     * For example, on AZERTY option+shift+'A' = 'Æ' -> 'a'
     * (event though the code is KeyQ)
     */
    // export function getUnmodifiedKey(evt: KeyboardEvent): string {
    //     if (!evt.shiftKey && !evt.altKey) {
    //         return evt.key;
    //     }
    //     // @todo: iterate over the entries for the current layout,
    //     // with the alt+shift modifiers set accordingly
    //     // and find the (first) entry that matches
    //     const layout = gKeyboardLayouts[0] ?? DEFAULT_KEYBOARD_LAYOUT;
    //     const index =
    //         evt.shiftKey && evt.altKey ? 3 : evt.altKey ? 2 : evt.shiftKey ? 1 : 0;
    //     for (const [key, value] of Object.entries(layout.mapping)) {
    //         if (key === evt.code && value[index] === evt.key) {
    //             return value[0];
    //         }
    //     }
    //     // We did not find a perfect match...
    //     // Look for an entry even if the keycode doesn't match...
    //     for (const [, value] of Object.entries(layout.mapping)) {
    //         if (value[index] === evt.key) {
    //             return value[0];
    //         }
    //     }
    //     // Really? Nothing matched?! Just return the key...
    //     return evt.key;
    // }
    function getCodeForKey(k) {
        var _a, _b;
        const layout = (_a = getActiveKeyboardLayout()) !== null && _a !== void 0 ? _a : DEFAULT_KEYBOARD_LAYOUT;
        for (const [key, value] of Object.entries(layout.mapping)) {
            if (value[0] === k)
                return '[' + key + ']';
            if (value[1] === k)
                return 'shift+[' + key + ']';
            if (value[2] === k)
                return 'alt+[' + key + ']';
            if (value[3] === k)
                return 'shift+alt+[' + key + ']';
        }
        return (_b = BASE_LAYOUT_MAPPING[k]) !== null && _b !== void 0 ? _b : '';
    }
    function normalizeKeyboardEvent(evt) {
        if (!evt.code) {
            // For virtual keyboards (iOS, Android) and Microsoft Edge (!)
            // the `evt.code`, which represents the physical key pressed, is set
            // to undefined. In that case, map the virtual key ("q") to a
            // pseudo-hardware key ("KeyQ")
            const mapping = Object.entries(getActiveKeyboardLayout().mapping);
            let altKey = false;
            let shiftKey = false;
            let code;
            for (let index = 0; index < 4; index++) {
                for (const [key, value] of mapping) {
                    if (value[index] === evt.key) {
                        code = key;
                        if (index === 3) {
                            altKey = true;
                            shiftKey = true;
                        }
                        else if (index === 2) {
                            altKey = true;
                        }
                        else if (index === 1) {
                            shiftKey = true;
                        }
                        break;
                    }
                }
                if (code)
                    break;
            }
            return new KeyboardEvent(evt.type, { ...evt, altKey, shiftKey, code });
        }
        return new KeyboardEvent(evt.type, evt);
    }
    // Given this keyboard event, and the `code`, `key` and modifiers
    // in it, increase the score of layouts that do match it.
    // Calling repeatedly this function will improve the accuracy of the
    // keyboard layout estimate.
    function validateKeyboardLayout(evt) {
        const index = evt.shiftKey && evt.altKey ? 3 : evt.altKey ? 2 : evt.shiftKey ? 1 : 0;
        if (evt.key === 'Unidentified')
            return;
        // Dead keys do not have enough info to validate the keyboard
        // (we dont' know what char they could produce, only the physical key associated with them )
        if (evt.key === 'Dead')
            return;
        const layouts = gKeyboardLayouts.filter((layout) => { var _a; return ((_a = layout.mapping[evt.code]) === null || _a === void 0 ? void 0 : _a[index]) === evt.key; });
        if (layouts.length === 0)
            return;
        // Increase the score of the layouts that have a mapping compatible with this keyboard event.
        layouts.forEach((x) => {
            x.score += 1;
        });
        gKeyboardLayouts.sort((a, b) => b.score - a.score);
    }
    function setKeyboardLayoutLocale(locale) {
        gKeyboardLayout = gKeyboardLayouts.find((x) => locale.startsWith(x.locale));
    }
    function getActiveKeyboardLayout() {
        return gKeyboardLayout !== null && gKeyboardLayout !== void 0 ? gKeyboardLayout : gKeyboardLayouts[0];
    }
    register$1(DEFAULT_KEYBOARD_LAYOUT);
    register$1({
        id: 'apple.french',
        locale: 'fr',
        displayName: 'French',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: ['q', 'Q', '‡', 'Ω'],
            KeyB: ['b', 'B', 'ß', '∫'],
            KeyC: ['c', 'C', '©', '¢'],
            KeyD: ['d', 'D', '∂', '∆'],
            KeyE: ['e', 'E', 'ê', 'Ê'],
            KeyF: ['f', 'F', 'ƒ', '·'],
            KeyG: ['g', 'G', 'ﬁ', 'ﬂ'],
            KeyH: ['h', 'H', 'Ì', 'Î'],
            KeyI: ['i', 'I', 'î', 'ï'],
            KeyJ: ['j', 'J', 'Ï', 'Í'],
            KeyK: ['k', 'K', 'È', 'Ë'],
            KeyL: ['l', 'L', '¬', '|'],
            KeyM: [',', '?', '∞', '¿'],
            KeyN: ['n', 'N', '~', 'ı'],
            KeyO: ['o', 'O', 'œ', 'Œ'],
            KeyP: ['p', 'P', 'π', '∏'],
            KeyQ: ['a', 'A', 'æ', 'Æ'],
            KeyR: ['r', 'R', '®', '‚'],
            KeyS: ['s', 'S', 'Ò', '∑'],
            KeyT: ['t', 'T', '†', '™'],
            KeyU: ['u', 'U', 'º', 'ª'],
            KeyV: ['v', 'V', '◊', '√'],
            KeyW: ['z', 'Z', 'Â', 'Å'],
            KeyX: ['x', 'X', '≈', '⁄'],
            KeyY: ['y', 'Y', 'Ú', 'Ÿ'],
            KeyZ: ['w', 'W', '‹', '›'],
            Digit1: ['&', '1', '', '´'],
            Digit2: ['é', '2', 'ë', '„'],
            Digit3: ['"', '3', '“', '”'],
            Digit4: ["'", '4', '‘', '’'],
            Digit5: ['(', '5', '{', '['],
            Digit6: ['§', '6', '¶', 'å'],
            Digit7: ['è', '7', '«', '»'],
            Digit8: ['!', '8', '¡', 'Û'],
            Digit9: ['ç', '9', 'Ç', 'Á'],
            Digit0: ['à', '0', 'ø', 'Ø'],
            Space: [' ', ' ', ' ', ' '],
            Minus: [')', '°', '}', ']'],
            Equal: ['-', '_', '—', '–'],
            BracketLeft: ['^', '¨', 'ô', 'Ô'],
            BracketRight: ['$', '*', '€', '¥'],
            Backslash: ['`', '£', '@', '#'],
            Semicolon: ['m', 'M', 'µ', 'Ó'],
            Quote: ['ù', '%', 'Ù', '‰'],
            Backquote: ['<', '>', '≤', '≥'],
            Comma: [';', '.', '…', '•'],
            Period: [':', '/', '÷', '\\'],
            Slash: ['=', '+', '≠', '±'],
            NumpadDivide: ['/', '/', '/', '/'],
            NumpadMultiply: ['*', '*', '*', '*'],
            NumpadSubtract: ['-', '-', '-', '-'],
            NumpadAdd: ['+', '+', '+', '+'],
            NumpadDecimal: [',', '.', ',', '.'],
            IntlBackslash: ['@', '#', '•', 'Ÿ'],
            NumpadEqual: ['=', '=', '=', '='],
        },
    });
    register$1({
        id: 'apple.spanish',
        locale: 'es',
        displayName: 'Spanish ISO',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: ['a', 'A', 'å', 'Å'],
            KeyB: ['b', 'B', 'ß', ''],
            KeyC: ['c', 'C', '©', ' '],
            KeyD: ['d', 'D', '∂', '∆'],
            KeyE: ['e', 'E', '€', '€'],
            KeyF: ['f', 'F', 'ƒ', 'ﬁ'],
            KeyG: ['g', 'G', '', 'ﬂ'],
            KeyH: ['h', 'H', '™', ' '],
            KeyI: ['i', 'I', ' ', ' '],
            KeyJ: ['j', 'J', '¶', '¯'],
            KeyK: ['k', 'K', '§', 'ˇ'],
            KeyL: ['l', 'L', ' ', '˘'],
            KeyM: ['m', 'M', 'µ', '˚'],
            KeyN: ['n', 'N', ' ', '˙'],
            KeyO: ['o', 'O', 'ø', 'Ø'],
            KeyP: ['p', 'P', 'π', '∏'],
            KeyQ: ['q', 'Q', 'œ', 'Œ'],
            KeyR: ['r', 'R', '®', ' '],
            KeyS: ['s', 'S', '∫', ' '],
            KeyT: ['t', 'T', '†', '‡'],
            KeyU: ['u', 'U', ' ', ' '],
            KeyV: ['v', 'V', '√', '◊'],
            KeyW: ['w', 'W', 'æ', 'Æ'],
            KeyX: ['x', 'X', '∑', '›'],
            KeyY: ['y', 'Y', '¥', ' '],
            KeyZ: ['z', 'Z', 'Ω', '‹'],
            Digit1: ['1', '!', '|', 'ı'],
            Digit2: ['2', '"', '@', '˝'],
            Digit3: ['3', '·', '#', '•'],
            Digit4: ['4', '$', '¢', '£'],
            Digit5: ['5', '%', '∞', '‰'],
            Digit6: ['6', '&', '¬', ' '],
            Digit7: ['7', '/', '÷', '⁄'],
            Digit8: ['8', '(', '“', '‘'],
            Digit9: ['9', ')', '”', '’'],
            Digit0: ['0', '=', '≠', '≈'],
            Space: [' ', ' ', ' ', ' '],
            Minus: ["'", '?', '´', '¸'],
            Equal: ['¡', '¿', '‚', '˛'],
            BracketLeft: ['`', '^', '[', 'ˆ'],
            BracketRight: ['+', '*', ']', '±'],
            Backslash: ['ç', 'Ç', '}', '»'],
            Semicolon: ['ñ', 'Ñ', '~', '˜'],
            Quote: ['´', '¨', '{', '«'],
            Backquote: ['<', '>', '≤', '≥'],
            Comma: [',', ';', '„', ''],
            Period: ['.', ':', '…', '…'],
            Slash: ['-', '_', '–', '—'],
            NumpadDivide: ['/', '/', '/', '/'],
            NumpadMultiply: ['*', '*', '*', '*'],
            NumpadSubtract: ['-', '-', '-', '-'],
            NumpadAdd: ['+', '+', '+', '+'],
            Numpad1: ['1', '1', '1', '1'],
            Numpad2: ['2', '2', '2', '2'],
            Numpad3: ['3', '3', '3', '3'],
            Numpad4: ['4', '4', '4', '4'],
            Numpad5: ['5', '5', '5', '5'],
            Numpad6: ['6', '6', '6', '6'],
            Numpad7: ['7', '7', '7', '7'],
            Numpad8: ['8', '8', '8', '8'],
            Numpad9: ['9', '9', '9', '9'],
            Numpad0: ['0', '0', '0', '0'],
            NumpadDecimal: [',', ',', ',', ','],
            IntlBackslash: ['º', 'ª', '\\', '°'],
        },
    });
    register$1({
        id: 'windows.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'windows',
        score: 0,
        mapping: {
            KeyA: ['a', 'A', '', ''],
            KeyB: ['b', 'B', '', ''],
            KeyC: ['c', 'C', '', ''],
            KeyD: ['d', 'D', '', ''],
            KeyE: ['e', 'E', '€', ''],
            KeyF: ['f', 'F', '', ''],
            KeyG: ['g', 'G', '', ''],
            KeyH: ['h', 'H', '', ''],
            KeyI: ['i', 'I', '', ''],
            KeyJ: ['j', 'J', '', ''],
            KeyK: ['k', 'K', '', ''],
            KeyL: ['l', 'L', '', ''],
            KeyM: ['m', 'M', '', ''],
            KeyN: ['n', 'N', '', ''],
            KeyO: ['o', 'O', '', ''],
            KeyP: ['p', 'P', '', ''],
            KeyQ: ['q', 'Q', '', ''],
            KeyR: ['r', 'R', '', ''],
            KeyS: ['s', 'S', '', ''],
            KeyT: ['t', 'T', '', ''],
            KeyU: ['u', 'U', '', ''],
            KeyV: ['v', 'V', '', ''],
            KeyW: ['w', 'W', '', ''],
            KeyX: ['x', 'X', '', ''],
            KeyY: ['y', 'Y', '', ''],
            KeyZ: ['z', 'Z', '', ''],
            Digit1: ['1', '!', '|', ''],
            Digit2: ['2', '"', '@', ''],
            Digit3: ['3', '·', '#', ''],
            Digit4: ['4', '$', '~', ''],
            Digit5: ['5', '%', '€', ''],
            Digit6: ['6', '&', '¬', ''],
            Digit7: ['7', '/', '', ''],
            Digit8: ['8', '(', '', ''],
            Digit9: ['9', ')', '', ''],
            Digit0: ['0', '=', '', ''],
            Space: [' ', ' ', '', ''],
            Minus: ["'", '?', '', ''],
            Equal: ['¡', '¿', '', ''],
            BracketLeft: ['`', '^', '[', ''],
            BracketRight: ['+', '*', ']', ''],
            Backslash: ['ç', 'Ç', '}', ''],
            Semicolon: ['ñ', 'Ñ', '', ''],
            Quote: ['´', '¨', '{', ''],
            Backquote: ['º', 'ª', '\\', ''],
            Comma: [',', ';', '', ''],
            Period: ['.', ':', '', ''],
            Slash: ['-', '_', '', ''],
            NumpadDivide: ['/', '/', '', ''],
            NumpadMultiply: ['*', '*', '', ''],
            NumpadSubtract: ['-', '-', '', ''],
            NumpadAdd: ['+', '+', '', ''],
            IntlBackslash: ['<', '>', '', ''],
        },
    });
    register$1({
        id: 'linux.spanish',
        locale: 'es',
        displayName: 'Spanish',
        platform: 'linux',
        score: 0,
        mapping: {
            KeyA: ['a', 'A', 'æ', 'Æ'],
            KeyB: ['b', 'B', '”', '’'],
            KeyC: ['c', 'C', '¢', '©'],
            KeyD: ['d', 'D', 'ð', 'Ð'],
            KeyE: ['e', 'E', '€', '¢'],
            KeyF: ['f', 'F', 'đ', 'ª'],
            KeyG: ['g', 'G', 'ŋ', 'Ŋ'],
            KeyH: ['h', 'H', 'ħ', 'Ħ'],
            KeyI: ['i', 'I', '→', 'ı'],
            KeyJ: ['j', 'J', '̉', '̛'],
            KeyK: ['k', 'K', 'ĸ', '&'],
            KeyL: ['l', 'L', 'ł', 'Ł'],
            KeyM: ['m', 'M', 'µ', 'º'],
            KeyN: ['n', 'N', 'n', 'N'],
            KeyO: ['o', 'O', 'ø', 'Ø'],
            KeyP: ['p', 'P', 'þ', 'Þ'],
            KeyQ: ['q', 'Q', '@', 'Ω'],
            KeyR: ['r', 'R', '¶', '®'],
            KeyS: ['s', 'S', 'ß', '§'],
            KeyT: ['t', 'T', 'ŧ', 'Ŧ'],
            KeyU: ['u', 'U', '↓', '↑'],
            KeyV: ['v', 'V', '“', '‘'],
            KeyW: ['w', 'W', 'ł', 'Ł'],
            KeyX: ['x', 'X', '»', '>'],
            KeyY: ['y', 'Y', '←', '¥'],
            KeyZ: ['z', 'Z', '«', '<'],
            Digit1: ['1', '!', '|', '¡'],
            Digit2: ['2', '"', '@', '⅛'],
            Digit3: ['3', '·', '#', '£'],
            Digit4: ['4', '$', '~', '$'],
            Digit5: ['5', '%', '½', '⅜'],
            Digit6: ['6', '&', '¬', '⅝'],
            Digit7: ['7', '/', '{', '⅞'],
            Digit8: ['8', '(', '[', '™'],
            Digit9: ['9', ')', ']', '±'],
            Digit0: ['0', '=', '}', '°'],
            Enter: ['\r', '\r', '\r', '\r'],
            Escape: ['\u001b', '\u001b', '\u001b', '\u001b'],
            Backspace: ['\b', '\b', '\b', '\b'],
            Tab: ['\t', '', '\t', ''],
            Space: [' ', ' ', ' ', ' '],
            Minus: ["'", '?', '\\', '¿'],
            Equal: ['¡', '¿', '̃', '~'],
            BracketLeft: ['̀', '̂', '[', '̊'],
            BracketRight: ['+', '*', ']', '̄'],
            Backslash: ['ç', 'Ç', '}', '̆'],
            Semicolon: ['ñ', 'Ñ', '~', '̋'],
            Quote: ['́', '̈', '{', '{'],
            Backquote: ['º', 'ª', '\\', '\\'],
            Comma: [',', ';', '─', '×'],
            Period: ['.', ':', '·', '÷'],
            Slash: ['-', '_', '̣', '̇'],
            NumpadDivide: ['/', '/', '/', '/'],
            NumpadMultiply: ['*', '*', '*', '*'],
            NumpadSubtract: ['-', '-', '-', '-'],
            NumpadAdd: ['+', '+', '+', '+'],
            NumpadEnter: ['\r', '\r', '\r', '\r'],
            Numpad1: ['', '1', '', '1'],
            Numpad2: ['', '2', '', '2'],
            Numpad3: ['', '3', '', '3'],
            Numpad4: ['', '4', '', '4'],
            Numpad5: ['', '5', '', '5'],
            Numpad6: ['', '6', '', '6'],
            Numpad7: ['', '7', '', '7'],
            Numpad8: ['', '8', '', '8'],
            Numpad9: ['', '9', '', '9'],
            Numpad0: ['', '0', '', '0'],
            NumpadDecimal: ['', '.', '', '.'],
            IntlBackslash: ['<', '>', '|', '¦'],
            NumpadEqual: ['=', '=', '=', '='],
            NumpadComma: ['.', '.', '.', '.'],
            NumpadParenLeft: ['(', '(', '(', '('],
            NumpadParenRight: [')', ')', ')', ')'],
        },
    });
    register$1({
        id: 'linux.french',
        locale: 'fr',
        displayName: 'French',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: ['q', 'Q', '@', 'Ω'],
            KeyB: ['b', 'B', '”', '’'],
            KeyC: ['c', 'C', '¢', '©'],
            KeyD: ['d', 'D', 'ð', 'Ð'],
            KeyE: ['e', 'E', '€', '¢'],
            KeyF: ['f', 'F', 'đ', 'ª'],
            KeyG: ['g', 'G', 'ŋ', 'Ŋ'],
            KeyH: ['h', 'H', 'ħ', 'Ħ'],
            KeyI: ['i', 'I', '→', 'ı'],
            KeyJ: ['j', 'J', '̉', '̛'],
            KeyK: ['k', 'K', 'ĸ', '&'],
            KeyL: ['l', 'L', 'ł', 'Ł'],
            KeyM: [',', '?', '́', '̋'],
            KeyN: ['n', 'N', 'n', 'N'],
            KeyO: ['o', 'O', 'ø', 'Ø'],
            KeyP: ['p', 'P', 'þ', 'Þ'],
            KeyQ: ['a', 'A', 'æ', 'Æ'],
            KeyR: ['r', 'R', '¶', '®'],
            KeyS: ['s', 'S', 'ß', '§'],
            KeyT: ['t', 'T', 'ŧ', 'Ŧ'],
            KeyU: ['u', 'U', '↓', '↑'],
            KeyV: ['v', 'V', '“', '‘'],
            KeyW: ['z', 'Z', '«', '<'],
            KeyX: ['x', 'X', '»', '>'],
            KeyY: ['y', 'Y', '←', '¥'],
            KeyZ: ['w', 'W', 'ł', 'Ł'],
            Digit1: ['&', '1', '¹', '¡'],
            Digit2: ['é', '2', '~', '⅛'],
            Digit3: ['"', '3', '#', '£'],
            Digit4: ["'", '4', '{', '$'],
            Digit5: ['(', '5', '[', '⅜'],
            Digit6: ['-', '6', '|', '⅝'],
            Digit7: ['è', '7', '`', '⅞'],
            Digit8: ['_', '8', '\\', '™'],
            Digit9: ['ç', '9', '^', '±'],
            Digit0: ['à', '0', '@', '°'],
            Enter: ['\r', '\r', '\r', '\r'],
            Escape: ['\u001b', '\u001b', '\u001b', '\u001b'],
            Backspace: ['\b', '\b', '\b', '\b'],
            Tab: ['\t', '', '\t', ''],
            Space: [' ', ' ', ' ', ' '],
            Minus: [')', '°', ']', '¿'],
            Equal: ['=', '+', '}', '̨'],
            BracketLeft: ['̂', '̈', '̈', '̊'],
            BracketRight: ['$', '£', '¤', '̄'],
            Backslash: ['*', 'µ', '̀', '̆'],
            Semicolon: ['m', 'M', 'µ', 'º'],
            Quote: ['ù', '%', '̂', '̌'],
            Backquote: ['²', '~', '¬', '¬'],
            Comma: [';', '.', '─', '×'],
            Period: [':', '/', '·', '÷'],
            Slash: ['!', '§', '̣', '̇'],
            NumpadMultiply: ['*', '*', '*', '*'],
            NumpadSubtract: ['-', '-', '-', '-'],
            NumpadAdd: ['+', '+', '+', '+'],
            NumpadDecimal: ['', '.', '', '.'],
            IntlBackslash: ['<', '>', '|', '¦'],
        },
    });
    register$1({
        id: 'windows.french',
        locale: 'fr',
        displayName: 'French',
        platform: 'windows',
        score: 0,
        mapping: {
            KeyA: ['q', 'Q', '', ''],
            KeyB: ['b', 'B', '', ''],
            KeyC: ['c', 'C', '', ''],
            KeyD: ['d', 'D', '', ''],
            KeyE: ['e', 'E', '€', ''],
            KeyF: ['f', 'F', '', ''],
            KeyG: ['g', 'G', '', ''],
            KeyH: ['h', 'H', '', ''],
            KeyI: ['i', 'I', '', ''],
            KeyJ: ['j', 'J', '', ''],
            KeyK: ['k', 'K', '', ''],
            KeyL: ['l', 'L', '', ''],
            KeyM: [',', '?', '', ''],
            KeyN: ['n', 'N', '', ''],
            KeyO: ['o', 'O', '', ''],
            KeyP: ['p', 'P', '', ''],
            KeyQ: ['a', 'A', '', ''],
            KeyR: ['r', 'R', '', ''],
            KeyS: ['s', 'S', '', ''],
            KeyT: ['t', 'T', '', ''],
            KeyU: ['u', 'U', '', ''],
            KeyV: ['v', 'V', '', ''],
            KeyW: ['z', 'Z', '', ''],
            KeyX: ['x', 'X', '', ''],
            KeyY: ['y', 'Y', '', ''],
            KeyZ: ['w', 'W', '', ''],
            Digit1: ['&', '1', '', ''],
            Digit2: ['é', '2', '~', ''],
            Digit3: ['"', '3', '#', ''],
            Digit4: ["'", '4', '{', ''],
            Digit5: ['(', '5', '[', ''],
            Digit6: ['-', '6', '|', ''],
            Digit7: ['è', '7', '`', ''],
            Digit8: ['_', '8', '\\', ''],
            Digit9: ['ç', '9', '^', ''],
            Digit0: ['à', '0', '@', ''],
            Space: [' ', ' ', '', ''],
            Minus: [')', '°', ']', ''],
            Equal: ['=', '+', '}', ''],
            BracketLeft: ['^', '¨', '', ''],
            BracketRight: ['$', '£', '¤', ''],
            Backslash: ['*', 'µ', '', ''],
            Semicolon: ['m', 'M', '', ''],
            Quote: ['ù', '%', '', ''],
            Backquote: ['²', '', '', ''],
            Comma: [';', '.', '', ''],
            Period: [':', '/', '', ''],
            Slash: ['!', '§', '', ''],
            NumpadDivide: ['/', '/', '', ''],
            NumpadMultiply: ['*', '*', '', ''],
            NumpadSubtract: ['-', '-', '', ''],
            NumpadAdd: ['+', '+', '', ''],
            IntlBackslash: ['<', '>', '', ''],
        },
    });
    register$1({
        id: 'windows.german',
        locale: 'de',
        displayName: 'German',
        platform: 'windows',
        score: 0,
        mapping: {
            KeyA: ['a', 'A', '', ''],
            KeyB: ['b', 'B', '', ''],
            KeyC: ['c', 'C', '', ''],
            KeyD: ['d', 'D', '', ''],
            KeyE: ['e', 'E', '€', ''],
            KeyF: ['f', 'F', '', ''],
            KeyG: ['g', 'G', '', ''],
            KeyH: ['h', 'H', '', ''],
            KeyI: ['i', 'I', '', ''],
            KeyJ: ['j', 'J', '', ''],
            KeyK: ['k', 'K', '', ''],
            KeyL: ['l', 'L', '', ''],
            KeyM: ['m', 'M', 'µ', ''],
            KeyN: ['n', 'N', '', ''],
            KeyO: ['o', 'O', '', ''],
            KeyP: ['p', 'P', '', ''],
            KeyQ: ['q', 'Q', '@', ''],
            KeyR: ['r', 'R', '', ''],
            KeyS: ['s', 'S', '', ''],
            KeyT: ['t', 'T', '', ''],
            KeyU: ['u', 'U', '', ''],
            KeyV: ['v', 'V', '', ''],
            KeyW: ['w', 'W', '', ''],
            KeyX: ['x', 'X', '', ''],
            KeyY: ['z', 'Z', '', ''],
            KeyZ: ['y', 'Y', '', ''],
            Digit1: ['1', '!', '', ''],
            Digit2: ['2', '"', '²', ''],
            Digit3: ['3', '§', '³', ''],
            Digit4: ['4', '$', '', ''],
            Digit5: ['5', '%', '', ''],
            Digit6: ['6', '&', '', ''],
            Digit7: ['7', '/', '{', ''],
            Digit8: ['8', '(', '[', ''],
            Digit9: ['9', ')', ']', ''],
            Digit0: ['0', '=', '}', ''],
            Space: [' ', ' ', '', ''],
            Minus: ['ß', '?', '\\', 'ẞ'],
            Equal: ['´', '`', '', ''],
            BracketLeft: ['ü', 'Ü', '', ''],
            BracketRight: ['+', '*', '~', ''],
            Backslash: ['#', "'", '', ''],
            Semicolon: ['ö', 'Ö', '', ''],
            Quote: ['ä', 'Ä', '', ''],
            Backquote: ['^', '°', '', ''],
            Comma: [',', ';', '', ''],
            Period: ['.', ':', '', ''],
            Slash: ['-', '_', '', ''],
            NumpadDivide: ['/', '/', '', ''],
            NumpadMultiply: ['*', '*', '', ''],
            NumpadSubtract: ['-', '-', '', ''],
            NumpadAdd: ['+', '+', '', ''],
            IntlBackslash: ['<', '>', '|', ''],
        },
    });
    register$1({
        id: 'apple.german',
        locale: 'de',
        displayName: 'German',
        platform: 'apple',
        score: 0,
        mapping: {
            KeyA: ['a', 'A', 'å', 'Å'],
            KeyB: ['b', 'B', '∫', '‹'],
            KeyC: ['c', 'C', 'ç', 'Ç'],
            KeyD: ['d', 'D', '∂', '™'],
            KeyE: ['e', 'E', '€', '‰'],
            KeyF: ['f', 'F', 'ƒ', 'Ï'],
            KeyG: ['g', 'G', '©', 'Ì'],
            KeyH: ['h', 'H', 'ª', 'Ó'],
            KeyI: ['i', 'I', '⁄', 'Û'],
            KeyJ: ['j', 'J', 'º', 'ı'],
            KeyK: ['k', 'K', '∆', 'ˆ'],
            KeyL: ['l', 'L', '@', 'ﬂ'],
            KeyM: ['m', 'M', 'µ', '˘'],
            KeyN: ['n', 'N', '~', '›'],
            KeyO: ['o', 'O', 'ø', 'Ø'],
            KeyP: ['p', 'P', 'π', '∏'],
            KeyQ: ['q', 'Q', '«', '»'],
            KeyR: ['r', 'R', '®', '¸'],
            KeyS: ['s', 'S', '‚', 'Í'],
            KeyT: ['t', 'T', '†', '˝'],
            KeyU: ['u', 'U', '¨', 'Á'],
            KeyV: ['v', 'V', '√', '◊'],
            KeyW: ['w', 'W', '∑', '„'],
            KeyX: ['x', 'X', '≈', 'Ù'],
            KeyY: ['z', 'Z', 'Ω', 'ˇ'],
            KeyZ: ['y', 'Y', '¥', '‡'],
            Digit1: ['1', '!', '¡', '¬'],
            Digit2: ['2', '"', '“', '”'],
            Digit3: ['3', '§', '¶', '#'],
            Digit4: ['4', '$', '¢', '£'],
            Digit5: ['5', '%', '[', 'ﬁ'],
            Digit6: ['6', '&', ']', '^'],
            Digit7: ['7', '/', '|', '\\'],
            Digit8: ['8', '(', '{', '˜'],
            Digit9: ['9', ')', '}', '·'],
            Digit0: ['0', '=', '≠', '¯'],
            Space: [' ', ' ', ' ', ' '],
            Minus: ['ß', '?', '¿', '˙'],
            Equal: ['´', '`', "'", '˚'],
            BracketLeft: ['ü', 'Ü', '•', '°'],
            BracketRight: ['+', '*', '±', ''],
            Backslash: ['#', "'", '‘', '’'],
            Semicolon: ['ö', 'Ö', 'œ', 'Œ'],
            Quote: ['ä', 'Ä', 'æ', 'Æ'],
            Backquote: ['<', '>', '≤', '≥'],
            Comma: [',', ';', '∞', '˛'],
            Period: ['.', ':', '…', '÷'],
            Slash: ['-', '_', '–', '—'],
            NumpadDivide: ['/', '/', '/', '/'],
            NumpadMultiply: ['*', '*', '*', '*'],
            NumpadSubtract: ['-', '-', '-', '-'],
            NumpadAdd: ['+', '+', '+', '+'],
            NumpadDecimal: [',', ',', '.', '.'],
            IntlBackslash: ['^', '°', '„', '“'],
            NumpadEqual: ['=', '=', '=', '='],
        },
    });

    const DEFAULT_KEYBINDINGS = [
        { key: 'ctrl+alt+e', command: ['insert', '\\text{cmd+alt+e}'] },
        { key: 'cmd+alt+a', command: ['insert', '\\text{cmd+alt+a}'] },
        { key: 'ctrl+alt+a', command: ['insert', '\\text{ctrl+alt+a}'] },
        { key: 'meta+alt+2', command: ['insert', '\\text{meta+alt+2}'] },
        {
            key: 'ctrl+alt+shift+a',
            command: ['insert', '\\text{ctrl+alt+shift+a}'],
        },
        // { key: 'meta+alt+@', command: ['insert', '\\text{cmd+alt+@}'] },
        { key: 'left', command: 'moveToPreviousChar' },
        { key: 'right', command: 'moveToNextChar' },
        { key: 'up', command: 'moveUp' },
        { key: 'down', command: 'moveDown' },
        { key: 'shift+[ArrowLeft]', command: 'extendToPreviousChar' },
        { key: 'shift+[ArrowRight]', command: 'extendToNextChar' },
        { key: 'shift+[ArrowUp]', command: 'extendUp' },
        { key: 'shift+[ArrowDown]', command: 'extendDown' },
        { key: '[Backspace]', command: 'deletePreviousChar' },
        { key: 'alt+[Delete]', command: 'deletePreviousChar' },
        { key: '[Delete]', command: 'deleteNextChar' },
        { key: 'alt+[Backspace]', command: 'deleteNextChar' },
        { key: 'alt+[ArrowLeft]', command: 'moveToPreviousWord' },
        { key: 'alt+[ArrowRight]', command: 'moveToNextWord' },
        { key: 'alt+shift+[ArrowLeft]', command: 'extendToPreviousWord' },
        { key: 'alt+shift+[ArrowRight]', command: 'extendToNextWord' },
        { key: 'ctrl+[ArrowLeft]', command: 'moveToGroupStart' },
        { key: 'ctrl+[ArrowRight]', command: 'moveToGroupEnd' },
        { key: 'ctrl+shift+[ArrowLeft]', command: 'extendToGroupStart' },
        { key: 'ctrl+shift+[ArrowRight]', command: 'extendToGroupEnd' },
        { key: '[Space]', ifMode: 'math', command: 'moveAfterParent' },
        { key: 'shift+[Space]', ifMode: 'math', command: 'moveBeforeParent' },
        { key: '[Home]', command: 'moveToMathFieldStart' },
        { key: 'cmd+[ArrowLeft]', command: 'moveToMathFieldStart' },
        { key: 'shift+[Home]', command: 'extendToMathFieldStart' },
        { key: 'cmd+shift+[ArrowLeft]', command: 'extendToMathFieldStart' },
        { key: '[End]', command: 'moveToMathFieldEnd' },
        { key: 'cmd+[ArrowRight]', command: 'moveToMathFieldEnd' },
        { key: 'shift+[End]', command: 'extendToMathFieldEnd' },
        { key: 'cmd+shift+[ArrowRight]', command: 'extendToMathFieldEnd' },
        { key: '[Pageup]', command: 'moveToGroupStart' },
        { key: '[Pagedown]', command: 'moveToGroupEnd' },
        { key: '[Tab]', ifMode: 'math', command: 'moveToNextPlaceholder' },
        {
            key: 'shift+[Tab]',
            ifMode: 'math',
            command: 'moveToPreviousPlaceholder',
        },
        { key: '[Tab]', ifMode: 'text', command: 'moveToNextPlaceholder' },
        {
            key: 'shift+[Tab]',
            ifMode: 'text',
            command: 'moveToPreviousPlaceholder',
        },
        { key: '[Escape]', ifMode: 'math', command: ['switch-mode', 'command'] },
        { key: '\\', ifMode: 'math', command: ['switch-mode', 'command'] },
        {
            key: 'alt+[Equal]',
            ifMode: 'math',
            command: ['applyStyle', { mode: 'text' }],
        },
        {
            key: 'alt+[Equal]',
            ifMode: 'text',
            command: ['applyStyle', { mode: 'math' }],
        },
        {
            key: '[Escape]',
            ifMode: 'command',
            command: ['complete', { discard: true }],
        },
        {
            key: '[Tab]',
            ifMode: 'command',
            command: ['complete', { acceptSuggestion: true }],
        },
        { key: '[Return]', ifMode: 'command', command: 'complete' },
        { key: '[Enter]', ifMode: 'command', command: 'complete' },
        {
            key: 'shift+[Escape]',
            ifMode: 'command',
            command: ['complete', { discard: true }],
        },
        // this combination, for example in 60% keyboards it is mapped to ~
        { key: '[ArrowDown]', ifMode: 'command', command: 'nextSuggestion' },
        // { key: 'ios:command:[Tab]', ifMode: 'command',command: 'nextSuggestion' },
        { key: '[ArrowUp]', ifMode: 'command', command: 'previousSuggestion' },
        { key: 'ctrl+a', ifPlatform: '!macos', command: 'selectAll' },
        { key: 'cmd+a', command: 'selectAll' },
        // Rare keys on some extended keyboards
        { key: '[Cut]', command: 'cutToClipboard' },
        { key: '[Copy]', command: 'copyToClipboard' },
        { key: '[Paste]', command: 'pasteFromClipboard' },
        { key: '[Clear]', command: 'deletePreviousChar' },
        { key: 'ctrl+z', ifPlatform: '!macos', command: 'undo' },
        { key: 'cmd+z', command: 'undo' },
        { key: '[Undo]', command: 'undo' },
        { key: 'ctrl+y', ifPlatform: '!macos', command: 'redo' },
        { key: 'cmd+shift+y', command: 'redo' },
        { key: 'ctrl+shift+z', ifPlatform: '!macos', command: 'redo' },
        { key: 'cmd+shift+z', command: 'redo' },
        { key: '[Redo]', command: 'redo' },
        { key: '[EraseEof]', command: 'deleteToGroupEnd' },
        // EMACS/MACOS BINDINGS
        { key: 'ctrl+b', ifPlatform: 'macos', command: 'moveToPreviousChar' },
        { key: 'ctrl+f', ifPlatform: 'macos', command: 'moveToNextChar' },
        { key: 'ctrl+p', ifPlatform: 'macos', command: 'moveUp' },
        { key: 'ctrl+n', ifPlatform: 'macos', command: 'moveDown' },
        { key: 'ctrl+a', ifPlatform: 'macos', command: 'moveToMathFieldStart' },
        { key: 'ctrl+e', ifPlatform: 'macos', command: 'moveToMathFieldEnd' },
        {
            key: 'ctrl+shift+b',
            ifPlatform: 'macos',
            command: 'extendToPreviousChar',
        },
        { key: 'ctrl+shift+f', ifPlatform: 'macos', command: 'extendToNextChar' },
        { key: 'ctrl+shift+p', ifPlatform: 'macos', command: 'extendUp' },
        { key: 'ctrl+shift+n', ifPlatform: 'macos', command: 'extendDown' },
        {
            key: 'ctrl+shift+a',
            ifPlatform: 'macos',
            command: 'extendToMathFieldStart',
        },
        {
            key: 'ctrl+shift+e',
            ifPlatform: 'macos',
            command: 'extendToMathFieldEnd',
        },
        { key: 'ctrl+alt+b', ifPlatform: 'macos', command: 'moveToPreviousWord' },
        { key: 'ctrl+alt+f', ifPlatform: 'macos', command: 'moveToNextWord' },
        {
            key: 'ctrl+shift+alt+b',
            ifPlatform: 'macos',
            command: 'extendToPreviousWord',
        },
        {
            key: 'ctrl+shift+alt+f',
            ifPlatform: 'macos',
            command: 'extendToNextWord',
        },
        { key: 'ctrl+h', ifPlatform: 'macos', command: 'deletePreviousChar' },
        { key: 'ctrl+d', ifPlatform: 'macos', command: 'deleteNextChar' },
        { key: 'ctrl+l', ifPlatform: 'macos', command: 'scrollIntoView' },
        // { key: 'ctrl+t', ifPlatform: 'macos', command: 'transpose' },
        {
            key: 'shift+[Quote]',
            ifMode: 'math',
            command: ['switchMode', 'text', '', '“'],
        },
        {
            key: 'shift+[Quote]',
            ifMode: 'text',
            command: ['switch-mode', 'math', '”', ''],
        },
        // WOLFRAM MATHEMATICA BINDINGS
        {
            key: 'ctrl+[Digit2]',
            ifMode: 'math',
            command: ['insert', '$$\\sqrt{#0}$$'],
        },
        { key: 'ctrl+[Digit5]', ifMode: 'math', command: 'moveToOpposite' },
        { key: 'ctrl+[Digit6]', ifMode: 'math', command: 'moveToSuperscript' },
        { key: 'ctrl+[Minus]', ifMode: 'math', command: 'moveToSubscript' },
        {
            key: 'alt+[BracketLeft]',
            ifMode: 'math',
            command: ['insert', '$$\\left\\lbrack #0 \\right\\rbrack$$'],
        },
        {
            key: 'alt+shift+[BracketLeft]',
            ifMode: 'math',
            command: ['insert', '$$\\left\\lbrace #0 \\right\\rbrace$$'],
        },
        { key: '[Return]', ifMode: 'math', command: 'addRowAfter' },
        { key: '[Enter]', ifMode: 'math', command: 'addRowAfter' },
        { key: 'ctrl+[Comma]', ifMode: 'math', command: 'addColumnAfter' },
        { key: '[Return]', ifMode: 'text', command: 'addRowAfter' },
        { key: '[Enter]', ifMode: 'text', command: 'addRowAfter' },
        { key: 'ctrl+[Comma]', ifMode: 'text', command: 'addColumnAfter' },
        // Excel keybindings:
        // shift+space: select entire row, ctrl+space: select an entire column
        // ctrl+shift++ or ctrl+numpad+
        // ctrl+- to delete a row or columns
        // MATHLIVE BINDINGS
        // { key: 'alt+a', command: ['insert', '$$\\theta$$'] },
        { key: 'alt+p', ifMode: 'math', command: ['insert', '$$\\pi$$'] },
        { key: 'alt+v', ifMode: 'math', command: ['insert', '$$\\sqrt{#0}$$'] },
        {
            key: 'alt+w',
            ifMode: 'math',
            command: ['insert', '$$\\sum_{i=#?}^{#?}$$'],
        },
        // { key: 'alt+b', command: ['insert', '$$\\int_{#?}^{#?}$$'] },
        { key: 'alt+u', ifMode: 'math', command: ['insert', '$$\\cup$$'] },
        { key: 'alt+n', ifMode: 'math', command: ['insert', '$$\\cap$$'] },
        { key: 'alt+o', ifMode: 'math', command: ['insert', '$$\\emptyset$$'] },
        {
            key: 'alt+d',
            ifMode: 'math',
            command: ['insert', '$$\\differentialD$$'],
        },
        {
            key: 'alt+shift+o',
            ifMode: 'math',
            command: ['insert', '$$\\varnothing$$'],
        },
        {
            key: 'alt+shift+d',
            ifMode: 'math',
            command: ['insert', '$$\\partial$$'],
        },
        {
            key: 'alt+shift+p',
            ifMode: 'math',
            command: ['insert', '$$\\prod_{i=#?}^{#?}$$'],
        },
        { key: 'alt+shift+u', ifMode: 'math', command: ['insert', '$$\\bigcup$$'] },
        { key: 'alt+shift+n', ifMode: 'math', command: ['insert', '$$\\bigcap$$'] },
        { key: 'alt+shift+a', ifMode: 'math', command: ['insert', '$$\\forall$$'] },
        { key: 'alt+shift+e', ifMode: 'math', command: ['insert', '$$\\exists$$'] },
        { key: 'alt+[Digit5]', ifMode: 'math', command: ['insert', '$\\infty$$'] },
        { key: 'alt+[Digit6]', ifMode: 'math', command: ['insert', '$$\\wedge$$'] },
        {
            key: 'alt+shift+[Digit6]',
            ifMode: 'math',
            command: ['insert', '$$\\vee$$'],
        },
        { key: 'alt+[Digit9]', ifMode: 'math', command: ['insert', '('] },
        { key: 'alt+[Digit0]', ifMode: 'math', command: ['insert', ')'] },
        { key: 'alt+shift+[Backslash]', ifMode: 'math', command: ['insert', '|'] },
        {
            key: 'alt+[Backslash]',
            ifMode: 'math',
            command: ['insert', '$$\\backslash$$'],
        },
        {
            key: '/',
            ifMode: 'math',
            command: ['insert', '$$\\frac{#@}{#?}$$'],
        },
        {
            key: 'alt+/',
            ifMode: 'math',
            command: ['insert', '$$\\/$$'],
        },
        {
            key: '[NumpadDivide]',
            ifMode: 'math',
            command: ['insert', '$$\\frac{#@}{#?}$$'],
        },
        {
            key: 'alt+[NumpadDivide]',
            ifMode: 'math',
            command: ['insert', '\\frac{#?}{#@}'],
        },
        {
            key: 'shift+[Backquote]',
            ifMode: 'math',
            command: ['insert', '$$\\~$$'],
        },
        // Accessibility
        { key: 'alt+shift+k', command: 'toggleKeystrokeCaption' },
        { key: 'alt+[Space]', command: 'toggleVirtualKeyboard' },
        // Note: On Mac OS (as of 10.12), there is a bug/behavior that causes
        // a beep to be generated with certain command+control key combinations.
        // The workaround is to create a default binding file to silence them.
        // In ~/Library/KeyBindings/DefaultKeyBinding.dict add these entries:
        /*
         {
            "^@\UF701" = "noop:";
            "^@\UF702" = "noop:";
            "^@\UF703" = "noop:";
        }
        */
        {
            key: 'ctrl+alt+[ArrowUp]',
            command: ['speak', 'parent', { withHighlighting: false }],
        },
        {
            key: 'ctrl+alt+[ArrowDown]',
            command: ['speak', 'all', { withHighlighting: false }],
        },
    ];
    /**
     * Most commands can be associated to their keyboard shortcuts from the
     * DEFAULT_KEYBINDINGS table above, for example 'speakSelection' -> 'ctrl+KeyR'
     * However, those that contain complex commands are more ambiguous.
     * For example, '\sqrt' -> 'math:alt+KeyV'. This table provides the reverse
     * mapping for those more complex commands. It is used when displaying
     * keybindings for specific commands in the popover.
     */
    const REVERSE_KEYBINDINGS = {
        '\\theta': 'alt+q',
        '\\sqrt': ['alt+v', 'ctrl+[Digit2]'],
        '\\pi': 'alt+p',
        '\\prod': 'alt+shift+p',
        '\\sum': 'alt+w',
        '\\int': 'alt+b',
        '\\cup': 'alt+u',
        '\\cap': 'alt+n',
        '\\bigcup': 'alt+shift+u',
        '\\bigcap': 'alt+shift+n',
        '\\forall': 'alt+shift+a',
        '\\exists': 'alt+shift+e',
        '\\infty': 'alt+[Digit5]',
        '\\wedge': 'alt+[Digit5]',
        '\\vee': 'alt+shift+[Digit6]',
        '\\differentialD': 'alt+d',
        '\\partial': 'alt+shift+d',
        '\\frac': 'Slash',
        '\\emptyset': 'alt+o',
        '\\varnothing': 'alt+shift+o',
        '\\~': '~',
    };

    /**
     * @param p The platform to test against.
     */
    function matchPlatform(p) {
        if ((navigator === null || navigator === void 0 ? void 0 : navigator.platform) && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)) {
            let plat;
            if (/^(mac)/i.test(navigator.platform)) {
                plat = 'macos';
            }
            else if (/^(win)/i.test(navigator.platform)) {
                plat = 'windows';
            }
            else if (/(android)/i.test(navigator.userAgent)) {
                plat = 'android';
            }
            else if (/(iphone)/i.test(navigator.userAgent) ||
                /(ipod)/i.test(navigator.userAgent) ||
                /(ipad)/i.test(navigator.userAgent)) {
                plat = 'ios';
            }
            else if (/\bCrOS\b/i.test(navigator.userAgent)) {
                plat = 'chromeos';
            }
            if (p.startsWith('!') && !p.endsWith(plat))
                return true;
            if (p.endsWith(plat))
                return true;
        }
        return false;
    }
    /**
     * Return the selector matching the keystroke.
     * The keybindings and keystroke should be in normalized form
     * (i.e. using key code, e.g. `[KeyQ]`
     *
     */
    function getCommandForKeybinding(keybindings, mode, keystroke) {
        if (keybindings.length === 0)
            return '';
        // Try to match using a virtual keystroke
        for (let i = keybindings.length - 1; i >= 0; i--) {
            if (keybindings[i].key === keystroke) {
                if (!keybindings[i].ifMode || keybindings[i].ifMode === mode) {
                    return keybindings[i].command;
                }
            }
        }
        return '';
    }
    function commandToString(command) {
        let result = command;
        if (isArray(result)) {
            if (result.length > 0) {
                result = result[0] + '(' + result.slice(1).join('') + ')';
            }
            else {
                result = '';
            }
        }
        return result;
    }
    function getKeybindingsForCommand(keybindings, command) {
        let result = [];
        if (typeof command === 'string') {
            const candidate = REVERSE_KEYBINDINGS[command];
            if (isArray(candidate)) {
                result = candidate.slice();
            }
            else if (candidate) {
                result.push(candidate);
            }
        }
        // A command can be either a simple selector, or a selector
        // with arguments. Normalize it to a string
        const normalizedCommand = commandToString(command);
        const regex = new RegExp('^' +
            normalizedCommand
                .replace('\\', '\\\\')
                .replace('|', '\\|')
                .replace('*', '\\*')
                .replace('$', '\\$')
                .replace('^', '\\^') +
            '([^*a-zA-Z]|$)');
        keybindings.forEach((keybinding) => {
            if (regex.test(commandToString(keybinding.command))) {
                result.push(keybinding);
            }
        });
        return result.map(getKeybindingMarkup);
    }
    /**
     * Return a human readable representation of a shortcut as a markup string
     * @revisit
     */
    function getKeybindingMarkup(keystroke) {
        var _a;
        const useSymbol = matchPlatform('macos') || matchPlatform('ios');
        const segments = keystroke.split('+');
        let result = '';
        for (const segment of segments) {
            if (!useSymbol && result) {
                result += '<span class="ML__shortcut-join">+</span>';
            }
            if (segment.startsWith('Key')) {
                result += segment.substr(3, 1);
            }
            else if (segment.startsWith('Digit')) {
                result += segment.substr(5, 1);
            }
            else {
                result += (_a = {
                    cmd: '\u2318',
                    meta: useSymbol ? '\u2318' : 'command',
                    shift: useSymbol ? '\u21e7' : 'shift',
                    alt: useSymbol ? '\u2325' : 'alt',
                    ctrl: useSymbol ? '\u2303' : 'control',
                    '\n': useSymbol ? '\u23ce' : 'return',
                    '[return]': useSymbol ? '\u23ce' : 'return',
                    '[enter]': useSymbol ? '\u2324' : 'enter',
                    '[tab]': useSymbol ? '\u21e5' : 'tab',
                    // 'Esc':          useSymbol ? '\u238b' : 'esc',
                    '[escape]': 'esc',
                    '[backspace]': useSymbol ? '\u232b' : 'backspace',
                    '[delete]': useSymbol ? '\u2326' : 'del',
                    '[pageup]': useSymbol ? '\u21de' : 'page up',
                    '[pagedown]': useSymbol ? '\u21df' : 'page down',
                    '[home]': useSymbol ? '\u2912' : 'home',
                    '[end]': useSymbol ? '\u2913' : 'end',
                    '[space]': 'space',
                    '[equal]': '=',
                    '[minus]': '-',
                    '[comma]': ',',
                    '[backslash]': '\\',
                    '[bracketleft]': '[',
                    '[bracketright]': ']',
                    semicolon: ';',
                    period: '.',
                    comma: ',',
                    minus: '-',
                    equal: '=',
                    quote: "'",
                    bracketLeft: '[',
                    bracketRight: ']',
                    backslash: '\\',
                    intlbackslash: '\\',
                    backquote: '`',
                    slash: '/',
                    numpadmultiply: '* &#128290;',
                    numpaddivide: '/ &#128290;',
                    numpadsubtract: '- &#128290;',
                    numpadadd: '+ &#128290;',
                    numpaddecimal: '. &#128290;',
                    numpadcomma: ', &#128290;',
                    help: 'help',
                    left: '\u21E0',
                    up: '\u21E1',
                    right: '\u21E2',
                    down: '\u21E3',
                    '[arrowleft]': '\u21E0',
                    '[arrowup]': '\u21E1',
                    '[arrowright]': '\u21E2',
                    '[arrowdown]': '\u21E3',
                    '[digit0]': '0',
                    '[digit1]': '1',
                    '[digit2]': '2',
                    '[digit3]': '3',
                    '[digit4]': '4',
                    '[digit5]': '5',
                    '[digit6]': '6',
                    '[digit7]': '7',
                    '[digit8]': '8',
                    '[digit9]': '9',
                }[segment.toLowerCase()]) !== null && _a !== void 0 ? _a : segment.toUpperCase();
            }
        }
        return result;
    }
    function normalizeKeybinding(keybinding) {
        if (keybinding.ifPlatform &&
            !/^!?(macos|windows|android|ios|chromeos|other)$/.test(keybinding.ifPlatform)) {
            throw new Error(`Unexpected platform "${keybinding.ifPlatform}" for keybinding ${keybinding.key}`);
        }
        let segments = keybinding.key.split('+');
        const key = segments.pop();
        let platform = keybinding.ifPlatform;
        segments = segments.map((segment) => {
            const x = segment.toLowerCase();
            if (x === 'cmd') {
                if (platform && platform !== 'macos' && platform !== 'ios') {
                    throw new Error('Unexpected "cmd" modifier with platform "' + platform + '"');
                }
                if (!platform) {
                    platform = matchPlatform('ios') ? 'ios' : 'macos';
                }
                return 'meta';
            }
            else if (x === 'win') {
                if (platform && platform !== 'windows') {
                    throw new Error('Unexpected "win" modifier with platform "' + platform + '"');
                }
                platform = 'windows';
                return 'meta';
            }
            return x;
        });
        if (platform && !matchPlatform(platform))
            return undefined;
        if (!/^\[(.*)\]$/.test(key)) {
            // This is not a key code (e.g. `[KeyQ]`) it's a simple key (e.g. `a`)
            // Convert it to a key code
            const code = getCodeForKey(key);
            if (!code) {
                throw new Error('Invalid keybinding key "' + keybinding.key + '"');
            }
            segments = segments.concat(code.split('+'));
        }
        else {
            segments.push(key);
        }
        return { ...keybinding, ifPlatform: platform, key: segments.join('+') };
    }
    /**
     * Parse the input keybindings and return them normalized:
     * - 'keys' are transformed to 'code' according to the current keyboard layout
     * - keybindings that don't apply to the current platform are removed
     */
    function normalizeKeybindings(keybindings, onError) {
        const result = [];
        const errors = [];
        keybindings.forEach((x) => {
            try {
                const keybinding = normalizeKeybinding(x);
                if (keybinding) {
                    result.push(keybinding);
                }
            }
            catch (e) {
                errors.push(e.message);
            }
        });
        if (errors.length > 0) {
            onError(errors);
        }
        return result;
    }

    function on(el, inSelectors, listener, options) {
        const selectors = inSelectors.split(' ');
        for (const sel of selectors) {
            const m = sel.match(/(.*):(.*)/);
            if (m) {
                const options2 = options !== null && options !== void 0 ? options : {};
                if (m[2] === 'active') {
                    options2.passive = false;
                }
                else {
                    options2[m[2]] = true;
                }
                el.addEventListener(m[1], listener, options2);
            }
            else {
                el.addEventListener(sel, listener, options);
            }
        }
    }
    function off(el, inSelectors, listener, options) {
        const selectors = inSelectors.split(' ');
        for (const sel of selectors) {
            const m = sel.match(/(.*):(.*)/);
            if (m) {
                const options2 = options !== null && options !== void 0 ? options : {};
                if (m[2] === 'active') {
                    options2.passive = false;
                }
                else {
                    options2[m[2]] = true;
                }
                el.removeEventListener(m[1], listener, options2);
            }
            else {
                el.removeEventListener(sel, listener, options);
            }
        }
    }
    function getSharedElement(id, cls) {
        let result = document.getElementById(id);
        if (result) {
            result.setAttribute('data-refcount', Number(parseInt(result.getAttribute('data-refcount')) + 1).toString());
        }
        else {
            result = document.createElement('div');
            result.setAttribute('aria-hidden', 'true');
            result.setAttribute('data-refcount', '1');
            result.className = cls;
            result.id = id;
            document.body.appendChild(result);
        }
        return result;
    }
    // @revisit: check the elements are correctly released
    function releaseSharedElement(el) {
        if (!el)
            return;
        const refcount = parseInt(el.getAttribute('data-refcount'));
        if (refcount <= 1) {
            el.remove();
        }
        else {
            el.setAttribute('data-refcount', Number(refcount - 1).toString());
        }
    }
    /**
     * Checks if the argument is a valid Mathfield.
     * After a Mathfield has been destroyed (for example by calling revertToOriginalContent()
     * the Mathfield is no longer valid. However, there may be some pending
     * operations invoked via requestAnimationFrame() for example, that would
     * need to ensure the mathfield is still valid by the time they're executed.
     */
    function isValidMathfield(mf) {
        return mf.element && mf.element['mathfield'] === mf;
    }
    /**
     * Return the element which has the caret
     */
    function findElementWithCaret(el) {
        if (el.classList.contains('ML__caret') ||
            el.classList.contains('ML__text-caret') ||
            el.classList.contains('ML__command-caret')) {
            return el;
        }
        let result;
        for (const child of el.children) {
            result = findElementWithCaret(child);
            if (result)
                break;
        }
        return result;
    }
    /**
     * Return the (x,y) client coordinates of the caret
     */
    function getCaretPosition(el) {
        const caret = findElementWithCaret(el);
        if (caret) {
            const bounds = caret.getBoundingClientRect();
            const position = {
                x: bounds.right,
                y: bounds.bottom,
                height: bounds.height,
            };
            return position;
        }
        return null;
    }
    function getSelectionBounds(field) {
        const selectedNodes = field.querySelectorAll('.ML__selected');
        if (selectedNodes && selectedNodes.length > 0) {
            const selectionRect = {
                top: Infinity,
                bottom: -Infinity,
                left: Infinity,
                right: -Infinity,
            };
            // Calculate the union of the bounds of all the selected spans
            selectedNodes.forEach((node) => {
                const bounds = node.getBoundingClientRect();
                if (bounds.left < selectionRect.left) {
                    selectionRect.left = bounds.left;
                }
                if (bounds.right > selectionRect.right) {
                    selectionRect.right = bounds.right;
                }
                if (bounds.bottom > selectionRect.bottom) {
                    selectionRect.bottom = bounds.bottom;
                }
                if (bounds.top < selectionRect.top) {
                    selectionRect.top = bounds.top;
                }
            });
            const fieldRect = field.getBoundingClientRect();
            const w = selectionRect.right - selectionRect.left;
            const h = selectionRect.bottom - selectionRect.top;
            selectionRect.left = Math.ceil(selectionRect.left - fieldRect.left + field.scrollLeft);
            selectionRect.right = selectionRect.left + w;
            selectionRect.top = Math.ceil(selectionRect.top - fieldRect.top);
            selectionRect.bottom = selectionRect.top + h;
            return selectionRect;
        }
        return null;
    }

    /**
     * Attach event handlers to an element so that it will react by executing
     * a command when pressed.
     * `"command"` can be:
     * - a string, a single selector
     * - an array, whose first element is a selector followed by one or more arguments.
     * - an object, with the following keys:
     *    * 'default': command performed on up, with a down + up sequence with no
     *      delay between down and up
     *    * 'alt', 'shift', 'altshift' keys: command performed on up with
     *      one of these modifiers pressed
     *    * 'pressed': command performed on 'down'
     *    * 'pressAndHoldStart': command performed after a tap/down followed by a
     * delay (optional)
     *    * 'pressAndHoldEnd': command performed on up, if there was a delay
     *     between down and up, if absent, 'default' is performed
     * The value of the keys specify which selector (string
     * or array) to perform depending on the keyboard state when the button is
     * pressed.
     *
     * The 'pressed' and 'active' classes will get added to
     * the element, as the :hover and :active pseudo-classes are not reliable
     * (at least on Chrome Android).
     *
     */
    function attachButtonHandlers(mathfield, el, command) {
        if (typeof command === 'object' && (command.default || command.pressed)) {
            // Attach the default (no modifiers pressed) command to the element
            if (command.default) {
                el.setAttribute('data-' + mathfield.config.namespace + 'command', JSON.stringify(command.default));
            }
            if (command.alt) {
                el.setAttribute('data-' + mathfield.config.namespace + 'command-alt', JSON.stringify(command.alt));
            }
            if (command.altshift) {
                el.setAttribute('data-' + mathfield.config.namespace + 'command-altshift', JSON.stringify(command.altshift));
            }
            if (command.shift) {
                el.setAttribute('data-' + mathfield.config.namespace + 'command-shift', JSON.stringify(command.shift));
            }
            // .pressed: command to perform when the button is pressed (i.e.
            // on mouse down/touch). Otherwise the command is performed when
            // the button is released
            if (command.pressed) {
                el.setAttribute('data-' + mathfield.config.namespace + 'command-pressed', JSON.stringify(command.pressed));
            }
            if (command.pressAndHoldStart) {
                el.setAttribute('data-' +
                    mathfield.config.namespace +
                    'command-pressAndHoldStart', JSON.stringify(command.pressAndHoldStart));
            }
            if (command.pressAndHoldEnd) {
                el.setAttribute('data-' +
                    mathfield.config.namespace +
                    'command-pressAndHoldEnd', JSON.stringify(command.pressAndHoldEnd));
            }
        }
        else {
            // We need to turn the command into a string to attach it to the dataset
            // associated with the button (the command could be an array made of a
            // selector and one or more parameters)
            el.setAttribute('data-' + mathfield.config.namespace + 'command', JSON.stringify(command));
        }
        let pressHoldStart;
        let pressHoldElement;
        let touchID;
        let syntheticTarget; // Target while touch move
        let pressAndHoldTimer;
        on(el, 'mousedown touchstart:passive', (ev) => {
            if (ev.type !== 'mousedown' || ev.buttons === 1) {
                // The primary button was pressed or the screen was tapped.
                ev.stopPropagation();
                ev.preventDefault();
                el.classList.add('pressed');
                pressHoldStart = Date.now();
                // Record the ID of the primary touch point for tracking on touchmove
                if (ev.type === 'touchstart') {
                    touchID = ev.changedTouches[0].identifier;
                }
                // Parse the JSON to get the command (and its optional arguments)
                // and perform it immediately
                const command = el.getAttribute('data-' + mathfield.config.namespace + 'command-pressed');
                if (command) {
                    mathfield.$perform(JSON.parse(command));
                }
                // If there is a `press and hold start` command, perform it
                // after a delay, if we're still pressed by then.
                const pressAndHoldStartCommand = el.getAttribute('data-' +
                    mathfield.config.namespace +
                    'command-pressAndHoldStart');
                if (pressAndHoldStartCommand) {
                    pressHoldElement = el;
                    if (pressAndHoldTimer) {
                        clearTimeout(pressAndHoldTimer);
                    }
                    pressAndHoldTimer = window.setTimeout(function () {
                        if (el.classList.contains('pressed')) {
                            mathfield.$perform(JSON.parse(pressAndHoldStartCommand));
                        }
                    }, 300);
                }
            }
        });
        on(el, 'mouseleave touchcancel', () => {
            el.classList.remove('pressed');
            // let command = el.getAttribute('data-' + mathfield.config.namespace +
            //     'command-pressAndHoldEnd');
            // const now = Date.now();
            // if (command && now > pressHoldStart + 300) {
            //     mathfield.$perform(JSON.parse(command));
            // }
        });
        on(el, 'touchmove:passive', (ev) => {
            // Unlike with mouse tracking, touch tracking only sends events
            // to the target that was originally tapped on. For consistency,
            // we want to mimic the behavior of the mouse interaction by
            // tracking the touch events and dispatching them to potential targets
            ev.preventDefault();
            for (let i = 0; i < ev.changedTouches.length; i++) {
                if (ev.changedTouches[i].identifier === touchID) {
                    // Found a touch matching our primary/tracked touch
                    const target = document.elementFromPoint(ev.changedTouches[i].clientX, ev.changedTouches[i].clientY);
                    if (target !== syntheticTarget && syntheticTarget) {
                        syntheticTarget.dispatchEvent(new MouseEvent('mouseleave'), { bubbles: true });
                        syntheticTarget = null;
                    }
                    if (target) {
                        syntheticTarget = target;
                        target.dispatchEvent(new MouseEvent('mouseenter', {
                            bubbles: true,
                            buttons: 1,
                        }));
                    }
                }
            }
        });
        on(el, 'mouseenter', (ev) => {
            if (ev.buttons === 1) {
                el.classList.add('pressed');
            }
        });
        on(el, 'mouseup touchend click', (ev) => {
            if (syntheticTarget) {
                ev.stopPropagation();
                ev.preventDefault();
                const target = syntheticTarget;
                syntheticTarget = null;
                target.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
                return;
            }
            el.classList.remove('pressed');
            el.classList.add('active');
            if (ev.type === 'click' && ev.detail !== 0) {
                // This is a click event triggered by a mouse interaction
                // (and not a keyboard interaction)
                // Ignore it, we'll handle the mouseup (or touchend) instead.
                ev.stopPropagation();
                ev.preventDefault();
                return;
            }
            // Since we want the active state to be visible for a while,
            // use a timer to remove it after a short delay
            window.setTimeout(function () {
                el.classList.remove('active');
            }, 150);
            let command = el.getAttribute('data-' + mathfield.config.namespace + 'command-pressAndHoldEnd');
            const now = Date.now();
            // If the button has not been pressed for very long or if we were
            // not the button that started the press and hold, don't consider
            // it a press-and-hold.
            if (el !== pressHoldElement || now < pressHoldStart + 300) {
                command = undefined;
            }
            if (!command && ev.altKey && ev.shiftKey) {
                command = el.getAttribute('data-' + mathfield.config.namespace + 'command-altshift');
            }
            if (!command && ev.altKey) {
                command = el.getAttribute('data-' + mathfield.config.namespace + 'command-alt');
            }
            if (!command && ev.shiftKey) {
                command = el.getAttribute('data-' + mathfield.config.namespace + 'command-shift');
            }
            if (!command) {
                command = el.getAttribute('data-' + mathfield.config.namespace + 'command');
            }
            if (command) {
                // Parse the JSON to get the command (and its optional arguments)
                // and perform it
                mathfield.$perform(JSON.parse(command));
            }
            ev.stopPropagation();
            ev.preventDefault();
        });
    }

    // A textual description of a LaTeX command.
    // The value can be either a single string, or an array of string
    // in order to provide alternatives or additional context.
    // In that case, the first string in the array should be appropriate
    // to be spoken for accessibility.
    const NOTES = {
        '\\text': 'roman text',
        '\\textrm': 'roman text',
        '\\textnormal': 'roman text',
        '\\textit': 'italic text',
        '\\textbf': 'bold text',
        '\\texttt': 'monospaced text',
        '\\textsf': 'sans-serif text',
        '\\mathrm': ['roman', '(upright)'],
        '\\mathbf': 'bold',
        '\\bf': 'bold',
        '\\bold': 'bold',
        '\\mathit': 'italic',
        '\\mathbb': 'blackboard',
        '\\mathscr': 'script',
        '\\mathtt': ['typewriter', '(monospaced)'],
        '\\mathsf': 'sans-serif',
        '\\mathcal': 'caligraphic',
        '\\frak': ['fraktur', '(gothic)'],
        '\\mathfrak': ['fraktur', '(gothic)'],
        '\\textcolor': 'text color',
        '\\color': 'color',
        '\\forall': 'for all',
        '\\exists': 'there exists',
        '\\nexists': 'there does not exist',
        '\\frac': 'fraction',
        '\\dfrac': 'display fraction',
        '\\cfrac': 'continuous fraction',
        '\\tfrac': 'text fraction',
        '\\binom': 'binomial coefficient',
        '\\dbinom': 'display binomial coefficient',
        '\\tbinom': 'text binomial coefficient',
        '\\pdiff': 'partial differential',
        '\\vec': 'vector',
        '\\check': 'caron',
        '\\acute': 'acute',
        '\\breve': 'breve',
        '\\tilde': 'tilde',
        '\\dot': 'dot',
        '\\hat': ['hat', 'circumflex'],
        '\\ddot': 'double dot',
        '\\bar': 'bar',
        '\\prime': 'prime',
        '\\doubleprime': 'double prime',
        '\\varnothing': 'empty set',
        '\\emptyset': 'empty set',
        '\\subseteq': 'subset of or <br>equal to',
        '\\supseteq': 'superset of or <br>equal to',
        '\\supset': 'superset of',
        '\\subset': 'subset of',
        '\\partial': 'partial derivative',
        '\\bigcup': 'union',
        '\\bigcap': 'intersection',
        '\\approx': 'approximately equal to',
        '\\notin': 'not an element of',
        '\\in': ['element of', 'included in'],
        '\\infty': 'infinity',
        '\\land': 'logical and',
        '\\sqrt': 'square root',
        '\\prod': 'product',
        '\\sum': 'summation',
        '\\amalg': ['amalgamation', 'coproduct', 'free product', 'disjoint union'],
        '\\cup': 'union with',
        '\\cap': 'intersection with',
        '\\int': 'integral',
        '\\iint': 'surface integral',
        '\\oint': 'curve integral',
        '\\iiint': 'volume integral',
        '\\iff': 'if and only if',
        '\\ln': 'natural logarithm',
        '\\boldsymbol': 'bold',
        '\\setminus': 'set subtraction',
        '\\stackrel': 'relation with symbol above',
        '\\stackbin': 'operator with symbol above',
        '\\underset': 'symbol with annotation below',
        '\\overset': 'symbol with annotation above',
        '\\hslash': ['h-bar', 'Planck constant'],
        '\\gtrsim': 'greater than or <br>similar to',
        '\\propto': 'proportional to',
        '\\equiv': 'equivalent to',
        '\\!': ['negative thin space', '(-3 mu)'],
        '\\ ': ['space', '(6 mu)'],
        '\\,': ['thin space', '(3 mu)'],
        '\\:': ['medium space', '(4 mu)'],
        '\\;': ['thick space', '(5 mu)'],
        '\\quad': ['1 em space', '(18 mu)'],
        '\\qquad': ['2 em space', '(36 mu)'],
        '\\enskip': ['&#189; em space', '(9 mu)'],
        '\\mp': 'minus or plus',
        '\\pm': 'plus or minus',
        '\\Im': 'Imaginary part of',
        '\\Re': 'Real part of',
        '\\gothicCapitalR': 'Real part of',
        '\\gothicCapitalI': 'Imaginary part part of',
        '\\differentialD': 'differential d',
        '\\aleph': [
            'aleph',
            'infinite cardinal',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Cardinal_number">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\beth': [
            'beth',
            'beth number',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Beth_number">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\gimel': [
            'gimel',
            'gimel function',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Gimel_function">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\O': 'empty set',
        '\\N': 'set of <br>natural numbers',
        '\\Z': 'set of <br>integers',
        '\\Q': 'set of <br>rational numbers',
        '\\C': 'set of <br>complex numbers',
        '\\R': 'set of <br>real numbers',
        '\\P': 'set of <br>prime numbers',
        '\\lesseqqgtr': 'less than, equal to or<br> greater than',
        '\\gnapprox': 'greater than and <br>not approximately',
        '\\lnapprox': 'lesser than and <br>not approximately',
        '\\j': 'dotless j',
        '\\i': 'dotless i',
        '\\cdot': 'centered dot',
        '\\lmoustache': 'left moustache',
        '\\rmoustache': 'right moustache',
        '\\nabla': ['nabla', 'del', 'differential vector operator'],
        '\\square': [
            'square',
            'd’Alembert operator',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/D%27Alembert_operator">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\blacksquare': [
            'black square',
            'end of proof',
            'tombstone',
            'Halmos symbol',
        ],
        '\\Box': 'end of proof',
        '\\colon': ['such that', 'ratio'],
        '\\coloneq': ['is defined by', 'is assigned'],
        '\\Colon': ['is defined by', 'as'],
        '\\_': ['underbar', 'underscore'],
        '\\ll': 'much less than',
        '\\gg': 'much greater than',
        '\\doteq': 'approximately equal to',
        '\\Doteq': 'approximately equal to',
        '\\doteqdot': 'approximately equal to',
        '\\cong': ['isomorphism of', '(for algebras, modules...)'],
        '\\det': ['determinant of', '(of a matrix)'],
        '\\dotplus': 'Cartesian product algebra',
        '\\otimes': [
            'tensor product',
            '(of algebras)',
            'Kronecker product',
            '(of matrices)',
        ],
        '\\oplus': ['direct sum', '(of modules)'],
        '\\lb': 'base-2 logarithm',
        '\\lg': 'base-10 logarithm',
        '\\wp': [
            'Weierstrass P',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Weierstrass%27s_elliptic_functions">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\wr': [
            'wreath product',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Wreath_product">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\top': ['tautology', 'Proposition P is universally true'],
        '\\bot': ['contradiction', 'Proposition P is contradictory'],
        '\\mid': ['probability', 'of event A given B'],
        '\\mho': [
            'Siemens',
            'electrical conductance in SI unit',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Siemens_(unit)">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\Longrightarrow': 'implies',
        '\\Longleftrightarrow': 'if, and only if,',
        '\\prec': 'precedes',
        '\\preceq': 'precedes or is equal to',
        '\\succ': 'succeedes',
        '\\succeq': 'succeedes or is equal to',
        '\\perp': ['is perpendicular to', 'is independent of'],
        '\\models': [
            'entails',
            'double-turnstyle, models',
            'is a semantic consequence of',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Double_turnstile">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\vdash': [
            'satisfies',
            'turnstyle, assertion sign',
            'syntactic inference',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Turnstile_(symbol)">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\implies': ['implies', 'logical consequence'],
        '\\impliedby': ['implied by', 'logical consequence'],
        '\\surd': ['surd', 'root of', 'checkmark'],
        '\\ltimes': [
            'semi direct product',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\rtimes': [
            'semi direct product',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\leftthreetimes': [
            'semi direct product',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\rightthreetimes': [
            'semi direct product',
            '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
        ],
        '\\divideontimes': ['divide on times'],
        '\\curlywedge': 'nor',
        '\\curlyvee': 'nand',
        '\\simeq': 'is group isomorphic with',
        '\\vartriangleleft': ['is a normal subgroup of', 'is an ideal ring of'],
        '\\circ': ['circle', 'ring', 'function composition'],
        '\\rlap': ['overlap right', '\\rlap{x}o'],
        '\\llap': ['overlap left', 'o\\llap{/}'],
        '\\colorbox': ['color box', '\\colorbox{#fbc0bd}{...}'],
        '\\ast': ['asterisk', 'reflexive closure (as a superscript)'],
        '\\bullet': 'bullet',
        '\\lim': 'limit',
    };
    function getNote(symbol) {
        let result = NOTES[symbol] || '';
        if (isArray(result)) {
            result = result.join('<br>');
        }
        return result;
    }
    function latexToMarkup(latex, mf) {
        const parse = parseString(latex, 'math', null, mf.config.macros);
        const spans = decompose({
            mathstyle: MATHSTYLES.displaystyle,
            macros: mf.config.macros,
        }, parse);
        const wrapper = makeStruts(makeSpan(spans, 'ML__base'), 'ML__mathlive');
        return wrapper.toMarkup();
    }
    function showPopoverWithLatex(mf, latex, displayArrows) {
        if (!latex || latex.length === 0) {
            hidePopover(mf);
            return;
        }
        const command = latex;
        const commandMarkup = latexToMarkup(latex, mf);
        const commandNote = getNote(command);
        const keybinding = getKeybindingsForCommand(mf.keybindings, command).join('<br>');
        let template = displayArrows
            ? '<div class="ML__popover__prev-shortcut" role="button" aria-label="Previous suggestion"><span><span>&#x25B2;</span></span></div>'
            : '';
        template += '<span class="ML__popover__content" role="button">';
        template += '<div class="ML__popover__command">' + commandMarkup + '</div>';
        if (commandNote) {
            template += '<div class="ML__popover__note">' + commandNote + '</div>';
        }
        if (keybinding) {
            template +=
                '<div class="ML__popover__shortcut">' + keybinding + '</div>';
        }
        template += '</span>';
        template += displayArrows
            ? '<div class="ML__popover__next-shortcut" role="button" aria-label="Next suggestion"><span><span>&#x25BC;</span></span></div>'
            : '';
        showPopover(mf, template);
        let el = mf.popover.getElementsByClassName('ML__popover__content');
        if (el && el.length > 0) {
            attachButtonHandlers(mf, el[0], {
                default: ['complete', { acceptSuggestion: true }],
            });
        }
        el = mf.popover.getElementsByClassName('ML__popover__prev-shortcut');
        if (el && el.length > 0) {
            attachButtonHandlers(mf, el[0], 'previousSuggestion');
        }
        el = mf.popover.getElementsByClassName('ML__popover__next-shortcut');
        if (el && el.length > 0) {
            attachButtonHandlers(mf, el[0], 'nextSuggestion');
        }
    }
    function updatePopoverPosition(mf, options) {
        // Check that the mathfield is still valid
        // (we're calling ourselves from requestAnimationFrame() and the mathfield
        // could have gotten destroyed
        if (!mf.element || mf.element['mathfield'] !== mf)
            return;
        // If the popover pane is visible...
        if (mf.popover.classList.contains('is-visible')) {
            if (options === null || options === void 0 ? void 0 : options.deferred) {
                // Call ourselves again later, typically after the
                // rendering/layout of the DOM has been completed
                window.requestAnimationFrame(() => updatePopoverPosition(mf));
            }
            else {
                if (!getAnchor(mf.model) ||
                    getAnchor(mf.model).type !== 'command') {
                    hidePopover(mf);
                }
                else {
                    // ... get the caret position
                    const position = getCaretPosition(mf.field);
                    if (position)
                        setPopoverPosition(mf, position);
                }
            }
        }
    }
    function showPopover(mf, markup) {
        mf.popover.innerHTML = mf.config.createHTML(markup);
        const position = getCaretPosition(mf.field);
        if (position)
            setPopoverPosition(mf, position);
        mf.popover.classList.add('is-visible');
    }
    function setPopoverPosition(mf, position) {
        // get screen width & height (browser compatibility)
        const screenHeight = window.innerHeight ||
            document.documentElement.clientHeight ||
            document.body.clientHeight;
        const screenWidth = window.innerWidth ||
            document.documentElement.clientWidth ||
            document.body.clientWidth;
        // get scrollbar size. This would be 0 in mobile device (also no needed).
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        const scrollbarHeight = window.innerHeight - document.documentElement.clientHeight;
        const virtualkeyboardHeight = mf.virtualKeyboardVisible
            ? mf.virtualKeyboard.offsetHeight
            : 0;
        // prevent screen overflow horizontal.
        if (position.x + mf.popover.offsetWidth / 2 >
            screenWidth - scrollbarWidth) {
            mf.popover.style.left =
                screenWidth - mf.popover.offsetWidth - scrollbarWidth + 'px';
        }
        else if (position.x - mf.popover.offsetWidth / 2 < 0) {
            mf.popover.style.left = '0';
        }
        else {
            mf.popover.style.left = position.x - mf.popover.offsetWidth / 2 + 'px';
        }
        // and position the popover right below or above the caret
        if (position.y + mf.popover.offsetHeight + 5 >
            screenHeight - scrollbarHeight - virtualkeyboardHeight) {
            mf.popover.classList.add('ML__popover--reverse-direction');
            mf.popover.style.top =
                position.y - position.height - mf.popover.offsetHeight - 5 + 'px';
        }
        else {
            mf.popover.classList.remove('ML__popover--reverse-direction');
            mf.popover.style.top = position.y + 5 + 'px';
        }
    }
    function hidePopover(mf) {
        mf.popover.classList.remove('is-visible');
    }

    function extractCommandStringAroundInsertionPoint(model, beforeInsertionPointOnly = false) {
        var _a;
        let result = '';
        const command = getCommandOffsets(model);
        if (command) {
            const end = beforeInsertionPointOnly
                ? model.anchorOffset() + 1
                : command.end;
            const siblings = model.siblings();
            for (let i = command.start; i < end; i++) {
                // All these atoms are 'command' atom with a body that's
                // a single character
                result += (_a = siblings[i].body) !== null && _a !== void 0 ? _a : '';
            }
        }
        return result;
    }
    /**
     * @param value - If true, decorate the command string around the
     * insertion point with an error indicator (red dotted underline). If false,
     * remove it.
     */
    function decorateCommandStringAroundInsertionPoint(model, hasError) {
        const command = getCommandOffsets(model);
        if (command) {
            const siblings = model.siblings();
            for (let i = command.start; i < command.end; i++) {
                siblings[i].isError = hasError;
            }
        }
    }
    function commitCommandStringBeforeInsertionPoint(model) {
        const command = getCommandOffsets(model);
        if (command) {
            const siblings = model.siblings();
            const anchorOffset = model.anchorOffset() + 1;
            for (let i = command.start; i < anchorOffset; i++) {
                if (siblings[i]) {
                    siblings[i].isSuggestion = false;
                }
            }
        }
    }
    function spliceCommandStringAroundInsertionPoint(model, mathlist) {
        const command = getCommandOffsets(model);
        if (command) {
            // Dispatch notifications
            contentWillChange(model);
            if (!mathlist) {
                model.siblings().splice(command.start, command.end - command.start);
                setSelection(model, command.start - 1, 0);
            }
            else {
                // Array.prototype.splice.apply(
                //     model.siblings(),
                //     [command.start, command.end - command.start].concat(mathlist)
                // );
                // @revisit
                model
                    .siblings()
                    .splice(command.start, command.end - command.start, ...mathlist);
                let newPlaceholders = [];
                for (const atom of mathlist) {
                    newPlaceholders = newPlaceholders.concat(atom.filter((atom) => atom.type === 'placeholder'));
                }
                setSelectionExtent(model, 0);
                // Set the anchor offset to a reasonable value that can be used by
                // leap(). In particular, the current offset value may be invalid
                // if the length of the mathlist is shorter than the name of the command
                model.path[model.path.length - 1].offset = command.start - 1;
                if (newPlaceholders.length === 0 || !leap(model, +1, false)) {
                    setSelection(model, command.start + mathlist.length - 1);
                }
            }
            // Dispatch notifications
            contentDidChange(model);
        }
    }
    function removeCommandStringFromAtom(atom) {
        if (!atom)
            return;
        if (isArray(atom)) {
            for (let i = atom.length - 1; i >= 0; i--) {
                if (atom[i].type === 'command') {
                    atom.splice(i, 1);
                    // i += 1;
                }
                else {
                    removeCommandStringFromAtom(atom[i]);
                }
            }
            return;
        }
        removeCommandStringFromAtom(atom.body);
        removeCommandStringFromAtom(atom.superscript);
        removeCommandStringFromAtom(atom.subscript);
        removeCommandStringFromAtom(atom.underscript);
        removeCommandStringFromAtom(atom.overscript);
        removeCommandStringFromAtom(atom.numer);
        removeCommandStringFromAtom(atom.denom);
        removeCommandStringFromAtom(atom.index);
        if (atom.array) {
            for (let j = arrayCellCount(atom.array); j >= 0; j--) {
                removeCommandStringFromAtom(arrayCell(atom.array, j));
            }
        }
    }
    function removeCommandString(model) {
        contentWillChange(model);
        const contentWasChanging = model.suppressChangeNotifications;
        model.suppressChangeNotifications = true;
        removeCommandStringFromAtom(model.root.body);
        model.suppressChangeNotifications = contentWasChanging;
        contentDidChange(model);
    }

    const SPECIAL_OPERATORS = {
        '\\pm': '&#177;',
        '\\times': '&#215;',
        '\\colon': ':',
        '\\vert': '|',
        '\\Vert': '\u2225',
        '\\mid': '\u2223',
        '\\lbrace': '{',
        '\\rbrace': '}',
        '\\langle': '\u27e8',
        '\\rangle': '\u27e9',
        '\\lfloor': '\u230a',
        '\\rfloor': '\u230b',
        '\\lceil': '\u2308',
        '\\rceil': '\u2309',
        '\\vec': '&#x20d7;',
        '\\acute': '&#x00b4;',
        '\\grave': '&#x0060;',
        '\\dot': '&#x02d9;',
        '\\ddot': '&#x00a8;',
        '\\tilde': '&#x007e;',
        '\\bar': '&#x00af;',
        '\\breve': '&#x02d8;',
        '\\check': '&#x02c7;',
        '\\hat': '&#x005e;',
    };
    function xmlEscape(str) {
        return (str
            // .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;'));
    }
    function makeID$1(id, options) {
        if (!id || !options.generateID)
            return '';
        // Note: the 'extid' attribute is recognized by SRE as an attribute
        // to be passed to SSML as a <mark> tag.
        return ' extid="' + id + '"';
    }
    function scanIdentifier(stream, final, options) {
        let result = false;
        final = final || stream.atoms.length;
        let mathML = '';
        let body = '';
        let superscript = -1;
        let subscript = -1;
        const atom = stream.atoms[stream.index];
        if (stream.index < final &&
            (atom.type === 'mord' || atom.type === 'textord') &&
            '0123456789,.'.indexOf(atom.body) < 0) {
            body = atomToMathML(atom, options);
            if (atom.superscript) {
                superscript = stream.index;
            }
            if (atom.subscript) {
                subscript = stream.index;
            }
            stream.index += 1;
        }
        if (body.length > 0) {
            result = true;
            // If there are separate atoms for sub/sup, record them
            if (isSuperscriptAtom(stream)) {
                superscript = stream.index;
                stream.index += 1;
            }
            if (isSubscriptAtom(stream)) {
                subscript = stream.index;
                stream.index += 1;
            }
            if (superscript >= 0 && subscript >= 0) {
                mathML = '<msubsup>' + body;
                mathML += toMathML(stream.atoms[subscript].subscript, 0, 0, options)
                    .mathML;
                mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
                mathML += '</msubsup>';
            }
            else if (superscript >= 0) {
                mathML = '<msup>' + body;
                if (isSuperscriptAtom(stream)) {
                    // There's another superscript after this one. Maybe double-prime?
                    const sup = toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
                    const sup2 = toMathML(stream.atoms[superscript + 1].superscript, 0, 0, options).mathML;
                    if ((sup === '<mi>\u2032</mi>' ||
                        sup === '<mi>&#x2032;</mi>') &&
                        (sup2 === '<mi>\u2032</mi>' || sup2 === '<mi>&#x2032;</mi>')) {
                        mathML += '<mi>&#x2033;</mi>';
                    }
                    else if (sup === '<mi>\u2032</mi>' ||
                        sup === '<mi>&#x2032;</mi>') {
                        mathML += '<mi>&#x2032;</mi>';
                    }
                    else {
                        mathML += sup;
                    }
                }
                else {
                    mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
                }
                mathML += '</msup>';
            }
            else if (subscript >= 0) {
                mathML = '<msub>' + body;
                mathML += toMathML(stream.atoms[subscript].subscript, 0, 0, options)
                    .mathML;
                mathML += '</msub>';
            }
            else {
                mathML = body;
            }
            if ((stream.lastType === 'mi' ||
                stream.lastType === 'mn' ||
                stream.lastType === 'mtext' ||
                stream.lastType === 'fence') &&
                !/^<mo>(.*)<\/mo>$/.test(mathML)) {
                mathML = '<mo>&#8290;</mo>' + mathML; // &InvisibleTimes;
            }
            if (body.endsWith('>f</mi>') || body.endsWith('>g</mi>')) {
                mathML += '<mo>&x2061;</mo>'; // &ApplyFunction;
                stream.lastType = 'applyfunction';
            }
            else {
                stream.lastType = /^<mo>(.*)<\/mo>$/.test(mathML) ? 'mo' : 'mi';
            }
            stream.mathML += mathML;
        }
        return result;
    }
    /**
     * Return true if the current atom is a standalone superscript atom
     * i.e. an atom with no content, except of a superscript.
     * Superscripts can be encoded either as an attribute on the last atom
     * or as a standalone, empty, atom following the one to which it applies.
     * @param {object} stream
     */
    function isSuperscriptAtom(stream) {
        return (stream.index < stream.atoms.length &&
            stream.atoms[stream.index].superscript &&
            stream.atoms[stream.index].type === 'msubsup');
    }
    function isSubscriptAtom(stream) {
        return (stream.index < stream.atoms.length &&
            stream.atoms[stream.index].subscript &&
            stream.atoms[stream.index].type === 'msubsup');
    }
    function indexOfSuperscriptInNumber(stream) {
        let result = -1;
        let i = stream.index;
        let done = false;
        let found = false;
        while (i < stream.atoms.length && !done && !found) {
            done =
                stream.atoms[i].type !== 'mord' ||
                    '0123456789,.'.indexOf(stream.atoms[i].body) < 0;
            found = !done && stream.atoms[i].superscript;
            i++;
        }
        if (found) {
            result = i - 1;
        }
        return result;
    }
    function parseSubsup(base, stream, options) {
        let result = false;
        let mathML = '';
        let atom = stream.atoms[stream.index - 1];
        if (!atom)
            return false;
        if (!atom.superscript && !atom.subscript) {
            if (isSuperscriptAtom(stream) || isSubscriptAtom(stream)) {
                atom = stream.atoms[stream.index];
                stream.index += 1;
            }
        }
        if (!atom)
            return false;
        if (atom.superscript && atom.subscript) {
            mathML = '<msubsup>' + base;
            mathML += toMathML(atom.subscript, 0, 0, options).mathML;
            mathML += toMathML(atom.superscript, 0, 0, options).mathML;
            mathML += '</msubsup>';
        }
        else if (atom.superscript) {
            mathML = '<msup>' + base;
            mathML += toMathML(atom.superscript, 0, 0, options).mathML;
            mathML += '</msup>';
        }
        else if (atom.subscript) {
            mathML = '<msub>' + base;
            mathML += toMathML(atom.subscript, 0, 0, options).mathML;
            mathML += '</msub>';
        }
        if (mathML.length > 0) {
            result = true;
            stream.mathML += mathML;
            stream.lastType = '';
        }
        return result;
    }
    function scanText(stream, final, options) {
        let result = false;
        final = final || stream.atoms.length;
        const initial = stream.index;
        let mathML = '';
        while (stream.index < final && stream.atoms[stream.index].mode === 'text') {
            mathML += stream.atoms[stream.index].body
                ? stream.atoms[stream.index].body
                : ' ';
            stream.index += 1;
        }
        if (mathML.length > 0) {
            result = true;
            mathML =
                '<mtext' +
                    makeID$1(stream.atoms[initial].id, options) +
                    '>' +
                    mathML +
                    '</mtext>';
            stream.mathML += mathML;
            stream.lastType = 'mtext';
        }
        return result;
    }
    function scanNumber(stream, final, options) {
        let result = false;
        final = final || stream.atoms.length;
        const initial = stream.index;
        let mathML = '';
        let superscript = indexOfSuperscriptInNumber(stream);
        if (superscript >= 0 && superscript < final) {
            final = superscript;
        }
        while (stream.index < final &&
            stream.atoms[stream.index].type === 'mord' &&
            '0123456789,.'.indexOf(stream.atoms[stream.index].body) >= 0) {
            mathML += stream.atoms[stream.index].body;
            stream.index += 1;
        }
        if (mathML.length > 0) {
            result = true;
            mathML =
                '<mn' +
                    makeID$1(stream.atoms[initial].id, options) +
                    '>' +
                    mathML +
                    '</mn>';
            if (superscript < 0 && isSuperscriptAtom(stream)) {
                superscript = stream.index;
                stream.index += 1;
            }
            if (superscript >= 0) {
                mathML = '<msup>' + mathML;
                mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
                mathML += '</msup>';
            }
            stream.mathML += mathML;
            stream.lastType = 'mn';
        }
        return result;
    }
    function scanFence(stream, final, options) {
        let result = false;
        final = final || stream.atoms.length;
        let mathML = '';
        let lastType = '';
        if (stream.index < final && stream.atoms[stream.index].type === 'mopen') {
            let found = false;
            let depth = 0;
            const openIndex = stream.index;
            let closeIndex = -1;
            let index = openIndex + 1;
            while (index < final && !found) {
                if (stream.atoms[index].type === 'mopen') {
                    depth += 1;
                }
                else if (stream.atoms[index].type === 'mclose') {
                    depth -= 1;
                }
                if (depth === -1) {
                    found = true;
                    closeIndex = index;
                }
                index += 1;
            }
            if (found) {
                // TODO: could add attribute indicating it's a fence (fence=true)
                mathML = '<mrow>';
                mathML += toMo(stream.atoms[openIndex], options);
                mathML += toMathML(stream.atoms, openIndex + 1, closeIndex, options)
                    .mathML;
                // TODO: could add attribute indicating it's a fence (fence=true)
                mathML += toMo(stream.atoms[closeIndex], options);
                mathML += '</mrow>';
                if (stream.lastType === 'mi' ||
                    stream.lastType === 'mn' ||
                    stream.lastType === 'mfrac' ||
                    stream.lastType === 'fence') {
                    mathML = '<mo>&#8290;</mo>' + mathML; // &InvisibleTimes;
                }
                stream.index = closeIndex + 1;
                if (parseSubsup(mathML, stream, options)) {
                    result = true;
                    stream.lastType = '';
                    mathML = '';
                }
                lastType = 'fence';
            }
        }
        if (mathML.length > 0) {
            result = true;
            stream.mathML += mathML;
            stream.lastType = lastType;
        }
        return result;
    }
    function scanOperator(stream, final, options) {
        let result = false;
        final = final || stream.atoms.length;
        let mathML = '';
        let lastType = '';
        const atom = stream.atoms[stream.index];
        if (stream.index < final &&
            (atom.type === 'mbin' || atom.type === 'mrel')) {
            mathML += atomToMathML(stream.atoms[stream.index], options);
            stream.index += 1;
            lastType = 'mo';
        }
        else if (stream.index < final && atom.type === 'mop') {
            // mathML += '<mrow>';
            if (atom.limits === 'limits' && (atom.superscript || atom.subscript)) {
                // Operator with limits, e.g. \sum
                const op = toMo(atom, options);
                if (atom.superscript && atom.subscript) {
                    // Both superscript and subscript
                    mathML +=
                        (atom.limits !== 'nolimits'
                            ? '<munderover>'
                            : '<msubsup>') + op;
                    mathML += toMathML(atom.subscript, 0, 0, options).mathML;
                    mathML += toMathML(atom.superscript, 0, 0, options).mathML;
                    mathML +=
                        atom.limits !== 'nolimits' ? '</munderover>' : '</msubsup>';
                }
                else if (atom.superscript) {
                    // Superscript only
                    mathML +=
                        (atom.limits !== 'nolimits' ? '<mover>' : '<msup>') + op;
                    mathML += toMathML(atom.superscript, 0, 0, options).mathML;
                    mathML += atom.limits !== 'nolimits' ? '</mover>' : '</msup>';
                }
                else {
                    // Subscript only
                    mathML +=
                        (atom.limits !== 'nolimits' ? '<munder>' : '<msub>') + op;
                    mathML += toMathML(atom.subscript, 0, 0, options).mathML;
                    mathML += atom.limits !== 'nolimits' ? '</munder>' : '</msub>';
                }
                lastType = 'mo';
            }
            else {
                const atom = stream.atoms[stream.index];
                const isUnit = atom.symbol === '\\operatorname';
                const op = isUnit
                    ? '<mi class="MathML-Unit"' +
                        makeID$1(atom.id, options) +
                        '>' +
                        toString$1(atom.body) +
                        '</mi>'
                    : toMo(atom, options);
                mathML += op;
                stream.index += 1;
                if (parseSubsup(mathML, stream, options)) {
                    result = true;
                    stream.lastType = '';
                    mathML = '';
                }
                stream.index -= 1;
                if (!isUnit && !/^<mo>(.*)<\/mo>$/.test(op)) {
                    mathML += '<mo>&#x2061;</mo>'; // APPLY FUNCTION
                    // mathML += scanArgument(stream);
                    lastType = 'applyfunction';
                }
                else {
                    lastType = isUnit ? 'mi' : 'mo';
                }
            }
            // mathML += '</mrow>';
            if ((stream.lastType === 'mi' || stream.lastType === 'mn') &&
                !/^<mo>(.*)<\/mo>$/.test(mathML)) {
                mathML = '<mo>&#8290;</mo>' + mathML; // &InvisibleTimes;
            }
            stream.index += 1;
        }
        if (mathML.length > 0) {
            result = true;
            stream.mathML += mathML;
            stream.lastType = lastType;
        }
        return result;
    }
    /**
     * Given an atom or an array of atoms, return their MathML representation as
     * a string.
     * @param {string|Atom|Atom[]} input
     * @param initial index of the input to start conversion from
     * @param final last index of the input to stop conversion to
     */
    function toMathML(input, initial, final, options) {
        const result = {
            atoms: input,
            index: initial !== null && initial !== void 0 ? initial : 0,
            mathML: '',
            lastType: '',
        };
        if (typeof input === 'number' || typeof input === 'boolean') {
            result.mathML = input.toString();
        }
        else if (typeof input === 'string') {
            result.mathML = input;
        }
        else if (input instanceof Atom) {
            result.mathML = atomToMathML(input, options);
        }
        else if (Array.isArray(input)) {
            let count = 0;
            final = final ? final : input ? input.length : 0;
            while (result.index < final) {
                if (scanText(result, final, options) ||
                    scanNumber(result, final, options) ||
                    scanIdentifier(result, final, options) ||
                    scanOperator(result, final, options) ||
                    scanFence(result, final, options)) {
                    count += 1;
                }
                else if (result.index < final) {
                    let mathML = atomToMathML(result.atoms[result.index], options);
                    if (result.lastType === 'mn' &&
                        mathML.length > 0 &&
                        result.atoms[result.index].type === 'genfrac') {
                        // If this is a fraction preceded by a number (e.g. 2 1/2),
                        // add an "invisible plus" (U+0264) character in front of it
                        mathML = '<mo>&#x2064;</mo>' + mathML;
                    }
                    if (result.atoms[result.index].type === 'genfrac') {
                        result.lastType = 'mfrac';
                    }
                    else {
                        result.lastType = '';
                    }
                    if (mathML.length > 0) {
                        result.mathML += mathML;
                        count += 1;
                    }
                    result.index += 1;
                }
            }
            // If there are more than a single element, wrap them in a mrow tag.
            if (count > 1) {
                result.mathML = '<mrow>' + result.mathML + '</mrow>';
            }
        }
        return result;
    }
    function toMo(atom, options) {
        let result = '';
        const body = toString$1(atom.body);
        if (body) {
            result = '<mo' + makeID$1(atom.id, options) + '>' + body + '</mo>';
        }
        return result;
    }
    function toString$1(atoms) {
        if (!atoms)
            return '';
        if (typeof atoms === 'string')
            return xmlEscape(atoms);
        if (!Array.isArray(atoms) && typeof atoms.body === 'string') {
            return xmlEscape(atoms.body);
        }
        let result = '';
        for (const atom of atoms) {
            if (typeof atom.body === 'string') {
                result += atom.body;
            }
        }
        return xmlEscape(result);
    }
    /**
     * Return a MathML fragment representation of a single atom
     *
     */
    function atomToMathML(atom, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        // For named SVG atoms, map to a Unicode char
        const SVG_CODE_POINTS = {
            widehat: '^',
            widecheck: 'ˇ',
            widetilde: '~',
            utilde: '~',
            overleftarrow: '\u2190',
            underleftarrow: '\u2190',
            xleftarrow: '\u2190',
            overrightarrow: '\u2192',
            underrightarrow: '\u2192',
            xrightarrow: '\u2192',
            underbrace: '\u23df',
            overbrace: '\u23de',
            overgroup: '\u23e0',
            undergroup: '\u23e1',
            overleftrightarrow: '\u2194',
            underleftrightarrow: '\u2194',
            xleftrightarrow: '\u2194',
            Overrightarrow: '\u21d2',
            xRightarrow: '\u21d2',
            overleftharpoon: '\u21bc',
            xleftharpoonup: '\u21bc',
            overrightharpoon: '\u21c0',
            xrightharpoonup: '\u21c0',
            xLeftarrow: '\u21d0',
            xLeftrightarrow: '\u21d4',
            xhookleftarrow: '\u21a9',
            xhookrightarrow: '\u21aa',
            xmapsto: '\u21a6',
            xrightharpoondown: '\u21c1',
            xleftharpoondown: '\u21bd',
            xrightleftharpoons: '\u21cc',
            xleftrightharpoons: '\u21cb',
            xtwoheadleftarrow: '\u219e',
            xtwoheadrightarrow: '\u21a0',
            xlongequal: '=',
            xtofrom: '\u21c4',
            xrightleftarrows: '\u21c4',
            xrightequilibrium: '\u21cc',
            xleftequilibrium: '\u21cb',
        };
        const SPECIAL_IDENTIFIERS = {
            '\\exponentialE': '&#x02147;',
            '\\imaginaryI': '&#x2148;',
            '\\differentialD': '&#x2146;',
            '\\capitalDifferentialD': '&#x2145;',
            '\\alpha': '&#x03b1;',
            '\\pi': '&#x03c0;',
            '\\infty': '&#x221e;',
            '\\forall': '&#x2200;',
            '\\nexists': '&#x2204;',
            '\\exists': '&#x2203;',
            '\\hbar': '\u210f',
            '\\cdotp': '\u22c5',
            '\\ldots': '\u2026',
            '\\cdots': '\u22ef',
            '\\ddots': '\u22f1',
            '\\vdots': '\u22ee',
            '\\ldotp': '\u002e',
        };
        const MATH_VARIANTS = {
            cal: 'script',
            frak: 'fraktur',
            bb: 'double-struck',
            scr: 'script',
            cmtt: 'monospace',
            cmss: 'sans-serif',
        };
        const SPACING = {
            '\\!': -3 / 18,
            '\\ ': 6 / 18,
            '\\,': 3 / 18,
            '\\:': 4 / 18,
            '\\;': 5 / 18,
            '\\enspace': 0.5,
            '\\quad': 1,
            '\\qquad': 2,
            '\\enskip': 0.5,
        };
        let result = '';
        let sep = '';
        let col, row, i;
        let underscript, overscript, body;
        let variant = MATH_VARIANTS[atom.fontFamily || atom.font] || '';
        if (variant) {
            variant = ' mathvariant="' + variant + '"';
        }
        const command = atom.symbol;
        if (atom.mode === 'text') {
            result = '<mi' + makeID$1(atom.id, options) + '>' + atom.body + '</mi>';
        }
        else {
            switch (atom.type) {
                case 'first':
                    break; // nothing to do
                case 'group':
                case 'root':
                    result = toMathML(atom.body, 0, 0, options).mathML;
                    break;
                case 'array':
                    if ((atom.leftDelim && atom.leftDelim !== '.') ||
                        (atom.rightDelim && atom.rightDelim !== '.')) {
                        result += '<mrow>';
                        if (atom.leftDelim && atom.leftDelim !== '.') {
                            result +=
                                '<mo>' +
                                    (SPECIAL_OPERATORS[atom.leftDelim] ||
                                        atom.leftDelim) +
                                    '</mo>';
                        }
                    }
                    result += '<mtable';
                    if (atom.colFormat) {
                        result += ' columnalign="';
                        for (i = 0; i < atom.colFormat.length; i++) {
                            if (atom.colFormat[i].align) {
                                result +=
                                    { l: 'left', c: 'center', r: 'right' }[atom.colFormat[i].align] + ' ';
                            }
                        }
                        result += '"';
                    }
                    result += '>';
                    for (row = 0; row < atom.array.length; row++) {
                        result += '<mtr>';
                        for (col = 0; col < atom.array[row].length; col++) {
                            result +=
                                '<mtd>' +
                                    toMathML(atom.array[row][col], 0, 0, options)
                                        .mathML +
                                    '</mtd>';
                        }
                        result += '</mtr>';
                    }
                    result += '</mtable>';
                    if ((atom.leftDelim && atom.leftDelim !== '.') ||
                        (atom.rightDelim && atom.rightDelim !== '.')) {
                        if (atom.rightDelim && atom.rightDelim !== '.') {
                            result +=
                                '<mo>' +
                                    (SPECIAL_OPERATORS[atom.leftDelim] ||
                                        atom.rightDelim) +
                                    '</mo>';
                        }
                        result += '</mrow>';
                    }
                    break;
                case 'genfrac':
                    if (atom.leftDelim || atom.rightDelim) {
                        result += '<mrow>';
                    }
                    if (atom.leftDelim && atom.leftDelim !== '.') {
                        result +=
                            '<mo' +
                                makeID$1(atom.id, options) +
                                '>' +
                                (SPECIAL_OPERATORS[atom.leftDelim] || atom.leftDelim) +
                                '</mo>';
                    }
                    if (atom.hasBarLine) {
                        result += '<mfrac>';
                        result +=
                            toMathML(atom.numer, 0, 0, options).mathML ||
                                '<mi>&nbsp;</mi>';
                        result +=
                            toMathML(atom.denom, 0, 0, options).mathML ||
                                '<mi>&nbsp;</mi>';
                        result += '</mfrac>';
                    }
                    else {
                        // No bar line, i.e. \choose, etc...
                        result += '<mtable' + makeID$1(atom.id, options) + '>';
                        result +=
                            '<mtr>' +
                                toMathML(atom.numer, 0, 0, options).mathML +
                                '</mtr>';
                        result +=
                            '<mtr>' +
                                toMathML(atom.denom, 0, 0, options).mathML +
                                '</mtr>';
                        result += '</mtable>';
                    }
                    if (atom.rightDelim && atom.rightDelim !== '.') {
                        result +=
                            '<mo' +
                                makeID$1(atom.id, options) +
                                '>' +
                                (SPECIAL_OPERATORS[atom.rightDelim] ||
                                    atom.rightDelim) +
                                '</mo>';
                    }
                    if (atom.leftDelim || atom.rightDelim) {
                        result += '</mrow>';
                    }
                    break;
                case 'surd':
                    if (atom.index) {
                        result += '<mroot' + makeID$1(atom.id, options) + '>';
                        result += toMathML(atom.body, 0, 0, options).mathML;
                        result += toMathML(atom.index, 0, 0, options).mathML;
                        result += '</mroot>';
                    }
                    else {
                        result += '<msqrt' + makeID$1(atom.id, options) + '>';
                        result += toMathML(atom.body, 0, 0, options).mathML;
                        result += '</msqrt>';
                    }
                    break;
                case 'leftright':
                    // TODO: could add fence=true attribute
                    result = '<mrow>';
                    if (atom.leftDelim && atom.leftDelim !== '.') {
                        result +=
                            '<mo' +
                                makeID$1(atom.id, options) +
                                '>' +
                                (SPECIAL_OPERATORS[atom.leftDelim] || atom.leftDelim) +
                                '</mo>';
                    }
                    if (atom.body) {
                        result += toMathML(atom.body, 0, 0, options).mathML;
                    }
                    if (atom.rightDelim && atom.rightDelim !== '.') {
                        result +=
                            '<mo' +
                                makeID$1(atom.id, options) +
                                '>' +
                                (SPECIAL_OPERATORS[atom.rightDelim] ||
                                    atom.rightDelim) +
                                '</mo>';
                    }
                    result += '</mrow>';
                    break;
                case 'sizeddelim':
                case 'delim':
                    result +=
                        '<mo separator="true"' +
                            makeID$1(atom.id, options) +
                            '>' +
                            (SPECIAL_OPERATORS[atom.delim] || atom.delim) +
                            '</mo>';
                    break;
                case 'accent':
                    result +=
                        '<mover accent="true"' + makeID$1(atom.id, options) + '>';
                    result += toMathML(atom.body, 0, 0, options).mathML;
                    result +=
                        '<mo>' +
                            (SPECIAL_OPERATORS[command] || atom.accent) +
                            '</mo>';
                    result += '</mover>';
                    break;
                case 'line':
                case 'overlap':
                    break;
                case 'overunder':
                    overscript = atom.overscript;
                    underscript = atom.underscript;
                    if ((atom.svgAbove || overscript) &&
                        (atom.svgBelow || underscript)) {
                        body = atom.body;
                    }
                    else if (overscript) {
                        body = atom.body;
                        if ((_b = (_a = atom.body) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.underscript) {
                            underscript = atom.body[0].underscript;
                            body = atom.body[0].body;
                        }
                        else if (((_c = atom === null || atom === void 0 ? void 0 : atom.body[0]) === null || _c === void 0 ? void 0 : _c.type) === 'first' && ((_d = atom === null || atom === void 0 ? void 0 : atom.body[1]) === null || _d === void 0 ? void 0 : _d.underscript)) {
                            underscript = atom.body[1].underscript;
                            body = atom.body[1].body;
                        }
                    }
                    else if (underscript) {
                        body = atom.body;
                        if ((_f = (_e = atom === null || atom === void 0 ? void 0 : atom.body) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.overscript) {
                            overscript = atom.body[0].overscript;
                            body = atom.body[0].body;
                        }
                        else if (((_g = atom === null || atom === void 0 ? void 0 : atom.body[0]) === null || _g === void 0 ? void 0 : _g.type) === 'first' && ((_h = atom === null || atom === void 0 ? void 0 : atom.body[1]) === null || _h === void 0 ? void 0 : _h.overscript)) {
                            overscript = atom.body[1].overscript;
                            body = atom.body[1].body;
                        }
                    }
                    if ((atom.svgAbove || overscript) &&
                        (atom.svgBelow || underscript)) {
                        result += `<munderover ${variant} ${makeID$1(atom.id, options)}>`;
                        result +=
                            SVG_CODE_POINTS[atom.svgBody] ||
                                toMathML(body, 0, 0, options).mathML;
                        result +=
                            SVG_CODE_POINTS[atom.svgBelow] ||
                                toMathML(underscript, 0, 0, options).mathML;
                        result +=
                            SVG_CODE_POINTS[atom.svgAbove] ||
                                toMathML(overscript, 0, 0, options).mathML;
                        result += '</munderover>';
                    }
                    else if (atom.svgAbove || overscript) {
                        result +=
                            `<mover ${variant} ${makeID$1(atom.id, options)}>` +
                                (SVG_CODE_POINTS[atom.svgBody] ||
                                    toMathML(body, 0, 0, options).mathML);
                        result +=
                            SVG_CODE_POINTS[atom.svgAbove] ||
                                toMathML(overscript, 0, 0, options).mathML;
                        result += '</mover>';
                    }
                    else if (atom.svgBelow || underscript) {
                        result +=
                            `<munder ${variant} ${makeID$1(atom.id, options)}>` +
                                (SVG_CODE_POINTS[atom.svgBody] ||
                                    toMathML(body, 0, 0, options).mathML);
                        result +=
                            SVG_CODE_POINTS[atom.svgBelow] ||
                                toMathML(underscript, 0, 0, options).mathML;
                        result += '</munder>';
                    }
                    break;
                case 'placeholder': // no real equivalent in MathML -- will generate a '?'qq
                case 'mord': {
                    result =
                        SPECIAL_IDENTIFIERS[command] ||
                            command ||
                            (typeof atom.body === 'string' ? atom.body : '');
                    const m = command
                        ? command.match(/[{]?\\char"([0-9abcdefABCDEF]*)[}]?/)
                        : null;
                    if (m) {
                        // It's a \char command
                        result = '&#x' + m[1] + ';';
                    }
                    else if (result.length > 0 && result.charAt(0) === '\\') {
                        // This is an identifier with no special handling. Use the
                        // Unicode value
                        if (typeof atom.body === 'string' &&
                            atom.body.charCodeAt(0) > 255) {
                            result =
                                '&#x' +
                                    ('000000' + atom.body.charCodeAt(0).toString(16)).substr(-4) +
                                    ';';
                        }
                        else if (typeof atom.body === 'string') {
                            result = atom.body.charAt(0);
                        }
                        else {
                            result = atom.body;
                        }
                    }
                    const tag = /\d/.test(result) ? 'mn' : 'mi';
                    result =
                        '<' +
                            tag +
                            variant +
                            makeID$1(atom.id, options) +
                            '>' +
                            xmlEscape(result) +
                            '</' +
                            tag +
                            '>';
                    break;
                }
                case 'mbin':
                case 'mrel':
                case 'textord':
                case 'minner':
                    if (command && SPECIAL_IDENTIFIERS[command]) {
                        // Some 'textord' are actually identifiers. Check them here.
                        result =
                            '<mi' +
                                makeID$1(atom.id, options) +
                                '>' +
                                SPECIAL_IDENTIFIERS[command] +
                                '</mi>';
                    }
                    else if (command && SPECIAL_OPERATORS[command]) {
                        result =
                            '<mo' +
                                makeID$1(atom.id, options) +
                                '>' +
                                SPECIAL_OPERATORS[command] +
                                '</mo>';
                    }
                    else {
                        result = toMo(atom, options);
                    }
                    break;
                case 'mpunct':
                    result =
                        '<mo separator="true"' +
                            makeID$1(atom.id, options) +
                            '>' +
                            (SPECIAL_OPERATORS[command] || command) +
                            '</mo>';
                    break;
                case 'mop':
                    if (atom.body !== '\u200b') {
                        // Not ZERO-WIDTH
                        result = '<mo' + makeID$1(atom.id, options) + '>';
                        if (command === '\\operatorname') {
                            result += atom.body;
                        }
                        else {
                            result += command || atom.body;
                        }
                        result += '</mo>';
                    }
                    break;
                case 'mathstyle':
                    // TODO: mathstyle is a switch. Need to figure out its scope to properly wrap it around a <mstyle> tag
                    // if (atom.mathstyle === 'displaystyle') {
                    //     result += '<mstyle displaystyle="true">';
                    //     result += '</mstyle>';
                    // } else {
                    //     result += '<mstyle displaystyle="false">';
                    //     result += '</mstyle>';
                    // };
                    break;
                case 'box':
                    result = '<menclose notation="box"';
                    if (atom.backgroundcolor) {
                        result +=
                            ' mathbackground="' +
                                stringToColor(atom.backgroundcolor) +
                                '"';
                    }
                    result +=
                        makeID$1(atom.id, options) +
                            '>' +
                            toMathML(atom.body, 0, 0, options).mathML +
                            '</menclose>';
                    break;
                case 'spacing':
                    result += '<mspace width="' + (SPACING[command] || 0) + 'em"/>';
                    break;
                case 'enclose':
                    result = '<menclose notation="';
                    for (const notation in atom.notation) {
                        if (Object.prototype.hasOwnProperty.call(atom.notation, notation) &&
                            atom.notation[notation]) {
                            result += sep + notation;
                            sep = ' ';
                        }
                    }
                    result +=
                        makeID$1(atom.id, options) +
                            '">' +
                            toMathML(atom.body, 0, 0, options).mathML +
                            '</menclose>';
                    break;
                case 'space':
                    result += '&nbsp;';
                    break;
                default:
                    console.log('In conversion to MathML, unknown type : ' + atom.type);
            }
        }
        return result;
    }
    function atomsToMathML(atoms, options) {
        return toMathML(atoms, 0, 0, options).mathML;
    }

    /*
     * Return a hash (32-bit integer) representing the content of the mathfield
     * (but not the selection state)
     */
    function hash(latex) {
        let result = 0;
        for (let i = 0; i < latex.length; i++) {
            result = result * 31 + latex.charCodeAt(i);
            result = result | 0; // Force it to a 32-bit number
        }
        return Math.abs(result);
    }
    function requestUpdate(mathfield) {
        if (!mathfield.dirty) {
            mathfield.dirty = true;
            requestAnimationFrame(() => {
                if (isValidMathfield(mathfield) && mathfield.dirty) {
                    render(mathfield);
                }
            });
        }
    }
    /**
     * Lay-out the mathfield and generate the DOM.
     *
     * This is usually done automatically, but if the font-size, or other geometric
     * attributes are modified, outside of MathLive, this function may need to be
     * called explicitly.
     *
     */
    function render(mathfield, renderOptions) {
        renderOptions = renderOptions !== null && renderOptions !== void 0 ? renderOptions : {};
        mathfield.dirty = false;
        //
        // 1. Stop and reset read aloud state
        //
        if (!window['mathlive']) {
            window['mathlive'] = {};
        }
        //
        // 2. Validate selection
        //
        if (!getAnchor(mathfield.model)) {
            console.warn('Invalid selection, resetting it. ' +
                pathToString(mathfield.model.path));
            mathfield.model.path = [{ relation: 'body', offset: 0 }];
        }
        //
        // 3. Update selection state and blinking cursor (caret)
        //
        mathfield.model.root.forEach((a) => {
            a.caret = '';
            a.isSelected = false;
            a.containsCaret = false;
        });
        const hasFocus = mathfield.$hasFocus();
        if (selectionIsCollapsed(mathfield.model)) {
            getAnchor(mathfield.model).caret =
                hasFocus && !mathfield.config.readOnly ? mathfield.mode : '';
        }
        else {
            forEachSelected(mathfield.model, (a) => {
                a.isSelected = true;
            });
        }
        if (hasFocus && !mathfield.config.readOnly) {
            let ancestor = mathfield.model.ancestor(1);
            let i = 1;
            let done = false;
            while (ancestor && !done) {
                if (ancestor.type === 'surd' || ancestor.type === 'leftright') {
                    ancestor.containsCaret = true;
                    done = true;
                }
                i += 1;
                ancestor = mathfield.model.ancestor(i);
            }
        }
        //
        // 4. Create spans corresponding to the updated mathlist
        //
        const spans = decompose({
            mathstyle: MATHSTYLES.displaystyle,
            letterShapeStyle: mathfield.config.letterShapeStyle,
            atomIdsSettings: {
                // Using the hash as a seed for the ID
                // keeps the IDs the same until the content of the field changes.
                seed: hash(mathfield.model.root.toLatex(false)),
                // The `groupNumbers` flag indicates that extra spans should be generated
                // to represent group of atoms, for example, a span to group
                // consecutive digits to represent a number.
                groupNumbers: renderOptions.forHighlighting,
            },
            smartFence: mathfield.config.smartFence,
            macros: mathfield.config.macros,
        }, mathfield.model.root);
        //
        // 5. Construct struts around the spans
        //
        const base = makeSpan(spans, 'ML__base');
        base.attributes = {
            // Sometimes Google Translate kicks in an attempts to 'translate' math
            // This doesn't work very well, so turn off translate
            translate: 'no',
            // Hint to screen readers to not attempt to read this span
            // They should use instead the 'aria-label' below.
            'aria-hidden': 'true',
        };
        const wrapper = makeStruts(base, 'ML__mathlive');
        //
        // 6. Generate markup and accessible node
        //
        mathfield.field.innerHTML = mathfield.config.createHTML(wrapper.toMarkup(0, mathfield.config.horizontalSpacingScale));
        mathfield.field.classList.toggle('ML__focused', hasFocus && !mathfield.config.readOnly);
        mathfield.accessibleNode.innerHTML = mathfield.config.createHTML('<math xmlns="http://www.w3.org/1998/Math/MathML">' +
            atomsToMathML(mathfield.model.root, mathfield.config) +
            '</math>');
        //mathfield.ariaLiveText.textContent = "";
        //
        // 7. Calculate selection rectangle
        //
        const selectionRect = getSelectionBounds(mathfield.field);
        if (selectionRect !== null) {
            const selectionElement = document.createElement('div');
            selectionElement.classList.add('ML__selection');
            selectionElement.style.position = 'absolute';
            selectionElement.style.left =
                Number(selectionRect.left).toString() + 'px';
            selectionElement.style.top =
                Number(selectionRect.top).toString() + 'px';
            selectionElement.style.width =
                Number(Math.ceil(selectionRect.right - selectionRect.left)).toString() + 'px';
            selectionElement.style.height =
                Number(Math.ceil(selectionRect.bottom - selectionRect.top - 1)).toString() + 'px';
            mathfield.field.insertBefore(selectionElement, mathfield.field.childNodes[0]);
        }
    }

    // @revisit: move to mathfield.vibrate()
    const HAPTIC_FEEDBACK_DURATION = 3; // in ms
    const COMMANDS = {};
    function register$2(commands, options) {
        options = options !== null && options !== void 0 ? options : { target: 'mathfield', canUndo: false };
        Object.keys(commands).forEach((selector) => {
            console.assert(!COMMANDS[selector], 'Selector already defined: ', selector);
            COMMANDS[selector] = { ...options, fn: commands[selector] };
        });
    }
    function perform(mathfield, command) {
        var _a;
        if (!command) {
            return false;
        }
        let selector;
        let args = [];
        let handled = false;
        let dirty = false;
        if (isArray(command)) {
            selector = command[0];
            args = command.slice(1);
        }
        else {
            selector = command;
        }
        // Convert kebab case (like-this) to camel case (likeThis).
        selector = selector.replace(/-\w/g, (m) => m[1].toUpperCase());
        if (((_a = COMMANDS[selector]) === null || _a === void 0 ? void 0 : _a.target) === 'model') {
            if (/^(delete|transpose|add)/.test(selector)) {
                mathfield.resetKeystrokeBuffer();
            }
            if (/^(delete|transpose|add)/.test(selector) &&
                mathfield.mode !== 'command') {
                // Update the undo state to account for the current selection
                mathfield.popUndoStack();
                mathfield.snapshot();
            }
            COMMANDS[selector].fn(mathfield.model, ...args);
            if (/^(delete|transpose|add)/.test(selector) &&
                mathfield.mode !== 'command') {
                mathfield.snapshot();
            }
            if (/^(delete)/.test(selector) && mathfield.mode === 'command') {
                const command = extractCommandStringAroundInsertionPoint(mathfield.model);
                const suggestions = suggest(command);
                if (suggestions.length === 0) {
                    hidePopover(mathfield);
                }
                else {
                    showPopoverWithLatex(mathfield, suggestions[0].match, suggestions.length > 1);
                }
            }
            dirty = true;
            handled = true;
        }
        else if (COMMANDS[selector]) {
            dirty = COMMANDS[selector].fn(mathfield, ...args);
            handled = true;
        }
        else {
            throw Error('Unknown command "' + selector + '"');
        }
        // If the command changed the selection so that it is no longer
        // collapsed, or if it was an editing command, reset the inline
        // shortcut buffer and the user style
        if (!selectionIsCollapsed(mathfield.model) ||
            /^(transpose|paste|complete|((moveToNextChar|moveToPreviousChar|extend).*))_$/.test(selector)) {
            mathfield.resetKeystrokeBuffer();
            mathfield.style = {};
        }
        // Render the mathlist
        if (dirty) {
            requestUpdate(mathfield);
        }
        return handled;
    }
    /**
     * Perform a command, but:
     * * focus the mathfield
     * * provide haptic and audio feedback
     * This is used by the virtual keyboard when command keys (delete, arrows, etc..)
     * are pressed.
     */
    function performWithFeedback(mathfield, selector) {
        // @revisit: have a registry of commands -> sound
        mathfield.$focus();
        if (mathfield.config.keypressVibration && (navigator === null || navigator === void 0 ? void 0 : navigator.vibrate)) {
            navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
        }
        // Convert kebab case to camel case.
        selector = selector.replace(/-\w/g, (m) => m[1].toUpperCase());
        if (selector === 'moveToNextPlaceholder' ||
            selector === 'moveToPreviousPlaceholder' ||
            selector === 'complete') {
            if (mathfield.returnKeypressSound) {
                mathfield.returnKeypressSound.load();
                mathfield.returnKeypressSound
                    .play()
                    .catch((err) => console.warn(err));
            }
            else if (mathfield.keypressSound) {
                mathfield.keypressSound.load();
                mathfield.keypressSound.play().catch((err) => console.warn(err));
            }
        }
        else if (selector === 'deletePreviousChar' ||
            selector === 'deleteNextChar' ||
            selector === 'deletePreviousWord' ||
            selector === 'deleteNextWord' ||
            selector === 'deleteToGroupStart' ||
            selector === 'deleteToGroupEnd' ||
            selector === 'deleteToMathFieldStart' ||
            selector === 'deleteToMathFieldEnd') {
            if (mathfield.deleteKeypressSound) {
                mathfield.deleteKeypressSound.load();
                mathfield.deleteKeypressSound
                    .play()
                    .catch((err) => console.warn(err));
            }
            else if (mathfield.keypressSound) {
                mathfield.keypressSound.load();
                mathfield.keypressSound.play().catch((err) => console.warn(err));
            }
        }
        else if (mathfield.keypressSound) {
            mathfield.keypressSound.load();
            mathfield.keypressSound.play().catch((err) => console.warn(err));
        }
        return mathfield.$perform(selector);
    }
    register$2({
        performWithFeedback: (mathfield, command) => performWithFeedback(mathfield, command),
    });

    /**
     * Join all the cells at the indicated row into a single mathlist
     */
    function arrayJoinColumns(row, separator = ',', style) {
        if (!row)
            return [];
        let result = [];
        let sep;
        for (let cell of row) {
            if (cell && cell.length > 0 && cell[0].type === 'first') {
                // Remove the 'first' atom, if present
                cell = cell.slice(1);
            }
            if (cell && cell.length > 0) {
                if (sep) {
                    result.push(sep);
                }
                else {
                    sep = new Atom('math', 'mpunct', separator, style);
                }
                result = result.concat(cell);
            }
        }
        return result;
    }
    /**
     * Join all the rows into a single atom list
     */
    function arrayJoinRows(array, separators = [';', ','], style) {
        let result = [];
        let sep;
        for (const row of array) {
            if (sep) {
                result.push(sep);
            }
            else {
                sep = new Atom('math', 'mpunct', separators[0], style);
            }
            result = result.concat(arrayJoinColumns(row, separators[1]));
        }
        return result;
    }
    /**
     * Return the number of non-empty cells in that column
     */
    function arrayColumnCellCount(array, col) {
        let result = 0;
        const colRow = { col: col, row: 0 };
        while (colRow.row < array.length) {
            const cell = arrayCell(array, colRow);
            if (cell && cell.length > 0) {
                let cellLen = cell.length;
                if (cell[0].type === 'first')
                    cellLen -= 1;
                if (cellLen > 0) {
                    result += 1;
                }
            }
            colRow.row += 1;
        }
        return result;
    }
    /**
     * Remove the indicated column from the array
     */
    function arrayRemoveColumn(array, col) {
        let row = 0;
        while (row < array.length) {
            if (array[row][col]) {
                array[row].splice(col, 1);
            }
            row += 1;
        }
    }
    /**
     * Remove the indicated row from the array
     */
    function arrayRemoveRow(array, row) {
        array.splice(row, 1);
    }
    /**
     * Return the first non-empty cell, row by row
     */
    function arrayFirstCellByRow(array) {
        const colRow = { col: 0, row: 0 };
        while (colRow.row < array.length && !arrayCell(array, colRow)) {
            colRow.row += 1;
        }
        return arrayCell(array, colRow) ? 'cell' + arrayIndex(array, colRow) : '';
    }
    /**
     * Internal primitive to add a column/row in a matrix
     */
    function addCell(model, where) {
        // This command is only applicable if we're in an array
        const parent = model.parent();
        if (parent && parent.type === 'array' && isArray(parent.array)) {
            const relation = model.relation();
            if (parent.array) {
                const colRow = arrayColRow(parent.array, relation);
                if (where === 'after row' || where === 'before row') {
                    // Insert a row
                    colRow.col = 0;
                    colRow.row = colRow.row + (where === 'after row' ? 1 : 0);
                    parent.array.splice(colRow.row, 0, [[]]);
                }
                else {
                    // Insert a column
                    colRow.col += where === 'after column' ? 1 : 0;
                    parent.array[colRow.row].splice(colRow.col, 0, []);
                }
                const cellIndex = arrayIndex(parent.array, colRow);
                model.path.pop();
                model.path.push({
                    relation: 'cell' + cellIndex.toString(),
                    offset: 0,
                });
                model.insertFirstAtom();
            }
        }
    }
    function convertParentToArray(model) {
        var _a;
        const parent = model.parent();
        if (parent.type === 'leftright') {
            parent.type = 'array';
            const envName = (_a = { '(': 'pmatrix', '\\lbrack': 'bmatrix', '\\lbrace': 'cases' }[parent.leftDelim]) !== null && _a !== void 0 ? _a : 'matrix';
            const env = getEnvironmentDefinition(envName);
            const array = [[parent.body]];
            Object.assign(parent, env.parser(envName, [], array));
            parent.mode = getAnchorMode(model);
            parent.environmentName = envName;
            parent.array = array;
            parent.rowGaps = [0];
            delete parent.body;
            model.path[model.path.length - 1].relation = 'cell0';
        }
        // Note: could also be a group, or we could be a subscript or an
        // underscript (for multi-valued conditions on a \sum, for example)
        // Or if at root, this could be a 'align*' environment
    }
    function addRowAfter(model) {
        contentWillChange(model);
        convertParentToArray(model);
        addCell(model, 'after row');
        contentDidChange(model);
        return true;
    }
    function addRowBefore(model) {
        contentWillChange(model);
        convertParentToArray(model);
        addCell(model, 'before row');
        contentDidChange(model);
        return true;
    }
    function addColumnAfter(model) {
        contentWillChange(model);
        convertParentToArray(model);
        addCell(model, 'after column');
        contentDidChange(model);
        return true;
    }
    function addColumnBefore(model) {
        contentWillChange(model);
        convertParentToArray(model);
        addCell(model, 'before column');
        contentDidChange(model);
        return true;
    }
    register$2({
        addRowAfter: addRowAfter,
        addColumnAfter: addColumnAfter,
        addRowBefore: addRowBefore,
        addColumnBefore: addColumnBefore,
    }, { target: 'model', category: 'array-edit' });

    /**
     * @param dir If the selection is not collapsed, and dir is
     * negative, delete backwards, starting with the anchor atom.
     * That is, delete(-1) will delete only the anchor atom.
     * If dir = 0, delete only if the selection is not collapsed
     */
    function delete_(model, dir = 0) {
        // Dispatch notifications
        contentWillChange(model);
        selectionWillChange(model);
        const contentWasChanging = model.suppressChangeNotifications;
        model.suppressChangeNotifications = true;
        dir = dir < 0 ? -1 : dir > 0 ? +1 : dir;
        removeSuggestion(model);
        if (model.parent().array) {
            if (dir < 0 && model.startOffset() === 0) {
                const array = model.parent().array;
                if (arrayFirstCellByRow(array) === model.relation()) {
                    // (1) First cell:
                    // delete array, replace it with linearized content
                    const atoms = arrayJoinRows(array);
                    model.path.pop();
                    model.siblings().splice(model.anchorOffset(), 1, ...atoms);
                    setSelection(model, model.anchorOffset() - 1, atoms.length);
                }
                else {
                    const colRow = arrayColRow(array, model.relation());
                    if (colRow.col === 0) {
                        // (2) First (non-empty) column (but not first row):
                        // Move to the end of the last cell of the previous row
                        const dest = arrayAdjustRow(array, colRow, -1);
                        dest.col = array[dest.row].length - 1;
                        model.path[model.path.length - 1].relation =
                            'cell' + arrayIndex(array, dest);
                        const destLength = array[dest.row][dest.col].length;
                        // (2.1) Linearize it and merge it with last cell of previous row
                        // (note that atoms could be empty if there are no non-empty
                        // cells left in the row)
                        const atoms = arrayJoinColumns(array[colRow.row]);
                        array[dest.row][dest.col] = array[dest.row][dest.col].concat(atoms);
                        setSelection(model, destLength - 1, atoms.length);
                        // (2.2) Remove row
                        arrayRemoveRow(array, colRow.row);
                    }
                    else {
                        // (3) Non-first column
                        // (3.1) If column is empty, remove it
                        if (arrayColumnCellCount(array, colRow.col) === 0) {
                            arrayRemoveColumn(array, colRow.col);
                            colRow.col -= 1;
                            model.path[model.path.length - 1].relation =
                                'cell' + arrayIndex(array, colRow);
                            const destCell = array[colRow.row][colRow.col];
                            setSelection(model, destCell.length - 1, 0);
                        }
                        // (3.2) merge cell with cell in previous column
                    }
                }
                // Dispatch notifications
                model.suppressChangeNotifications = contentWasChanging;
                selectionDidChange(model);
                contentDidChange(model);
                return;
            }
        }
        const siblings = model.siblings();
        if (!selectionIsCollapsed(model)) {
            // There is a selection extent. Delete all the atoms within it.
            const first = model.startOffset() + 1;
            const last = model.endOffset() + 1;
            model.announce('deleted', null, siblings.slice(first, last));
            siblings.splice(first, last - first);
            // Adjust the anchor
            setSelection(model, first - 1);
        }
        else {
            const anchorOffset = model.anchorOffset();
            if (dir < 0) {
                if (anchorOffset !== 0) {
                    // We're not at the begining of the sibling list.
                    // If the previous sibling is a compound (fractions, group),
                    // just move into it, otherwise delete it
                    const sibling = model.sibling(0);
                    if (sibling.type === 'leftright') {
                        sibling.rightDelim = '?';
                        move(model, -1);
                    }
                    else if (!sibling.captureSelection &&
                        /^(group|array|genfrac|surd|leftright|overlap|overunder|box|mathstyle|sizing)$/.test(sibling.type)) {
                        move(model, -1);
                    }
                    else {
                        model.announce('deleted', null, siblings.slice(anchorOffset, anchorOffset + 1));
                        siblings.splice(anchorOffset, 1);
                        setSelection(model, anchorOffset - 1);
                    }
                }
                else {
                    // We're at the beginning of the sibling list.
                    // Delete what comes before
                    const relation = model.relation();
                    if (relation === 'superscript' || relation === 'subscript') {
                        const supsub = model
                            .parent()[relation].filter((atom) => atom.type !== 'placeholder' &&
                            atom.type !== 'first');
                        model.parent()[relation] = null;
                        model.path.pop();
                        // Array.prototype.splice.apply(
                        //     model.siblings(),
                        //     [model.anchorOffset(), 0].concat(supsub)
                        // );
                        // @revisit
                        model.siblings().splice(model.anchorOffset(), 0, ...supsub);
                        setSelection(model, model.anchorOffset() - 1);
                        model.announce('deleted: ' + relation);
                    }
                    else if (relation === 'denom') {
                        // Fraction denominator
                        const numer = model
                            .parent()
                            .numer.filter((atom) => atom.type !== 'placeholder' &&
                            atom.type !== 'first');
                        const denom = model
                            .parent()
                            .denom.filter((atom) => atom.type !== 'placeholder' &&
                            atom.type !== 'first');
                        model.path.pop();
                        // Array.prototype.splice.apply(
                        //     model.siblings(),
                        //     [model.anchorOffset(), 1].concat(denom)
                        // );
                        // @revisit
                        model.siblings().splice(model.anchorOffset(), 1, ...denom);
                        // Array.prototype.splice.apply(
                        //     model.siblings(),
                        //     [model.anchorOffset(), 0].concat(numer)
                        // );
                        // @revisit
                        model.siblings().splice(model.anchorOffset(), 0, ...numer);
                        setSelection(model, model.anchorOffset() + numer.length - 1);
                        model.announce('deleted: denominator');
                    }
                    else if (relation === 'body') {
                        const body = model
                            .siblings()
                            .filter((atom) => atom.type !== 'placeholder');
                        if (model.path.length > 1) {
                            body.shift(); // Remove the 'first' atom
                            model.path.pop();
                            // Array.prototype.splice.apply(
                            //     model.siblings(),
                            //     [model.anchorOffset(), 1].concat(body)
                            // );
                            // @revisit
                            model
                                .siblings()
                                .splice(model.anchorOffset(), 1, ...body);
                            setSelection(model, model.anchorOffset() - 1);
                            model.announce('deleted: root');
                        }
                    }
                    else {
                        move(model, -1);
                        deleteChar(model, -1);
                    }
                }
            }
            else if (dir > 0) {
                if (anchorOffset !== siblings.length - 1) {
                    if (/^(group|array|genfrac|surd|leftright|overlap|overunder|box|mathstyle|sizing)$/.test(model.sibling(1).type)) {
                        move(model, +1);
                    }
                    else {
                        model.announce('deleted', null, siblings.slice(anchorOffset + 1, anchorOffset + 2));
                        siblings.splice(anchorOffset + 1, 1);
                    }
                }
                else {
                    // We're at the end of the sibling list, delete what comes next
                    const relation = model.relation();
                    if (relation === 'numer') {
                        const numer = model
                            .parent()
                            .numer.filter((atom) => atom.type !== 'placeholder' &&
                            atom.type !== 'first');
                        const denom = model
                            .parent()
                            .denom.filter((atom) => atom.type !== 'placeholder' &&
                            atom.type !== 'first');
                        model.path.pop();
                        // Array.prototype.splice.apply(
                        //     model.siblings(),
                        //     [model.anchorOffset(), 1].concat(denom)
                        // );
                        // Array.prototype.splice.apply(
                        //     model.siblings(),
                        //     [model.anchorOffset(), 0].concat(numer)
                        // );
                        // @revisit
                        model.siblings().splice(model.anchorOffset(), 1, ...denom);
                        model.siblings().splice(model.anchorOffset(), 0, ...numer);
                        setSelection(model, model.anchorOffset() + numer.length - 1);
                        model.announce('deleted: numerator');
                    }
                    else {
                        move(model, 1);
                        deleteChar(model, -1);
                    }
                }
            }
        }
        // Something has been deleted and the parent latex is no longer valid
        invalidateVerbatimLatex(model);
        // Dispatch notifications
        model.suppressChangeNotifications = contentWasChanging;
        selectionDidChange(model);
        contentDidChange(model);
    }
    /**
     * Delete sibling atoms
     */
    function deleteAtoms(model, count) {
        if (count > 0) {
            model.siblings().splice(model.anchorOffset() + 1, count);
        }
        else {
            model.siblings().splice(model.anchorOffset() + count + 1, -count);
            setSelection(model, model.anchorOffset() + count);
        }
    }
    /**
     * Delete the selection, or multiple characters
     */
    function deleteChar(model, count = 0) {
        if (count === 0) {
            delete_(model, 0);
        }
        else if (count > 0) {
            while (count > 0) {
                delete_(model, +1);
                count--;
            }
        }
        else {
            while (count < 0) {
                delete_(model, -1);
                count++;
            }
        }
        return true;
    }

    /**
     * These shortcut strings are replaced with the corresponding LaTeX expression
     * without requiring an escape sequence or command.
     */
    const INLINE_SHORTCUTS = {
        // Primes
        "''": { mode: 'math', value: '^{\\doubleprime}' },
        // Greek letters
        alpha: '\\alpha',
        delta: '\\delta',
        Delta: '\\Delta',
        pi: { mode: 'math', value: '\\pi' },
        'pi ': { mode: 'text', value: '\\pi ' },
        Pi: { mode: 'math', value: '\\Pi' },
        theta: '\\theta',
        Theta: '\\Theta',
        // Letter-like
        ii: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryI',
        },
        jj: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\imaginaryJ',
        },
        ee: {
            mode: 'math',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\exponentialE',
        },
        nabla: { mode: 'math', value: '\\nabla' },
        grad: { mode: 'math', value: '\\nabla' },
        del: { mode: 'math', value: '\\partial' },
        '\u221e': '\\infty',
        // '&infin;': '\\infty',
        // '&#8734;': '\\infty',
        oo: {
            mode: 'math',
            after: 'nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space',
            value: '\\infty',
        },
        // Big operators
        '∑': { mode: 'math', value: '\\sum' },
        sum: { mode: 'math', value: '\\sum_{#?}^{#?}' },
        prod: { mode: 'math', value: '\\prod_{#?}^{#?}' },
        sqrt: { mode: 'math', value: '\\sqrt' },
        // '∫':                    '\\int',             // There's a alt-B command for this
        '∆': { mode: 'math', value: '\\differentialD' },
        '∂': { mode: 'math', value: '\\differentialD' },
        // Functions
        arcsin: { mode: 'math', value: '\\arcsin' },
        arccos: { mode: 'math', value: '\\arccos' },
        arctan: { mode: 'math', value: '\\arctan' },
        sin: { mode: 'math', value: '\\sin' },
        sinh: { mode: 'math', value: '\\sinh' },
        cos: { mode: 'math', value: '\\cos' },
        cosh: { mode: 'math', value: '\\cosh' },
        tan: { mode: 'math', value: '\\tan' },
        tanh: { mode: 'math', value: '\\tanh' },
        sec: { mode: 'math', value: '\\sec' },
        csc: { mode: 'math', value: '\\csc' },
        cot: { mode: 'math', value: '\\cot' },
        log: { mode: 'math', value: '\\log' },
        ln: { mode: 'math', value: '\\ln' },
        exp: { mode: 'math', value: '\\exp' },
        lim: { mode: 'math', value: '\\lim_{#?}' },
        // Differentials
        // According to ISO31/XI (ISO 80000-2), differentials should be upright
        dx: {
            mode: 'math',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD x',
        },
        dy: {
            mode: 'math',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD y',
        },
        dt: {
            mode: 'math',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\differentialD t',
        },
        // Logic
        AA: { mode: 'math', value: '\\forall' },
        EE: { mode: 'math', value: '\\exists' },
        '!EE': { mode: 'math', value: '\\nexists' },
        '&&': { mode: 'math', value: '\\land' },
        // The shortcut for the greek letter "xi" is interfering with "x in"
        xin: {
            mode: 'math',
            after: 'nothing+text+relop+punct+openfence+space',
            value: 'x \\in',
        },
        in: {
            mode: 'math',
            after: 'nothing+letter+closefence',
            value: '\\in',
        },
        '!in': { mode: 'math', value: '\\notin' },
        // Sets
        NN: '\\N',
        ZZ: '\\Z',
        QQ: '\\Q',
        RR: '\\R',
        CC: '\\C',
        PP: '\\P',
        // Operators
        xx: { mode: 'math', value: '\\times' },
        '+-': { mode: 'math', value: '\\pm' },
        // Relational operators
        '!=': { mode: 'math', value: '\\ne' },
        '>=': { mode: 'math', value: '\\ge' },
        '<=': { mode: 'math', value: '\\le' },
        '<<': { mode: 'math', value: '\\ll' },
        '>>': { mode: 'math', value: '\\gg' },
        '~~': { mode: 'math', value: '\\approx' },
        // More operators
        '≈': { mode: 'math', value: '\\approx' },
        '?=': { mode: 'math', value: '\\questeq' },
        '÷': { mode: 'math', value: '\\div' },
        '¬': { mode: 'math', value: '\\neg' },
        ':=': { mode: 'math', value: '\\coloneq' },
        '::': { mode: 'math', value: '\\Colon' },
        // Fences
        '(:': { mode: 'math', value: '\\langle' },
        ':)': { mode: 'math', value: '\\rangle' },
        // More Greek letters
        beta: '\\beta',
        chi: '\\chi',
        epsilon: '\\epsilon',
        varepsilon: '\\varepsilon',
        eta: {
            mode: 'math',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\eta',
        },
        'eta ': {
            mode: 'text',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\eta ',
        },
        gamma: '\\gamma',
        Gamma: '\\Gamma',
        iota: '\\iota',
        kappa: '\\kappa',
        lambda: '\\lambda',
        Lambda: '\\Lambda',
        mu: {
            mode: 'math',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\mu',
        },
        'mu ': {
            mode: 'text',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\mu ',
        },
        nu: {
            mode: 'math',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\nu',
        },
        'nu ': {
            mode: 'text',
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\nu ',
        },
        µ: '\\mu',
        phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\phi',
        },
        Phi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Phi',
        },
        varphi: '\\varphi',
        psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\psi',
        },
        Psi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Psi',
        },
        rho: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\rho',
        },
        sigma: '\\sigma',
        Sigma: '\\Sigma',
        tau: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\tau',
        },
        vartheta: '\\vartheta',
        upsilon: '\\upsilon',
        xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\xi',
        },
        Xi: {
            after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
            value: '\\Xi',
        },
        zeta: '\\zeta',
        omega: '\\omega',
        Omega: '\\Omega',
        Ω: '\\omega',
        // More Logic
        forall: { mode: 'math', value: '\\forall' },
        exists: {
            mode: 'math',
            value: '\\exists',
        },
        '!exists': {
            mode: 'math',
            value: '\\nexists',
        },
        ':.': {
            mode: 'math',
            value: '\\therefore',
        },
        // MORE FUNCTIONS
        // 'arg': '\\arg',
        liminf: '\\operatorname*{lim~inf}_{#?}',
        limsup: '\\operatorname*{lim~sup}_{#?}',
        argmin: '\\operatorname*{arg~min}_{#?}',
        argmax: '\\operatorname*{arg~max}_{#?}',
        det: '\\det',
        mod: {
            mode: 'math',
            value: '\\mod',
        },
        max: {
            mode: 'math',
            value: '\\max',
        },
        min: {
            mode: 'math',
            value: '\\min',
        },
        erf: '\\operatorname{erf}',
        erfc: '\\operatorname{erfc}',
        bessel: {
            mode: 'math',
            value: '\\operatorname{bessel}',
        },
        mean: {
            mode: 'math',
            value: '\\operatorname{mean}',
        },
        median: {
            mode: 'math',
            value: '\\operatorname{median}',
        },
        fft: {
            mode: 'math',
            value: '\\operatorname{fft}',
        },
        lcm: {
            mode: 'math',
            value: '\\operatorname{lcm}',
        },
        gcd: {
            mode: 'math',
            value: '\\operatorname{gcd}',
        },
        randomReal: '\\operatorname{randomReal}',
        randomInteger: '\\operatorname{randomInteger}',
        Re: {
            mode: 'math',
            value: '\\operatorname{Re}',
        },
        Im: {
            mode: 'math',
            value: '\\operatorname{Im}',
        },
        // UNITS
        mm: {
            mode: 'math',
            after: 'nothing+digit',
            value: '\\operatorname{mm}',
        },
        cm: {
            mode: 'math',
            after: 'nothing+digit',
            value: '\\operatorname{cm}',
        },
        km: {
            mode: 'math',
            after: 'nothing+digit',
            value: '\\operatorname{km}',
        },
        kg: {
            mode: 'math',
            after: 'nothing+digit',
            value: '\\operatorname{kg}',
        },
        // '||':                   '\\lor',
        '...': '\\ldots',
        '+...': '+\\cdots',
        '-...': '-\\cdots',
        '->...': '\\to\\cdots',
        '->': '\\to',
        '|->': '\\mapsto',
        '-->': '\\longrightarrow',
        //    '<-':                   '\\leftarrow',
        '<--': '\\longleftarrow',
        '=>': '\\Rightarrow',
        '==>': '\\Longrightarrow',
        // '<=': '\\Leftarrow',     // CONFLICTS WITH LESS THAN OR EQUAL
        '<=>': '\\Leftrightarrow',
        '<->': '\\leftrightarrow',
        '(.)': '\\odot',
        '(+)': '\\oplus',
        '(/)': '\\oslash',
        '(*)': '\\otimes',
        '(-)': '\\ominus',
        // '(-)':                  '\\circleddash',
        '||': '\\Vert',
        '{': '\\{',
        '}': '\\}',
        '*': '\\cdot',
    };

    /**
     * Return an array of potential shortcuts
     */
    function getInlineShortcutsStartingWith(s, config) {
        const result = [];
        const skipDefaultShortcuts = config.overrideDefaultInlineShortcuts;
        for (let i = 0; i <= s.length - 1; i++) {
            const s2 = s.substring(i);
            if (!skipDefaultShortcuts) {
                Object.keys(INLINE_SHORTCUTS).forEach((key) => {
                    if (key.startsWith(s2) && !result.includes(key)) {
                        result.push(key);
                    }
                });
            }
            const customInlineShortcuts = (config === null || config === void 0 ? void 0 : config.inlineShortcuts) ? config.inlineShortcuts
                : null;
            if (customInlineShortcuts) {
                Object.keys(customInlineShortcuts).forEach((key) => {
                    if (key.startsWith(s2)) {
                        result.push(key);
                    }
                });
            }
        }
        return result;
    }
    /**
     *
     * @param siblings atoms preceding this potential shortcut
     */
    function validateShortcut(siblings, shortcut) {
        if (!shortcut)
            return '';
        // If it's a simple shortcut (no conditional), it's always valid
        if (typeof shortcut === 'string')
            return shortcut;
        // If we have no context, we assume all the shortcuts are valid
        if (!siblings)
            return shortcut.value;
        let nothing = false;
        let letter = false;
        let digit = false;
        let isFunction = false;
        let frac = false;
        let surd = false;
        let binop = false;
        let relop = false;
        let punct = false;
        let array = false;
        let openfence = false;
        let closefence = false;
        let text = false;
        let space = false;
        let sibling = siblings[siblings.length - 1];
        let index = siblings.length - 1;
        while (sibling && /msubsup|placeholder/.test(sibling.type)) {
            index -= 1;
            sibling = siblings[index];
        }
        nothing = !sibling || sibling.type === 'first'; // start of a group
        if (sibling) {
            if (typeof shortcut.mode !== 'undefined' &&
                sibling.mode !== shortcut.mode) {
                return '';
            }
            text = sibling.mode === 'text';
            letter =
                !text &&
                    sibling.type === 'mord' &&
                    LETTER.test(sibling.body);
            digit =
                !text &&
                    sibling.type === 'mord' &&
                    /[0-9]+$/.test(sibling.body);
            isFunction = !text && sibling.isFunction;
            frac = sibling.type === 'genfrac';
            surd = sibling.type === 'surd';
            binop = sibling.type === 'mbin';
            relop = sibling.type === 'mrel';
            punct = sibling.type === 'mpunct' || sibling.type === 'minner';
            array = Boolean(sibling.array);
            openfence = sibling.type === 'mopen';
            closefence = sibling.type === 'mclose' || sibling.type === 'leftright';
            space = sibling.type === 'space';
        }
        if (typeof shortcut.after !== 'undefined') {
            // If this is a conditional shortcut, consider the conditions now
            if ((/nothing/.test(shortcut.after) && nothing) ||
                (/letter/.test(shortcut.after) && letter) ||
                (/digit/.test(shortcut.after) && digit) ||
                (/function/.test(shortcut.after) && isFunction) ||
                (/frac/.test(shortcut.after) && frac) ||
                (/surd/.test(shortcut.after) && surd) ||
                (/binop/.test(shortcut.after) && binop) ||
                (/relop/.test(shortcut.after) && relop) ||
                (/punct/.test(shortcut.after) && punct) ||
                (/array/.test(shortcut.after) && array) ||
                (/openfence/.test(shortcut.after) && openfence) ||
                (/closefence/.test(shortcut.after) && closefence) ||
                (/text/.test(shortcut.after) && text) ||
                (/space/.test(shortcut.after) && space)) {
                return shortcut.value;
            }
            return '';
        }
        return shortcut.value;
    }
    /**
     *
     * @param context - atoms preceding the candidate, potentially used
     * to reduce which shortcuts are applicable. If 'null', no restrictions are
     * applied.
     * @param s - candidate inline shortcuts (e.g. `'pi'`)
     * @return A replacement string matching the shortcut (e.g. `'\pi'`)
     */
    function getInlineShortcut(context, s, shortcuts) {
        var _a;
        return validateShortcut(context, (_a = shortcuts === null || shortcuts === void 0 ? void 0 : shortcuts[s]) !== null && _a !== void 0 ? _a : INLINE_SHORTCUTS[s]);
    }

    /**
     * Attempts to parse and interpret a string in an unknown format, possibly
     * ASCIIMath and return a canonical LaTeX string.
     *
     * The format recognized are one of these variations:
     * - ASCIIMath: Only supports a subset
     * (1/2x)
     * 1/2sin x                     -> \frac {1}{2}\sin x
     * 1/2sinx                      -> \frac {1}{2}\sin x
     * (1/2sin x (x^(2+1))          // Unbalanced parentheses
     * (1/2sin(x^(2+1))             -> \left(\frac {1}{2}\sin \left(x^{2+1}\right)\right)
     * alpha + (pi)/(4)             -> \alpha +\frac {\pi }{4}
     * x=(-b +- sqrt(b^2 – 4ac))/(2a)
     * alpha/beta
     * sqrt2 + sqrtx + sqrt(1+a) + sqrt(1/2)
     * f(x) = x^2 "when" x >= 0
     * AA n in QQ
     * AA x in RR "," |x| > 0
     * AA x in RR "," abs(x) > 0
     *
     * - UnicodeMath (generated by Microsoft Word): also only supports a subset
     *      - See https://www.unicode.org/notes/tn28/UTN28-PlainTextMath-v3.1.pdf
     * √(3&x+1)
     * {a+b/c}
     * [a+b/c]
     * _a^b x
     * lim_(n->\infty) n
     * \iint_(a=0)^\infty  a
     *
     * - "JavaScript Latex": a variant that is LaTeX, but with escaped backslashes
     *  \\frac{1}{2} \\sin x
     */
    function parseMathString(s, options) {
        if (!s)
            return ['latex', ''];
        // Nothing to do if a single character
        if (s.length <= 1)
            return ['latex', s];
        if (!options || options.format !== 'ASCIIMath') {
            // This is not explicitly ASCIIMath. Try to infer if this is LaTex...
            // If the strings is surrounded by `$..$` or `$$..$$`, assumes it is LaTeX
            const trimedString = s.trim();
            if ((trimedString.startsWith('$$') && trimedString.endsWith('$$')) ||
                (trimedString.startsWith('\\[') && trimedString.endsWith('\\]')) ||
                (trimedString.startsWith('\\(') && trimedString.endsWith('\\)'))) {
                return [
                    'latex',
                    trimedString.substring(2, trimedString.length - 2),
                ];
            }
            if (trimedString.startsWith('$') && trimedString.endsWith('$')) {
                return [
                    'latex',
                    trimedString.substring(1, trimedString.length - 1),
                ];
            }
            // Replace double-backslash (coming from JavaScript) to a single one
            s = s.replace(/\\\\([^\s\n])/g, '\\$1');
            if (/\\/.test(s)) {
                // If the string includes a '\' it's probably a LaTeX string
                // (that's not completely true, it could be a UnicodeMath string, since
                // UnicodeMath supports some LaTeX commands. However, we need to pick
                // one in order to correctly interpret {} (which are argument delimiters
                // in LaTeX, and are fences in UnicodeMath)
                return ['latex', s];
            }
        }
        s = s.replace(/\u2061/gu, ''); // Remove function application
        s = s.replace(/\u3016/gu, '{'); // WHITE LENTICULAR BRACKET (grouping)
        s = s.replace(/\u3017/gu, '}'); // WHITE LENTICULAR BRACKET (grouping)
        s = s.replace(/([^\\])sinx/g, '$1\\sin x'); // common typo
        s = s.replace(/([^\\])cosx/g, '$1\\cos x '); // common typo
        s = s.replace(/\u2013/g, '-'); // EN-DASH, sometimes used as a minus sign
        return [
            (options === null || options === void 0 ? void 0 : options.format) || 'ASCIIMath',
            parseMathExpression(s, options !== null && options !== void 0 ? options : {}),
        ];
    }
    function parseMathExpression(s, options) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!s)
            return '';
        let done = false;
        let m;
        if (!done && (s[0] === '^' || s[0] === '_')) {
            // Superscript and subscript
            m = parseMathArgument(s.substr(1), {
                inlineShortcuts: (_a = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _a !== void 0 ? _a : {},
                noWrap: true,
            });
            s = s[0] + '{' + m.match + '}';
            s += parseMathExpression(m.rest, options);
            done = true;
        }
        if (!done) {
            m = s.match(/^(sqrt|\u221a)(.*)/);
            if (m) {
                // Square root
                m = parseMathArgument(m[2], {
                    inlineShortcuts: (_b = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _b !== void 0 ? _b : {},
                    noWrap: true,
                });
                s = '\\sqrt{' + m.match + '}';
                s += parseMathExpression(m.rest, options);
                done = true;
            }
        }
        if (!done) {
            m = s.match(/^(\\cbrt|\u221b)(.*)/);
            if (m) {
                // Cube root
                m = parseMathArgument(m[2], {
                    inlineShortcuts: (_c = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _c !== void 0 ? _c : {},
                    noWrap: true,
                });
                s = '\\sqrt[3]{' + m.match + '}';
                s += parseMathExpression(m.rest, options);
                done = true;
            }
        }
        if (!done) {
            m = s.match(/^abs(.*)/);
            if (m) {
                // Absolute value
                m = parseMathArgument(m[1], {
                    inlineShortcuts: (_d = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _d !== void 0 ? _d : {},
                    noWrap: true,
                });
                s = '\\left|' + m.match + '\\right|';
                s += parseMathExpression(m.rest, options);
                done = true;
            }
        }
        if (!done) {
            m = s.match(/^["”“](.*?)["”“](.*)/);
            if (m) {
                // Quoted text
                s = '\\text{' + m[1] + '}';
                s += parseMathExpression(m[2], options);
                done = true;
            }
        }
        if (!done) {
            m = s.match(/^([^a-zA-Z({[_^\\\s"]+)(.*)/);
            // A string of symbols...
            // Could be a binary or relational operator, etc...
            if (m) {
                s = paddedShortcut(m[1], options);
                s += parseMathExpression(m[2], options);
                done = true;
            }
        }
        if (!done && /^(f|g|h)[^a-zA-Z]/.test(s)) {
            // This could be a function...
            m = parseMathArgument(s.substring(1), {
                inlineShortcuts: (_e = options.inlineShortcuts) !== null && _e !== void 0 ? _e : {},
                noWrap: true,
            });
            if (s[1] === '(') {
                s = s[0] + '\\mleft(' + m.match + '\\mright)';
            }
            else {
                s = s[0] + m.match;
            }
            s += parseMathExpression(m.rest, options);
            done = true;
        }
        if (!done) {
            m = s.match(/^([a-zA-Z]+)(.*)/);
            if (m) {
                // Some alphabetical string...
                // Could be a function name (sin) or symbol name (alpha)
                s = paddedShortcut(m[1], options);
                s += parseMathExpression(m[2], options);
                done = true;
            }
        }
        if (!done) {
            m = parseMathArgument(s, {
                inlineShortcuts: (_f = options.inlineShortcuts) !== null && _f !== void 0 ? _f : {},
                noWrap: true,
            });
            if (m.match && m.rest[0] === '/') {
                // Fraction
                const m2 = parseMathArgument(m.rest.substr(1), {
                    inlineShortcuts: (_g = options.inlineShortcuts) !== null && _g !== void 0 ? _g : {},
                    noWrap: true,
                });
                if (m2.match) {
                    s =
                        '\\frac{' +
                            m.match +
                            '}{' +
                            m2.match +
                            '}' +
                            parseMathExpression(m2.rest, options);
                }
                done = true;
            }
            else if (m.match) {
                if (s[0] === '(') {
                    s =
                        '\\left(' +
                            m.match +
                            '\\right)' +
                            parseMathExpression(m.rest, options);
                }
                else {
                    s = m.match + parseMathExpression(m.rest, options);
                }
                done = true;
            }
        }
        if (!done) {
            m = s.match(/^(\s+)(.*)$/);
            // Whitespace
            if (m) {
                s = ' ' + parseMathExpression(m[2], options);
                done = true;
            }
        }
        return s;
    }
    /**
     * Parse a math argument, as defined by ASCIIMath and UnicodeMath:
     * - Either an expression fenced in (), {} or []
     * - a number (- sign, digits, decimal point, digits)
     * - a single [a-zA-Z] letter (an identifier)
     * - a multi-letter shortcut (e.g., pi)
     * - a LaTeX command (\pi) (for UnicodeMath)
     * @return
     * - match: the parsed (and converted) portion of the string that is an argument
     * - rest: the raw, unconverted, rest of the string
     */
    function parseMathArgument(s, options) {
        let match = '';
        s = s.trim();
        let rest = s;
        let lFence = s.charAt(0);
        let rFence = { '(': ')', '{': '}', '[': ']' }[lFence];
        if (rFence) {
            // It's a fence
            let level = 1;
            let i = 1;
            while (i < s.length && level > 0) {
                if (s[i] === lFence)
                    level++;
                if (s[i] === rFence)
                    level--;
                i++;
            }
            if (level === 0) {
                // We've found the matching closing fence
                if (options.noWrap && lFence === '(') {
                    match = parseMathExpression(s.substring(1, i - 1), options);
                }
                else {
                    if (lFence === '{' && rFence === '}') {
                        lFence = '\\{';
                        rFence = '\\}';
                    }
                    match =
                        '\\left' +
                            lFence +
                            parseMathExpression(s.substring(1, i - 1), options) +
                            '\\right' +
                            rFence;
                }
                rest = s.substring(i);
            }
            else {
                // Unbalanced fence...
                match = s.substring(1, i);
                rest = '';
            }
        }
        else {
            let m = s.match(/^([a-zA-Z]+)/);
            if (m) {
                // It's a string of letter, maybe a shortcut
                let shortcut = getInlineShortcut(null, s, options.inlineShortcuts);
                if (shortcut) {
                    shortcut = shortcut.replace('_{#?}', '');
                    shortcut = shortcut.replace('^{#?}', '');
                    return { match: shortcut, rest: s.substring(shortcut.length) };
                }
            }
            m = s.match(/^([a-zA-Z])/);
            if (m) {
                // It's a single letter
                return { match: m[1], rest: s.substring(1) };
            }
            m = s.match(/^(-)?\d+(\.\d*)?/);
            if (m) {
                // It's a number
                return { match: m[0], rest: s.substring(m[0].length) };
            }
            if (!/^\\(left|right)/.test(s)) {
                // It's a LaTeX command (but not a \left\right)
                m = s.match(/^(\\[a-zA-Z]+)/);
                if (m) {
                    rest = s.substring(m[1].length);
                    match = m[1];
                }
            }
        }
        return { match: match, rest: rest };
    }
    function paddedShortcut(s, options) {
        let result = getInlineShortcut(null, s, options);
        if (result) {
            result = result.replace('_{#?}', '');
            result = result.replace('^{#?}', '');
            result += ' ';
        }
        else {
            result = s;
        }
        return result;
    }

    // const MATCHING_FENCE = {
    //     '\\lbrace': ['\\rbrace'],
    //     '(': [')', ']', '\\rbrack'],
    //     // For (open/closed) intervals
    //     '\\rbrack': [')', ']', '\\rbrack', '[', '\\lbrack'],
    //     '\\lbrack': [')', ']', '\\rbrack', '[', '\\lbrack'],
    // };
    /**
     * Insert a smart fence '(', '{', '[', etc...
     * If not handled (because `fence` wasn't a fence), return false.
     */
    function insertSmartFence(model, fence, style) {
        const parent = model.parent();
        let delims = parent.type === 'leftright' ? parent.leftDelim + parent.rightDelim : '';
        if (delims === '\\lbrace\\rbrace')
            delims = '{}';
        if (delims === '\\{\\}')
            delims = '{}';
        //
        // 1. Are we inserting a middle fence?
        // ...as in {...|...}
        //
        if (delims === '{}' && /\||\\vert|\\Vert|\\mvert|\\mid/.test(fence)) {
            insert$1(model, '\\,\\middle' + fence + '\\, ', {
                mode: 'math',
                format: 'latex',
                style: style,
            });
            return true;
        }
        // Normalize some fences.
        // Note that '{' and '}' are not valid braces.
        // They should be '\{' or '\lbrace' and '\}' or '\rbrace'
        if (fence === '{' || fence === '\\{')
            fence = '\\lbrace';
        if (fence === '}' || fence === '\\}')
            fence = '\\rbrace';
        if (fence === '[')
            fence = '\\lbrack';
        if (fence === ']')
            fence = '\\rbrack';
        //
        // 2. Is it an open fence?
        //
        const rDelim = RIGHT_DELIM[fence];
        if (rDelim && !(parent.type === 'leftright' && parent.leftDelim === '|')) {
            // We have a valid open fence as input
            let s = '';
            const collapsed = selectionIsCollapsed(model) ||
                getAnchor(model).type === 'placeholder';
            if (model.sibling(0).isFunction) {
                // We're before a function (e.g. `\sin`, or 'f'):  this is an
                // argument list.
                // Use `\mleft...\mright'.
                s = '\\mleft' + fence + '\\mright';
            }
            else {
                s = '\\left' + fence + '\\right';
            }
            s += collapsed ? '?' : rDelim;
            let content = [];
            if (collapsed) {
                // content = model.siblings().slice(model.anchorOffset() + 1);
                content = model
                    .siblings()
                    .splice(model.anchorOffset() + 1, model.siblings().length);
            }
            insert$1(model, s, { mode: 'math', format: 'latex', style: style });
            if (collapsed) {
                // Move everything that was after the anchor into the leftright
                model.sibling(0).body = content;
                move(model, -1);
            }
            return true;
        }
        //
        // 3. Is it a close fence?
        //
        let lDelim;
        Object.keys(RIGHT_DELIM).forEach((delim) => {
            if (fence === RIGHT_DELIM[delim])
                lDelim = delim;
        });
        if (lDelim) {
            // We found the matching open fence, so it was a valid close fence.
            // Note that `lDelim` may not match `fence`. That's OK.
            // If we're the last atom inside a 'leftright',
            // update the parent
            if (parent &&
                parent.type === 'leftright' &&
                model.endOffset() === model.siblings().length - 1) {
                contentWillChange(model);
                parent.rightDelim = fence;
                move(model, +1);
                contentDidChange(model);
                return true;
            }
            // If we have a `leftright` sibling to our left
            // with an indeterminate right fence,
            // move what's between us and the `leftright` inside the `leftright`
            const siblings = model.siblings();
            let i;
            for (i = model.endOffset(); i >= 0; i--) {
                if (siblings[i].type === 'leftright' &&
                    siblings[i].rightDelim === '?') {
                    break;
                }
            }
            if (i >= 0) {
                contentWillChange(model);
                siblings[i].rightDelim = fence;
                siblings[i].body = siblings[i].body.concat(siblings.slice(i + 1, model.endOffset() + 1));
                siblings.splice(i + 1, model.endOffset() - i);
                setSelection(model, i);
                contentDidChange(model);
                return true;
            }
            // If we're inside a `leftright`, but not the last atom,
            // and the `leftright` right delim is indeterminate
            // adjust the body (put everything after the insertion point outside)
            if (parent &&
                parent.type === 'leftright' &&
                parent.rightDelim === '?') {
                contentWillChange(model);
                parent.rightDelim = fence;
                const tail = siblings.slice(model.endOffset() + 1);
                siblings.splice(model.endOffset() + 1);
                model.path.pop();
                // Array.prototype.splice.apply(
                //     model.siblings(),
                //     [model.endOffset() + 1, 0].concat(tail)
                // );
                // @revisit: veryfiy this does the right thing
                model.siblings().splice(model.endOffset() + 1, 0, ...tail);
                contentDidChange(model);
                return true;
            }
            // Is our grand-parent a 'leftright'?
            // If `\left(\frac{1}{x|}\right?` with the caret at `|`
            // go up to the 'leftright' and apply it there instead
            const grandparent = model.ancestor(2);
            if (grandparent &&
                grandparent.type === 'leftright' &&
                grandparent.rightDelim === '?' &&
                model.endOffset() === siblings.length - 1) {
                move(model, 1);
                return insertSmartFence(model, fence, style);
            }
            // Meh... We couldn't find a matching open fence. Just insert the
            // closing fence as a regular character
            return false;
            // insert(model, fence, { mode: 'math', format: 'latex', style: style });
            // return true;
        }
        return false;
    }

    function applyStyleToUnstyledAtoms(atom, style) {
        if (!atom || !style)
            return;
        if (isAtomArray(atom)) {
            // Apply styling options to each atom
            atom.forEach((x) => applyStyleToUnstyledAtoms(x, style));
        }
        else if (typeof atom === 'object') {
            if (!atom.color &&
                !atom.backgroundColor &&
                !atom.fontFamily &&
                !atom.fontShape &&
                !atom.fontSeries &&
                !atom.fontSize) {
                atom.applyStyle(style);
                applyStyleToUnstyledAtoms(atom.body, style);
                applyStyleToUnstyledAtoms(atom.numer, style);
                applyStyleToUnstyledAtoms(atom.denom, style);
                applyStyleToUnstyledAtoms(atom.index, style);
                applyStyleToUnstyledAtoms(atom.overscript, style);
                applyStyleToUnstyledAtoms(atom.underscript, style);
                applyStyleToUnstyledAtoms(atom.subscript, style);
                applyStyleToUnstyledAtoms(atom.superscript, style);
            }
        }
    }
    /**
     * Apply a style (color, background) to the selection.
     *
     * If the style is already applied to the selection, remove it. If the selection
     * has the style partially applied (i.e. only some sections), remove it from
     * those sections, and apply it to the entire selection.
     */
    function applyStyle$3(model, style) {
        // No selection, nothing to do.
        if (selectionIsCollapsed(model))
            return false;
        function everyStyle(property, value) {
            let result = true;
            forEachSelected(model, (x) => {
                result = result && x[property] === value;
            }, { recursive: true });
            return result;
        }
        if (style.color && everyStyle('color', style.color)) {
            // If the selection already has this color, turn it off
            style.color = 'none';
        }
        if (style.backgroundColor &&
            everyStyle('backgroundColor', style.backgroundColor)) {
            // If the selection already has this color, turn it off
            style.backgroundColor = 'none';
        }
        if (style.fontFamily && everyStyle('fontFamily', style.fontFamily)) {
            // If the selection already has this font family, turn it off
            style.fontFamily = 'none';
        }
        if (style.series)
            style.fontSeries = style.series;
        if (style.fontSeries && everyStyle('fontSeries', style.fontSeries)) {
            // If the selection already has this series (weight), turn it off
            style.fontSeries = 'auto';
        }
        if (style.shape)
            style.fontShape = style.shape;
        if (style.fontShape && everyStyle('fontShape', style.fontShape)) {
            // If the selection already has this shape (italic), turn it off
            style.fontShape = 'auto';
        }
        if (style.size)
            style.fontSize = style.size;
        if (style.fontSize && everyStyle('fontSize', style.fontSize)) {
            // If the selection already has this size, reset it to default size
            style.fontSize = 'size5';
        }
        contentWillChange(model);
        forEachSelected(model, (x) => x.applyStyle(style), { recursive: true });
        contentDidChange(model);
        return true;
    }

    function insert$1(model, s, options) {
        var _a, _b, _c, _d;
        // Try to insert a smart fence.
        if (!((_a = options.smartFence) !== null && _a !== void 0 ? _a : false)) {
            // When smartFence is turned off, only do a "smart" fence insert
            // if we're inside a `leftright`, at the last char
            const parent = model.parent();
            if ((parent === null || parent === void 0 ? void 0 : parent.type) === 'leftright' &&
                parent.rightDelim === '?' &&
                model.endOffset() === model.siblings().length - 1 &&
                /^[)}\]|]$/.test(s)) {
                contentWillChange(model);
                parent.rightDelim = s;
                move(model, +1);
                contentDidChange(model);
                return;
            }
        }
        else if (insertSmartFence(model, s, options.style)) {
            return;
        }
        const suppressChangeNotifications = model.suppressChangeNotifications;
        if (options.suppressChangeNotifications) {
            model.suppressChangeNotifications = true;
        }
        // Dispatch notifications
        contentWillChange(model);
        const contentWasChanging = model.suppressChangeNotifications;
        model.suppressChangeNotifications = true;
        if (!options.insertionMode)
            options.insertionMode = 'replaceSelection';
        if (!options.selectionMode)
            options.selectionMode = 'placeholder';
        if (!options.format)
            options.format = 'auto';
        options.macros = (_b = options.macros) !== null && _b !== void 0 ? _b : model.options.macros;
        const mode = options.mode || getAnchorMode(model);
        let mathlist;
        // Save the content of the selection, if any
        const args = [
            makeRoot('math', getSelectedAtoms(model)).toLatex(false),
        ];
        // If a placeholder was specified, use it
        const placeholder = (_c = options.placeholder) !== null && _c !== void 0 ? _c : '\\placeholder{}';
        args['?'] = placeholder;
        // Delete any selected items
        if (options.insertionMode === 'replaceSelection' &&
            !selectionIsCollapsed(model)) {
            deleteChar(model);
        }
        else if (options.insertionMode === 'replaceAll') {
            model.root.body = [];
            model.root.latex = '';
            model.path = [{ relation: 'body', offset: 0 }];
            model.extent = 0;
        }
        else if (options.insertionMode === 'insertBefore') {
            collapseSelectionBackward(model);
        }
        else if (options.insertionMode === 'insertAfter') {
            collapseSelectionForward(model);
        }
        // Delete any placeholders before or after the insertion point
        const siblings = model.siblings();
        const firstOffset = model.startOffset();
        if (firstOffset + 1 < siblings.length &&
            siblings[firstOffset + 1] &&
            siblings[firstOffset + 1].type === 'placeholder') {
            deleteChar(model, 1);
        }
        else if (firstOffset > 0 &&
            siblings[firstOffset] &&
            siblings[firstOffset].type === 'placeholder') {
            deleteChar(model, -1);
        }
        if (mode === 'math' && options.format === 'ASCIIMath') {
            [, s] = parseMathString(s, { format: 'ASCIIMath' });
            mathlist = parseString(s, 'math', null, options === null || options === void 0 ? void 0 : options.macros, false, model.listeners.onError);
            // Simplify result.
            simplifyParen(model, mathlist);
        }
        else if (mode !== 'text' &&
            (options.format === 'auto' || options.format === 'latex')) {
            if (mode === 'command') {
                // Short-circuit the tokenizer and parser if in command mode
                mathlist = [];
                for (const c of s) {
                    if (COMMAND_MODE_CHARACTERS.test(c)) {
                        mathlist.push(new Atom('command', 'command', c));
                    }
                }
            }
            else if (s === '\u001b') {
                // Insert an 'esc' character triggers the command mode
                mathlist = [new Atom('command', 'command', '\\')];
            }
            else {
                if (options.format === 'auto') {
                    [options.format, s] = parseMathString(s);
                }
                if (args[0]) {
                    // There was a selection, we'll use it for #@
                    s = s.replace(/(^|[^\\])#@/g, '$1#0');
                }
                else if (/(^|[^\\])#@/.test(s)) {
                    // If we're inserting a latex fragment that includes a #@ argument
                    // substitute the preceding `mord`s or text mode atoms for it (implicit argument)
                    const offset = getImplicitArgOffset(model);
                    s = s.replace(/(^|[^\\])#@/g, '$1' +
                        getContentFromSiblings(model, offset + 1, model.startOffset()));
                    // Delete the implicit argument
                    deleteAtoms(model, offset - model.startOffset());
                }
                else {
                    // No selection, no 'mord' before. Let's make '#@' a placeholder.
                    s = s.replace(/(^|[^\\])#@/g, '$1#?');
                }
                // If the whole string is bracketed by a mode shift command, remove it
                if (/^\$\$(.*)\$\$$/.test(s)) {
                    s = s.substring(2, s.length - 2);
                }
                if (!args[0])
                    args[0] = placeholder;
                mathlist = parseString(s, mode, args, options.macros, (_d = options.smartFence) !== null && _d !== void 0 ? _d : false, model.listeners.onError);
                // Simplify result.
                if (options.format !== 'latex') {
                    simplifyParen(model, mathlist);
                }
            }
        }
        else if (mode === 'text' || options.format === 'text') {
            // Map special TeX characters to alternatives
            // Must do this one first, since other replacements include backslash
            s = s.replace(/\\/g, '\\textbackslash ');
            s = s.replace(/#/g, '\\#');
            s = s.replace(/\$/g, '\\$');
            s = s.replace(/%/g, '\\%');
            s = s.replace(/&/g, '\\&');
            // s = s.replace(/:/g, '\\colon');     // text colon?
            // s = s.replace(/\[/g, '\\lbrack');
            // s = s.replace(/]/g, '\\rbrack');
            s = s.replace(/_/g, '\\_');
            s = s.replace(/{/g, '\\textbraceleft ');
            s = s.replace(/}/g, '\\textbraceright ');
            s = s.replace(/\^/g, '\\textasciicircum ');
            s = s.replace(/~/g, '\\textasciitilde ');
            s = s.replace(/£/g, '\\textsterling ');
            mathlist = parseString(s, 'text', args, options.macros, false, model.listeners.onError);
        }
        // Something has been inserted, and the parent's verbatim latex is no longer valid
        invalidateVerbatimLatex(model);
        // Some atoms may already have a style (for example if there was an
        // argument, i.e. the selection, that this was applied to).
        // So, don't apply style to atoms that are already styled, but *do*
        // apply it to newly created atoms that have no style yet.
        applyStyleToUnstyledAtoms(mathlist, options.style);
        // Insert the mathlist at the position following the anchor
        const parent = model.parent();
        if (options.format !== 'latex' &&
            model.options.removeExtraneousParentheses &&
            parent &&
            parent.type === 'leftright' &&
            parent.leftDelim === '(' &&
            isEmptyMathlist(parent.body) &&
            mathlist &&
            mathlist.length === 1 &&
            mathlist[0].type === 'genfrac') {
            // If the insert is fraction inside a lefright, remove the leftright
            model.path.pop();
            model.siblings()[model.anchorOffset()] = mathlist[0];
        }
        else {
            if (options.format === 'latex' && args.length === 1 && !args[0]) {
                // If we are given a latex string with no arguments, store it verbatim
                // Caution: we can only do this if the toLatex() for this parent
                // would return an empty string. If the latex is generated using other
                // properties than parent.body, for example by adding '\left.' and
                // '\right.' with a 'leftright' type, we can't use this shortcut.
                if (parent.type === 'root' &&
                    isEmptyMathlist(parent.body)) {
                    parent.latex = s;
                }
            }
            model.siblings().splice(model.anchorOffset() + 1, 0, ...mathlist);
        }
        // If needed, make sure there's a first atom in the siblings list
        model.insertFirstAtom();
        // Prepare to dispatch notifications
        // (for selection changes, then content change)
        model.suppressChangeNotifications = contentWasChanging;
        // Update the anchor's location
        if (options.selectionMode === 'placeholder') {
            // Move to the next placeholder
            let newPlaceholders = [];
            for (const atom of mathlist) {
                newPlaceholders = newPlaceholders.concat(atom.filter((atom) => atom.type === 'placeholder'));
            }
            if (newPlaceholders.length === 0 || !leap(model, +1, false)) {
                // No placeholder found, move to right after what we just inserted
                setSelection(model, model.anchorOffset() + mathlist.length);
                // model.path[model.path.length - 1].offset += mathlist.length;
            }
            else {
                model.announce('move'); // should have placeholder selected
            }
        }
        else if (options.selectionMode === 'before') ;
        else if (options.selectionMode === 'after') {
            setSelection(model, model.anchorOffset() + mathlist.length);
        }
        else if (options.selectionMode === 'item') {
            setSelection(model, model.anchorOffset(), mathlist.length);
        }
        contentDidChange(model);
        model.suppressChangeNotifications = suppressChangeNotifications;
    }
    function removeParen(list) {
        if (!list)
            return undefined;
        if (list.length === 1 &&
            list[0].type === 'leftright' &&
            list[0].leftDelim === '(') {
            list = list[0].body;
        }
        return list;
    }
    /**
     * If it's a fraction with a parenthesized numerator or denominator
     * remove the parentheses
     *
     */
    function simplifyParen(model, atoms) {
        if (atoms && model.options.removeExtraneousParentheses) {
            for (let i = 0; atoms[i]; i++) {
                if (atoms[i].type === 'leftright' && atoms[i].leftDelim === '(') {
                    if (isAtomArray(atoms[i].body)) {
                        let genFracCount = 0;
                        let genFracIndex = 0;
                        let nonGenFracCount = 0;
                        for (let j = 0; atoms[i].body[j]; j++) {
                            if (atoms[i].body[j].type === 'genfrac') {
                                genFracCount++;
                                genFracIndex = j;
                            }
                            if (atoms[i].body[j].type !== 'first') {
                                nonGenFracCount++;
                            }
                        }
                        if (nonGenFracCount === 0 && genFracCount === 1) {
                            // This is a single frac inside a leftright: remove the leftright
                            atoms[i] = atoms[i].body[genFracIndex];
                        }
                    }
                }
            }
            atoms.forEach((atom) => {
                if (atom.type === 'genfrac') {
                    simplifyParen(model, atom.numer);
                    simplifyParen(model, atom.denom);
                    atom.numer = removeParen(atom.numer);
                    atom.denom = removeParen(atom.denom);
                }
                if (atom.superscript) {
                    simplifyParen(model, atom.superscript);
                    atom.superscript = removeParen(atom.superscript);
                }
                if (atom.subscript) {
                    simplifyParen(model, atom.subscript);
                    atom.subscript = removeParen(atom.subscript);
                }
                if (atom.underscript) {
                    simplifyParen(model, atom.underscript);
                    atom.underscript = removeParen(atom.underscript);
                }
                if (atom.overscript) {
                    simplifyParen(model, atom.overscript);
                    atom.overscript = removeParen(atom.overscript);
                }
                if (atom.index) {
                    simplifyParen(model, atom.index);
                    atom.index = removeParen(atom.index);
                }
                if (atom.type === 'surd') {
                    simplifyParen(model, atom.body);
                    atom.body = removeParen(atom.body);
                }
                else if (isAtomArray(atom.body)) {
                    simplifyParen(model, atom.body);
                }
                if (atom.array) {
                    for (let i = arrayCellCount(atom.array); i >= 0; i--) {
                        simplifyParen(model, arrayCell(atom.array, i));
                    }
                }
            });
        }
    }

    /**
     * Switch the cursor to the superscript and select it. If there is no subscript
     * yet, create one.
     */
    function moveToSuperscript(model) {
        collapseSelectionForward(model);
        if (!getAnchor(model).superscript) {
            if (getAnchor(model).subscript) {
                getAnchor(model).superscript = [
                    new Atom(model.parent().mode, 'first'),
                ];
            }
            else {
                const sibling = model.sibling(1);
                if (sibling === null || sibling === void 0 ? void 0 : sibling.superscript) {
                    model.path[model.path.length - 1].offset += 1;
                    //            setSelection(model, model.anchorOffset() + 1);
                }
                else if (sibling === null || sibling === void 0 ? void 0 : sibling.subscript) {
                    model.path[model.path.length - 1].offset += 1;
                    //            setSelection(model, model.anchorOffset() + 1);
                    getAnchor(model).superscript = [
                        new Atom(model.parent().mode, 'first'),
                    ];
                }
                else {
                    if (getAnchor(model).limits !== 'limits') {
                        model
                            .siblings()
                            .splice(model.anchorOffset() + 1, 0, new Atom(model.parent().mode, 'msubsup', '\u200b', getAnchorStyle(model)));
                        model.path[model.path.length - 1].offset += 1;
                        //            setSelection(model, model.anchorOffset() + 1);
                    }
                    getAnchor(model).superscript = [
                        new Atom(model.parent().mode, 'first'),
                    ];
                }
            }
        }
        model.path.push({ relation: 'superscript', offset: 0 });
        selectGroup(model);
        return true;
    }
    /**
     * Switch the cursor to the subscript and select it. If there is no subscript
     * yet, create one.
     */
    function moveToSubscript(model) {
        collapseSelectionForward(model);
        if (!getAnchor(model).subscript) {
            if (getAnchor(model).superscript) {
                getAnchor(model).subscript = [
                    new Atom(model.parent().mode, 'first'),
                ];
            }
            else {
                const sibling = model.sibling(1);
                if (sibling === null || sibling === void 0 ? void 0 : sibling.subscript) {
                    model.path[model.path.length - 1].offset += 1;
                    // setSelection(model, model.anchorOffset() + 1);
                }
                else if (sibling === null || sibling === void 0 ? void 0 : sibling.superscript) {
                    model.path[model.path.length - 1].offset += 1;
                    // setSelection(model, model.anchorOffset() + 1);
                    getAnchor(model).subscript = [
                        new Atom(model.parent().mode, 'first'),
                    ];
                }
                else {
                    if (getAnchor(model).limits !== 'limits') {
                        model
                            .siblings()
                            .splice(model.anchorOffset() + 1, 0, new Atom(model.parent().mode, 'msubsup', '\u200b', getAnchorStyle(model)));
                        model.path[model.path.length - 1].offset += 1;
                        // setSelection(model, model.anchorOffset() + 1);
                    }
                    getAnchor(model).subscript = [
                        new Atom(model.parent().mode, 'first'),
                    ];
                }
            }
        }
        model.path.push({ relation: 'subscript', offset: 0 });
        selectGroup(model);
        return true;
    }
    /**
     * If cursor is currently in:
     * - superscript: move to subscript, creating it if necessary
     * - subscript: move to superscript, creating it if necessary
     * - numerator: move to denominator
     * - denominator: move to numerator
     * - otherwise: move to superscript
     */
    register$2({
        moveToOpposite: (model) => {
            const OPPOSITE_RELATIONS = {
                superscript: 'subscript',
                subscript: 'superscript',
                denom: 'numer',
                numer: 'denom',
            };
            const oppositeRelation = OPPOSITE_RELATIONS[model.relation()];
            if (!oppositeRelation) {
                moveToSuperscript(model);
            }
            if (!model.parent()[oppositeRelation]) {
                // Don't have children of the opposite relation yet
                // Add them
                model.parent()[oppositeRelation] = [
                    new Atom(model.parent().mode, 'first'),
                ];
            }
            setSelection(model, 0, 'end', oppositeRelation);
            return true;
        },
        moveBeforeParent: (model) => {
            if (model.path.length > 1) {
                model.path.pop();
                setSelection(model, model.anchorOffset() - 1);
                return true;
            }
            model.announce('plonk');
            return false;
        },
        moveAfterParent: (model) => moveAfterParent(model),
        moveToNextPlaceholder: (model) => leap(model, +1),
        moveToPreviousPlaceholder: (model) => leap(model, -1),
        moveToNextChar: (model) => move(model, +1),
        moveToPreviousChar: (model) => move(model, -1),
        moveUp: (model) => up(model),
        moveDown: (model) => down(model),
        moveToNextWord: (model) => skip(model, +1),
        moveToPreviousWord: (model) => skip(model, -1),
        moveToGroupStart: (model) => setSelection(model, 0),
        moveToGroupEnd: (model) => setSelection(model, -1),
        moveToMathFieldStart: (model) => jumpToMathFieldBoundary(model, -1),
        moveToMathFieldEnd: (model) => jumpToMathFieldBoundary(model, +1),
        moveToSuperscript: (model) => moveToSuperscript(model),
        moveToSubscript: (model) => moveToSubscript(model),
    }, { target: 'model', category: 'selection-anchor' });
    register$2({
        selectGroup: (model) => selectGroup(model),
        selectAll: (model) => selectAll(model),
        extendToNextChar: (model) => extend(model, +1),
        extendToPreviousChar: (model) => extend(model, -1),
        extendToNextWord: (model) => skip(model, +1, { extend: true }),
        extendToPreviousWord: (model) => skip(model, -1, { extend: true }),
        extendUp: (model) => up(model, { extend: true }),
        extendDown: (model) => down(model, { extend: true }),
        /**
         * Extend the selection until the next boundary is reached. A boundary
         * is defined by an atom of a different type (mbin, mord, etc...)
         * than the current focus. For example, in "1234+x=y", if the focus is between
         * "1" and "2", invoking `extendToNextBoundary_` would extend the selection
         * to "234".
         */
        extendToNextBoundary: (model) => skip(model, +1, { extend: true }),
        /**
         * Extend the selection until the previous boundary is reached. A boundary
         * is defined by an atom of a different type (mbin, mord, etc...)
         * than the current focus. For example, in "1+23456", if the focus is between
         * "5" and "6", invoking `extendToPreviousBoundary` would extend the selection
         * to "2345".
         */
        extendToPreviousBoundary: (model) => skip(model, -1, { extend: true }),
        extendToGroupStart: (model) => setSelectionExtent(model, -model.anchorOffset()),
        extendToGroupEnd: (model) => setSelectionExtent(model, model.siblings().length - model.anchorOffset()),
        extendToMathFieldStart: (model) => jumpToMathFieldBoundary(model, -1, { extend: true }),
        extendToMathFieldEnd: (model) => jumpToMathFieldBoundary(model, +1, { extend: true }),
    }, { target: 'model', category: 'selection-extend' });
    register$2({
        deleteAll: (model) => {
            selectAll(model);
            return deleteChar(model);
        },
        deleteNextChar: (model) => deleteChar(model, +1),
        deletePreviousChar: (model) => deleteChar(model, -1),
        deleteNextWord: (model) => {
            skip(model, +1, { extend: true });
            return deleteChar(model);
        },
        deletePreviousWord: (model) => {
            skip(model, -1, { extend: true });
            return deleteChar(model);
        },
        deleteToGroupStart: (model) => {
            setSelectionExtent(model, -model.anchorOffset());
            return deleteChar(model);
        },
        deleteToGroupEnd: (model) => {
            jumpToMathFieldBoundary(model, -1, { extend: true });
            return deleteChar(model);
        },
        deleteToMathFieldStart: (model) => {
            jumpToMathFieldBoundary(model, -1, { extend: true });
            return deleteChar(model);
        },
        deleteToMathFieldEnd: (model) => {
            jumpToMathFieldBoundary(model, +1, { extend: true });
            return deleteChar(model);
        },
    }, { target: 'model', category: 'delete' });

    /**
     * This modules handles low-level keyboard events and normalize them across
     * browsers.
     *
     * See https://dvcs.w3.org/hg/d4e/raw-file/tip/key-event-test.html
     * (also at https://w3c.github.io/uievents/tools/key-event-viewer.html)
     *
     *
     * - **KeyboardEvent.key** (the printable value associated with the key or a string
     * for special keys)
     *  https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
     *  https://www.w3.org/TR/uievents-key/
     *
     * - **KeyboardEvent.code** (the physical key being pressed. On an AZERTY keyboard
     * the key labelled "A" is KeyQ)
     *  https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values
     *  https://www.w3.org/TR/uievents-code/
     *
     * Note:
     * - `charCode`, `keyCode` and `which` are deprecated
     *
     * For background, see this info regarding keybinding in VSCode:
     * - https://github.com/microsoft/vscode/tree/master/src/vs/workbench/services/keybinding
     * - https://github.com/microsoft/vscode/wiki/Keybinding-Issues
     */
    const PRINTABLE_KEYCODE = [
        'Backquote',
        'Digit0',
        'Digit1',
        'Digit2',
        'Digit3',
        'Digit4',
        'Digit5',
        'Digit6',
        'Digit7',
        'Digit8',
        'Digit9',
        'Minus',
        'Equal',
        'IntlYen',
        'KeyQ',
        'KeyW',
        'KeyE',
        'KeyR',
        'KeyT',
        'KeyY',
        'KeyU',
        'KeyI',
        'KeyO',
        'KeyP',
        'BracketLeft',
        'BracketRight',
        'Backslash',
        'KeyA',
        'KeyS',
        'KeyD',
        'KeyF',
        'KeyG',
        'KeyH',
        'KeyJ',
        'KeyK',
        'KeyL',
        'Semicolon',
        'Quote',
        'IntlBackslash',
        'KeyZ',
        'KeyX',
        'KeyC',
        'KeyV',
        'KeyB',
        'KeyN',
        'KeyM',
        'Comma',
        'Period',
        'Slash',
        'IntlRo',
        'Space',
        'Numpad0',
        'Numpad1',
        'Numpad2',
        'Numpad3',
        'Numpad4',
        'Numpad5',
        'Numpad6',
        'Numpad7',
        'Numpad8',
        'Numpad9',
        'NumpadAdd',
        'NumpadComma',
        'NumpadDecimal',
        'NumpadDivide',
        'NumpadEqual',
        'NumpadHash',
        'NumpadMultiply',
        'NumpadParenLeft',
        'NumpadParenRight',
        'NumpadStar',
        'NumpadSubstract',
    ];
    function mightProducePrintableCharacter(evt) {
        if (evt.ctrlKey || evt.metaKey) {
            // ignore ctrl/cmd-combination but not shift/alt-combinatios
            return false;
        }
        if (evt.key === 'Dead') {
            return false;
        }
        return PRINTABLE_KEYCODE.indexOf(evt.code) >= 0;
    }
    /**
     * Create a normalized representation of a keyboard event,
     * i.e., key code and modifier keys. For example:
     * - `ctrl+Shift+alt+[KeyF]`
     *
     * Note: the key code corresponds to a physical key, e.g. 'KeyQ' is
     * the key labeled 'A' on a French keyboard
     *
     */
    function keyboardEventToString(evt) {
        evt = normalizeKeyboardEvent(evt);
        const modifiers = [];
        if (evt.ctrlKey)
            modifiers.push('ctrl');
        if (evt.metaKey)
            modifiers.push('meta');
        if (evt.altKey)
            modifiers.push('alt');
        if (evt.shiftKey)
            modifiers.push('shift');
        // If no modifiers, simply return the key name
        if (modifiers.length === 0)
            return '[' + evt.code + ']';
        modifiers.push('[' + evt.code + ']');
        return modifiers.join('+');
    }
    /**
     * Setup to capture the keyboard events from a `TextArea` and redispatch them to
     * handlers.
     *
     * In general, commands (arrows, delete, etc..) should be handled
     * in the `keystroke()` handler while text input should be handled in
     * `typedtext()`.
     *
     * @param {HTMLElement} textarea A `TextArea` element that will capture the keyboard
     * events. While this element will usually be a `TextArea`, it could be any
     * element that is focusable and can receive keyboard events.
     * @param {Object.<string, any>} handlers
     * @param {function} handlers.keystroke invoked on a key down event, including
     * for special keys such as ESC, arrow keys, tab, etc... and their variants
     * with modifiers.
     * @param {function} handlers.typedtext invoked on a keypress or other events
     * when a key corresponding to a character has been pressed. This include `a-z`,
     * `0-9`, `{}`, `^_()`, etc...
     * This does not include arrow keys, tab, etc... but does include 'space'
     * When a 'character' key is pressed, both `keystroke()` and `typedtext()` will
     * be invoked. When a control/function key is pressed, only `keystroke()` will
     * be invoked. In some cases, for example when using input methods or entering
     * emoji, only `typedtext()` will be invoked.
     */
    function delegateKeyboardEvents(textarea, handlers) {
        let keydownEvent = null;
        let keypressEvent = null;
        let compositionInProgress = false;
        let deadKey = false;
        // This callback is invoked after a keyboard event has been processed
        // by the textarea
        let callbackTimeoutID;
        function defer(cb) {
            clearTimeout(callbackTimeoutID);
            callbackTimeoutID = setTimeout(function () {
                clearTimeout(callbackTimeoutID);
                cb();
            });
        }
        function handleTypedText() {
            // Some browsers (Firefox, Opera) fire a keypress event for commands
            // such as command-C where there might be a non-empty selection.
            // We need to ignore these.
            if (hasSelection(textarea))
                return;
            const text = textarea['value'];
            textarea['value'] = '';
            if (text.length > 0)
                handlers.typedText(text);
        }
        const target = textarea;
        target.addEventListener('keydown', (e) => {
            const allowDeadKey = handlers.allowDeadKey();
            if (!allowDeadKey &&
                (e.key === 'Dead' ||
                    e.key === 'Unidentified' ||
                    e.keyCode === 229)) {
                deadKey = true;
                compositionInProgress = false;
                // This sequence seems to cancel dead keys
                // but don't call our blur/focus handlers
                const savedBlur = handlers.blur;
                const savedFocus = handlers.focus;
                handlers.blur = null;
                handlers.focus = null;
                if (typeof textarea.blur === 'function') {
                    textarea.blur();
                    textarea.focus();
                }
                handlers.blur = savedBlur;
                handlers.focus = savedFocus;
            }
            else {
                deadKey = false;
            }
            if (!compositionInProgress &&
                e.code !== 'CapsLock' &&
                !/(Control|Meta|Alt|Shift)(Right|Left)/.test(e.code)) {
                keydownEvent = e;
                keypressEvent = null;
                return handlers.keystroke(keyboardEventToString(e), e);
            }
            return true;
        }, true);
        target.addEventListener('keypress', (e) => {
            // If this is not the first keypress after a keydown, that is,
            // if this is a repeated keystroke, call the keystroke handler.
            if (!compositionInProgress) {
                if (keydownEvent && keypressEvent) {
                    handlers.keystroke(keyboardEventToString(keydownEvent), keydownEvent);
                }
                keypressEvent = e;
                defer(handleTypedText);
            }
        }, true);
        target.addEventListener('keyup', () => {
            // If we've received a keydown, but no keypress, check what's in the
            // textarea field.
            if (!compositionInProgress && keydownEvent && !keypressEvent) {
                handleTypedText();
            }
        }, true);
        target.addEventListener('paste', () => {
            // In some cases (Linux browsers), the text area might not be focused
            // when doing a middle-click paste command.
            textarea.focus();
            const text = textarea['value'];
            textarea['value'] = '';
            if (text.length > 0)
                handlers.paste(text);
        }, true);
        target.addEventListener('blur', () => {
            keydownEvent = null;
            keypressEvent = null;
            if (handlers.blur)
                handlers.blur();
        }, true);
        target.addEventListener('focus', () => {
            if (handlers.focus)
                handlers.focus();
        }, true);
        target.addEventListener('compositionstart', () => {
            compositionInProgress = true;
        }, true);
        target.addEventListener('compositionend', () => {
            compositionInProgress = false;
            if (deadKey && handlers.allowDeadKey()) {
                defer(handleTypedText);
            }
        }, true);
        // The `input` handler gets called when the field is changed,
        // for example with input methods or emoji input...
        target.addEventListener('input', () => {
            if (deadKey) {
                const savedBlur = handlers.blur;
                const savedFocus = handlers.focus;
                handlers.blur = null;
                handlers.focus = null;
                textarea.blur();
                textarea.focus();
                handlers.blur = savedBlur;
                handlers.focus = savedFocus;
                deadKey = false;
                compositionInProgress = false;
                if (handlers.allowDeadKey()) {
                    defer(handleTypedText);
                }
            }
            else if (!compositionInProgress) {
                defer(handleTypedText);
            }
        });
    }
    function hasSelection(textarea) {
        return textarea.selectionStart !== textarea.selectionEnd;
    }
    function eventToChar(evt) {
        var _a;
        if (!evt)
            return '';
        let result;
        if (evt.key === 'Unidentified') {
            // On Android, the evt.key seems to always be 'Unidentified'.
            // Get the value entered in the event target
            if (evt.target) {
                result = evt.target['value'];
            }
        }
        result = (_a = result !== null && result !== void 0 ? result : evt.key) !== null && _a !== void 0 ? _a : evt.code;
        if (/^(Dead|Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(result)) {
            result = '';
        }
        return result;
    }

    class UndoManager {
        constructor(model) {
            this.maximumDepth = 1000; // Maximum number of undo/redo states
            this.record = false;
            this.canCoalesce = false;
            this.model = model;
            this.reset();
        }
        reset() {
            this.stack = [];
            this.index = -1;
        }
        startRecording() {
            this.record = true;
        }
        canUndo() {
            return this.index > 0;
        }
        canRedo() {
            return this.index !== this.stack.length - 1;
        }
        undo(options) {
            if (this.canUndo()) {
                if (typeof (options === null || options === void 0 ? void 0 : options.onUndoStateWillChange) === 'function') {
                    options.onUndoStateWillChange(this.model.mathfield, 'undo');
                }
                this.restore(this.stack[this.index - 1], options);
                this.index -= 1;
                if (options && typeof options.onUndoStateDidChange === 'function') {
                    options.onUndoStateDidChange(this.model.mathfield, 'undo');
                }
                this.canCoalesce = false;
            }
        }
        redo(options) {
            if (this.canRedo()) {
                if (typeof (options === null || options === void 0 ? void 0 : options.onUndoStateWillChange) === 'function') {
                    options.onUndoStateWillChange(this.model.mathfield, 'redo');
                }
                this.index += 1;
                this.restore(this.stack[this.index], options);
                if (options && typeof options.onUndoStateDidChange === 'function') {
                    options.onUndoStateDidChange(this.model.mathfield, 'redo');
                }
                this.canCoalesce = false;
            }
        }
        pop() {
            if (this.canUndo()) {
                this.index -= 1;
                this.stack.pop();
            }
        }
        /**
         * Push a snapshot of the content and selection of the mathfield onto the
         * undo stack so that it can potentially be reverted to later.
         */
        snapshot(options) {
            if (!this.record)
                return;
            if (typeof (options === null || options === void 0 ? void 0 : options.onUndoStateWillChange) === 'function') {
                options.onUndoStateWillChange(this.model.mathfield, 'snapshot');
            }
            // Drop any entries that are part of the redo stack
            this.stack.splice(this.index + 1, this.stack.length - this.index - 1);
            // Add a new entry
            this.stack.push({
                latex: this.model.root.toLatex(false),
                selection: this.model.toString(),
            });
            this.index++;
            // If we've reached the maximum number of undo operations, forget the
            // oldest one.
            if (this.stack.length > this.maximumDepth) {
                this.stack.shift();
            }
            if (options && typeof options.onUndoStateDidChange === 'function') {
                options.onUndoStateDidChange(this.model.mathfield, 'snapshot');
            }
            this.canCoalesce = false;
        }
        snapshotAndCoalesce(options) {
            if (this.canCoalesce) {
                this.pop();
            }
            this.snapshot(options);
            this.canCoalesce = true;
        }
        /**
         * Return an object capturing the state of the content and selection of the
         * mathfield. Pass this object to restore() to reset the value of the math
         * field to this saved value. This does not affect the undo stack.
         */
        save() {
            return {
                latex: this.model.root.toLatex(false),
                selection: this.model.toString(),
            };
        }
        /**
         * Set the content and selection of the mathfield to a value previously
         * captured with save() or stored in the undo stack.
         * This does not affect the undo stack.
         */
        restore(state, options) {
            const wasSuppressing = this.model.suppressChangeNotifications;
            if (typeof options.suppressChangeNotifications !== 'undefined') {
                this.model.suppressChangeNotifications =
                    options.suppressChangeNotifications;
            }
            // Restore the content
            insert$1(this.model, state ? state.latex : '', {
                ...options,
                format: 'latex',
                mode: 'math',
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                smartFence: false,
            });
            // Restore the selection
            setPath(this.model, state ? state.selection : [{ relation: 'body', offset: 0 }]);
            this.model.suppressChangeNotifications = wasSuppressing;
        }
    }

    const SPECIAL_IDENTIFIERS = {
        '\u2212': '-',
        '-': '-',
        '\\alpha': 'alpha',
        '\\beta': 'beta',
        '\\gamma': 'gamma',
        '\\delta': 'delta',
        '\\epsilon': 'epsilon',
        '\\varepsilon': 'varepsilon',
        '\\zeta': 'zeta',
        '\\eta': 'eta',
        '\\theta': 'theta',
        '\\vartheta': 'vartheta',
        '\\iota': 'iota',
        '\\kappa': 'kappa',
        '\\lambda': 'lambda',
        '\\mu': 'mu',
        '\\nu': 'nu',
        '\\xi': 'xi',
        '\\pi': 'pi',
        '\\rho': 'rho',
        '\\sigma': 'sigma',
        '\\tau': 'tau',
        '\\upsilon': 'upsilon',
        '\\phi': 'phi',
        '\\varphi': 'varphi',
        '\\chi': 'chi',
        '\\psi': 'psi',
        '\\omega': 'omega',
        '\\Gamma': 'Gamma',
        '\\Delta': 'Delta',
        '\\Theta': 'Theta',
        '\\Lambda': 'Lambda',
        '\\Xi': 'Xi',
        '\\Pi': 'Pi',
        '\\Sigma': 'Sigma',
        '\\Phi': 'Phi',
        '\\Psi': 'Psi',
        '\\Omega': 'Omega',
    };
    const SPECIAL_OPERATORS$1 = {
        '\\pm': '+-',
        '\\times': 'xx',
        '\\colon': ':',
        '\\vert': '|',
        '\\Vert': '||',
        '\\mid': '|',
        '\\lbrace': '{',
        '\\rbrace': '}',
        '\\langle': '(:',
        '\\rangle': ':)',
    };
    function atomToAsciiMath(atom) {
        if (!atom)
            return '';
        if (isArray(atom)) {
            let result = '';
            if (atom.length === 0)
                return '';
            if (atom[0].type === 'first')
                atom = atom.slice(1);
            if (atom.length === 0)
                return '';
            if (atom[0].mode === 'text') {
                // Text mode... put it in (ASCII) quotes
                let i = 0;
                result = '"';
                while (atom[i] && atom[i].mode === 'text') {
                    result += atom[i].body;
                    i++;
                }
                result += '"' + atomToAsciiMath(atom.slice(i));
            }
            else if (atom[0].mode === 'math') {
                let i = 0;
                while (atom[i] && atom[i].mode === 'math') {
                    result += atomToAsciiMath(atom[i]);
                    i++;
                }
                result += atomToAsciiMath(atom.slice(i));
            }
            else {
                console.warn('toASCIIMath: Unexpected mode');
            }
            return result.trim();
        }
        if (atom.mode === 'text') {
            return '"' + atom.body + '"'; // text -- add in (ASCII) quotes
        }
        let result = '';
        const command = atom.symbol;
        let m;
        switch (atom.type) {
            case 'group':
            case 'root':
                result = atomToAsciiMath(atom.body);
                break;
            case 'array':
                break;
            case 'genfrac':
                if (atom.leftDelim || atom.rightDelim) {
                    result +=
                        atom.leftDelim === '.' || !atom.leftDelim
                            ? '{:'
                            : atom.leftDelim;
                }
                if (atom.hasBarLine) {
                    result += '(';
                    result += atomToAsciiMath(atom.numer);
                    result += ')/(';
                    result += atomToAsciiMath(atom.denom);
                    result += ')';
                }
                else {
                    // No bar line, i.e. \choose, etc...
                    result += '(' + atomToAsciiMath(atom.numer) + '),';
                    result += '(' + atomToAsciiMath(atom.denom) + ')';
                }
                if (atom.leftDelim || atom.rightDelim) {
                    result +=
                        atom.rightDelim === '.' || !atom.rightDelim
                            ? '{:'
                            : atom.rightDelim;
                }
                break;
            case 'surd':
                if (atom.index) {
                    result +=
                        'root(' +
                            atomToAsciiMath(atom.index) +
                            ')(' +
                            atomToAsciiMath(atom.body) +
                            ')';
                }
                else {
                    result += 'sqrt(' + atomToAsciiMath(atom.body) + ')';
                }
                break;
            case 'leftright':
                result +=
                    atom.leftDelim === '.' || !atom.leftDelim
                        ? '{:'
                        : atom.leftDelim;
                result += atomToAsciiMath(atom.body);
                result +=
                    atom.rightDelim === '.' || !atom.rightDelim
                        ? ':}'
                        : atom.rightDelim;
                break;
            case 'sizeddelim':
            case 'delim':
                // result += '<mo separator="true"' + makeID(atom.id, options) + '>' + (SPECIAL_OPERATORS[atom.delim] || atom.delim) + '</mo>';
                break;
            case 'overlap':
                break;
            case 'overunder':
                break;
            case 'mord':
                // @todo, deal with some special identifiers: \alpha, etc...
                result =
                    SPECIAL_IDENTIFIERS[command] ||
                        command ||
                        (typeof atom.body === 'string' ? atom.body : '');
                if (result[0] === '\\')
                    result = String(result);
                m = command
                    ? command.match(/[{]?\\char"([0-9abcdefABCDEF]*)[}]?/)
                    : null;
                if (m) {
                    // It's a \char command
                    result = String.fromCharCode(parseInt('0x' + m[1]));
                }
                else if (result.length > 0 && result.charAt(0) === '\\') {
                    // atom is an identifier with no special handling. Use the
                    // Unicode value
                    if (typeof atom.body === 'string') {
                        result = atom.body.charAt(0);
                    }
                    else {
                        result = atom.symbol;
                    }
                }
                // result = '<mi' + variant + makeID(atom.id, options) + '>' + xmlEscape(result) + '</mi>';
                break;
            case 'mbin':
            case 'mrel':
            case 'textord':
            case 'minner':
                if (command && SPECIAL_IDENTIFIERS[command]) {
                    // Some 'textord' are actually identifiers. Check them here.
                    result = SPECIAL_IDENTIFIERS[command];
                }
                else if (command && SPECIAL_OPERATORS$1[command]) {
                    result = SPECIAL_OPERATORS$1[command];
                }
                else {
                    result = atom.body;
                }
                break;
            case 'mopen':
            case 'mclose':
                result += atom.body;
                break;
            case 'mpunct':
                result = SPECIAL_OPERATORS$1[command] || command;
                break;
            case 'mop':
                if (atom.body !== '\u200b') {
                    // Not ZERO-WIDTH
                    result = '';
                    if (command === '\\operatorname') {
                        result += atomToAsciiMath(atom.body);
                    }
                    else {
                        result += atom.body || command;
                    }
                    result += ' ';
                }
                break;
            case 'mathstyle':
                break;
            case 'box':
                break;
            case 'spacing':
                break;
            case 'enclose':
                break;
            case 'space':
                result = ' ';
                break;
        }
        // Subscripts before superscripts (according to the ASCIIMath spec)
        if (atom.subscript) {
            result += '_';
            const arg = atomToAsciiMath(atom.subscript);
            if (arg.length > 1 && !/^(-)?\d+(\.\d*)?$/.test(arg)) {
                result += '(' + arg + ')';
            }
            else {
                result += arg;
            }
        }
        if (atom.superscript) {
            result += '^';
            const arg = atomToAsciiMath(atom.superscript);
            if (arg.length > 1 && !/^(-)?\d+(\.\d*)?$/.test(arg)) {
                result += '(' + arg + ')';
            }
            else {
                result += arg;
            }
        }
        return result;
    }

    const STRINGS = {
        en: {
            'keyboard.tooltip.functions': 'Functions',
            'keyboard.tooltip.symbols': 'Symbols',
            'keyboard.tooltip.greek': 'Greek Letters',
            'keyboard.tooltip.command': 'LaTeX Command Mode',
            'keyboard.tooltip.numeric': 'Numeric',
            'keyboard.tooltip.roman': 'Roman Letters',
            'tooltip.copy to clipboard': 'Copy to Clipboard',
            'tooltip.redo': 'Redo',
            'tooltip.toggle virtual keyboard': 'Toggle Virtual Keyboard',
            'tooltip.undo': 'Undo',
        },
        ar: {
            'keyboard.tooltip.functions': 'مهام',
            'keyboard.tooltip.symbols': 'حرف او رمز',
            'keyboard.tooltip.greek': 'حروف يونانية',
            'keyboard.tooltip.command': 'حالة تلقي الأوامر اللاتك',
            'keyboard.tooltip.numeric': 'الرقمية',
            'keyboard.tooltip.roman': 'رموز الاحرف الرومانية',
            'tooltip.copy to clipboard': 'نسخ إلى الحافظة',
            'tooltip.redo': 'الإعادة',
            'tooltip.toggle virtual keyboard': 'تبديل لوحة المفاتيح الإفتراضية',
            'tooltip.undo': 'إلغاء',
        },
        de: {
            'keyboard.tooltip.functions': 'Funktionen',
            'keyboard.tooltip.symbols': 'Symbole',
            'keyboard.tooltip.greek': 'Griechische Buchstaben',
            'keyboard.tooltip.command': 'LaTeX-Befehlsmodus',
            'keyboard.tooltip.numeric': 'Numerisch',
            'keyboard.tooltip.roman': 'Römische Buchstaben',
            'tooltip.copy to clipboard': 'In die Zwischenablage kopieren',
            'tooltip.redo': 'Wiederholen',
            'tooltip.toggle virtual keyboard': 'Virtuelle Tastatur umschalten',
            'tooltip.undo': 'Widerrufen',
        },
        el: {
            'keyboard.tooltip.functions': 'συναρτήσεις',
            'keyboard.tooltip.symbols': 'σύμβολα',
            'keyboard.tooltip.greek': 'ελληνικά γράμματα',
            'keyboard.tooltip.command': 'Λειτουργία εντολών LaTeX',
            'keyboard.tooltip.numeric': 'Αριθμητικός',
            'keyboard.tooltip.roman': 'Ρωμαϊκά γράμματα',
            'tooltip.copy to clipboard': 'Αντιγραφή στο πρόχειρο',
            'tooltip.redo': 'Ξανακάνω',
            'tooltip.toggle virtual keyboard': 'Εναλλαγή εικονικού πληκτρολογίου',
            'tooltip.undo': 'Ξεκάνω',
        },
        es: {
            'keyboard.tooltip.functions': 'Funciones',
            'keyboard.tooltip.symbols': 'Símbolos',
            'keyboard.tooltip.greek': 'Letras griegas',
            'keyboard.tooltip.command': 'Modo Comando LaTeX',
            'keyboard.tooltip.numeric': 'Numérico',
            'keyboard.tooltip.roman': 'Letras romanas',
            'tooltip.copy to clipboard': 'Copiar al portapapeles',
            'tooltip.redo': 'Rehacer',
            'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
            'tooltip.undo': 'Deshacer',
        },
        fa: {
            'keyboard.tooltip.functions': 'توابع',
            'keyboard.tooltip.symbols': 'نمادها',
            'keyboard.tooltip.greek': 'حروف یونانی',
            'keyboard.tooltip.command': 'حالت دستور لاتک',
            'keyboard.tooltip.numeric': 'عددی',
            'keyboard.tooltip.roman': 'حروف رومی',
            'tooltip.copy to clipboard': 'کپی به کلیپبورد',
            'tooltip.redo': 'بازگشت به بعد',
            'tooltip.toggle virtual keyboard': 'نمایش/نهفتن کیبورد مجازی',
            'tooltip.undo': 'بازگشت به قبل',
        },
        fr: {
            'keyboard.tooltip.functions': 'Fonctions',
            'keyboard.tooltip.symbols': 'Symboles',
            'keyboard.tooltip.greek': 'Lettres grecques',
            'keyboard.tooltip.command': 'Mode de commandes LaTeX',
            'keyboard.tooltip.numeric': 'Numérique',
            'keyboard.tooltip.roman': 'Lettres romaines',
            'tooltip.copy to clipboard': 'Copier dans le presse-papiers',
            'tooltip.redo': 'Rétablir',
            'tooltip.toggle virtual keyboard': 'Afficher/Masquer le clavier virtuel',
            'tooltip.undo': 'Annuler',
        },
        it: {
            'keyboard.tooltip.functions': 'Funzioni',
            'keyboard.tooltip.symbols': 'Simboli',
            'keyboard.tooltip.greek': 'Lettere greche',
            'keyboard.tooltip.command': 'Modalità di comando LaTeX',
            'keyboard.tooltip.numeric': 'Numerico',
            'keyboard.tooltip.roman': 'Lettere romane',
            'tooltip.copy to clipboard': 'Copia negli appunti',
            'tooltip.redo': 'Rifare',
            'tooltip.toggle virtual keyboard': 'Attiva / disattiva la tastiera virtuale',
            'tooltip.undo': 'Disfare',
        },
        ja: {
            'keyboard.tooltip.functions': '関数',
            'keyboard.tooltip.symbols': 'シンボル',
            'keyboard.tooltip.greek': 'ギリシャ文字',
            'keyboard.tooltip.command': 'LaTeXコマンドモード',
            'keyboard.tooltip.numeric': '数値',
            'keyboard.tooltip.roman': 'ローマ字',
            'tooltip.copy to clipboard': 'クリップボードにコピー',
            'tooltip.redo': 'やり直し',
            'tooltip.toggle virtual keyboard': '仮想キーボードの切り替え',
            'tooltip.undo': '元に戻す',
        },
        pl: {
            'keyboard.tooltip.functions': 'Funkcje',
            'keyboard.tooltip.symbols': 'Symbolika',
            'keyboard.tooltip.greek': 'Litery greckie',
            'keyboard.tooltip.command': 'Tryb poleceń LaTeX',
            'keyboard.tooltip.numeric': 'Numeryczne',
            'keyboard.tooltip.roman': 'Litery rzymskie',
            'tooltip.copy to clipboard': 'Kopiuj do Schowka',
            'tooltip.redo': 'Przywróć',
            'tooltip.toggle virtual keyboard': 'Przełącz wirtualną klawiaturę',
            'tooltip.undo': 'Cofnij',
        },
        ru: {
            'keyboard.tooltip.functions': 'Функции',
            'keyboard.tooltip.symbols': 'Символы',
            'keyboard.tooltip.greek': 'Греческие буквы',
            'keyboard.tooltip.command': 'Режим командной строки LaTeX',
            'keyboard.tooltip.numeric': 'числовой',
            'keyboard.tooltip.roman': 'Латинские буквы',
            'tooltip.copy to clipboard': 'Скопировать в буфер обмена',
            'tooltip.redo': 'переделывать',
            'tooltip.toggle virtual keyboard': 'Переключить виртуальную клавиатуру',
            'tooltip.undo': 'расстегивать',
        },
    };

    // import { Keys } from '../types-utils';
    const l10n = {};
    l10n.plural = function (value, s, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.type = (_a = options.type) !== null && _a !== void 0 ? _a : 'cardinal';
        const language = l10n.locale.substring(0, 2);
        const rules = options.type === 'ordinal' ? l10n._ordinal : l10n._cardinal;
        let rule = options.type === 'ordinal'
            ? l10n._ordinalPluralCategories.indexOf(rules.select(value))
            : l10n._cardinalPluralCategories.indexOf(rules.select(value));
        let result;
        if (l10n.strings[l10n.locale])
            result = l10n.strings[l10n.locale][s];
        if (!result && l10n.strings[language])
            result = l10n.strings[language][s];
        if (!result) {
            result = l10n.strings['en'][s];
            if (!result)
                result = s;
            if (options.type === 'ordinal') {
                rule = l10n._ordinalPluralCategories.indexOf(l10n._ordinalEnglish.select(value));
            }
            else {
                rule = l10n._cardinalPluralCategories.indexOf(l10n._cardinalEnglish.select(value));
            }
        }
        return result.split(';')[rule] || result.split(';')[0];
    };
    /*
     * Two forms for this function:
     * - merge(locale, strings)
     * Merge a dictionary of keys -> values for the specified locale
     * - merge(strings)
     * Merge a dictionary of locale code -> dictionary of keys -> values
     *
     */
    l10n.merge = function (locale, strings) {
        if (locale && strings) {
            const savedLocale = l10n._locale;
            l10n.locale = locale; // Load the necessary json file
            l10n.strings[locale] = {
                ...l10n.strings[locale],
                ...strings,
            };
            l10n.locale = savedLocale;
        }
        else if (locale && !strings) {
            Object.keys(locale).forEach((l) => l10n.merge(l, locale[l]));
        }
    };
    // Add getter and setter for the _locale property of l10n
    Object.defineProperty(l10n, 'locale', {
        set(locale) {
            l10n._locale = locale;
            l10n._ordinal = null;
            l10n._cardinal = null;
        },
        get() {
            var _a;
            // Use the browser defined language as the default language,
            // "english" if not running in a browser (node.js)
            if (!l10n._locale) {
                // Use the setter, which will load the necessary .json files.
                l10n._locale = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.language.slice(0, 5)) !== null && _a !== void 0 ? _a : 'en';
            }
            return l10n._locale;
        },
    });
    Object.defineProperty(l10n, 'ordinal', {
        get() {
            if (!l10n._ordinal) {
                l10n._ordinalEnglish = new Intl.PluralRules('en', {
                    type: 'ordinal',
                });
                l10n._ordinalEnglishPluralCategories = l10n._ordinalEnglish.resolvedOptions().pluralCategories;
                l10n._ordinal = new Intl.PluralRules(l10n.locale, {
                    type: 'ordinal',
                });
                l10n._ordinalPluralCategories = l10n._ordinal.resolvedOptions().pluralCategories;
                //    "zero", "one", "two", "few", "many" and "other"
            }
            return l10n._ordinal;
        },
    });
    Object.defineProperty(l10n, 'cardinal', {
        get() {
            if (!l10n._cardinal) {
                l10n._cardinalEnglish = new Intl.PluralRules('en', {
                    type: 'cardinal',
                });
                l10n._cardinalEnglishPluralCategories = l10n._cardinalEnglish.resolvedOptions().pluralCategories;
                l10n._cardinal = new Intl.PluralRules(l10n.locale, {
                    type: 'cardinal',
                });
                l10n._cardinalPluralCategories = l10n._ordinal.resolvedOptions().pluralCategories;
            }
            return l10n._cardinal;
        },
    });
    l10n.strings = STRINGS;
    function localize(s) {
        const language = l10n.locale.substring(0, 2);
        let result = '';
        // Attempt to find a match for the current locale
        if (l10n.strings[l10n.locale])
            result = l10n.strings[l10n.locale][s];
        // If none is found, attempt to find a match for the language
        if (!result && l10n.strings[language])
            result = l10n.strings[language][s];
        // If none is found, try english
        if (!result)
            result = l10n.strings['en'][s];
        // If that didn't work, use the key...
        if (!result)
            result = s;
        return result;
    }

    function insertSuggestion(model, s, l) {
        removeSuggestion(model);
        const mathlist = [];
        // Make a mathlist from the string argument with the `suggestion` property set
        const subs = s.substr(l);
        for (const c of subs) {
            const atom = new Atom('command', 'command', c);
            atom.isSuggestion = true;
            mathlist.push(atom);
        }
        // Splice in the mathlist after the insertion point, but don't change the
        // insertion point
        Array.prototype.splice.apply(model.siblings(), [model.anchorOffset() + 1, 0].concat(mathlist));
    }
    /**
     * When in command mode, insert the select command and return to math mode
     * If escape is true, the command is discared.
     * @param options.discard if true, the command is discarded and the
     * mode switched back to math
     * @param options.acceptSuggestion if true, accept the suggestion to
     * complete the command. Otherwise, only use what has been entered so far.
     */
    function complete(mathfield, options) {
        options = options !== null && options !== void 0 ? options : { acceptSuggestion: false };
        hidePopover(mathfield);
        if (options.discard) {
            spliceCommandStringAroundInsertionPoint(mathfield.model, null);
            mathfield.switchMode('math');
            return true;
        }
        const command = extractCommandStringAroundInsertionPoint(mathfield.model, !options.acceptSuggestion);
        if (command) {
            if (command === '\\(' || command === '\\)') {
                spliceCommandStringAroundInsertionPoint(mathfield.model, []);
                insert$1(mathfield.model, command.slice(1), {
                    mode: mathfield.mode,
                });
            }
            else {
                // We'll assume we want to insert in math mode
                // (commands are only available in math mode)
                mathfield.switchMode('math');
                // Interpret the input as LaTeX code
                const mathlist = parseString(command, 'math', null, mathfield.config.macros);
                if (mathlist) {
                    spliceCommandStringAroundInsertionPoint(mathfield.model, mathlist);
                }
                else {
                    decorateCommandStringAroundInsertionPoint(mathfield.model, true);
                }
            }
            mathfield.snapshot();
            mathfield.model.announce('replacement');
            return true;
        }
        return false;
    }
    function updateSuggestion(mathfield) {
        positionInsertionPointAfterCommitedCommand(mathfield.model);
        removeSuggestion(mathfield.model);
        const command = extractCommandStringAroundInsertionPoint(mathfield.model);
        const suggestions = suggest(command);
        if (suggestions.length === 0) {
            hidePopover(mathfield);
            decorateCommandStringAroundInsertionPoint(mathfield.model, true);
        }
        else {
            const index = mathfield.suggestionIndex % suggestions.length;
            const l = command.length - suggestions[index].match.length;
            if (l !== 0) {
                insertSuggestion(mathfield.model, suggestions[index].match, l);
            }
            showPopoverWithLatex(mathfield, suggestions[index].match, suggestions.length > 1);
        }
        requestUpdate(mathfield);
        return true;
    }
    function nextSuggestion(mathfield) {
        mathfield.suggestionIndex += 1;
        // The modulo of the suggestionIndex is used to determine which suggestion
        // to display, so no need to worry about rolling over.
        updateSuggestion(mathfield);
        return false;
    }
    function previousSuggestion(mathfield) {
        mathfield.suggestionIndex -= 1;
        if (mathfield.suggestionIndex < 0) {
            // We're rolling over
            // Get the list of suggestions, so we can know how many there are
            // Not very efficient, but simple.
            removeSuggestion(mathfield.model);
            const command = extractCommandStringAroundInsertionPoint(mathfield.model);
            const suggestions = suggest(command);
            mathfield.suggestionIndex = suggestions.length - 1;
        }
        updateSuggestion(mathfield);
        return false;
    }
    register$2({
        complete: complete,
        nextSuggestion: nextSuggestion,
        previousSuggestion: previousSuggestion,
    }, { target: 'mathfield', category: 'autocomplete' });

    // Markup
    // Two common flavor of markups: SSML and 'mac'. The latter is only available
    // when using the native TTS synthesizer on Mac OS.
    // Use SSML in the production rules below. The markup will either be striped
    // off or replaced with the 'mac' markup as necessary.
    //
    // SSML                                             Mac
    // ----                                             ----
    // <emphasis>WORD</emphasis>                        [[emph +]]WORD
    // <break time="150ms"/>                            [[slc 150]]
    // <say-as interpret-as="character">A</say-as>      [[char LTRL] A [[char NORM]]
    // https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/SpeechSynthesisProgrammingGuide/FineTuning/FineTuning.html#//apple_ref/doc/uid/TP40004365-CH5-SW3
    // https://pdfs.semanticscholar.org/8887/25b82b8dbb45dd4dd69b36a65f092864adb0.pdf
    // "<audio src='non_existing_file.au'>File could not be played.</audio>"
    // "I am now <prosody rate='+0.06'>speaking 6% faster.</prosody>"
    const PRONUNCIATION = {
        '\\alpha': 'alpha ',
        '\\mu': 'mew ',
        '\\sigma': 'sigma ',
        '\\pi': 'pie ',
        '\\imaginaryI': 'eye ',
        '\\sum': 'Summation ',
        '\\prod': 'Product ',
        a: '<phoneme alphabet="ipa" ph="eɪ">a</phoneme>',
        A: 'capital <phoneme alphabet="ipa" ph="eɪ">A</phoneme>',
        '+': 'plus ',
        '-': 'minus ',
        ';': '<break time="150ms"/> semi-colon <break time="150ms"/>',
        ',': '<break time="150ms"/> comma  <break time="150ms"/>',
        '|': '<break time="150ms"/>Vertical bar<break time="150ms"/>',
        '(': '<break time="150ms"/>Open paren. <break time="150ms"/>',
        ')': '<break time="150ms"/> Close paren. <break time="150ms"/>',
        '=': 'equals ',
        '<': 'is less than ',
        '\\lt': 'is less than ',
        '<=': 'is less than or equal to ',
        '\\le': 'is less than or equal to ',
        '\\gt': 'is greater than ',
        '>': 'is greater than ',
        '\\ge': 'is greater than or equal to ',
        '\\geq': 'is greater than or equal to ',
        '\\leq': 'is less than or equal to ',
        '!': 'factorial ',
        '\\sin': 'sine ',
        '\\cos': 'cosine ',
        '\u200b': '',
        '\u2212': 'minus ',
        ':': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\colon': '<break time="150ms"/> such that <break time="200ms"/> ',
        '\\hbar': 'etch bar ',
        '\\iff': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\Longleftrightarrow': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
        '\\land': 'and ',
        '\\lor': 'or ',
        '\\neg': 'not ',
        '\\div': 'divided by ',
        '\\forall': 'for all ',
        '\\exists': 'there exists ',
        '\\nexists': 'there does not exists ',
        '\\in': 'element of ',
        '\\N': 'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
        '\\C': 'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
        '\\Z': 'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
        '\\Q': 'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
        '\\infty': 'infinity ',
        '\\nabla': 'nabla ',
        '\\partial': 'partial derivative of ',
        '\\cdots': 'dot dot dot ',
        '\\Rightarrow': 'implies ',
        '\\lbrace': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\{': '<break time="150ms"/>open brace<break time="150ms"/>',
        '\\rbrace': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\}': '<break time="150ms"/>close brace<break time="150ms"/>',
        '\\langle': '<break time="150ms"/>left angle bracket<break time="150ms"/>',
        '\\rangle': '<break time="150ms"/>right angle bracket<break time="150ms"/>',
        '\\lfloor': '<break time="150ms"/>open floor<break time="150ms"/>',
        '\\rfloor': '<break time="150ms"/>close floor<break time="150ms"/>',
        '\\lceil': '<break time="150ms"/>open ceiling<break time="150ms"/>',
        '\\rceil': '<break time="150ms"/>close ceiling<break time="150ms"/>',
        '\\vert': '<break time="150ms"/>vertical bar<break time="150ms"/>',
        '\\mvert': '<break time="150ms"/>divides<break time="150ms"/>',
        '\\lvert': '<break time="150ms"/>left vertical bar<break time="150ms"/>',
        '\\rvert': '<break time="150ms"/>right vertical bar<break time="150ms"/>',
        // '\\lbrack':		'left bracket',
        // '\\rbrack':		'right bracket',
        '\\lbrack': '<break time="150ms"/> open square bracket <break time="150ms"/>',
        '\\rbrack': '<break time="150ms"/> close square bracket <break time="150ms"/>',
        // need to add code to detect singluar/plural. Until then spoken as plural since that is vastly more common
        // note: need to worry about intervening &InvisibleTimes;.
        // note: need to also do this when in numerator of fraction and number preceeds fraction
        // note: need to do this for <msup>
        mm: 'millimeters',
        cm: 'centimeters',
        km: 'kilometers',
        kg: 'kilograms',
    };
    function getSpokenName(latex) {
        let result = '';
        if (latex.charAt(0) === '\\') {
            result = ' ' + latex.replace('\\', '') + ' ';
        }
        return result;
    }
    function platform$1(p) {
        let result = 'other';
        if ((navigator === null || navigator === void 0 ? void 0 : navigator.platform) && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)) {
            if (/^(mac)/i.test(navigator.platform)) {
                result = 'mac';
            }
            else if (/^(win)/i.test(navigator.platform)) {
                result = 'win';
            }
            else if (/(android)/i.test(navigator.userAgent)) {
                result = 'android';
            }
            else if (/(iphone)/i.test(navigator.userAgent) ||
                /(ipod)/i.test(navigator.userAgent) ||
                /(ipad)/i.test(navigator.userAgent)) {
                result = 'ios';
            }
            else if (/\bCrOS\b/i.test(navigator.userAgent)) {
                result = 'chromeos';
            }
        }
        return result === p ? p : '!' + p;
    }
    function isAtomic(atoms) {
        let count = 0;
        if (isAtomArray(atoms)) {
            for (const atom of atoms) {
                if (atom.type !== 'first') {
                    count += 1;
                }
            }
        }
        return count === 1;
    }
    function atomicID(atoms) {
        if (isAtomArray(atoms)) {
            for (const atom of atoms) {
                if (atom.type !== 'first' && atom.id) {
                    return atom.id.toString();
                }
            }
        }
        return '';
    }
    function atomicValue(atoms) {
        let result = '';
        if (isAtomArray(atoms)) {
            for (const atom of atoms) {
                if (atom.type !== 'first' && typeof atom.body === 'string') {
                    result += atom.body;
                }
            }
        }
        return result;
    }
    function atomToSpeakableFragment(mode, atom, options) {
        function letter(c) {
            let result = '';
            if (!options.textToSpeechMarkup) {
                if (/[a-z]/.test(c)) {
                    result += " '" + c.toUpperCase() + "'";
                }
                else if (/[A-Z]/.test(c)) {
                    result += " 'capital " + c.toUpperCase() + "'";
                }
                else {
                    result += c;
                }
            }
            else {
                if (/[a-z]/.test(c)) {
                    result +=
                        ' <say-as interpret-as="character">' + c + '</say-as>';
                }
                else if (/[A-Z]/.test(c)) {
                    result += String('capital ' + c.toLowerCase());
                }
                else {
                    result += c;
                }
            }
            return result;
        }
        function emph(s) {
            return '<emphasis>' + s + '</emphasis>';
        }
        if (!atom)
            return '';
        let result = '';
        if (isAtomArray(atom)) {
            let isInDigitRun = false; // need to group sequence of digits
            let isInTextRun = false; // need to group text
            for (let i = 0; i < atom.length; i++) {
                if (atom[i].mode !== 'text') {
                    isInTextRun = false;
                }
                if (i < atom.length - 2 &&
                    atom[i].type === 'mopen' &&
                    atom[i + 2].type === 'mclose' &&
                    atom[i + 1].type === 'mord') {
                    result += ' of ';
                    result += emph(atomToSpeakableFragment(mode, atom[i + 1], options));
                    i += 2;
                }
                else if (atom[i].mode === 'text') {
                    if (isInTextRun) {
                        result += atom[i].body ? atom[i].body : ' ';
                    }
                    else {
                        isInTextRun = true;
                        result += atomToSpeakableFragment('text', atom[i], options);
                    }
                    // '.' and ',' should only be allowed if prev/next entry is a digit
                    // However, if that isn't the case, this still works because 'toSpeakableFragment' is called in either case.
                    // Note: the first char in a digit/text run potentially needs to have a 'mark', hence the call to 'toSpeakableFragment'
                }
                else if (atom[i].type === 'mord' &&
                    /[0123456789,.]/.test(atom[i].body)) {
                    if (isInDigitRun) {
                        result += atom[i].body;
                    }
                    else {
                        isInDigitRun = true;
                        result += atomToSpeakableFragment(mode, atom[i], options);
                    }
                }
                else {
                    isInDigitRun = false;
                    result += atomToSpeakableFragment(mode, atom[i], options);
                }
            }
        }
        else if (atom.mode === 'text') {
            if (atom.id && mode === 'math') {
                result += '<mark name="' + atom.id.toString() + '"/>';
            }
            result += atom.body;
        }
        else {
            if (atom.id && mode === 'math') {
                result += '<mark name="' + atom.id.toString() + '"/>';
            }
            let numer = '';
            let denom = '';
            let body = '';
            let supsubHandled = false;
            switch (atom.type) {
                case 'group':
                case 'root':
                    result += atomToSpeakableFragment('math', atom.body, options);
                    break;
                case 'genfrac':
                    numer = atomToSpeakableFragment('math', atom.numer, options);
                    denom = atomToSpeakableFragment('math', atom.denom, options);
                    if (isAtomic(atom.numer) && isAtomic(atom.denom)) {
                        const COMMON_FRACTIONS = {
                            '1/2': ' half ',
                            '1/3': ' one third ',
                            '2/3': ' two third',
                            '1/4': ' one quarter ',
                            '3/4': ' three quarter ',
                            '1/5': ' one fifth ',
                            '2/5': ' two fifths ',
                            '3/5': ' three fifths ',
                            '4/5': ' four fifths ',
                            '1/6': ' one sixth ',
                            '5/6': ' five sixths ',
                            '1/8': ' one eight ',
                            '3/8': ' three eights ',
                            '5/8': ' five eights ',
                            '7/8': ' seven eights ',
                            '1/9': ' one ninth ',
                            '2/9': ' two ninths ',
                            '4/9': ' four ninths ',
                            '5/9': ' five ninths ',
                            '7/9': ' seven ninths ',
                            '8/9': ' eight ninths ',
                        };
                        const commonFraction = COMMON_FRACTIONS[atomicValue(atom.numer) +
                            '/' +
                            atomicValue(atom.denom)];
                        if (commonFraction) {
                            result = commonFraction;
                        }
                        else {
                            result += numer + ' over ' + denom;
                        }
                    }
                    else {
                        result +=
                            ' the fraction <break time="150ms"/>' +
                                numer +
                                ', over <break time="150ms"/>' +
                                denom +
                                '.<break time="150ms"/> End fraction.<break time="150ms"/>';
                    }
                    break;
                case 'surd':
                    body = atomToSpeakableFragment('math', atom.body, options);
                    if (!atom.index) {
                        if (isAtomic(atom.body)) {
                            result += ' the square root of ' + body + ' , ';
                        }
                        else {
                            result +=
                                ' the square root of <break time="200ms"/>' +
                                    body +
                                    '. <break time="200ms"/> End square root';
                        }
                    }
                    else {
                        let index = atomToSpeakableFragment('math', atom.index, options);
                        index = index.trim();
                        const index2 = index.replace(/<mark([^/]*)\/>/g, '');
                        if (index2 === '3') {
                            result +=
                                ' the cube root of <break time="200ms"/>' +
                                    body +
                                    '. <break time="200ms"/> End cube root';
                        }
                        else if (index2 === 'n') {
                            result +=
                                ' the nth root of <break time="200ms"/>' +
                                    body +
                                    '. <break time="200ms"/> End root';
                        }
                        else {
                            result +=
                                ' the root with index: <break time="200ms"/>' +
                                    index +
                                    ', of <break time="200ms"/>' +
                                    body +
                                    '. <break time="200ms"/> End root';
                        }
                    }
                    break;
                case 'leftright':
                    result += PRONUNCIATION[atom.leftDelim] || atom.leftDelim;
                    result += atomToSpeakableFragment('math', atom.body, options);
                    result += PRONUNCIATION[atom.rightDelim] || atom.rightDelim;
                    break;
                case 'rule':
                    // @todo
                    break;
                case 'overunder':
                    // @todo
                    break;
                case 'overlap':
                    // @todo
                    break;
                case 'placeholder':
                    result += 'placeholder ' + atom.body;
                    break;
                case 'delim':
                case 'sizeddelim':
                case 'mord':
                case 'minner':
                case 'mbin':
                case 'mrel':
                case 'mpunct':
                case 'mopen':
                case 'mclose':
                case 'textord': {
                    const command = atom.symbol;
                    if (command === '\\mathbin' ||
                        command === '\\mathrel' ||
                        command === '\\mathopen' ||
                        command === '\\mathclose' ||
                        command === '\\mathpunct' ||
                        command === '\\mathord' ||
                        command === '\\mathinner') {
                        result = atomToSpeakableFragment(mode, atom.body, options);
                        break;
                    }
                    let atomValue = atom.body;
                    let latexValue = atom.symbol;
                    if (atom.type === 'delim' || atom.type === 'sizeddelim') {
                        atomValue = latexValue = atom.delim;
                    }
                    if (mode === 'text') {
                        result += atomValue;
                    }
                    else {
                        if (atom.type === 'mbin') {
                            result += '<break time="150ms"/>';
                        }
                        if (atomValue) {
                            const value = PRONUNCIATION[atomValue] ||
                                (latexValue
                                    ? PRONUNCIATION[latexValue.trim()]
                                    : '');
                            if (value) {
                                result += ' ' + value;
                            }
                            else {
                                const spokenName = latexValue
                                    ? getSpokenName(latexValue.trim())
                                    : '';
                                result += spokenName
                                    ? spokenName
                                    : letter(atomValue);
                            }
                        }
                        else {
                            result += atomToSpeakableFragment('math', atom.body, options);
                        }
                        if (atom.type === 'mbin') {
                            result += '<break time="150ms"/>';
                        }
                    }
                    break;
                }
                case 'mop':
                    // @todo
                    if (atom.body !== '\u200b') {
                        // Not ZERO-WIDTH
                        const trimLatex = atom.symbol;
                        if (trimLatex === '\\sum') {
                            if (atom.superscript && atom.subscript) {
                                let sup = atomToSpeakableFragment('math', atom.superscript, options);
                                sup = sup.trim();
                                let sub = atomToSpeakableFragment('math', atom.subscript, options);
                                sub = sub.trim();
                                result +=
                                    ' the summation from <break time="200ms"/>' +
                                        sub +
                                        '<break time="200ms"/> to  <break time="200ms"/>' +
                                        sup +
                                        '<break time="200ms"/> of <break time="150ms"/>';
                                supsubHandled = true;
                            }
                            else if (atom.subscript) {
                                let sub = atomToSpeakableFragment('math', atom.subscript, options);
                                sub = sub.trim();
                                result +=
                                    ' the summation from <break time="200ms"/>' +
                                        sub +
                                        '<break time="200ms"/> of <break time="150ms"/>';
                                supsubHandled = true;
                            }
                            else {
                                result += ' the summation of';
                            }
                        }
                        else if (trimLatex === '\\prod') {
                            if (atom.superscript && atom.subscript) {
                                let sup = atomToSpeakableFragment('math', atom.superscript, options);
                                sup = sup.trim();
                                let sub = atomToSpeakableFragment('math', atom.subscript, options);
                                sub = sub.trim();
                                result +=
                                    ' the product from <break time="200ms"/>' +
                                        sub +
                                        '<break time="200ms"/> to <break time="200ms"/>' +
                                        sup +
                                        '<break time="200ms"/> of <break time="150ms"/>';
                                supsubHandled = true;
                            }
                            else if (atom.subscript) {
                                let sub = atomToSpeakableFragment('math', atom.subscript, options);
                                sub = sub.trim();
                                result +=
                                    ' the product from <break time="200ms"/>' +
                                        sub +
                                        '<break time="200ms"/> of <break time="150ms"/>';
                                supsubHandled = true;
                            }
                            else {
                                result += ' the product  of ';
                            }
                        }
                        else if (trimLatex === '\\int') {
                            if (atom.superscript && atom.subscript) {
                                let sup = atomToSpeakableFragment('math', atom.superscript, options);
                                sup = sup.trim();
                                let sub = atomToSpeakableFragment('math', atom.subscript, options);
                                sub = sub.trim();
                                result +=
                                    ' the integral from <break time="200ms"/>' +
                                        emph(sub) +
                                        '<break time="200ms"/> to <break time="200ms"/>' +
                                        emph(sup) +
                                        ' <break time="200ms"/> of ';
                                supsubHandled = true;
                            }
                            else {
                                result += ' the integral of <break time="200ms"/> ';
                            }
                        }
                        else if (typeof atom.body === 'string') {
                            const value = PRONUNCIATION[atom.body] ||
                                PRONUNCIATION[atom.symbol];
                            if (value) {
                                result += value;
                            }
                            else {
                                result += ' ' + atom.body;
                            }
                        }
                        else if (atom.symbol) {
                            if (atom.symbol[0] === '\\') {
                                result += ' ' + atom.symbol.substr(1);
                            }
                            else {
                                result += ' ' + atom.symbol;
                            }
                        }
                    }
                    break;
                case 'enclose':
                    body = atomToSpeakableFragment('math', atom.body, options);
                    if (isAtomic(atom.body)) {
                        result += ' crossed out ' + body + ' , ';
                    }
                    else {
                        result += ' crossed out ' + body + '. End cross out';
                    }
                    break;
            }
            if (!supsubHandled && atom.superscript) {
                let sup = atomToSpeakableFragment(mode, atom.superscript, options);
                sup = sup.trim();
                const sup2 = sup.replace(/<[^>]*>/g, '');
                if (isAtomic(atom.superscript)) {
                    if (mode === 'math') {
                        const id = atomicID(atom.superscript);
                        if (id) {
                            result += '<mark name="' + id + '"/>';
                        }
                    }
                    if (sup2 === '\u2032') {
                        result += ' prime ';
                    }
                    else if (sup2 === '2') {
                        result += ' squared ';
                    }
                    else if (sup2 === '3') {
                        result += ' cubed ';
                    }
                    else if (isNaN(parseInt(sup2))) {
                        result += ' to the ' + sup + '; ';
                    }
                    else {
                        result +=
                            ' to the <say-as interpret-as="ordinal">' +
                                sup2 +
                                '</say-as> power; ';
                    }
                }
                else {
                    if (isNaN(parseInt(sup2))) {
                        result += ' raised to the ' + sup + '; ';
                    }
                    else {
                        result +=
                            ' raised to the <say-as interpret-as="ordinal">' +
                                sup2 +
                                '</say-as> power; ';
                    }
                }
            }
            if (!supsubHandled && atom.subscript) {
                let sub = atomToSpeakableFragment('math', atom.subscript, options);
                sub = sub.trim();
                if (isAtomic(atom.subscript)) {
                    result += ' sub ' + sub;
                }
                else {
                    result += ' subscript ' + sub + '. End subscript. ';
                }
            }
        }
        return result;
    }
    /**
     * @param  atoms The atoms to represent as speakable text.
     */
    function atomToSpeakableText(atoms, speechOptions) {
        var _a;
        const options = {
            ...speechOptions,
            textToSpeechRulesOptions: { ...speechOptions.textToSpeechRulesOptions },
        };
        if (window['sre'] && options.textToSpeechRules === 'sre') {
            const mathML = atomsToMathML(atoms, options);
            if (mathML) {
                if (options.textToSpeechMarkup) {
                    options.textToSpeechRulesOptions = (_a = options.textToSpeechRulesOptions) !== null && _a !== void 0 ? _a : {};
                    options.textToSpeechRulesOptions.markup =
                        options.textToSpeechMarkup;
                    if (options.textToSpeechRulesOptions.markup === 'ssml') {
                        options.textToSpeechRulesOptions.markup = 'ssml_step';
                    }
                    options.textToSpeechRulesOptions.rate =
                        options.speechEngineRate;
                }
                if (options.textToSpeechRulesOptions) {
                    window['sre'].System.getInstance().setupEngine(options.textToSpeechRulesOptions);
                }
                return window['sre'].System.getInstance().toSpeech(mathML);
            }
            return '';
        }
        let result = atomToSpeakableFragment('math', atoms, options);
        if (options.textToSpeechMarkup === 'ssml') {
            let prosody = '';
            if (options.speechEngineRate) {
                prosody = '<prosody rate="' + options.speechEngineRate + '">';
            }
            result =
                `<?xml version="1.0"?><speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">` +
                    '<amazon:auto-breaths>' +
                    prosody +
                    '<p><s>' +
                    result +
                    '</s></p>' +
                    (prosody ? '</prosody>' : '') +
                    '</amazon:auto-breaths>' +
                    '</speak>';
        }
        else if (options.textToSpeechMarkup === 'mac' &&
            platform$1('mac') === 'mac') {
            // Convert SSML to Mac markup
            result = result
                .replace(/<mark([^/]*)\/>/g, '')
                .replace(/<emphasis>/g, '[[emph+]]')
                .replace(/<\/emphasis>/g, '')
                .replace(/<break time="([0-9]*)ms"\/>/g, '[[slc $1]]')
                .replace(/<say-as[^>]*>/g, '')
                .replace(/<\/say-as>/g, '');
        }
        else {
            // If no markup was requested, or 'mac' markup, but we're not on a mac,
            // remove any that we may have
            // Strip out the SSML markup
            result = result.replace(/<[^>]*>/g, '').replace(/\s{2,}/g, ' ');
        }
        return result;
    }

    function speakableText(speechOptions, prefix, atoms) {
        const options = {
            ...speechOptions,
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {
                ...speechOptions.textToSpeechRulesOptions,
                markup: 'none',
            },
        };
        return prefix + atomToSpeakableText(atoms, options);
    }
    /**
     *
     * Speak some part of the expression, either with or without synchronized highlighting.
     *
     * @param speakOptions.withHighlighting - If true, synchronized
     * highlighting of speech will happen (if possible). Default is false.
     */
    // @revisit: register 'speak' command with mathfield (to get access to SpeechOptions, which need to be passed down)
    register$2({
        speak: (mathfield, scope, options) => {
            return speak(mathfield, scope, options);
        },
    }, { target: 'mathfield', category: 'speech' });
    function speak(mathfield, scope, speakOptions) {
        speakOptions = speakOptions !== null && speakOptions !== void 0 ? speakOptions : { withHighlighting: false };
        function getAtoms(mathfield, scope) {
            let result = null;
            switch (scope) {
                case 'all':
                    result = mathfield.model.root;
                    break;
                case 'selection':
                    if (!selectionIsCollapsed(mathfield.model)) {
                        result = getSelectedAtoms(mathfield.model);
                    }
                    break;
                case 'left': {
                    const siblings = mathfield.model.siblings();
                    const last = mathfield.model.startOffset();
                    if (last >= 1) {
                        result = [];
                        for (let i = 1; i <= last; i++) {
                            result.push(siblings[i]);
                        }
                    }
                    break;
                }
                case 'right': {
                    const siblings = mathfield.model.siblings();
                    const first = mathfield.model.endOffset() + 1;
                    if (first <= siblings.length - 1) {
                        result = [];
                        for (let i = first; i <= siblings.length - 1; i++) {
                            result.push(siblings[i]);
                        }
                    }
                    break;
                }
                case 'group':
                    result = mathfield.model.siblings();
                    break;
                case 'parent': {
                    const parent = mathfield.model.parent();
                    if (parent && parent.type !== 'root') {
                        result = mathfield.model.parent();
                    }
                    break;
                }
            }
            return result;
        }
        function getFailedSpeech(scope) {
            let result = '';
            switch (scope) {
                case 'all':
                    console.log('Internal failure: speak all failed');
                    break;
                case 'selection':
                    result = 'no selection';
                    break;
                case 'left':
                    result = 'at start';
                    break;
                case 'right':
                    result = 'at end';
                    break;
                case 'group':
                    console.log('Internal failure: speak group failed');
                    break;
                case 'parent':
                    result = 'no parent';
                    break;
                default:
                    console.log('unknown speak_ param value: "' + scope + '"');
                    break;
            }
            return result;
        }
        const atoms = getAtoms(mathfield, scope);
        if (atoms === null) {
            mathfield.config.speakHook(getFailedSpeech(scope), mathfield.config);
            return false;
        }
        const options = { ...mathfield.config };
        if (speakOptions.withHighlighting || options.speechEngine === 'amazon') {
            options.textToSpeechMarkup =
                window['sre'] && options.textToSpeechRules === 'sre'
                    ? 'ssml_step'
                    : 'ssml';
        }
        const text = atomToSpeakableText(atoms, options);
        if (speakOptions.withHighlighting) {
            window['mathlive'].readAloudMathField = mathfield;
            render(mathfield, { forHighlighting: true });
            if (mathfield.config.readAloudHook) {
                mathfield.config.readAloudHook(mathfield.field, text, mathfield.config);
            }
        }
        else {
            if (mathfield.config.speakHook) {
                mathfield.config.speakHook(text, options);
            }
        }
        return false;
    }
    function defaultSpeakHook(text, config) {
        if (!config && window && window['mathlive']) {
            config = window['mathlive'].config;
        }
        config = config !== null && config !== void 0 ? config : {};
        if (!config.speechEngine || config.speechEngine === 'local') {
            // On ChromeOS: chrome.accessibilityFeatures.spokenFeedback
            // See also https://developer.chrome.com/apps/tts
            const utterance = new SpeechSynthesisUtterance(text);
            if (window) {
                window.speechSynthesis.speak(utterance);
            }
            else {
                console.log('Speak: ', text);
            }
        }
        else if (config.speechEngine === 'amazon') {
            if (!window || !window['AWS']) {
                console.warn('AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk');
            }
            else {
                const polly = new window['AWS'].Polly({ apiVersion: '2016-06-10' });
                const params = {
                    OutputFormat: 'mp3',
                    VoiceId: config.speechEngineVoice,
                    Engine: [
                        'Amy',
                        'Emma',
                        'Brian',
                        'Ivy',
                        'Joanna',
                        'Kendra',
                        'Kimberly',
                        'Salli',
                        'Joey',
                        'Justin',
                        'Matthew',
                    ].includes(config.speechEngineVoice)
                        ? 'neural'
                        : 'standard',
                    // SampleRate: '24000',
                    Text: text,
                    TextType: 'ssml',
                };
                // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly.html#synthesizeSpeech-property
                polly.synthesizeSpeech(params, function (err, data) {
                    if (err) {
                        console.warn('polly.synthesizeSpeech() error:', err, err.stack);
                        // announce('plonk');
                    }
                    else if (data === null || data === void 0 ? void 0 : data.AudioStream) {
                        const uInt8Array = new Uint8Array(data.AudioStream);
                        const blob = new Blob([uInt8Array.buffer], {
                            type: 'audio/mpeg',
                        });
                        const url = URL.createObjectURL(blob);
                        const audioElement = new Audio(url);
                        audioElement.play().catch((err) => console.log(err));
                    }
                    else {
                        console.log('polly.synthesizeSpeech():' + data);
                    }
                });
                // Can call AWS.Request() on the result of synthesizeSpeech()
            }
        }
        else if (config.speechEngine === 'google') {
            console.warn('The Google speech engine is not supported yet. Please come again.');
            // @todo: implement support for Google Text-to-Speech API,
            // using config.speechEngineToken, config.speechEngineVoice and
            // config.speechEngineAudioConfig
            // curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
            //   -H "Content-Type: application/json; charset=utf-8" \
            //   --data "{
            //     'input':{
            //       'text':'Android is a mobile operating system developed by Google,
            //          based on the Linux kernel and designed primarily for
            //          touchscreen mobile devices such as smartphones and tablets.'
            //     },
            //     'voice':{
            //       'languageCode':'en-gb',
            //       'name':'en-GB-Standard-A',
            //       'ssmlGender':'FEMALE'
            //     },
            //     'audioConfig':{
            //       'audioEncoding':'MP3'
            //     }
            //   }" "https://texttospeech.googleapis.com/v1beta1/text:synthesize" > synthesize-text.txt
        }
    }

    /**
     * Announce a change in selection or content via the aria-live region.
     *
     * @param action The action that invoked the change.
     * @param oldModel The previous value of the model before the change.
     */
    function defaultAnnounceHook(mathfield, action, oldModel, atoms) {
        //** Fix: the focus is the end of the selection, so it is before where we want it
        let liveText = '';
        // const action = moveAmount > 0 ? "right" : "left";
        if (action === 'plonk') {
            // Use this sound to indicate (minor) errors, for
            // example when a action has no effect.
            if (mathfield.plonkSound) {
                mathfield.plonkSound.load();
                mathfield.plonkSound.play().catch((err) => console.warn(err));
            }
            // As a side effect, reset the keystroke buffer
            mathfield.resetKeystrokeBuffer();
        }
        else if (action === 'delete') {
            liveText = speakableText(mathfield.config, 'deleted: ', atoms);
            //*** FIX: could also be moveUp or moveDown -- do something different like provide context???
        }
        else if (action === 'focus' || /move/.test(action)) {
            //*** FIX -- should be xxx selected/unselected */
            liveText =
                (selectionIsCollapsed(mathfield.model) ? '' : 'selected: ') +
                    nextAtomSpeechText(mathfield, oldModel);
        }
        else if (action === 'replacement') {
            // announce the contents
            liveText = speakableText(mathfield.config, '', mathfield.model.sibling(0));
        }
        else if (action === 'line') {
            // announce the current line -- currently that's everything
            liveText = speakableText(mathfield.config, '', mathfield.model.root);
            mathfield.accessibleNode.innerHTML = mathfield.config.createHTML('<math xmlns="http://www.w3.org/1998/Math/MathML">' +
                atomsToMathML(mathfield.model.root, mathfield.config) +
                '</math>');
            mathfield.textarea.setAttribute('aria-label', 'after: ' + liveText);
            /*** FIX -- testing hack for setting braille ***/
            // mathfield.accessibleNode.focus();
            // console.log("before sleep");
            // sleep(1000).then(() => {
            //     mathfield.textarea.focus();
            //     console.log("after sleep");
            // });
        }
        else {
            liveText = atoms
                ? speakableText(mathfield.config, action + ' ', atoms)
                : action;
        }
        // aria-live regions are only spoken when it changes; force a change by
        // alternately using nonbreaking space or narrow nonbreaking space
        const ariaLiveChangeHack = /\u00a0/.test(mathfield.ariaLiveText.textContent)
            ? ' \u202f '
            : ' \u00a0 ';
        mathfield.ariaLiveText.textContent = liveText + ariaLiveChangeHack;
        // this.textarea.setAttribute('aria-label', liveText + ariaLiveChangeHack);
    }
    /* Returns the speech text of the next atom after the selection or
     *   an 'end of' phrasing based on what structure we are at the end of
     */
    // @revisit. Currently this = MathfieldPrivate, but it looks like model is enough
    function nextAtomSpeechText(mathfield, oldModel) {
        function relation(parent, leaf) {
            const EXPR_NAME = {
                //    'array': 'should not happen',
                numer: 'numerator',
                denom: 'denominator',
                index: 'index',
                body: 'parent',
                subscript: 'subscript',
                superscript: 'superscript',
            };
            const PARENT_NAME = {
                enclose: 'cross out',
                leftright: 'fence',
                surd: 'square root',
                root: 'math field',
            };
            return leaf.relation === 'body'
                ? PARENT_NAME[parent.type]
                : EXPR_NAME[leaf.relation];
        }
        const oldPath = oldModel ? oldModel.path : [];
        const path = mathfield.model.path;
        const leaf = path[path.length - 1];
        let result = '';
        while (oldPath.length > path.length) {
            result +=
                'out of ' +
                    relation(oldModel.parent(), oldPath[oldPath.length - 1]) +
                    '; ';
            oldPath.pop();
        }
        if (!selectionIsCollapsed(mathfield.model)) {
            return speakableText(mathfield.config, '', getSelectedAtoms(mathfield.model));
        }
        // announce start of denominator, etc
        const relationName = relation(mathfield.model.parent(), leaf);
        if (leaf.offset === 0) {
            result +=
                (relationName ? 'start of ' + relationName : 'unknown') + ': ';
        }
        const atom = mathfield.model.sibling(Math.max(1, mathfield.model.extent));
        if (atom) {
            result += speakableText(mathfield.config, '', atom);
        }
        else if (leaf.offset !== 0) {
            // don't say both start and end
            result += relationName ? 'end of ' + relationName : 'unknown';
        }
        return result;
    }

    const AUDIO_FEEDBACK_VOLUME = 0.5; // from 0.0 to 1.0
    const NO_OP_LISTENER = () => {
        return;
    };
    function loadSound(sound) {
        if (typeof sound === 'string') {
            const result = new Audio();
            result.preload = 'none';
            result.src = sound;
            result.volume = AUDIO_FEEDBACK_VOLUME;
            return result;
        }
        return sound;
    }
    function unloadSound(sound) {
        if (sound instanceof HTMLAudioElement) {
            sound.pause();
            sound.removeAttribute('src');
            sound.load();
        }
    }
    function update$1(current, updates) {
        const result = get(current, Object.keys(current));
        Object.keys(updates).forEach((key) => {
            var _a, _b;
            switch (key) {
                case 'scriptDepth':
                    if (isArray(updates.scriptDepth)) {
                        result.scriptDepth = [
                            updates.scriptDepth[0],
                            updates.scriptDepth[1],
                        ];
                    }
                    else if (typeof updates.scriptDepth === 'number') {
                        result.scriptDepth = [
                            updates.scriptDepth,
                            updates.scriptDepth,
                        ];
                    }
                    else {
                        throw Error('Unexpected value for scriptDepth');
                    }
                    break;
                case 'namespace':
                    // Validate the namespace (used for `data-` attributes)
                    if (!/^[a-z]*[-]?$/.test(updates.namespace)) {
                        throw Error('namespace must be a string of lowercase characters only');
                    }
                    if (!/-$/.test(updates.namespace)) {
                        result.namespace = updates.namespace + '-';
                    }
                    else {
                        result.namespace = updates.namespace;
                    }
                    break;
                case 'locale':
                    result.locale =
                        updates.locale === 'auto' ? l10n.locale : updates.locale;
                    break;
                case 'strings':
                    l10n.merge(updates.strings);
                    break;
                case 'virtualKeyboardLayout':
                    if (updates.virtualKeyboardLayout === 'auto') {
                        result.virtualKeyboardLayout = (_a = {
                            fr: 'azerty',
                            be: 'azerty',
                            al: 'qwertz',
                            ba: 'qwertz',
                            cz: 'qwertz',
                            de: 'qwertz',
                            hu: 'qwertz',
                            sk: 'qwertz',
                            ch: 'qwertz',
                        }[l10n.locale.substring(0, 2)]) !== null && _a !== void 0 ? _a : 'qwerty';
                    }
                    else {
                        result.virtualKeyboardLayout =
                            updates.virtualKeyboardLayout;
                    }
                    break;
                case 'virtualKeyboardMode':
                    {
                        const isTouchDevice = (_b = window.matchMedia) === null || _b === void 0 ? void 0 : _b.call(window, '(any-pointer: coarse)').matches;
                        if (updates.virtualKeyboardMode === 'auto') {
                            result.virtualKeyboardMode = isTouchDevice
                                ? 'onfocus'
                                : 'off';
                        }
                        else {
                            result.virtualKeyboardMode =
                                updates.virtualKeyboardMode;
                        }
                    }
                    break;
                case 'letterShapeStyle':
                    if (updates.letterShapeStyle === 'auto') {
                        // Letter shape style (locale dependent)
                        if (l10n.locale.substring(0, 2) === 'fr') {
                            result.letterShapeStyle = 'french';
                        }
                        else {
                            result.letterShapeStyle = 'tex';
                        }
                    }
                    else {
                        result.letterShapeStyle = updates.letterShapeStyle;
                    }
                    break;
                case 'plonkSound':
                    unloadSound(result.plonkSound);
                    result.plonkSound = loadSound(updates.plonkSound);
                    break;
                case 'keypressSound':
                    unloadSound(result.keypressSound);
                    if (typeof updates.keypressSound === 'string') {
                        const sound = loadSound(updates.keypressSound);
                        result.keypressSound = {
                            delete: sound,
                            return: sound,
                            spacebar: sound,
                            default: sound,
                        };
                    }
                    else if (updates.keypressSound instanceof HTMLAudioElement) {
                        result.keypressSound = {
                            delete: updates.keypressSound,
                            return: updates.keypressSound,
                            spacebar: updates.keypressSound,
                            default: updates.keypressSound,
                        };
                    }
                    else {
                        if (!updates.keypressSound.default) {
                            throw Error('Missing keypressSound.default');
                        }
                        result.keypressSound = { ...updates.keypressSound };
                        if (!result.keypressSound.return) {
                            result.keypressSound.return =
                                updates.keypressSound.default;
                        }
                        if (!result.keypressSound.spacebar) {
                            result.keypressSound.spacebar =
                                updates.keypressSound.default;
                        }
                        if (!result.keypressSound.delete) {
                            result.keypressSound.delete =
                                updates.keypressSound.default;
                        }
                    }
                    break;
                case 'onBlur':
                case 'onFocus':
                case 'onContentWillChange':
                case 'onContentDidChange':
                case 'onSelectionWillChange':
                case 'onSelectionDidChange':
                case 'onUndoStateWillChange':
                case 'onUndoStateDidChange':
                case 'onModeChange':
                case 'onVirtualKeyboardToggle':
                case 'onReadAloudStatus':
                case 'onError':
                    if (updates[key] === null) {
                        result[key] = NO_OP_LISTENER;
                    }
                    else if (typeof updates[key] !== 'function') {
                        throw Error(key + ' must be a function or null');
                    }
                    result[key] = updates[key];
                    break;
                default:
                    if (isArray(updates[key])) {
                        result[key] = [...updates[key]];
                    }
                    else if (typeof updates[key] === 'object') {
                        result[key] = { ...updates[key] };
                    }
                    else {
                        result[key] = updates[key];
                    }
            }
        });
        // @revisit 1.0: for backward compatibility, interprets the overrideDefaultInlineShortcuts
        // property
        if (typeof updates.overrideDefaultInlineShortcuts !== 'undefined') {
            if (updates.overrideDefaultInlineShortcuts) {
                result.inlineShortcuts = updates.inlineShortcuts;
            }
            else {
                result.inlineShortcuts = {
                    ...INLINE_SHORTCUTS,
                    ...updates.inlineShortcuts,
                };
            }
        }
        return result;
    }
    function get(config, keys) {
        let resolvedKeys;
        if (typeof keys === 'string') {
            resolvedKeys = [keys];
        }
        else if (typeof keys === 'undefined') {
            resolvedKeys = Object.keys(config);
        }
        else {
            resolvedKeys = keys;
        }
        const result = {};
        resolvedKeys.forEach((x) => {
            if (isArray(result[x])) {
                result[x] = [...result[x]];
            }
            else if (typeof result[x] === 'object') {
                result[x] = { ...result[x] };
            }
            else {
                result[x] = config[x];
            }
        });
        // If requested a single key, return its value
        if (typeof keys === 'string') {
            return result[keys];
        }
        return result;
    }
    function getDefault() {
        return {
            namespace: '',
            substituteTextArea: undefined,
            readOnly: false,
            createHTML: (s) => s,
            fontsDirectory: './fonts',
            defaultMode: 'math',
            macros: MACROS,
            horizontalSpacingScale: 1.0,
            letterShapeStyle: 'auto',
            smartMode: false,
            smartFence: true,
            smartSuperscript: true,
            scriptDepth: [Infinity, Infinity],
            removeExtraneousParentheses: true,
            ignoreSpacebarInMathMode: true,
            locale: l10n.locale,
            strings: {},
            keybindings: DEFAULT_KEYBINDINGS,
            overrideDefaultInlineShortcuts: false,
            inlineShortcuts: {},
            inlineShortcutTimeout: 0,
            virtualKeyboardToggleGlyph: `<span style="width: 21px; margin-top: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>`,
            virtualKeyboardMode: 'auto',
            virtualKeyboards: 'all',
            virtualKeyboardLayout: 'auto',
            customVirtualKeyboardLayers: {},
            customVirtualKeyboards: {},
            virtualKeyboardTheme: /android|cros/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)
                ? 'material'
                : 'apple',
            keypressVibration: true,
            keypressSound: null,
            plonkSound: null,
            textToSpeechRules: 'mathlive',
            textToSpeechMarkup: '',
            textToSpeechRulesOptions: {},
            speechEngine: 'local',
            speechEngineVoice: 'Joanna',
            speechEngineRate: '100%',
            speakHook: NO_OP_LISTENER,
            readAloudHook: NO_OP_LISTENER,
            onAnnounce: defaultAnnounceHook,
            onKeystroke: () => true,
            onMoveOutOf: () => true,
            onTabOutOf: () => true,
            onBlur: NO_OP_LISTENER,
            onFocus: NO_OP_LISTENER,
            onContentWillChange: NO_OP_LISTENER,
            onContentDidChange: NO_OP_LISTENER,
            onSelectionWillChange: NO_OP_LISTENER,
            onSelectionDidChange: NO_OP_LISTENER,
            onUndoStateWillChange: NO_OP_LISTENER,
            onUndoStateDidChange: NO_OP_LISTENER,
            onModeChange: NO_OP_LISTENER,
            onVirtualKeyboardToggle: NO_OP_LISTENER,
            onReadAloudStatus: NO_OP_LISTENER,
            onError: () => {
                return;
            },
        };
    }

    /**
     * Convert the atoms before the anchor to 'text' mode
     * @param count - how many atoms back to look at
     * @param {function} until - callback to indicate when to stop
     * @private
     */
    function convertLastAtomsToText(mathfield, count, until) {
        if (typeof count === 'function') {
            until = count;
            count = Infinity;
        }
        if (typeof count === 'undefined') {
            count = Infinity;
        }
        let i = 0;
        let done = false;
        contentWillChange(mathfield.model);
        while (!done) {
            const atom = mathfield.model.sibling(i);
            done =
                count === 0 ||
                    !atom ||
                    atom.mode !== 'math' ||
                    !(/mord|textord|mpunct/.test(atom.type) ||
                        (atom.type === 'mop' && /[a-zA-Z]+/.test(atom.body))) ||
                    Boolean(atom.superscript) ||
                    Boolean(atom.subscript) ||
                    (until && !until(atom));
            if (!done) {
                atom.applyStyle({ mode: 'text' });
                atom.symbol = atom.body;
                atom.latex = '';
            }
            i -= 1;
            count -= 1;
        }
        contentDidChange(mathfield.model);
    }
    /**
     * Convert the atoms before the anchor to 'math' mode 'mord'
     * @param {number} count - how many atoms back to look at
     * @param {function} until - callback to indicate when to stop
     * @private
     */
    function convertLastAtomsToMath(mathfield, count, until) {
        if (typeof count === 'function') {
            until = count;
            count = Infinity;
        }
        if (typeof count === 'undefined') {
            count = Infinity;
        }
        contentWillChange(mathfield.model);
        let i = 0;
        let done = false;
        while (!done) {
            const atom = mathfield.model.sibling(i);
            done =
                count === 0 ||
                    !atom ||
                    atom.mode !== 'text' ||
                    atom.body === ' ' ||
                    (until && !until(atom));
            if (!done) {
                atom.applyStyle({ mode: 'math' });
            }
            i -= 1;
            count -= 1;
        }
        removeIsolatedSpace(mathfield);
        contentDidChange(mathfield.model);
    }
    /**
     * Going backwards from the anchor, if a text zone consisting of a single
     * space character is found (i.e. it is surrounded by math zone),
     * remove it.
     */
    function removeIsolatedSpace(mathfield) {
        let i = 0;
        while (mathfield.model.sibling(i) &&
            mathfield.model.sibling(i).mode === 'math') {
            i -= 1;
        }
        // If the atom before the last one converted is a
        // text mode space, preceded by a math mode atom,
        // remove the space
        if (mathfield.model.sibling(i) &&
            mathfield.model.sibling(i).mode === 'text' &&
            mathfield.model.sibling(i).body === ' ' &&
            (!mathfield.model.sibling(i - 1) ||
                mathfield.model.sibling(i - 1).mode === 'math')) {
            contentWillChange(mathfield.model);
            mathfield.model.siblings().splice(i - 1, 1);
            contentDidChange(mathfield.model);
            // We need to adjust the selection after doing some surgery on the atoms list
            // But we don't want to receive selection notification changes
            // which could have a side effect of changing the mode :(
            const save = mathfield.model.suppressChangeNotifications;
            mathfield.model.suppressChangeNotifications = true;
            setSelection(mathfield.model, mathfield.model.anchorOffset() - 1);
            mathfield.model.suppressChangeNotifications = save;
        }
    }
    /**
     * Return the characters before anchor that could potentially be turned
     * into text mode.
     * This excludes things like 'mop' (e.g. \sin)
     */
    function getTextBeforeAnchor(mathfield) {
        // Going backwards, accumulate
        let result = '';
        let i = 0;
        let done = false;
        while (!done) {
            const atom = mathfield.model.sibling(i);
            done = !(atom &&
                ((atom.mode === 'text' && !atom.type) ||
                    (atom.mode === 'math' && /mord|textord|mpunct/.test(atom.type))));
            if (!done) {
                result = atom.body + result;
            }
            i -= 1;
        }
        return result;
    }
    /**
     * Consider whether to switch mode give the content before the anchor
     * and the character being input
     *
     * @param keystroke
     * @param evt - a Event corresponding to the keystroke
     * @return true if the mode should change
     */
    function smartMode(mathfield, keystroke, evt) {
        if (mathfield.smartModeSuppressed) {
            return false;
        }
        if (mathfield.model.endOffset() < mathfield.model.siblings().length - 1) {
            return false;
        }
        if (!evt || !mightProducePrintableCharacter(evt)) {
            return false;
        }
        const c = eventToChar(evt);
        if (!selectionIsCollapsed(mathfield.model)) {
            // There is a selection
            if (mathfield.mode === 'text') {
                if (/[/_^]/.test(c)) {
                    return true;
                }
            }
            return false;
        }
        const context = getTextBeforeAnchor(mathfield) + c;
        if (mathfield.mode === 'text') {
            // We're in text mode. Should we switch to math?
            if (keystroke === 'Esc' || /[/\\]/.test(c)) {
                // If this is a command for a fraction,
                // or the '\' command mode key
                // switch to 'math'
                return true;
            }
            if (/[\^_]/.test(c)) {
                // If this is a superscript or subscript
                // switch to 'math'
                if (/(^|\s)[a-zA-Z][^_]$/.test(context)) {
                    // If left hand context is a single letter,
                    // convert it to math
                    convertLastAtomsToMath(mathfield, 1);
                }
                return true;
            }
            // If this is a closing matching fence
            // switch to 'math' mode
            const lFence = { ')': '(', '}': '{', ']': '[' }[c];
            if (lFence &&
                mathfield.model.parent() &&
                mathfield.model.parent().type === 'leftright' &&
                mathfield.model.parent().leftDelim === lFence) {
                return true;
            }
            if (/(^|[^a-zA-Z])(a|I)[ ]$/.test(context)) {
                // Single letters that are valid words in the current language
                // Do nothing. @todo: localization
                return false;
            }
            if (/[$€£₤₺¥¤฿¢₡₧₨₹₩₱]/u.test(c)) {
                // A currency symbol.
                // Switch to math mode
                return true;
            }
            if (/(^|[^a-zA-Z'’])[a-zA-Z][ ]$/.test(context)) {
                // An isolated letter, followed by a space:
                // Convert the letter to math, stay in text mode.
                convertLastAtomsToMath(mathfield, 1);
                return false;
            }
            if (/[^0-9]\.[^0-9\s]$/.test(context)) {
                // A period followed by something other than space or a digit
                // and not preceded by a digit.
                // We thought this was a text period, but turns out it's not
                // Turn it into a \cdot
                convertLastAtomsToMath(mathfield, 1);
                const atom = mathfield.model.sibling(0);
                atom.body = '⋅'; // centered dot
                atom.variant = 'normal'; // @revisit. Was 'auto'. Check for proper conversion.
                atom.symbol = '\\cdot';
                atom.latex = '';
                return true;
            }
            if (/(^|\s)[a-zA-Z][^a-zA-Z]$/.test(context)) {
                // Single letter (x), followed by a non-letter (>, =...)
                convertLastAtomsToMath(mathfield, 1);
                return true;
            }
            if (/\.[0-9]$/.test(context)) {
                // If the new character is a digit,
                // and it was preceded by a dot (which may have been converted
                // to text)
                // turn the dot back into 'math'
                convertLastAtomsToMath(mathfield, 1);
                return true;
            }
            if (/[(][0-9+\-.]$/.test(context)) {
                // An open paren followed by a number
                // Turn the paren back to math and switch.
                convertLastAtomsToMath(mathfield, 1);
                return true;
            }
            if (/[(][a-z][,;]$/.test(context)) {
                // An open paren followed by a single letter, then a "," or ";"
                // Turn the paren back and letter to math and switch.
                convertLastAtomsToMath(mathfield, 2);
                return true;
            }
            // The tests above can look behind and change what had previously
            // been entered. Now, let's just look at the typed character.
            if (/[0-9+\-=><*|]$/.test(c)) {
                // If this new character looks like a number,
                // or a relational operator (=, <, >)
                // or a "*" or "|"
                // (note that <=, >=, etc... are handled separately as shortcuts)
                // switch to 'math'
                removeIsolatedSpace(mathfield);
                return true;
            }
        }
        else {
            // We're in math mode. Should we switch to text?
            if (keystroke === '[Space]') {
                convertLastAtomsToText(mathfield, undefined, (a) => /[a-z][:,;.]$/.test(a.body));
                return true;
            }
            if (/[a-zA-Z]{3,}$/.test(context) &&
                !/(dxd|abc|xyz|uvw)$/.test(context)) {
                // A sequence of three characters
                // (except for some exceptions)
                // Convert them to text.
                convertLastAtomsToText(mathfield, undefined, (a) => /[a-zA-Z]/.test(a.body));
                return true;
            }
            if (/(^|\W)(if|If)$/i.test(context)) {
                // @todo localization
                convertLastAtomsToText(mathfield, 1);
                return true;
            }
            if (/(\u0393|\u0394|\u0398|\u039b|\u039E|\u03A0|\u03A3|\u03a5|\u03a6|\u03a8|\u03a9|[\u03b1-\u03c9]|\u03d1|\u03d5|\u03d6|\u03f1|\u03f5){3,}$/u.test(context) &&
                !/(αβγ)$/.test(context)) {
                // A sequence of three *greek* characters
                // (except for one exception)
                // Convert them to text.
                convertLastAtomsToText(mathfield, undefined, (a) => /(:|,|;|.|\u0393|\u0394|\u0398|\u039b|\u039E|\u03A0|\u03A3|\u03a5|\u03a6|\u03a8|\u03a9|[\u03b1-\u03c9]|\u03d1|\u03d5|\u03d6|\u03f1|\u03f5)/u.test(a.body));
                return true;
            }
            if (c === '?') {
                // If the last character is a question mark,
                // turn it to 'text'
                return true;
            }
            if (c === '.' && !/[0-9-+]\.$/.test(context)) {
                // A period after something other than a digit (or minus)
                return true;
            }
        }
        return false;
    }

    function showKeystroke(mathfield, keystroke) {
        const vb = mathfield.keystrokeCaption;
        if (vb && mathfield.keystrokeCaptionVisible) {
            const bounds = mathfield.element.getBoundingClientRect();
            vb.style.left = bounds.left + 'px';
            vb.style.top = bounds.top - 64 + 'px';
            vb.innerHTML = mathfield.config.createHTML('<span>' +
                (getKeybindingMarkup(keystroke) || keystroke) +
                '</span>' +
                vb.innerHTML);
            vb.style.visibility = 'visible';
            setTimeout(function () {
                if (vb.childNodes.length > 0) {
                    vb.removeChild(vb.childNodes[vb.childNodes.length - 1]);
                }
                if (vb.childNodes.length === 0) {
                    vb.style.visibility = 'hidden';
                }
            }, 3000);
        }
    }
    /**
     * @param evt - An Event corresponding to the keystroke.
     */
    function onKeystroke(mathfield, keystroke, evt) {
        // 1. Update the keybindings according to the current keyboard layout
        // 1.1 Possibly update the current keyboard layout based on this event
        validateKeyboardLayout(evt);
        const activeLayout = getActiveKeyboardLayout();
        if (mathfield.keyboardLayout !== activeLayout.id) {
            console.log('Switching to keyboard layout ' + activeLayout.id);
            mathfield.keyboardLayout = activeLayout.id;
            mathfield.keybindings = normalizeKeybindings(mathfield.config.keybindings, (e) => {
                if (typeof mathfield.config.onError === 'function') {
                    mathfield.config.onError({
                        code: 'invalid-keybinding',
                        arg: e.join('\n'),
                    });
                }
                console.log(e.join('\n'));
            });
        }
        // 2. Display the keystroke in the keystroke panel (if visible)
        showKeystroke(mathfield, keystroke);
        // 3. Reset the timer for the keystroke buffer reset
        clearTimeout(mathfield.keystrokeBufferResetTimer);
        // 4. Give a chance to the custom keystroke handler to intercept the event
        if (mathfield.config.onKeystroke &&
            !mathfield.config.onKeystroke(mathfield, keystroke, evt)) {
            if (evt === null || evt === void 0 ? void 0 : evt.preventDefault) {
                evt.preventDefault();
                evt.stopPropagation();
            }
            return false;
        }
        // 5. Let's try to find a matching shortcut or command
        let shortcut;
        let stateIndex;
        let selector;
        let resetKeystrokeBuffer = false;
        // 5.1 Check if the keystroke, prefixed with the previously typed keystrokes,
        // would match a long shortcut (i.e. '~~')
        // Ignore the key if command or control is pressed (it may be a keybinding,
        // see 5.3)
        if (mathfield.mode !== 'command' &&
            (!evt || (!evt.ctrlKey && !evt.metaKey))) {
            if (!mightProducePrintableCharacter(evt)) {
                // It was a non-alpha character (PageUp, End, etc...)
                mathfield.resetKeystrokeBuffer();
            }
            else {
                const c = eventToChar(evt);
                // Find the longest substring that matches a shortcut
                const candidate = mathfield.keystrokeBuffer + c;
                let i = 0;
                while (!shortcut && i < candidate.length) {
                    let siblings;
                    if (mathfield.keystrokeBufferStates[i]) {
                        const mathlist = new ModelPrivate();
                        mathlist.root = makeRoot('math', parseString(mathfield.keystrokeBufferStates[i].latex, mathfield.config.defaultMode, null, mathfield.config.macros));
                        setPath(mathlist, mathfield.keystrokeBufferStates[i].selection);
                        siblings = mathlist.siblings();
                    }
                    else {
                        siblings = mathfield.model.siblings();
                    }
                    shortcut = getInlineShortcut(siblings, candidate.slice(i), mathfield.config.inlineShortcuts);
                    i += 1;
                }
                stateIndex = i - 1;
                mathfield.keystrokeBuffer += c;
                mathfield.keystrokeBufferStates.push(mathfield.getUndoRecord());
                if (getInlineShortcutsStartingWith(candidate, mathfield.config)
                    .length <= 1) {
                    resetKeystrokeBuffer = true;
                }
                else {
                    if (mathfield.config.inlineShortcutTimeout) {
                        // Set a timer to reset the shortcut buffer
                        mathfield.keystrokeBufferResetTimer = setTimeout(() => {
                            mathfield.resetKeystrokeBuffer();
                        }, mathfield.config.inlineShortcutTimeout);
                    }
                }
            }
        }
        // 5.2. Should we switch mode?
        // Need to check this before determing if there's a valid shortcut
        // since if we switch to math mode, we may want to apply the shortcut
        // e.g. "slope = rise/run"
        if (mathfield.config.smartMode) {
            const previousMode = mathfield.mode;
            if (shortcut) {
                // If we found a shortcut (e.g. "alpha"),
                // switch to math mode and insert it
                mathfield.mode = 'math';
            }
            else if (smartMode(mathfield, keystroke, evt)) {
                mathfield.mode = { math: 'text', text: 'math' }[mathfield.mode];
                selector = '';
            }
            // Notify of mode change
            if (mathfield.mode !== previousMode &&
                typeof mathfield.config.onModeChange === 'function') {
                mathfield.config.onModeChange(mathfield, mathfield.mode);
            }
        }
        // 5.3 Check if this matches a keybinding
        // Need to check this **after** checking for inline shortcuts because
        // shift+backquote is a keybinding that inserts "\~"", but "~~" is a
        // shortcut for "\approx" and needs to have priority over shift+backquote
        if (!shortcut && !selector) {
            selector = getCommandForKeybinding(mathfield.keybindings, mathfield.mode, keystroke);
        }
        // No shortcut :( We're done.
        if (!shortcut && !selector) {
            return true;
        }
        if (mathfield.config.readOnly && selector[0] === 'insert') {
            return true;
        }
        // 6. Perform the action matching this shortcut
        // 6.1 Remove any error indicator (wavy underline) on the current command
        // sequence (if there are any)
        decorateCommandStringAroundInsertionPoint(mathfield.model, false);
        // 6.2 If we have a `moveAfterParent` selector (usually triggered with
        // `spacebar), and we're at the end of a smart fence, close the fence with
        // an empty (.) right delimiter
        const parent = mathfield.model.parent();
        if (selector === 'moveAfterParent' &&
            parent &&
            parent.type === 'leftright' &&
            mathfield.model.endOffset() === mathfield.model.siblings().length - 1 &&
            mathfield.config.smartFence &&
            insertSmartFence(mathfield.model, '.', mathfield.style)) {
            // Pressing the space bar (moveAfterParent selector) when at the end
            // of a potential smartFence will close it as a semi-open fence
            selector = '';
            requestUpdate(mathfield); // Re-render the closed smartFence
        }
        // 6.3 If this is the Spacebar and we're just before or right after
        // a text zone, insert the space inside the text zone
        if (mathfield.mode === 'math' && keystroke === '[Spacebar]' && !shortcut) {
            const nextSibling = mathfield.model.sibling(1);
            const previousSibling = mathfield.model.sibling(-1);
            if ((nextSibling && nextSibling.mode === 'text') ||
                (previousSibling && previousSibling.mode === 'text')) {
                insert$1(mathfield.model, ' ', { mode: 'text' });
            }
        }
        // 6.4 If there's a selector, perform it.
        if (selector) {
            mathfield.$perform(selector);
        }
        else if (shortcut) {
            // 5.5 Insert the shortcut
            // If the shortcut is a mandatory escape sequence (\}, etc...)
            // don't make it undoable, this would result in syntactically incorrect
            // formulas
            if (!/^(\\{|\\}|\\[|\\]|\\@|\\#|\\$|\\%|\\^|\\_|\\backslash)$/.test(shortcut)) {
                // To enable the substitution to be undoable,
                // insert the character before applying the substitution
                const style = {
                    ...getAnchorStyle(mathfield.model),
                    ...mathfield.style,
                };
                insert$1(mathfield.model, eventToChar(evt), {
                    suppressChangeNotifications: true,
                    mode: mathfield.mode,
                    style: style,
                });
                const saveMode = mathfield.mode;
                // Create a snapshot with the inserted character
                mathfield.snapshotAndCoalesce();
                // Revert to the state before the beginning of the shortcut
                // (restore doesn't change the undo stack)
                mathfield.restoreToUndoRecord(mathfield.keystrokeBufferStates[stateIndex]);
                mathfield.mode = saveMode;
            }
            contentWillChange(mathfield.model);
            const save = mathfield.model.suppressChangeNotifications;
            mathfield.model.suppressChangeNotifications = true;
            // Insert the substitute, possibly as a smart fence
            const style = {
                ...getAnchorStyle(mathfield.model),
                ...mathfield.style,
            };
            insert$1(mathfield.model, shortcut, {
                format: 'latex',
                mode: mathfield.mode,
                style: style,
                smartFence: true,
            });
            // Check if as a result of the substitution there is now an isolated
            // (text mode) space (surrounded by math). In which case, remove it.
            removeIsolatedSpace(mathfield);
            // Switch (back) to text mode if the shortcut ended with a space
            if (shortcut.endsWith(' ')) {
                mathfield.mode = 'text';
                insert$1(mathfield.model, ' ', { mode: 'text', style: style });
            }
            mathfield.model.suppressChangeNotifications = save;
            contentDidChange(mathfield.model);
            mathfield.snapshot();
            requestUpdate(mathfield);
            mathfield.model.announce('replacement');
            // If we're done with the shortcuts (found a unique one), reset it.
            if (resetKeystrokeBuffer) {
                mathfield.resetKeystrokeBuffer();
            }
        }
        // 7. Make sure the insertion point is scrolled into view
        mathfield.scrollIntoView();
        // 8. Keystroke has been handled, if it wasn't caught in the default
        // case, so prevent propagation
        if (evt === null || evt === void 0 ? void 0 : evt.preventDefault) {
            evt.preventDefault();
            evt.stopPropagation();
        }
        return false;
    }
    /**
     * This handler is invoked when text has been typed, pasted in or input with
     * an input method. As a result, `text` can be a sequence of characters to
     * be inserted.
     * @param {string} text
     * @param {object} options
     * @param {boolean} options.focus - If true, the mathfield will be focused
     * @param {boolean} options.feedback - If true, provide audio and haptic feedback
     * @param {boolean} options.simulateKeystroke - If true, generate some synthetic
     * keystrokes (useful to trigger inline shortcuts, for example)
     * @param {boolean} options.commandMode - If true, switch to command mode if
     * necessary, then insert text
     * @private
     */
    function onTypedText(mathfield, text, options) {
        if (mathfield.config.readOnly) {
            mathfield.model.announce('plonk');
            return;
        }
        options = options !== null && options !== void 0 ? options : {};
        // Focus, then provide audio and haptic feedback
        if (options.focus) {
            mathfield.$focus();
        }
        if (options.feedback) {
            if (mathfield.config.keypressVibration && (navigator === null || navigator === void 0 ? void 0 : navigator.vibrate)) {
                navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
            }
            if (mathfield.keypressSound) {
                mathfield.keypressSound.load();
                mathfield.keypressSound.play().catch((err) => console.warn(err));
            }
        }
        if (options.commandMode && mathfield.mode !== 'command') {
            mathfield.switchMode('command');
        }
        // Remove any error indicator on the current command sequence
        // (if there is one)
        decorateCommandStringAroundInsertionPoint(mathfield.model, false);
        if (options.simulateKeystroke) {
            // for (const c of text) {
            const c = text.charAt(0);
            const ev = new KeyboardEvent('keypress', { key: c });
            if (!onKeystroke(mathfield, c, ev)) {
                return;
            }
            // }
        }
        // Insert the specified text at the current insertion point.
        // If the selection is not collapsed, the content will be deleted first.
        let popoverText = '';
        let displayArrows = false;
        if (mathfield.pasteInProgress) {
            mathfield.pasteInProgress = false;
            // This call was made in response to a paste event.
            // Interpret `text` as a 'smart' expression (could be LaTeX, could be
            // UnicodeMath)
            insert$1(mathfield.model, text, {
                smartFence: mathfield.config.smartFence,
                mode: 'math',
            });
        }
        else {
            const style = {
                ...getAnchorStyle(mathfield.model),
                ...mathfield.style,
            };
            // Decompose the string into an array of graphemes.
            // This is necessary to correctly process what is displayed as a single
            // glyph (a grapheme) but which is composed of multiple Unicode
            // codepoints. This is the case in particular for some emojis, such as
            // those with a skin tone modifier, the country flags emojis or
            // compound emojis such as the professional emojis, including the
            // David Bowie emoji: 👨🏻‍🎤
            const graphemes = splitGraphemes(text);
            for (const c of graphemes) {
                if (mathfield.mode === 'command') {
                    removeSuggestion(mathfield.model);
                    mathfield.suggestionIndex = 0;
                    const command = extractCommandStringAroundInsertionPoint(mathfield.model);
                    const suggestions = suggest(command + c);
                    displayArrows = suggestions.length > 1;
                    if (suggestions.length === 0) {
                        insert$1(mathfield.model, c, { mode: 'command' });
                        if (/^\\[a-zA-Z\\*]+$/.test(command + c)) {
                            // This looks like a command name, but not a known one
                            decorateCommandStringAroundInsertionPoint(mathfield.model, true);
                        }
                        hidePopover(mathfield);
                    }
                    else {
                        insert$1(mathfield.model, c, { mode: 'command' });
                        if (suggestions[0].match !== command + c) {
                            insertSuggestion(mathfield.model, suggestions[0].match, -suggestions[0].match.length + command.length + 1);
                        }
                        popoverText = suggestions[0].match;
                    }
                }
                else if (mathfield.mode === 'math') {
                    // Some characters are mapped to commands. Handle them here.
                    // This is important to handle synthetic text input and
                    // non-US keyboards, on which, fop example, the '^' key is
                    // not mapped to  'Shift-Digit6'.
                    const selector = {
                        '^': 'moveToSuperscript',
                        _: 'moveToSubscript',
                        ' ': 'moveAfterParent',
                    }[c];
                    if (selector) {
                        if (selector === 'moveToSuperscript') {
                            if (superscriptDepth(mathfield) >=
                                mathfield.config.scriptDepth[1]) {
                                mathfield.model.announce('plonk');
                                return;
                            }
                        }
                        else if (selector === 'moveToSubscript') {
                            if (subscriptDepth(mathfield) >=
                                mathfield.config.scriptDepth[0]) {
                                mathfield.model.announce('plonk');
                                return;
                            }
                        }
                        mathfield.$perform(selector);
                    }
                    else {
                        if (mathfield.config.smartSuperscript &&
                            mathfield.model.relation() === 'superscript' &&
                            /[0-9]/.test(c) &&
                            mathfield.model
                                .siblings()
                                .filter((x) => x.type !== 'first').length === 0) {
                            // We are inserting a digit into an empty superscript
                            // If smartSuperscript is on, insert the digit, and
                            // exit the superscript.
                            insert$1(mathfield.model, c, {
                                mode: 'math',
                                style: style,
                            });
                            moveAfterParent(mathfield.model);
                        }
                        else {
                            insert$1(mathfield.model, c, {
                                mode: 'math',
                                style: style,
                                smartFence: mathfield.config.smartFence,
                            });
                        }
                    }
                }
                else if (mathfield.mode === 'text') {
                    insert$1(mathfield.model, c, { mode: 'text', style: style });
                }
            }
        }
        if (mathfield.mode !== 'command') {
            mathfield.snapshotAndCoalesce();
        }
        // Mark the mathfield dirty
        // (it will get rendered in scrollIntoView())
        mathfield.dirty = true;
        // Make sure the insertion point is visible
        mathfield.scrollIntoView();
        // Since the location of the popover depends on the position of the caret
        // only show the popover after the formula has been rendered and the
        // position of the caret calculated
        showPopoverWithLatex(mathfield, popoverText, displayArrows);
    }
    function superscriptDepth(mathfield) {
        let result = 0;
        let i = 0;
        let atom = mathfield.model.ancestor(i);
        let wasSuperscript = false;
        while (atom) {
            if (atom.superscript || atom.subscript) {
                result += 1;
            }
            if (atom.superscript) {
                wasSuperscript = true;
            }
            else if (atom.subscript) {
                wasSuperscript = false;
            }
            i += 1;
            atom = mathfield.model.ancestor(i);
        }
        return wasSuperscript ? result : 0;
    }
    function subscriptDepth(mathfield) {
        let result = 0;
        let i = 0;
        let atom = mathfield.model.ancestor(i);
        let wasSubscript = false;
        while (atom) {
            if (atom.superscript || atom.subscript) {
                result += 1;
            }
            if (atom.superscript) {
                wasSubscript = false;
            }
            else if (atom.subscript) {
                wasSubscript = true;
            }
            i += 1;
            atom = mathfield.model.ancestor(i);
        }
        return wasSubscript ? result : 0;
    }

    register$2({
        undo: (mathfield) => {
            complete(mathfield);
            // Undo to the previous state
            mathfield.undo();
            return true;
        },
        redo: (mathfield) => {
            complete(mathfield);
            mathfield.redo();
            return true;
        },
        scrollIntoView: (mathfield) => {
            mathfield.scrollIntoView();
            return true;
        },
        scrollToStart: (mathfield) => {
            mathfield.field.scroll(0, 0);
            return true;
        },
        scrollToEnd: (mathfield) => {
            const fieldBounds = mathfield.field.getBoundingClientRect();
            mathfield.field.scroll(fieldBounds.left - window.scrollX, 0);
            return true;
        },
        enterCommandMode: (mathfield) => {
            mathfield.switchMode('command');
            return true;
        },
        toggleKeystrokeCaption: (mathfield) => {
            mathfield.keystrokeCaptionVisible = !mathfield.keystrokeCaptionVisible;
            mathfield.keystrokeCaption.innerHTML = '';
            if (!mathfield.keystrokeCaptionVisible) {
                mathfield.keystrokeCaption.style.visibility = 'hidden';
            }
            return false;
        },
        switchMode: (mathfield, mode) => {
            mathfield.switchMode(mode);
            return true;
        },
        insert: (mathfield, s, options) => mathfield.$insert(s, options),
        typedText: (mathfield, text) => {
            onTypedText(mathfield, text);
            return true;
        },
    });

    function applyStyle$4(mathfield, inStyle) {
        mathfield.resetKeystrokeBuffer();
        const style = validateStyle(inStyle);
        if (style.mode) {
            // There's a mode ('text', 'math', 'command') change
            if (selectionIsCollapsed(mathfield.model)) {
                // Nothing selected
                mathfield.switchMode(style.mode);
            }
            else {
                // Convert the selection from one mode to another
                const previousMode = mathfield.mode;
                const targetMode = (getAnchorMode(mathfield.model) ||
                    mathfield.config.defaultMode) === 'math'
                    ? 'text'
                    : 'math';
                let convertedSelection = mathfield.$selectedText('ASCIIMath');
                if (targetMode === 'math' && /^"[^"]+"$/.test(convertedSelection)) {
                    convertedSelection = convertedSelection.slice(1, -1);
                }
                mathfield.$insert(convertedSelection, {
                    mode: targetMode,
                    selectionMode: 'item',
                    format: targetMode === 'text' ? 'text' : 'ASCIIMath',
                });
                mathfield.mode = targetMode;
                if (mathfield.groupIsSelected()) {
                    // The entire group was selected. Adjust parent mode if
                    // appropriate
                    const parent = mathfield.model.parent();
                    if (parent &&
                        (parent.type === 'group' || parent.type === 'root')) {
                        parent.mode = targetMode;
                    }
                }
                // Notify of mode change
                if (mathfield.mode !== previousMode &&
                    typeof mathfield.config.onModeChange === 'function') {
                    mathfield.config.onModeChange(mathfield, mathfield.mode);
                }
            }
            delete style.mode;
        }
        if (selectionIsCollapsed(mathfield.model)) {
            // No selection, let's update the 'current' style
            if (mathfield.style.fontSeries &&
                style.fontSeries === mathfield.style.fontSeries) {
                style.fontSeries = 'auto';
            }
            if (style.fontShape && style.fontShape === mathfield.style.fontShape) {
                style.fontShape = 'auto';
            }
            if (style.color && style.color === mathfield.style.color) {
                style.color = 'none';
            }
            if (style.backgroundColor &&
                style.backgroundColor === mathfield.style.backgroundColor) {
                style.backgroundColor = 'none';
            }
            if (style.fontSize && style.fontSize === mathfield.style.fontSize) {
                style.fontSize = 'auto';
            }
            mathfield.style = { ...mathfield.style, ...style };
            // This style will be used the next time an atom is inserted
        }
        else {
            // Change the style of the selection
            applyStyle$3(mathfield.model, style);
            mathfield.snapshot();
        }
        return true;
    }
    register$2({ applyStyle: applyStyle$4 }, { target: 'mathfield' });
    /**
     * Validate a style specification object
     */
    function validateStyle(style) {
        const result = {};
        if (typeof style.mode === 'string') {
            result.mode = style.mode.toLowerCase();
            console.assert(result.mode === 'math' ||
                result.mode === 'text' ||
                result.mode === 'command');
        }
        if (typeof style.color === 'string') {
            result.color = style.color;
        }
        if (typeof style.backgroundColor === 'string') {
            result.backgroundColor = style.backgroundColor;
        }
        if (typeof style.fontFamily === 'string') {
            result.fontFamily = style.fontFamily;
        }
        if (typeof style.series === 'string') {
            result.fontSeries = style.series;
        }
        if (typeof style.fontSeries === 'string') {
            result.fontSeries = style.fontSeries.toLowerCase();
        }
        if (result.fontSeries) {
            result.fontSeries =
                {
                    bold: 'b',
                    medium: 'm',
                    normal: 'm',
                }[result.fontSeries] || result.fontSeries;
        }
        if (typeof style.shape === 'string') {
            result.fontShape = style.shape;
        }
        if (typeof style.fontShape === 'string') {
            result.fontShape = style.fontShape.toLowerCase();
        }
        if (result.fontShape) {
            result.fontShape =
                {
                    italic: 'it',
                    up: 'n',
                    upright: 'n',
                    normal: 'n',
                }[result.fontShape] || result.fontShape;
        }
        if (typeof style.size === 'string') {
            result.fontSize = style.size;
        }
        else if (typeof style.size === 'number') {
            result.fontSize = 'size' + Math.min(0, Math.max(10, style.size));
        }
        if (typeof style.fontSize === 'string') {
            result.fontSize = style.fontSize.toLowerCase();
        }
        if (result.fontSize) {
            result.fontSize =
                {
                    tiny: 'size1',
                    scriptsize: 'size2',
                    footnotesize: 'size3',
                    small: 'size4',
                    normal: 'size5',
                    normalsize: 'size5',
                    large: 'size6',
                    Large: 'size7',
                    LARGE: 'size8',
                    huge: 'size9',
                    Huge: 'size10',
                }[result.fontSize] || result.fontSize;
        }
        return result;
    }

    function onPaste(mathfield) {
        // Make note we're in the process of pasting. The subsequent call to
        // onTypedText() will take care of interpreting the clipboard content
        mathfield.pasteInProgress = true;
        return true;
    }
    function onCut(mathfield) {
        // Clearing the selection will have the side effect of clearing the
        // content of the textarea. However, the textarea value is what will
        // be copied to the clipboard, so defer the clearing of the selection
        // to later, after the cut operation has been handled.
        setTimeout(function () {
            mathfield.$clearSelection();
            requestUpdate(mathfield);
        }.bind(mathfield), 0);
        return true;
    }
    function onCopy(mathfield, e) {
        if (selectionIsCollapsed(mathfield.model)) {
            e.clipboardData.setData('text/plain', '$$' + mathfield.$text('latex-expanded') + '$$');
            e.clipboardData.setData('application/json', mathfield.$text('json'));
            e.clipboardData.setData('application/xml', mathfield.$text('mathML'));
        }
        else {
            e.clipboardData.setData('text/plain', '$$' + mathfield.$selectedText('latex-expanded') + '$$');
            e.clipboardData.setData('application/json', mathfield.$selectedText('json'));
            e.clipboardData.setData('application/xml', mathfield.$selectedText('mathML'));
        }
        // Prevent the current document selection from being written to the clipboard.
        e.preventDefault();
    }
    register$2({
        copyToClipboard: (mathfield) => {
            mathfield.$focus();
            // If the selection is empty, select the entire field before
            // copying it.
            if (selectionIsCollapsed(mathfield.model)) {
                mathfield.$select();
            }
            document.execCommand('copy');
            return false;
        },
        cutToClipboard: (mathfield) => {
            mathfield.$focus();
            document.execCommand('cut');
            return true;
        },
        pasteFromClipboard: (mathfield) => {
            mathfield.$focus();
            document.execCommand('paste');
            return true;
        },
    }, { target: 'mathfield', category: 'clipboard' });

    let gLastTap;
    let gTapCount = 0;
    function onPointerDown(mathfield, evt) {
        const that = mathfield;
        let anchor;
        let trackingPointer = false;
        let trackingWords = false;
        let dirty = false;
        // If a mouse button other than the main one was pressed, return.
        // On iOS 12.4 Safari and Firefox on Android (which do not support
        // PointerEvent) the touchstart event is sent with event.buttons = 0
        // which for a mouse event would normally be an
        // invalid button. Accept this button 0.
        if (evt.buttons !== 1 && evt.buttons !== 0) {
            return;
        }
        let scrollLeft = false;
        let scrollRight = false;
        // Note: evt['touches'] is for touchstart (when PointerEvent is not supported)
        const anchorX = evt['touches'] ? evt['touches'][0].clientX : evt.clientX;
        const anchorY = evt['touches'] ? evt['touches'][0].clientY : evt.clientY;
        const anchorTime = Date.now();
        const scrollInterval = setInterval(() => {
            if (scrollLeft) {
                that.field.scroll({ top: 0, left: that.field.scrollLeft - 16 });
            }
            else if (scrollRight) {
                that.field.scroll({ top: 0, left: that.field.scrollLeft + 16 });
            }
        }, 32);
        function endPointerTracking(evt) {
            if (window.PointerEvent) {
                off(that.field, 'pointermove', onPointerMove);
                off(that.field, 'pointerup pointercancel', endPointerTracking);
                // off(window, 'pointermove', onPointerMove);
                // off(window, 'pointerup blur', endPointerTracking);
                that.field.releasePointerCapture(evt.pointerId);
            }
            else {
                off(that.field, 'touchmove', onPointerMove);
                off(that.field, 'touchcancel touchend', endPointerTracking);
                off(window, 'mousemove', onPointerMove);
                off(window, 'mouseup blur', endPointerTracking);
            }
            trackingPointer = false;
            clearInterval(scrollInterval);
            that.element
                .querySelectorAll('.ML__scroller')
                .forEach((x) => x.parentNode.removeChild(x));
            evt.preventDefault();
            evt.stopPropagation();
        }
        function onPointerMove(evt) {
            const x = evt['touches'] ? evt['touches'][0].clientX : evt.clientX;
            const y = evt['touches'] ? evt['touches'][0].clientY : evt.clientY;
            // Ignore events that are within small spatial and temporal bounds
            // of the pointer down
            const hysteresis = evt.pointerType === 'touch' ? 20 : 5;
            if (Date.now() < anchorTime + 500 &&
                Math.abs(anchorX - x) < hysteresis &&
                Math.abs(anchorY - y) < hysteresis) {
                evt.preventDefault();
                evt.stopPropagation();
                return;
            }
            const fieldBounds = that.field.getBoundingClientRect();
            scrollRight = x > fieldBounds.right;
            scrollLeft = x < fieldBounds.left;
            let actualAnchor = anchor;
            if (window.PointerEvent) {
                if (!evt.isPrimary) {
                    actualAnchor = pathFromPoint(that, evt.clientX, evt.clientY, {
                        bias: 0,
                    });
                }
            }
            else {
                if (evt['touches'] && evt['touches'].length === 2) {
                    actualAnchor = pathFromPoint(that, evt['touches'][1].clientX, evt['touches'][1].clientY, { bias: 0 });
                }
            }
            const focus = pathFromPoint(that, x, y, {
                bias: x <= anchorX ? (x === anchorX ? 0 : -1) : +1,
            });
            if (focus &&
                setRange(that.model, actualAnchor, focus, {
                    extendToWordBoundary: trackingWords,
                })) {
                // Re-render if the range has actually changed
                requestUpdate(mathfield);
            }
            // Prevent synthetic mouseMove event when this is a touch event
            evt.preventDefault();
            evt.stopPropagation();
        }
        // Calculate the tap count
        if (gLastTap &&
            Math.abs(gLastTap.x - anchorX) < 5 &&
            Math.abs(gLastTap.y - anchorY) < 5 &&
            Date.now() < gLastTap.time + 500) {
            gTapCount += 1;
            gLastTap.time = anchorTime;
        }
        else {
            gLastTap = {
                x: anchorX,
                y: anchorY,
                time: anchorTime,
            };
            gTapCount = 1;
        }
        const bounds = mathfield.field.getBoundingClientRect();
        if (anchorX >= bounds.left &&
            anchorX <= bounds.right &&
            anchorY >= bounds.top &&
            anchorY <= bounds.bottom) {
            // Focus the mathfield
            if (!mathfield.$hasFocus()) {
                dirty = true;
                if (mathfield.textarea.focus) {
                    mathfield.textarea.focus();
                }
            }
            // Clicking or tapping the field resets the keystroke buffer and
            // smart mode
            mathfield.resetKeystrokeBuffer();
            mathfield.smartModeSuppressed = false;
            const wrapperBounds = mathfield.field
                .querySelector('.ML__mathlive')
                .getBoundingClientRect();
            if (anchorX > wrapperBounds.right) {
                // If outside the bounds of the rendered formula,
                // set the anchor to the last element of the root
                anchor = [
                    {
                        relation: 'body',
                        offset: mathfield.model.root.body.length - 1,
                    },
                ];
            }
            else {
                anchor = pathFromPoint(mathfield, anchorX, anchorY, { bias: 0 });
            }
            if (anchor) {
                // Create divs to block out pointer tracking to the left and right of
                // the mathfield (to avoid triggering the hover of the virtual
                // keyboard toggle, for example)
                let div = document.createElement('div');
                div.className = 'ML__scroller';
                mathfield.element.appendChild(div);
                div.style.left = bounds.left - 200 + 'px';
                div = document.createElement('div');
                div.className = 'ML__scroller';
                mathfield.element.appendChild(div);
                div.style.left = bounds.right + 'px';
                if (evt.shiftKey) {
                    // Extend the selection if the shift-key is down
                    setRange(mathfield.model, mathfield.model.path, anchor);
                    anchor = clone(mathfield.model.path);
                    anchor[anchor.length - 1].offset -= 1;
                }
                else {
                    setPath(mathfield.model, anchor, 0);
                }
                // The selection has changed, so we'll need to re-render
                dirty = true;
                // Reset any user-specified style
                mathfield.style = {};
                // evt.detail contains the number of consecutive clicks
                // for double-click, triple-click, etc...
                // (note that evt.detail is not set when using pointerEvent)
                if (evt.detail === 3 || gTapCount > 2) {
                    endPointerTracking(evt);
                    if (evt.detail === 3 || gTapCount === 3) {
                        // This is a triple-click
                        selectAll(mathfield.model);
                    }
                }
                else if (!trackingPointer) {
                    trackingPointer = true;
                    if (window.PointerEvent) {
                        on(that.field, 'pointermove', onPointerMove);
                        on(that.field, 'pointerup pointercancel', endPointerTracking);
                        that.field.setPointerCapture(evt.pointerId);
                    }
                    else {
                        on(window, 'blur', endPointerTracking);
                        if (evt['touches']) {
                            // This is a touchstart event (and PointerEvent is not supported)
                            // To receive the subsequent touchmove/touch, need to
                            // listen to this evt.target.
                            // This was a touch event
                            on(evt.target, 'touchmove', onPointerMove);
                            on(evt.target, 'touchcancel touchend', endPointerTracking);
                        }
                        else {
                            on(window, 'mousemove', onPointerMove);
                            on(window, 'mouseup', endPointerTracking);
                        }
                    }
                    if (evt.detail === 2 || gTapCount === 2) {
                        // This is a double-click
                        trackingWords = true;
                        selectGroup(mathfield.model);
                    }
                }
            }
        }
        else {
            gLastTap = null;
        }
        if (dirty) {
            requestUpdate(mathfield);
        }
        // Prevent the browser from handling, in particular when this is a
        // touch event prevent the synthetic mouseDown event from being generated
        evt.preventDefault();
    }
    /**
     * Return a tuple of an element and a distance from point (x, y)
     */
    function nearestElementFromPoint(el, x, y) {
        let result = { element: null, distance: Number.POSITIVE_INFINITY };
        // This element may not have a matching atom, but its children might
        let considerChildren = true;
        if (el.getAttribute('data-atom-id')) {
            result.element = el;
            // Calculate the (square of the) distance to the rectangle
            const r = el.getBoundingClientRect();
            const dx = x - (r.left + r.right) / 2;
            const dy = y - (r.top + r.bottom) / 2;
            result.distance = dx * dx + dy * dy;
            // Only consider children if the target is inside the (horizontal)
            // bounds of the element.
            // This avoid searching the numerator/denominator when a fraction
            // is the last element in the formula.
            considerChildren = x >= r.left && x <= r.right;
        }
        if (considerChildren && el.children) {
            for (const child of el.children) {
                const nearest = nearestElementFromPoint(child, x, y);
                if (nearest.element && nearest.distance <= result.distance) {
                    result = nearest;
                }
            }
        }
        return result;
    }
    /**
     * @param options.bias  if 0, the midpoint of the bounding box
     * is considered to return the sibling. If <0, the left sibling is
     * favored, if >0, the right sibling
     */
    function pathFromPoint(mathfield, x, y, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.bias = (_a = options.bias) !== null && _a !== void 0 ? _a : 0;
        let result;
        // Try to find the deepest element that is near the point that was
        // clicked on (the point could be outside of the element)
        const nearest = nearestElementFromPoint(mathfield.field, x, y);
        const el = nearest.element;
        const id = el ? el.getAttribute('data-atom-id') : null;
        if (id) {
            // Let's find the atom that has a matching ID with the element that
            // was clicked on (or near)
            const paths = filter(mathfield.model, (_path, atom) => {
                // If the atom allows children to be selected, match only if
                // the ID of  the atom matches the one we're looking for.
                if (!atom.captureSelection) {
                    return atom.id === id;
                }
                // If the atom does not allow children to be selected
                // (captureSelection === true), the element matches if any of
                // its children has an ID that matches.
                return atom.filter((childAtom) => childAtom.id === id).length > 0;
            });
            if (paths && paths.length > 0) {
                // (There should be exactly one atom that matches this ID...)
                // Set the result to the path to this atom
                result = pathFromString(paths[0]).path;
                if (options.bias === 0) {
                    // If the point clicked is to the left of the vertical midline,
                    // adjust the path to *before* the atom (i.e. after the
                    // preceding atom)
                    const bounds = el.getBoundingClientRect();
                    if (x < bounds.left + bounds.width / 2 &&
                        !el.classList.contains('ML__placeholder')) {
                        result[result.length - 1].offset = Math.max(0, result[result.length - 1].offset - 1);
                    }
                }
                else if (options.bias < 0) {
                    result[result.length - 1].offset = Math.min(mathfield.model.siblings().length - 1, Math.max(0, result[result.length - 1].offset + options.bias));
                }
            }
        }
        return result;
    }

    var css_248z$1 = ".ML__keyboard{--keyboard-background:rgba(209,213,217,0.97);--keyboard-text:#000;--keyboard-text-active:var(--primary);--keyboard-background-border:#ddd;--keycap-background:#fff;--keycap-background-active:#e5e5e5;--keycap-background-border:#e5e6e9;--keycap-background-border-bottom:#8d8f92;--keycap-text:#000;--keycap-text-active:#fff;--keycap-secondary-text:#000;--keycap-modifier-background:#b9bdc7;--keycap-modifier-border:#c5c9d0;--keycap-modifier-border-bottom:#989da6;--keyboard-alternate-background:#fff;--keyboard-alternate-background-active:#e5e5e5;--keyboard-alternate-text:#000;position:fixed;left:0;bottom:-267px;width:100vw;z-index:var(--ML_keyboard-zindex,105);padding-top:5px;transform:translate(0);opacity:0;visibility:hidden;transition:.28s cubic-bezier(0,0,.2,1);transition-property:transform,opacity;-webkit-backdrop-filter:grayscale(50%);backdrop-filter:grayscale(50%);background-color:var(--keyboard-background);border:1px solid var(--keyboard-background-border);font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:16px;font-weight:400;margin:0;text-shadow:none;box-sizing:border-box;touch-action:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23)}.ML__keyboard.is-visible{transform:translateY(-267px);opacity:1;visibility:visible;transition-timing-function:cubic-bezier(.4,0,1,1)}.ML__keyboard .tex{font-family:KaTeX_Main,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .tex-math{font-family:KaTeX_Math,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .tt{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace!important;font-size:30px;font-weight:400}.ML__keyboard.alternate-keys{visibility:hidden;max-width:286px;background-color:var(--keyboard-alternate-background);text-align:center;border-radius:6px;position:fixed;bottom:auto;top:0;box-sizing:content-box;transform:none;z-index:calc(var(--ML_keyboard-zindex, 105) + 1);display:flex;flex-direction:row;justify-content:center;align-content:center;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);transition:none}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys{max-width:320px}}.ML__keyboard.alternate-keys.is-visible{visibility:visible}.ML__keyboard.alternate-keys ul{list-style:none;margin:3px;padding:0;display:flex;flex-flow:row wrap-reverse;justify-content:center}.ML__keyboard.alternate-keys ul>li{display:flex;flex-flow:column;align-items:center;justify-content:center;font-size:30px;height:70px;width:70px;box-sizing:border-box;margin:0;background:transparent;border:1px solid transparent;border-radius:5px;pointer-events:all;color:var(--keyboard-alternate-text);fill:currentColor}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys ul>li{font-size:24px;height:50px;width:50px}}.ML__keyboard.alternate-keys ul>li.active,.ML__keyboard.alternate-keys ul>li.pressed,.ML__keyboard.alternate-keys ul>li:hover{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);background:var(--keyboard-alternate-background-active);color:var(--keyboard-text-active)}.ML__keyboard.alternate-keys ul>li.small{font-size:18px}.ML__keyboard.alternate-keys ul>li.small-button{width:42px;height:42px;margin:2px;background:#fbfbfb}.ML__keyboard.alternate-keys ul>li.small-button:hover{background:var(--keyboard-alternate-background-active)}.ML__keyboard.alternate-keys ul>li.box>div,.ML__keyboard.alternate-keys ul>li.box>span{border:1px dashed rgba(0,0,0,.24)}.ML__keyboard.alternate-keys ul>li .warning{min-height:60px;min-width:60px;background:#cd0030;color:#fff;padding:5px;display:flex;align-items:center;justify-content:center;border-radius:5px}.ML__keyboard.alternate-keys ul>li .warning.active,.ML__keyboard.alternate-keys ul>li .warning.pressed,.ML__keyboard.alternate-keys ul>li .warning:hover{background:red}.ML__keyboard.alternate-keys ul>li .warning svg{width:50px;height:50px}.ML__keyboard.alternate-keys ul>li aside{font-size:12px;line-height:12px;opacity:.78;padding-top:2px}.ML__keyboard>div.keyboard-layer{display:none;outline:none}.ML__keyboard>div.keyboard-layer.is-visible{display:flex;flex-flow:column}.ML__keyboard>div>div.keyboard-toolbar{align-self:center;display:flex;flex-flow:row;justify-content:space-between;width:736px}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard>div>div.keyboard-toolbar{width:556px}}@media only screen and (max-width:767px){.ML__keyboard>div>div.keyboard-toolbar{width:365px;max-width:100vw}}.ML__keyboard>div>div.keyboard-toolbar svg{height:20px;width:20px}@media only screen and (max-width:767px){.ML__keyboard>div>div.keyboard-toolbar svg{height:13px;width:17px}}.ML__keyboard>div>div.keyboard-toolbar>.left{position:relative;display:flex;justify-content:flex-start;flex-flow:row}.ML__keyboard>div>div.keyboard-toolbar>.right{display:flex;justify-content:flex-end;flex-flow:row}.ML__keyboard>div>div.keyboard-toolbar>div>div{display:flex;align-items:baseline;justify-content:center;pointer-events:all;color:var(--keyboard-text);fill:currentColor;background:0;font-size:110%;cursor:pointer;min-height:0;padding:4px 10px;margin:7px 4px 6px;box-shadow:none;border:none;border-bottom:2px solid transparent}.ML__keyboard>div>div.keyboard-toolbar>div>div.disabled.pressed svg,.ML__keyboard>div>div.keyboard-toolbar>div>div.disabled:hover svg,.ML__keyboard>div>div.keyboard-toolbar>div>div.disabled svg{color:var(--keyboard-text);opacity:.2}@media only screen and (max-width:414px){.ML__keyboard>div>div.keyboard-toolbar>div>div{font-size:100%;padding:0 6px 0 0}}@media only screen and (max-width:767px){.ML__keyboard>div>div.keyboard-toolbar>div>div{padding-left:4px;padding-right:4px;font-size:90%}}.ML__keyboard>div>div.keyboard-toolbar>div>div.active,.ML__keyboard>div>div.keyboard-toolbar>div>div.pressed,.ML__keyboard>div>div.keyboard-toolbar>div>div:active,.ML__keyboard>div>div.keyboard-toolbar>div>div:hover{color:var(--keyboard-text-active)}.ML__keyboard>div>div.keyboard-toolbar>div>div.selected{color:var(--keyboard-text-active);border-bottom:2px solid var(--keyboard-text-active);margin-bottom:8px;padding-bottom:0}.ML__keyboard div .rows{border:0;border-collapse:separate;clear:both;margin:auto;display:flex;flex-flow:column;align-items:center}.ML__keyboard div .rows>ul{list-style:none;height:40px;margin:0 0 3px;padding:0}.ML__keyboard div .rows>ul>li{display:flex;flex-flow:column;align-items:center;justify-content:center;width:34px;margin-right:2px;height:40px;box-sizing:border-box;padding:8px 0;vertical-align:top;text-align:center;float:left;color:var(--keycap-text);fill:currentColor;font-size:20px;background:var(--keycap-background);border:1px solid var(--keycap-background-border);border-bottom-color:var(--keycap-background-border-bottom);border-radius:5px;pointer-events:all;position:relative;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.ML__keyboard div .rows>ul>li:last-child{margin-right:0}.ML__keyboard div .rows>ul>li.small{font-size:16px}.ML__keyboard div .rows>ul>li.tt{color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.bottom{justify-content:flex-end}.ML__keyboard div .rows>ul>li.left{align-items:flex-start;padding-left:4px}.ML__keyboard div .rows>ul>li.right{align-items:flex-end;padding-right:4px}.ML__keyboard div .rows>ul>li svg{width:20px;height:20px}.ML__keyboard div .rows>ul>li .warning{height:25px;width:25px;min-height:25px;min-width:25px;background:#cd0030;color:#fff;border-radius:100%;padding:5px;display:flex;align-items:center;justify-content:center;margin-bottom:-2px}.ML__keyboard div .rows>ul>li .warning svg{width:16px;height:16px}@media only screen and (max-width:768px){.ML__keyboard div .rows>ul>li .warning{height:16px;width:16px;min-height:16px;min-width:16px}.ML__keyboard div .rows>ul>li .warning svg{width:14px;height:14px}}.ML__keyboard div .rows>ul>li>.w0{width:0}.ML__keyboard div .rows>ul>li>.w5{width:16px}.ML__keyboard div .rows>ul>li>.w15{width:52px}.ML__keyboard div .rows>ul>li>.w20{width:70px}.ML__keyboard div .rows>ul>li>.w50{width:178px}.ML__keyboard div .rows>ul>li.separator{background:transparent;border:none;pointer-events:none}@media only screen and (max-width:560px){.ML__keyboard div .rows>ul>li.if-wide{display:none}}.ML__keyboard div .rows>ul>li.tex-math{font-size:25px}.ML__keyboard div .rows>ul>li.pressed,.ML__keyboard div .rows>ul>li:hover{background:var(--keycap-background-active);color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.action.active,.ML__keyboard div .rows>ul>li.action:active,.ML__keyboard div .rows>ul>li.keycap.active,.ML__keyboard div .rows>ul>li.keycap:active{transform:translateY(-20px) scale(1.4);z-index:calc(var(--ML_keyboard-zindex, 105) - 5);color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.modifier.active,.ML__keyboard div .rows>ul>li.modifier:active{background:var(--keyboard-text-active);color:var(--keycap-text-active)}.ML__keyboard div .rows>ul>li.action.font-glyph,.ML__keyboard div .rows>ul>li.modifier.font-glyph{font-size:18px}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li.action.font-glyph,.ML__keyboard div .rows>ul>li.modifier.font-glyph{font-size:16px}}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li.bigfnbutton,.ML__keyboard div .rows>ul>li.fnbutton{font-size:12px}}.ML__keyboard div .rows>ul>li.bigfnbutton{font-size:14px}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li.bigfnbutton{font-size:9px}}.ML__keyboard div .rows>ul>li.action,.ML__keyboard div .rows>ul>li.modifier{background-color:var(--keycap-modifier-background);border-bottom-color:var(--keycap-modifier-border);border-color:var(--keycap-modifier-border) var(--keycap-modifier-border) var(--keycap-modifier-border-bottom);font-size:65%;font-weight:100}.ML__keyboard div .rows>ul>li.action.selected,.ML__keyboard div .rows>ul>li.modifier.selected{color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.action.selected.active,.ML__keyboard div .rows>ul>li.action.selected.pressed,.ML__keyboard div .rows>ul>li.action.selected:active,.ML__keyboard div .rows>ul>li.action.selected:hover,.ML__keyboard div .rows>ul>li.modifier.selected.active,.ML__keyboard div .rows>ul>li.modifier.selected.pressed,.ML__keyboard div .rows>ul>li.modifier.selected:active,.ML__keyboard div .rows>ul>li.modifier.selected:hover{color:#fff}.ML__keyboard div .rows>ul>li.keycap.w50{font-size:80%;padding-top:10px;font-weight:100}.ML__keyboard div .rows>ul>li small{color:#555}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li small{font-size:9px}}.ML__keyboard div .rows>ul>li aside{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:10px;line-height:10px;color:#666}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li aside{display:none}}@media only screen and (max-width:414px){.ML__keyboard div .rows>ul>li{width:29px;margin-right:2px}.ML__keyboard div .rows>ul>.w5{width:13.5px}.ML__keyboard div .rows>ul>.w15{width:44.5px}.ML__keyboard div .rows>ul>.w20{width:60px}.ML__keyboard div .rows>ul>.w50{width:153px}}@media only screen and (min-width:415px) and (max-width:768px){.ML__keyboard div .rows>ul>li{width:37px;margin-right:3px}.ML__keyboard div .rows>ul>.w5{width:17px}.ML__keyboard div .rows>ul>.w15{width:57px}.ML__keyboard div .rows>ul>.w20{width:77px}.ML__keyboard div .rows>ul>.w50{width:197px}}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard div .rows>ul{height:52px}.ML__keyboard div .rows>ul>li{height:52px;width:51px;margin-right:4px}.ML__keyboard div .rows>ul>.w5{width:23.5px}.ML__keyboard div .rows>ul>.w15{width:78.5px}.ML__keyboard div .rows>ul>.w20{width:106px}.ML__keyboard div .rows>ul>.w50{width:271px}}@media only screen and (min-width:1025px){.ML__keyboard div .rows>ul{height:52px}.ML__keyboard div .rows>ul>li{height:52px;width:66px;margin-right:6px}.ML__keyboard div .rows>ul>.action,.ML__keyboard div .rows>ul>.modifier{font-size:80%}.ML__keyboard div .rows>ul>.w5{width:30px}.ML__keyboard div .rows>ul>.w15{width:102px}.ML__keyboard div .rows>ul>.w20{width:138px}.ML__keyboard div .rows>ul>.w50{width:354px}}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:hsl(var(--hue),35%,42%);--keycap-background-border:hsl(var(--hue),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),19%,38%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}div.ML__keyboard.material{--keyboard-background:rgba(209,213,217,0.9);--keyboard-background-border:#ddd;--keycap-background:transparent;--keycap-background-active:#cccfd1;--keycap-background-border:transparent;--keyboard-alternate-background:#efefef;--keyboard-alternate-text:#000;font-family:Roboto,sans-serif}div.ML__keyboard.material.alternate-keys{background:var(--keyboard-alternate-background);border:1px solid transparent;border-radius:5px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}div.ML__keyboard.material.alternate-keys ul li.active,div.ML__keyboard.material.alternate-keys ul li.pressed,div.ML__keyboard.material.alternate-keys ul li:active,div.ML__keyboard.material.alternate-keys ul li:hover{border:1px solid transparent;background:#5f97fc;color:#fff;fill:currentColor}div.ML__keyboard.material .keyboard-toolbar>div>div{font-size:16px}div.ML__keyboard.material .keyboard-toolbar div.div.active,div.ML__keyboard.material .keyboard-toolbar div.div.pressed,div.ML__keyboard.material .keyboard-toolbar div div:active,div.ML__keyboard.material .keyboard-toolbar div div:hover{color:#5f97fc;fill:currentColor}div.ML__keyboard.material .keyboard-toolbar>div>.selected{color:#5f97fc;fill:currentColor;border-bottom:2px solid #5f97fc;margin-bottom:8px;padding-bottom:0}div.ML__keyboard.material div>.rows>ul>.keycap{background:transparent;border:1px solid transparent;border-radius:5px;color:var(--keycap-text);fill:currentColor;transition:none}div.ML__keyboard.material div>.rows>ul>.keycap.tt{color:#5f97fc}div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"]{margin-top:10px;margin-bottom:10px;height:20px;background:#e0e0e0}div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"].active,div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"].pressed,div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"]:active,div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"]:hover{background:#d0d0d0;box-shadow:none;transform:none}div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):hover{border:1px solid transparent;background:var(--keycap-background-active);box-shadow:none}div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).active,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).pressed,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):active{background:var(--keyboard-alternate-background);color:var(--keyboard-alternate-text);box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23)}@media only screen and (max-width:767px){div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).active,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).pressed,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):active{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);font-size:10px;vertical-align:top;width:19.5px;margin-right:10px;margin-left:10px;transform:translateY(-20px) scale(2);transition:none;justify-content:flex-start;padding:2px 0 0;z-index:calc(var(--ML_keyboard-zindex, 105) - 5)}}@media only screen and (max-width:414px){div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).active,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).pressed,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):active{width:16.5px}}@media only screen and (max-width:767px){div.ML__keyboard.material div>.rows>ul>.keycap:last-child.active,div.ML__keyboard.material div>.rows>ul>.keycap:last-child:active{margin-right:0;margin-left:14px}}div.ML__keyboard.material div div.rows ul li.action,div.ML__keyboard.material div div.rows ul li.modifier{background:transparent;border:0;color:#869096;fill:currentColor;font-size:16px;transition:none}div.ML__keyboard.material div div.rows ul li.action.selected,div.ML__keyboard.material div div.rows ul li.modifier.selected{color:#5f97fc;border-radius:0;border-bottom:2px solid #5f97fc}div.ML__keyboard.material div div.rows ul li.action.active,div.ML__keyboard.material div div.rows ul li.action.pressed,div.ML__keyboard.material div div.rows ul li.action:active,div.ML__keyboard.material div div.rows ul li.action:hover,div.ML__keyboard.material div div.rows ul li.modifier.active,div.ML__keyboard.material div div.rows ul li.modifier.pressed,div.ML__keyboard.material div div.rows ul li.modifier:active,div.ML__keyboard.material div div.rows ul li.modifier:hover{border:0;color:var(--keycap-text);background:var(--keycap-background-active);box-shadow:none}div.ML__keyboard.material div div.rows ul li.bigfnbutton,div.ML__keyboard.material div div.rows ul li.fnbutton{background:transparent;border:0}div.ML__keyboard.material div div.rows ul li.bigfnbutton.selected,div.ML__keyboard.material div div.rows ul li.fnbutton.selected{color:#5f97fc;fill:currentColor;border-radius:0;border-bottom:2px solid #5f97fc}div.ML__keyboard.material div div.rows ul li.bigfnbutton.active,div.ML__keyboard.material div div.rows ul li.bigfnbutton.pressed,div.ML__keyboard.material div div.rows ul li.bigfnbutton:active,div.ML__keyboard.material div div.rows ul li.bigfnbutton:hover,div.ML__keyboard.material div div.rows ul li.fnbutton.active,div.ML__keyboard.material div div.rows ul li.fnbutton.pressed,div.ML__keyboard.material div div.rows ul li.fnbutton:active,div.ML__keyboard.material div div.rows ul li.fnbutton:hover{border:0;color:#5f97fc;fill:currentColor;background:var(--keycap-background-active);box-shadow:none}@media (prefers-color-scheme:dark){body:not([theme=light]) div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue),35%,40%);--keycap-modifier-border:hsl(var(--hue),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue),35%,42%);--keyboard-alternate-background:hsl(var(--hue),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue),35%,42%);--keyboard-alternate-text:#d1d1d1}";

    const KEYBOARDS = {
        numeric: {
            tooltip: 'keyboard.tooltip.numeric',
            layer: 'math',
            label: '123',
            layers: ['math'],
        },
        roman: {
            tooltip: 'keyboard.tooltip.roman',
            layer: 'lower-roman',
            label: 'ABC',
            layers: ['lower-roman', 'upper-roman'],
        },
        greek: {
            tooltip: 'keyboard.tooltip.greek',
            layer: 'lower-greek',
            label: '&alpha;&beta;&gamma;',
            classes: 'tex-math',
            layers: ['lower-greek', 'upper-greek'],
        },
        functions: {
            tooltip: 'keyboard.tooltip.functions',
            layer: 'functions',
            label: '<i>f</i>&thinsp;()',
            classes: 'tex',
            layers: ['functions'],
        },
        symbols: {
            tooltip: 'keyboard.tooltip.symbols',
            layer: 'symbols',
            label: '&infin;≠∈',
            classes: 'tex',
            layers: ['symbols'],
        },
        command: {
            tooltip: 'keyboard.tooltip.command',
            // For the command keyboard, perform a command rather than
            // doing a simple layer switch, as we want to enter command mode
            // when the keyboard is activated
            command: 'enterCommandMode',
            label: `<svg><use xlink:href='#svg-command' /></svg>`,
            layers: ['lower-command', 'upper-command', 'symbols-command'],
        },
        style: {
            tooltip: 'keyboard.tooltip.style',
            layer: 'style',
            label: '<b>b</b><i>i</i>𝔹',
        },
    };
    const SHIFTED_KEYS = {
        '\\varphi ': ['&Phi;', '\\Phi '],
        '\\varsigma ': ['&Sigma;', '\\Sigma '],
        '\\epsilon ': ['&#x0190;', '{\\char"0190}'],
        '\\rho ': ['&#x3A1', '{\\char"3A1}'],
        '\\tau ': ['&#x3A4;', '{\\char"3A4}'],
        '\\upsilon ': ['&Upsilon;', '\\Upsilon '],
        '\\theta ': ['&Theta;', '\\Theta '],
        '\\iota ': ['&Iota;', '{\\char"399}'],
        '\\omicron ': ['&#x039F;', '{\\char"39F}'],
        '\\pi ': ['&Pi;', '\\Pi '],
        '\\alpha ': ['&Alpha;', '{\\char"391}'],
        '\\sigma ': ['&Sigma;', '\\Sigma '],
        '\\delta ': ['&Delta;', '\\Delta '],
        '\\phi ': ['&#x03a6;', '\\Phi '],
        '\\gamma ': ['&Gamma;', '\\Gamma '],
        '\\eta ': ['&Eta;', '{\\char"397}'],
        '\\xi ': ['&Xi;', '\\Xi '],
        '\\kappa ': ['&Kappa;', '{\\char"39A}'],
        '\\lambda ': ['&Lambda;', '\\Lambda '],
        '\\zeta ': ['&Zeta;', '{\\char"396}'],
        '\\chi ': ['&Chi;', '{\\char"3A7}'],
        '\\psi ': ['&Psi;', '\\Psi '],
        '\\omega ': ['&Omega;', '\\Omega '],
        '\\beta ': ['&Beta;', '{\\char"392}'],
        '\\nu ': ['&Nu;', '{\\char"39D}'],
        '\\mu ': ['&Mu;', '{\\char"39C}'],
    };
    // const FUNCTIONS = [
    //     'Basic',
    //         ['\\sin', '\\cos', '\\tan', '\\min', '\\max', '\\gcd', '\\lcm', '\\repeat', 'encapsulate', 'recognize'],
    //     'Operators',
    //         ['\\sum', '\\prod', '\\bigcup_x']
    // ]
    const ALT_KEYS_BASE = {
        '0': [
            '\\emptyset',
            '\\varnothing',
            '\\infty',
            { latex: '#?_0', insert: '#@_0' },
            '\\circ',
            '\\bigcirc',
            '\\bullet',
        ],
        '2': ['\\frac{1}{2}', { latex: '#?^2', insert: '#@^2' }],
        '3': ['\\frac{1}{3}', { latex: '#?^3', insert: '#@^3' }],
        '.': [
            ',',
            ';',
            '\\colon',
            { latex: ':', aside: 'ratio' },
            { latex: '\\cdotp', aside: 'center dot', classes: 'box' },
            { latex: '\\cdots', aside: 'center ellipsis', classes: 'box' },
            { latex: '\\ldotp', aside: 'low dot', classes: 'box' },
            { latex: '\\ldots', aside: 'low ellipsis', classes: 'box' },
            { latex: '\\vdots', aside: '', classes: 'box' },
            { latex: '\\ddots', aside: '', classes: 'box' },
            '\\odot',
            '\\oslash',
            '\\circledcirc',
        ],
        '*': [
            '\\cdot',
            '\\ast',
            '\\star',
            '\\bigstar',
            '\\ltimes',
            '\\rtimes',
            '\\rightthreetimes',
            '\\leftthreetimes',
            '\\intercal',
            '\\prod',
            { latex: '\\prod_{n\\mathop=0}^{\\infty}', classes: 'small' },
        ],
        '+': [
            '\\pm',
            '\\mp',
            '\\sum',
            { latex: '\\sum_{n\\mathop=0}^{\\infty}', classes: 'small' },
            '\\dotplus',
            '\\oplus',
        ],
        '-': ['\\pm', '\\mp', '\\ominus', '\\vert #0  \\vert'],
        '/': ['\\divideontimes', '/', '\\div'],
        '(': [
            '\\left( #0\\right)',
            '\\left[ #0\\right]',
            '\\left\\{ #0\\right\\}',
            '\\left\\langle #0\\right\\rangle',
            '\\lfloor',
            '\\llcorner',
            '(',
            '\\lbrack',
            '\\lvert',
            '\\lVert',
            '\\lgroup',
            '\\langle',
            '\\lceil',
            '\\ulcorner',
            '\\lmoustache',
            '\\lbrace',
        ],
        ')': [
            '\\rfloor',
            '\\lrcorner',
            ')',
            '\\rbrack',
            '\\rvert',
            '\\rVert',
            '\\rgroup',
            '\\rangle',
            '\\rceil',
            '\\urcorner',
            '\\rmoustache',
            '\\rbrace',
        ],
        '=': [
            '\\cong',
            '\\asymp',
            '\\equiv',
            '\\differencedelta',
            '\\varpropto',
            '\\thickapprox',
            '\\approxeq',
            '\\thicksim',
            '\\backsim',
            '\\eqsim',
            '\\simeq',
            '\\Bumpeq',
            '\\bumpeq',
            '\\doteq',
            '\\Doteq',
            '\\fallingdotseq',
            '\\risingdotseq',
            '\\coloneq',
            '\\eqcirc',
            '\\circeq',
            '\\triangleq',
            '\\between',
        ],
        '!=': ['\\neq', '\\ncong', '', '\\nsim'],
        '<': [
            '\\leq',
            '\\leqq',
            '\\lneqq',
            '\\ll',
            '\\nless',
            '\\nleq',
            '\\precsim',
            '\\lesssim',
            '\\lessgtr',
            '\\prec',
            '\\preccurlyeq',
            '\\lessdot',
            '\\nprec',
        ],
        '>': [
            '\\geq',
            '\\geqq',
            '\\gneqq',
            '\\gg',
            '\\ngtr',
            '\\ngeq',
            '\\succsim',
            '\\gtrsim',
            '\\gtrless',
            '\\succ',
            '\\succcurlyeq',
            '\\gtrdot',
            '\\nsucc',
        ],
        set: ['\\in', '\\owns', '\\subset', '\\nsubset', '\\supset', '\\nsupset'],
        '!set': ['\\notin', '\\backepsilon'],
        subset: [],
        supset: [],
        infinity: ['\\aleph_0', '\\aleph_1', '\\omega', '\\mathfrak{m}'],
        'numeric-pi': ['\\prod', '\\theta', '\\rho', '\\sin', '\\cos', '\\tan'],
        ee: ['\\times 10^{#?}', '\\ln', '\\ln_{10}', '\\log'],
        '^': ['_{#?}'],
        // Integrals
        int: [
            { latex: '\\int_{#?}^{#?}', classes: 'small' },
            { latex: '\\int', classes: 'small' },
            { latex: '\\smallint', classes: 'small' },
            { latex: '\\iint', classes: 'small' },
            { latex: '\\iiint', classes: 'small' },
            { latex: '\\oint', classes: 'small' },
            { latex: '\\dfrac{\\rd}{\\rd x}', classes: 'small' },
            { latex: '\\frac{\\partial}{\\partial x}', classes: 'small' },
            '\\capitalDifferentialD',
            '\\rd',
            '\\partial',
        ],
        nabla: ['\\nabla\\times', '\\nabla\\cdot', '\\nabla^{2}'],
        '!': ['!!', '\\Gamma', '\\Pi'],
        accents: [
            '\\bar{#@}',
            '\\vec{#@}',
            '\\hat{#@}',
            '\\check{#@}',
            '\\dot{#@}',
            '\\ddot{#@}',
            '\\mathring{#@}',
            '\\breve{#@}',
            '\\acute{#@}',
            '\\tilde{#@}',
            '\\grave{#@}',
        ],
        // 'absnorm': [{latex:'\\lVert #@ \\rVert', aside:'norm'},
        //     {latex:'\\lvert #@ \\rvert', aside:'determinant'},
        //     {latex:'\\begin{cardinality} #@ \\end{cardinality}', aside:'cardinality'},
        //     {latex:'\\lvert #@ \\rvert', aside:'length'},
        //     {latex:'\\lvert #@ \\rvert', aside:'order'},
        // ],
        A: [
            { latex: '\\aleph', aside: 'aleph' },
            { latex: '\\forall', aside: 'for all' },
        ],
        a: [
            { latex: '\\aleph', aside: 'aleph' },
            { latex: '\\forall', aside: 'for all' },
        ],
        b: [{ latex: '\\beth', aside: 'beth' }],
        B: [{ latex: '\\beth', aside: 'beth' }],
        c: [{ latex: '\\C', aside: 'set of complex numbers' }],
        d: [{ latex: '\\daleth', aside: 'daleth' }],
        D: [{ latex: '\\daleth', aside: 'daleth' }],
        e: [
            { latex: '\\exponentialE', aside: 'exponential e' },
            { latex: '\\exists', aside: 'there is' },
            { latex: '\\nexists', aside: 'there isn’t' },
        ],
        g: [{ latex: '\\gimel', aside: 'gimel' }],
        G: [{ latex: '\\gimel', aside: 'gimel' }],
        h: [
            { latex: '\\hbar', aside: 'h bar' },
            { latex: '\\hslash', aside: 'h slash' },
        ],
        i: [{ latex: '\\imaginaryI', aside: 'imaginary i' }],
        j: [{ latex: '\\imaginaryJ', aside: 'imaginary j' }],
        l: [{ latex: '\\ell', aside: 'ell' }],
        n: [{ latex: '\\N', aside: 'set of natural numbers' }],
        p: [{ latex: '\\P', aside: 'set of primes' }],
        q: [{ latex: '\\Q', aside: 'set of rational numbers' }],
        r: [{ latex: '\\R', aside: 'set of real numbers' }],
        z: [{ latex: '\\Z', aside: 'set of integers' }],
        'x-var': [
            'y',
            'z',
            't',
            'r',
            { latex: 'f(#?)', classes: 'small' },
            { latex: 'g(#?)', classes: 'small' },
            'x^2',
            'x^n',
            'x_n',
            'x_{n+1}',
            'x_i',
            'x_{i+1}',
        ],
        'n-var': ['i', 'j', 'p', 'k', 'a', 'u'],
        ii: ['\\Re', '\\Im', '\\imaginaryJ', '\\Vert #0 \\Vert'],
        logic: [
            { latex: '\\exists', aside: 'there is' },
            { latex: '\\nexists', aside: 'there isn’t' },
            { latex: '\\ni', aside: 'such that' },
            { latex: '\\Colon', aside: 'such that' },
            { latex: '\\implies', aside: 'implies' },
            { latex: '\\impliedby', aside: 'implied by' },
            { latex: '\\iff', aside: 'if and only if' },
            { latex: '\\land', aside: 'and' },
            { latex: '\\lor', aside: 'or' },
            { latex: '\\oplus', aside: 'xor' },
            { latex: '\\lnot', aside: 'not' },
            { latex: '\\downarrow', aside: 'nor' },
            { latex: '\\uparrow', aside: 'nand' },
            { latex: '\\curlywedge', aside: 'nor' },
            { latex: '\\bar\\curlywedge', aside: 'nand' },
            // {latex:'\\barwedge', aside:'bar wedge'},
            // {latex:'\\curlyvee', aside:'curly vee'},
            // {latex:'\\veebar', aside:'vee bar'},
            { latex: '\\therefore', aside: 'therefore' },
            { latex: '\\because', aside: 'because' },
            { latex: '^\\biconditional', aside: 'biconditional' },
            '\\leftrightarrow',
            '\\Leftrightarrow',
            '\\to',
            '\\models',
            '\\vdash',
            '\\gets',
            '\\dashv',
            '\\roundimplies',
        ],
        'set-operators': [
            '\\cap',
            '\\cup',
            '\\setminus',
            '\\smallsetminus',
            '\\complement',
        ],
        'set-relations': [
            '\\in',
            '\\notin',
            '\\ni',
            '\\owns',
            '\\subset',
            '\\supset',
            '\\subseteq',
            '\\supseteq',
            '\\subsetneq',
            '\\supsetneq',
            '\\varsubsetneq',
            '\\subsetneqq',
            '\\nsubset',
            '\\nsupset',
            '\\nsubseteq',
            '\\nsupseteq',
        ],
        space: [
            {
                latex: '\\char"203A\\!\\char"2039',
                insert: '\\!',
                aside: 'negative thin space<br>⁻³⧸₁₈ em',
            },
            {
                latex: '\\unicode{"203A}\\,\\unicode{"2039}',
                insert: '\\,',
                aside: 'thin space<br>³⧸₁₈ em',
            },
            {
                latex: '\\unicode{"203A}\\:\\unicode{"2039}',
                insert: '\\:',
                aside: 'medium space<br>⁴⧸₁₈ em',
            },
            {
                latex: '\\unicode{"203A}\\;\\unicode{"2039}',
                insert: '\\;',
                aside: 'thick space<br>⁵⧸₁₈ em',
            },
            {
                latex: '\\unicode{"203A}\\ \\unicode{"2039}',
                insert: '\\ ',
                aside: '⅓ em',
            },
            {
                latex: '\\unicode{"203A}\\enspace\\unicode{"2039}',
                insert: '\\enspace',
                aside: '½ em',
            },
            {
                latex: '\\unicode{"203A}\\quad\\unicode{"2039}',
                insert: '\\quad',
                aside: '1 em',
            },
            {
                latex: '\\unicode{"203A}\\qquad\\unicode{"2039}',
                insert: '\\qquad',
                aside: '2 em',
            },
        ],
        // @todo could also delete to end
        delete: [
            {
                label: '<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>',
                command: '"deleteAll"',
            },
        ],
        // @todo Tab: could turn on speech, visible keyboard...
        '->|': [],
    };
    let ALT_KEYS = {};
    const LAYERS = {
        math: `
        <div class='rows'>
            <ul>
                <li class='keycap tex' data-alt-keys='x-var'><i>x</i></li>
                <li class='keycap tex' data-alt-keys='n-var'><i>n</i></li>
                <li class='separator w5'></li>
                <row name='numpad-1'/>
                <li class='separator w5'></li>
                <li class='keycap tex' data-insert='$$\\exponentialE$$' data-alt-keys='ee'>e</li>
                <li class='keycap tex' data-insert='$$\\imaginaryI$$' data-alt-keys='ii'>i</li>
                <li class='keycap tex' data-latex='\\pi' data-alt-keys='numeric-pi'></li>
            </ul>
            <ul>
                <li class='keycap tex' data-key='<' data-alt-keys='<'>&lt;</li>
                <li class='keycap tex' data-key='>' data-alt-keys='>'>&gt;</li>
                <li class='separator w5'></li>
                <row name='numpad-2'/>
                <li class='separator w5'></li>
                <li class='keycap tex' data-alt-keys='x2' data-insert='$$#@^{2}$$'><span><i>x</i>&thinsp;²</span></li>
                <li class='keycap tex' data-alt-keys='^' data-insert='$$#@^{#?}$$'><span><i>x</i><sup>&thinsp;<small>&#x2b1a;</small></sup></span></li>
                <li class='keycap tex' data-alt-keys='sqrt' data-insert='$$\\sqrt{#0}$$' data-latex='\\sqrt{#0}'></li>
            </ul>
            <ul>
                <li class='keycap tex' data-alt-keys='(' >(</li>
                <li class='keycap tex' data-alt-keys=')' >)</li>
                <li class='separator w5'></li>
                <row name='numpad-3'/>
                <li class='separator w5'></li>
                <li class='keycap tex small' data-alt-keys='int' data-latex='\\int_0^\\infty'><span></span></li>
                <li class='keycap tex' data-latex='\\forall' data-alt-keys='logic' ></li>
                <li class='action font-glyph bottom right' data-alt-keys='delete' data-command='["performWithFeedback","deletePreviousChar"]'>&#x232b;</li></ul>
            </ul>
            <ul>
                <li class='keycap' data-alt-keys='foreground-color' data-command='["applyStyle",{"color":"#cc2428"}]'><span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box'></span></li>
                <li class='keycap' data-alt-keys='background-color' data-command='["applyStyle",{"backgroundColor":"#fff590"}]'><span style='border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box'></span></li>
                <li class='separator w5'></li>
                <row name='numpad-4'/>
                <li class='separator w5'></li>
                <arrows/>
            </ul>
        </div>
    `,
        'lower-roman': `
        <div class='rows'>
            <ul>
                <row name='numpad-1' class='if-wide'/>
                <row name='lower-1' shift-layer='upper-roman'/>
            </ul>
            <ul>
                <row name='numpad-2' class='if-wide'/>
                <row name='lower-2'  shift-layer='upper-roman''/>
            </ul>
            <ul>
                <row name='numpad-3' class='if-wide'/>
                <row name='lower-3'  shift-layer='upper-roman''/>
            </ul>
            <ul>
                <row name='numpad-4' class='if-wide'/>
                <li class='keycap' >;</li>
                <li class='keycap' data-alt-keys=','>,</li>
                <li class='keycap w50' data-key=' ' data-alt-keys='space'>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
        'upper-roman': `
        <div class='rows'>
            <ul>
                <row name='numpad-1' class='if-wide'/>
                <row name='upper-1'  shift-layer='lower-roman'/>
            </ul>
            <ul>
                <row name='numpad-2' class='if-wide'/>
                <row name='upper-2' shift-layer='lower-roman'/>
            </ul>
            <ul>
                <row name='numpad-3' class='if-wide'/>
                <row name='upper-3' shift-layer='lower-roman'/>
            </ul>
            <ul>
                <row name='numpad-4' class='if-wide'/>
                <li class='keycap' >;</li>
                <li class='keycap' data-alt-keys='.'>;</li>
                <li class='keycap w50' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
        symbols: `
        <div class='rows'>
            <ul>
                <row name='numpad-1' class='if-wide'/>
                <li class='keycap tex' data-alt-keys='(' data-insert='\\lbrace '>{</li>
                <li class='keycap tex' data-alt-keys=')' data-insert='\\rbrace '>}</li>
                <li class='separator w5'></li>
                <li class='keycap tex' data-alt-keys='set' data-insert='\\in '>&#x2208;</li>
                <li class='keycap tex' data-alt-keys='!set' data-insert='\\notin '>&#x2209;</li>
                <li class='keycap tex' data-insert='\\Re '>&#x211c;<aside>Real</aside></li>
                <li class='keycap tex' data-insert='\\Im '>&#x2111;<aside>Imaginary</aside></li>
                <li class='keycap w15' data-insert='\\ulcorner#0\\urcorner '><span><sup>&#x250c;</sup><span><span style='color:#ddd'>o</span><sup>&#x2510;</sup></span><aside>ceil</aside></li>
                <li class='keycap tex' data-alt-keys='nabla' data-insert='\\nabla '>&#x2207;<aside>nabla</aside></li>
                <li class='keycap tex' data-alt-keys='infinity' data-insert='\\infty '>&#x221e;</li>

            </ul>
            <ul>
                <row name='numpad-2' class='if-wide'/>
                <li class='keycap tex' data-alt-keys='(' data-insert='\\lbrack '>[</li>
                <li class='keycap tex' data-alt-keys=')' data-insert='\\rbrack '>]</li>
                <li class='separator w5'></li>
                <li class='keycap tex' data-alt-keys='subset' data-insert='\\subset '>&#x2282;</li>
                <li class='keycap tex' data-alt-keys='supset' data-insert='\\supset '>&#x2283;</li>
                <li class='keycap tex' data-key='!' data-alt-keys='!'>!<aside>factorial</aside></li>
                <li class='keycap' data-insert='$$^{\\prime} $$'><span><sup><span><span style='color:#ddd'>o</span>&#x2032</sup></span><aside>prime</aside></li>
                <li class='keycap w15' data-insert='\\llcorner#0\\lrcorner '><span><sub>&#x2514;</sub><span style='color:#ddd'>o</span><sub>&#x2518;</sub></span><aside>floor</aside></li>
                <li class='keycap tex' data-insert='\\partial '>&#x2202;<aside>partial<br>derivative</aside></li>
                <li class='keycap tex' data-insert='\\emptyset '>&#x2205;<aside>empty set</aside></li>

            </ul>
            <ul>
                <row name='numpad-3' class='if-wide'/>
                <li class='keycap tex' data-alt-keys='(' data-insert='\\langle '>&#x27e8;</li>
                <li class='keycap tex' data-alt-keys=')' data-insert='\\rangle '>&#x27e9;</li>
                <li class='separator w5'></li>
                <li class='keycap tex' data-insert='\\subseteq '>&#x2286;</li>
                <li class='keycap tex' data-insert='\\supseteq '>&#x2287;</li>
                <li class='keycap tex' data-alt-keys='accents' data-insert='$$\\vec{#@}$$' data-latex='\\vec{#?}' data-aside='vector'></li>
                <li class='keycap tex' data-alt-keys='accents' data-insert='$$\\bar{#@}$$' data-latex='\\bar{#?}' data-aside='bar'></li>
                <li class='keycap tex' data-alt-keys='absnorm' data-insert='$$\\left| #0 \\right|$$' data-latex='\\left| #? \\right|' data-aside='abs'></li>
                <li class='keycap tex' data-insert='\\ast '>&#x2217;<aside>asterisk</aside></li>

                <li class='action font-glyph bottom right w15'
                    data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                    data-shifted-command='"deleteAll"'
                    data-alt-keys='delete' data-command='["performWithFeedback","deletePreviousChar"]'
                >&#x232b;</li>
            </ul>
            <ul>
                <row name='numpad-4' class='if-wide'/>
                <li class='keycap tex' data-insert=','>,</li>
                <li class='keycap tex' data-insert='\\cdot '>&#x22c5;<aside>centered dot</aside></li>
                <li class='keycap tex' data-insert='\\colon '>:<aside>colon</aside></li>
                <li class='keycap tex' data-insert='\\circ '>&#x2218;<aside>circle</aside></li>
                <li class='keycap tex' data-insert='\\approx '>&#x2248;<aside>approx.</aside></li>
                <li class='keycap tex' data-insert='\\ne '>&#x2260;</li>
                <li class='keycap tex' data-insert='\\pm '>&#x00b1;</li>
                <arrows/>
            </ul>
        </div>`,
        'lower-greek': `
        <div class='rows'>
            <ul><li class='keycap tex' data-insert='\\varphi '><i>&#x03c6;</i><aside>phi var.</aside></li>
                <li class='keycap tex' data-insert='\\varsigma '><i>&#x03c2;</i><aside>sigma var.</aside></li>
                <li class='keycap tex' data-insert='\\epsilon '><i>&#x03f5;</i></li>
                <li class='keycap tex' data-insert='\\rho '><i>&rho;</i></li>
                <li class='keycap tex' data-insert='\\tau '><i>&tau;</i></li>
                <li class='keycap tex' data-insert='\\upsilon '><i>&upsilon;</i></li>
                <li class='keycap tex' data-insert='\\theta '><i>&theta;</i></li>
                <li class='keycap tex' data-insert='\\iota '><i>&iota;</i></li>
                <li class='keycap tex' data-insert='\\omicron '>&omicron;</i></li>
                <li class='keycap tex' data-insert='\\pi '><i>&pi;</i></li>
            </ul>
            <ul><li class='keycap tex' data-insert='\\alpha ' data-shifted='&Alpha;' data-shifted-command='["insert","{\\\\char\\"391}"]'><i>&alpha;</i></li>
                <li class='keycap tex' data-insert='\\sigma '><i>&sigma;</i></li>
                <li class='keycap tex' data-insert='\\delta '><i>&delta;</i></li>
                <li class='keycap tex' data-insert='\\phi '><i>&#x03d5;</i></i></li>
                <li class='keycap tex' data-insert='\\gamma '><i>&gamma;</i></li>
                <li class='keycap tex' data-insert='\\eta '><i>&eta;</i></li>
                <li class='keycap tex' data-insert='\\xi '><i>&xi;</i></li>
                <li class='keycap tex' data-insert='\\kappa '><i>&kappa;</i></li>
                <li class='keycap tex' data-insert='\\lambda '><i>&lambda;</i></li>
            </ul>
            <ul><li class='shift modifier font-glyph bottom left w15 layer-switch' data-layer='upper-greek'>&#x21e7;</li>
                <li class='keycap tex' data-insert='\\zeta '><i>&zeta;</i></li>
                <li class='keycap tex' data-insert='\\chi '><i>&chi;</i></li>
                <li class='keycap tex' data-insert='\\psi '><i>&psi;</i></li>
                <li class='keycap tex' data-insert='\\omega '><i>&omega;</i></li>
                <li class='keycap tex' data-insert='\\beta '><i>&beta;</i></li>
                <li class='keycap tex' data-insert='\\nu '><i>&nu;</i></li>
                <li class='keycap tex' data-insert='\\mu '><i>&mu;</i></li>
                <li class='action font-glyph bottom right w15'
                    data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                    data-shifted-command='"deleteAll"'
                    data-alt-keys='delete' data-command='["performWithFeedback","deletePreviousChar"]'
                >&#x232b;</li>
            </ul>
            <ul>
                <li class='keycap ' data-key=' '>&nbsp;</li>
                <li class='keycap'>,</li>
                <li class='keycap tex' data-insert='\\varepsilon '><i>&#x03b5;</i><aside>epsilon var.</aside></li>
                <li class='keycap tex' data-insert='\\vartheta '><i>&#x03d1;</i><aside>theta var.</aside></li>
                <li class='keycap tex' data-insert='\\varkappa '><i>&#x3f0;</i><aside>kappa var.</aside></li>
                <li class='keycap tex' data-insert='\\varpi '><i>&#x03d6;<aside>pi var.</aside></i></li>
                <li class='keycap tex' data-insert='\\varrho '><i>&#x03f1;</i><aside>rho var.</aside></li>
                <arrows/>
            </ul>
        </div>`,
        'upper-greek': `
        <div class='rows'>
            <ul><li class='keycap tex' data-insert='\\Phi '>&Phi;<aside>phi</aside></li>
                <li class='keycap tex' data-insert='\\Sigma '>&Sigma;<aside>sigma</aside></li>
                <li class='keycap tex' data-insert='{\\char"0190}'>&#x0190;<aside>epsilon</aside></li>
                <li class='keycap tex' data-insert='{\\char"3A1}'>&#x3A1;<aside>rho</aside></li>
                <li class='keycap tex' data-insert='{\\char"3A4}'>&#x3A4;<aside>tau</aside></li>
                <li class='keycap tex' data-insert='\\Upsilon '>&Upsilon;<aside>upsilon</aside></li>
                <li class='keycap tex' data-insert='\\Theta '>&Theta;<aside>theta</aside></li>
                <li class='keycap tex' data-insert='{\\char"399}'>&Iota;<aside>iota</aside></li>
                <li class='keycap tex' data-insert='{\\char"39F}'>&#x039F;<aside>omicron</aside></li>
                <li class='keycap tex' data-insert='\\Pi '>&Pi;<aside>pi</aside></li></ul>
            <ul><li class='keycap tex' data-insert='{\\char"391}'>&#x391;<aside>alpha</aside></li>
                <li class='keycap tex' data-insert='\\Sigma '>&Sigma;<aside>sigma</aside></li>
                <li class='keycap tex' data-insert='\\Delta '>&Delta;<aside>delta</aside></li>
                <li class='keycap tex' data-insert='\\Phi '>&#x03a6;<aside>phi</aside></li>
                <li class='keycap tex' data-insert='\\Gamma '>&Gamma;<aside>gamma</aside></li>
                <li class='keycap tex' data-insert='{\\char"397}'>&Eta;<aside>eta</aside></li>
                <li class='keycap tex' data-insert='\\Xi '>&Xi;<aside>xi</aside></li>
                <li class='keycap tex' data-insert='{\\char"39A}'>&Kappa;<aside>kappa</aside></li>
                <li class='keycap tex' data-insert='\\Lambda '>&Lambda;<aside>lambda</aside></li></ul>
            <ul><li class='shift modifier font-glyph bottom left selected w15 layer-switch' data-layer='lower-greek'>&#x21e7;</li>
                <li class='keycap tex' data-insert='{\\char"396}'>&Zeta;<aside>zeta</aside></li>
                <li class='keycap tex' data-insert='{\\char"3A7}'>&Chi;<aside>chi</aside></li>
                <li class='keycap tex' data-insert='\\Psi '>&Psi;<aside>psi</aside></li>
                <li class='keycap tex' data-insert='\\Omega '>&Omega;<aside>omega</aside></li>
                <li class='keycap tex' data-insert='{\\char"392}'>&Beta;<aside>beta</aside></li>
                <li class='keycap tex' data-insert='{\\char"39D}'>&Nu;<aside>nu</aside></li>
                <li class='keycap tex' data-insert='{\\char"39C}'>&Mu;<aside>mu</aside></li>
                <li class='action font-glyph bottom right w15' data-command='["performWithFeedback","deletePreviousChar"]'>&#x232b;</li></ul>
            <ul>
                <li class='separator w10'>&nbsp;</li>
                <li class='keycap'>.</li>
                <li class='keycap w50' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
        'lower-command': `
        <div class='rows'>
            <ul><row name='lower-1' class='tt' shift-layer='upper-command'/></ul>
            <ul><row name='lower-2' class='tt' shift-layer='upper-command'/></ul>
            <ul><row name='lower-3' class='tt' shift-layer='upper-command'/></ul>
            <ul>
                <li class='layer-switch font-glyph modifier bottom left' data-layer='symbols-command'>01#</li>
                <li class='keycap tt' data-shifted='[' data-shifted-command='["insertAndUnshiftKeyboardLayer", "["]'>{</li>
                <li class='keycap tt' data-shifted=']' data-shifted-command='["insertAndUnshiftKeyboardLayer", "]"]'>}</li>
                <li class='keycap tt' data-shifted='(' data-shifted-command='["insertAndUnshiftKeyboardLayer", "("]'>^</li>
                <li class='keycap tt' data-shifted=')' data-shifted-command='["insertAndUnshiftKeyboardLayer", ")"]'>_</li>
                <li class='keycap w20' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
        'upper-command': `
        <div class='rows'>
            <ul><row name='upper-1' class='tt' shift-layer='lower-command'/></ul>
            <ul><row name='upper-2' class='tt' shift-layer='lower-command'/></ul>
            <ul><row name='upper-3' class='tt' shift-layer='lower-command'/></ul>
            <ul>
                <li class='layer-switch font-glyph modifier bottom left' data-layer='symbols-command'01#</li>
                <li class='keycap tt'>[</li>
                <li class='keycap tt'>]</li>
                <li class='keycap tt'>(</li>
                <li class='keycap tt'>)</li>
                <li class='keycap w20' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
        'symbols-command': `
        <div class='rows'>
            <ul><li class='keycap tt'>1</li><li class='keycap tt'>2</li><li class='keycap tt'>3</li><li class='keycap tt'>4</li><li class='keycap tt'>5</li><li class='keycap tt'>6</li><li class='keycap tt'>7</li><li class='keycap tt'>8</li><li class='keycap tt'>9</li><li class='keycap tt'>0</li></ul>
            <ul><li class='keycap tt'>!</li><li class='keycap tt'>@</li><li class='keycap tt'>#</li><li class='keycap tt'>$</li><li class='keycap tt'>%</li><li class='keycap tt'>^</li><li class='keycap tt'>&</li><li class='keycap tt'>*</li><li class='keycap tt'>+</li><li class='keycap tt'>=</li></ul>
            <ul>
                <li class='keycap tt'>\\</li>
                <li class='keycap tt'>|</li>
                <li class='keycap tt'>/</li>
                <li class='keycap tt'>\`</li>
                <li class='keycap tt'>;</li>
                <li class='keycap tt'>:</li>
                <li class='keycap tt'>?</li>
                <li class='keycap tt'>'</li>
                <li class='keycap tt'>"</li>
                <li class='action font-glyph bottom right'
                    data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                    data-shifted-command='"deleteAll"'
                    data-alt-keys='delete' data-command='["performWithFeedback","deletePreviousChar"]'
                >&#x232b;</li>
            </ul>
            <ul>
                <li class='layer-switch font-glyph modifier bottom left' data-layer='lower-command'>abc</li>
                <li class='keycap tt'>&lt;</li>
                <li class='keycap tt'>&gt;</li>
                <li class='keycap tt'>~</li>
                <li class='keycap tt'>,</li>
                <li class='keycap tt'>.</li>
                <li class='keycap' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
        functions: `
        <div class='rows'>
            <ul><li class='separator'></li>
                <li class='fnbutton' data-insert='\\sin'></li>
                <li class='fnbutton' data-insert='\\sin^{-1}'></li>
                <li class='fnbutton' data-insert='\\ln'></li>
                <li class='fnbutton' data-insert='\\exponentialE^{#?}'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{lcm}(#?)$$' data-latex='\\operatorname{lcm}()'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{ceil}(#?)$$' data-latex='\\operatorname{ceil}()'></li>
                <li class='bigfnbutton' data-insert='$$\\lim_{n\\to\\infty}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\int$$'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{abs}(#?)$$' data-latex='\\operatorname{abs}()'></li>
            </ul>
            <ul><li class='separator'></li>
                <li class='fnbutton' data-insert='\\cos'></li>
                <li class='fnbutton' data-insert='\\cos^{-1}'></li>
                <li class='fnbutton' data-insert='\\ln_{10}'></li>
                <li class='fnbutton' data-insert='$$10^{#?}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{gcd}(#?)$$' data-latex='\\operatorname{gcd}()'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{floor}(#?)$$' data-latex='\\operatorname{floor}()'></li>
                <li class='bigfnbutton' data-insert='$$\\sum_{n\\mathop=0}^{\\infty}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\int_{0}^{\\infty}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{sign}(#?)$$' data-latex='\\operatorname{sign}()'></li>
            </ul>
            <ul><li class='separator'></li>
                <li class='fnbutton' data-insert='\\tan'></li>
                <li class='fnbutton' data-insert='\\tan^{-1}'></li>
                <li class='fnbutton' data-insert='$$\\log_{#?}$$'></li>
                <li class='fnbutton' data-insert='$$\\sqrt[#?]{#0}$$'></li>
                <li class='bigfnbutton' data-insert='$$#0 \\mod$$' data-latex='\\mod'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{round}(#?) $$' data-latex='\\operatorname{round}()'></li>
                <li class='bigfnbutton' data-insert='$$\\prod_{n\\mathop=0}^{\\infty}$$' data-latex='{\\scriptstyle \\prod_{n=0}^{\\infty}}'></li>
                <li class='bigfnbutton' data-insert='$$\\frac{\\differentialD #0}{\\differentialD x}$$'></li>
                <li class='action font-glyph bottom right' data-command='["performWithFeedback","deletePreviousChar"]'>&#x232b;</li></ul>
            <ul><li class='separator'></li>
                <li class='fnbutton'>(</li>
                <li class='fnbutton'>)</li>
                <li class='fnbutton' data-insert='$$^{#?} $$' data-latex='x^{#?} '></li>
                <li class='fnbutton' data-insert='$$_{#?} $$' data-latex='x_{#?} '></li>
                <li class='keycap w20 ' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
        style: `
        <div class='rows'>
            <ul>
                <li class='keycap' data-alt-keys='foreground-color' data-command='["applyStyle",{"color":"#cc2428"}]'><span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428'></span></li>
                <li class='keycap' data-alt-keys='background-color' data-command='["applyStyle",{"backgroundColor":"#fff590"}]'><span style='border-radius: 50%;width:22px;height:22px; background:#fff590'></span></li>
                <li class='separator w5'></li>
                <li class='keycap' data-command='["applyStyle",{"size":"size3"}]' data-latex='\\scriptsize\\text{small}'></li>
                <li class='keycap' data-command='["applyStyle",{"size":"size5"}]' data-latex='\\scriptsize\\text{normal}'></li>
                <li class='keycap' data-command='["applyStyle",{"size":"size9"}]' data-latex='\\huge\\text{big}'></li>
                <li class='separator w5'></li>
                <li class='keycap' data-latex='\\langle' data-command='["insert", "\\\\langle", {"smartFence":true}]'></li>
            </ul>
            <ul>
                <li class='keycap' data-command='["applyStyle",{"series":"l"}]' data-latex='\\fontseries{l}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"m"}]' data-latex='\\fontseries{m}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"b"}]' data-latex='\\fontseries{b}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"bx"}]' data-latex='\\fontseries{bx}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"sb"}]' data-latex='\\fontseries{sb}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"c"}]' data-latex='\\fontseries{c}\\text{Ab}'></li>
            </ul>
            <ul>
                <li class='keycap' data-command='["applyStyle",{"shape":"up"}]' data-latex='\\textup{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"shape":"it"}]' data-latex='\\textit{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"shape":"sl"}]' data-latex='\\textsl{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"shape":"sc"}]' data-latex='\\textsc{Ab}'></li>
                <li class='separator w5'></li>
                <li class='keycap' data-insert='$$\\emph{#?} $$' data-latex='\\text{\\emph{emph}}'></li>
            </ul>
            <ul>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cmr"}]' data-latex='\\textrm{Az}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cmtt"}]' data-latex='\\texttt{Az}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cmss"}]' data-latex='\\textsf{Az}'></li>

                <li class='keycap' data-command='["applyStyle",{"fontFamily":"bb"}]'  data-latex='\\mathbb{AZ}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"scr"}]'  data-latex='\\mathscr{AZ}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cal"}]' data-latex='\\mathcal{A1}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"frak"}]' data-latex='\\mathfrak{Az}'></li>
            </ul>
        </div>`,
    };
    function latexToMarkup$1(latex, arg, mf) {
        // Since we don't have preceding atoms, we'll interpret #@ as a placeholder
        latex = latex.replace(/(^|[^\\])#@/g, '$1#?');
        return makeStruts(makeSpan(decompose({
            mathstyle: MATHSTYLES.displaystyle,
            macros: mf.config.macros,
        }, parseString(latex, 'math', arg, mf.config.macros)), 'ML__base'), 'ML__mathlive').toMarkup();
    }
    /**
     * Return a markup string for the keyboard toolbar for the specified layer.
     */
    function makeKeyboardToolbar(mf, keyboardIDs, currentKeyboard) {
        var _a;
        // The left hand side of the toolbar has a list of all the available keyboards
        let result = "<div class='left'>";
        const keyboardList = keyboardIDs.replace(/\s+/g, ' ').split(' ');
        if (keyboardList.length > 1) {
            const keyboards = {
                ...KEYBOARDS,
                ...((_a = mf.config.customVirtualKeyboards) !== null && _a !== void 0 ? _a : {}),
            };
            for (const keyboard of keyboardList) {
                if (!keyboards[keyboard]) {
                    console.error('Unknown virtual keyboard "' + keyboard + '"');
                    break;
                }
                result += "<div class='";
                if (keyboard === currentKeyboard) {
                    result += 'selected ';
                }
                else {
                    if (keyboards[keyboard].command) {
                        result += 'action ';
                    }
                    else {
                        result += 'layer-switch ';
                    }
                }
                result += (keyboards[keyboard].classes || '') + "'";
                if (keyboards[keyboard].tooltip) {
                    result +=
                        "data-ML__tooltip='" +
                            localize(keyboards[keyboard].tooltip) +
                            "' ";
                    result += "data-placement='top' data-delay='1s'";
                }
                if (keyboard !== currentKeyboard) {
                    if (keyboards[keyboard].command) {
                        result +=
                            'data-command=\'"' +
                                keyboards[keyboard].command +
                                '"\'';
                    }
                    if (keyboards[keyboard].layer) {
                        result += "data-layer='" + keyboards[keyboard].layer + "'";
                    }
                }
                result += '>' + keyboards[keyboard].label + '</div>';
            }
        }
        result += '</div>';
        // The right hand side of the toolbar, with the copy/undo/redo commands
        result += `
        <div class='right'>
            <div class='action'
                data-command='"copyToClipboard"'
                data-ML__tooltip='${localize('tooltip.copy to clipboard')}' data-placement='top' data-delay='1s'>
                <svg><use xlink:href='#svg-copy' /></svg>
            </div>
            <div class='action disabled'
                data-command='"undo"'
                data-ML__tooltip='${localize('tooltip.undo')}' data-placement='top' data-delay='1s'>
                <svg><use xlink:href='#svg-undo' /></svg>
            </div>
            <div class='action disabled'
                data-command='"redo"'
                data-ML__tooltip='${localize('tooltip.redo')}' data-placement='top' data-delay='1s'>
                <svg><use xlink:href='#svg-redo' /></svg>
            </div>
        </div>
    `;
        return "<div class='keyboard-toolbar' role='toolbar'>" + result + '</div>';
    }
    function makeKeycap(mf, elList, chainedCommand) {
        var _a;
        for (let i = 0; i < elList.length; ++i) {
            const el = elList[i];
            let html;
            // Display
            if (el.getAttribute('data-latex')) {
                html = latexToMarkup$1(el.getAttribute('data-latex').replace(/&quot;/g, '"'), { '?': '{\\color{#555}{\\scriptstyle \\char"2B1A}}' }, mf);
            }
            else if (el.getAttribute('data-insert') && el.innerHTML === '') {
                html = latexToMarkup$1(el.getAttribute('data-insert').replace(/&quot;/g, '"'), { '?': '{\\color{#555}{\\scriptstyle \\char"2B1A}}' }, mf);
            }
            else if (el.getAttribute('data-content')) {
                html = el.getAttribute('data-content').replace(/&quot;/g, '"');
            }
            if (el.getAttribute('data-aside')) {
                html =
                    (html !== null && html !== void 0 ? html : '') +
                        '<aside>' +
                        el.getAttribute('data-aside').replace(/&quot;/g, '"') +
                        '</aside>';
            }
            if (typeof html !== 'undefined') {
                el.innerHTML = mf.config.createHTML(html);
            }
            if (el.getAttribute('data-classes')) {
                el.classList.add(el.getAttribute('data-classes'));
            }
            const key = (_a = el.getAttribute('data-insert')) === null || _a === void 0 ? void 0 : _a.replace(/&quot;/g, '"');
            if (key && SHIFTED_KEYS[key]) {
                el.setAttribute('data-shifted', SHIFTED_KEYS[key][0]);
                el.setAttribute('data-shifted-command', JSON.stringify([
                    'insertAndUnshiftKeyboardLayer',
                    SHIFTED_KEYS[key][1],
                ]));
            }
            // Commands
            let handlers;
            if (el.getAttribute('data-command')) {
                handlers = JSON.parse(el.getAttribute('data-command'));
            }
            else if (el.getAttribute('data-insert')) {
                handlers = [
                    'insert',
                    el.getAttribute('data-insert'),
                    {
                        focus: true,
                        feedback: true,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: true,
                    },
                ];
            }
            else if (el.getAttribute('data-latex')) {
                handlers = [
                    'insert',
                    el.getAttribute('data-latex'),
                    {
                        focus: true,
                        feedback: true,
                        mode: 'math',
                        format: 'latex',
                        resetStyle: true,
                    },
                ];
            }
            else {
                handlers = [
                    'typedText',
                    el.getAttribute('data-key') || el.textContent,
                    { focus: true, feedback: true, simulateKeystroke: true },
                ];
            }
            if (chainedCommand) {
                handlers = [chainedCommand, handlers];
            }
            if (el.getAttribute('data-alt-keys')) {
                const altKeys = ALT_KEYS[el.getAttribute('data-alt-keys')];
                if (altKeys) {
                    handlers = {
                        default: handlers,
                        pressAndHoldStart: [
                            'showAlternateKeys',
                            el.getAttribute('data-alt-keys'),
                            altKeys,
                        ],
                        pressAndHoldEnd: 'hideAlternateKeys',
                    };
                }
                else {
                    console.warn('Unknown alt key set: "' + el.getAttribute('data-alt-keys'));
                }
            }
            attachButtonHandlers(mf, el, handlers);
        }
    }
    /**
     * Expand the shortcut tags (e.g. <row>) inside a layer.
     */
    function expandLayerMarkup(mf, layer) {
        const ROWS = {
            // First row should be 10 key wide
            // Second row should be 10 key wide
            // Third row should be 8.5 key wide
            // One row should have ^ (shift key) which is 1.5 key wide
            // One row should have ~ (delete key) which is .5 or 1.5 key wide
            qwerty: {
                'lower-1': 'qwertyuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^zxcvbnm~',
                'upper-1': 'QWERTYUIOP',
                'upper-2': ' ASDFGHJKL ',
                'upper-3': '^ZXCVBNM~',
                'numpad-1': '789/',
                'numpad-2': '456*',
                'numpad-3': '123-',
                'numpad-4': '0.=+',
            },
            azerty: {
                'lower-1': 'azertyuiop',
                'lower-2': 'qsdfghjklm',
                'lower-3': '^ wxcvbn ~',
                'upper-1': 'AZERTYUIOP',
                'upper-2': 'QSDFGHJKLM',
                'upper-3': '^ WXCVBN ~',
            },
            qwertz: {
                'lower-1': 'qwertzuiop',
                'lower-2': ' asdfghjkl ',
                'lower-3': '^yxcvbnm~',
                'upper-1': 'QWERTZUIOP',
                'upper-2': ' ASDFGHJKL',
                'upper-3': '^YXCVBNM~',
            },
            dvorak: {
                'lower-1': '^  pyfgcrl ',
                'lower-2': 'aoeuidhtns',
                'lower-3': 'qjkxbmwvz~',
                'upper-1': '^  PYFGCRL ',
                'upper-2': 'AOEUIDHTNS',
                'upper-3': 'QJKXBMWVZ~',
            },
            colemak: {
                'lower-1': ' qwfpgjluy ',
                'lower-2': 'arstdhneio',
                'lower-3': '^zxcvbkm~',
                'upper-1': ' QWFPGNLUY ',
                'upper-2': 'ARSTDHNEIO',
                'upper-3': '^ZXCVBKM~',
            },
        };
        const layout = ROWS[mf.config.virtualKeyboardLayout]
            ? ROWS[mf.config.virtualKeyboardLayout]
            : ROWS['qwerty'];
        let result = layer;
        let row;
        result = result.replace(/<arrows\/>/g, `
        <li class='action' data-command='["performWithFeedback","moveToPreviousChar"]'
            data-shifted='<svg><use xlink:href="#svg-angle-double-left" /></svg>'
            data-shifted-command='["performWithFeedback","extendToPreviousChar"]'>
            <svg><use xlink:href='#svg-arrow-left' /></svg>
        </li>
        <li class='action' data-command='["performWithFeedback","moveToNextChar"]'
            data-shifted='<svg><use xlink:href="#svg-angle-double-right" /></svg>'
            data-shifted-command='["performWithFeedback","extendToNextChar"]'>
            <svg><use xlink:href='#svg-arrow-right' /></svg>
        </li>
        <li class='action' data-command='["performWithFeedback","moveToNextPlaceholder"]'>
        <svg><use xlink:href='#svg-tab' /></svg></li>`);
        let m = result.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        while (m) {
            row = '';
            const attributesArray = m[2].match(/[a-zA-Z][a-zA-Z0-9-]*=(['"])(.*?)\1/g);
            const attributes = {};
            for (const attribute of attributesArray) {
                const m2 = attribute.match(/([a-zA-Z][a-zA-Z0-9-]*)=(['"])(.*?)\2/);
                attributes[m2[1]] = m2[3];
            }
            let keys = layout[attributes['name']];
            if (!keys)
                keys = ROWS['qwerty'][attributes['name']];
            if (!keys) {
                console.warn('Unknown roman keyboard row: ' + attributes['name']);
            }
            else {
                for (const c of keys) {
                    let cls = attributes['class'] || '';
                    if (cls)
                        cls = ' ' + cls;
                    if (c === '~') {
                        row += `<li class='action font-glyph bottom right `;
                        row +=
                            keys.length - (keys.match(/ /g) || []).length / 2 === 10
                                ? 'w10'
                                : 'w15';
                        row += `' data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                        data-shifted-command='"deleteAll"'
                        data-alt-keys='delete' data-command='["performWithFeedback","deletePreviousChar"]'
                        >&#x232b;</li>`;
                    }
                    else if (c === ' ') {
                        // Separator
                        row += "<li class='separator w5'></li>";
                    }
                    else if (c === '^') {
                        // Shift key
                        row +=
                            `<li class='shift modifier font-glyph bottom left w15 layer-switch' data-layer='` +
                                attributes['shift-layer'] +
                                `'>&#x21e7;</li>`;
                    }
                    else if (c === '/') {
                        row +=
                            "<li class='keycap" +
                                cls +
                                "' data-alt-keys='/' data-insert='\\frac{#@}{#?}'>&divide;</li>";
                    }
                    else if (c === '*') {
                        row +=
                            "<li class='keycap" +
                                cls +
                                "' data-alt-keys='*' data-insert='\\times '>&times;</li>";
                    }
                    else if (c === '-') {
                        row +=
                            "<li class='keycap" +
                                cls +
                                "' data-alt-keys='-' data-key='-' data-alt-keys='-'>&#x2212;</li>";
                    }
                    else if (/tt/.test(cls)) {
                        row +=
                            "<li class='keycap" +
                                cls +
                                "' data-alt-keys='" +
                                c +
                                "'" +
                                ` data-command='["typedText","` +
                                c +
                                `",{"commandMode":true, "focus":true, "feedback":true}]'` +
                                '>' +
                                c +
                                '</li>';
                    }
                    else {
                        row +=
                            "<li class='keycap" +
                                cls +
                                "' data-alt-keys='" +
                                c +
                                "'>" +
                                c +
                                '</li>';
                    }
                }
            }
            result = result.replace(new RegExp(m[1] + m[2] + m[3]), row);
            m = result.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
        }
        return result;
    }
    /**
     * Construct a virtual keyboard element based on the config options in the
     * mathfield and an optional theme.
     */
    function makeKeyboard(mf, theme) {
        var _a, _b;
        const svgIcons = `<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">

            <symbol id="svg-command" viewBox="0 0 640 512">
                <path d="M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z"/>
            </symbol>

            <symbol id="svg-undo" viewBox="0 0 512 512">
                <path d="M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z"/>
            </symbol>
            <symbol id="svg-redo" viewBox="0 0 512 512">
                <path d="M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z"/>
            </symbol>
            <symbol id="svg-arrow-left" viewBox="0 0 192 512">
                <path d="M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z"/>
            </symbol>
            <symbol id="svg-arrow-right" viewBox="0 0 192 512">
                    <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z"/>
            </symbol>
            <symbol id="svg-tab" viewBox="0 0 448 512">
                    <path d="M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z"/>
            </symbol>
            <symbol id="svg-copy" viewBox="0 0 448 512">
                <path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM352 32.491a15.88 15.88 0 0 1 7.431 4.195l51.882 51.883A15.885 15.885 0 0 1 415.508 96H352V32.491zM288 464c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V144c0-8.822 7.178-16 16-16h80v240c0 26.51 21.49 48 48 48h112v48zm128-96c0 8.822-7.178 16-16 16H176c-8.822 0-16-7.178-16-16V48c0-8.822 7.178-16 16-16h144v72c0 13.2 10.8 24 24 24h72v240z"/>
            </symbol>
            <symbol id="svg-angle-double-right" viewBox="0 0 320 512">
                <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17zm128-17l-117.8-116c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17L255.3 256 153.1 356.4c-4.7 4.7-4.7 12.3 0 17l7.1 7.1c4.7 4.7 12.3 4.7 17 0l117.8-116c4.6-4.7 4.6-12.3-.1-17z"/>
            </symbol>
            <symbol id="svg-angle-double-left" viewBox="0 0 320 512">
                <path d="M153.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L192.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L153 264.5c-4.6-4.7-4.6-12.3.1-17zm-128 17l117.8 116c4.7 4.7 12.3 4.7 17 0l7.1-7.1c4.7-4.7 4.7-12.3 0-17L64.7 256l102.2-100.4c4.7-4.7 4.7-12.3 0-17l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L25 247.5c-4.6 4.7-4.6 12.3.1 17z"/>
            </symbol>
            <symbol id="svg-trash" viewBox="0 0 448 512">
                <path d="M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z"/>
            </symbol>
        </svg>
        `;
        // <symbol id="svg-wikipedia" viewBox="0 0 640 512">
        //         <path d="M640 51.2l-.3 12.2c-28.1.8-45 15.8-55.8 40.3-25 57.8-103.3 240-155.3 358.6H415l-81.9-193.1c-32.5 63.6-68.3 130-99.2 193.1-.3.3-15 0-15-.3C172 352.3 122.8 243.4 75.8 133.4 64.4 106.7 26.4 63.4.2 63.7c0-3.1-.3-10-.3-14.2h161.9v13.9c-19.2 1.1-52.8 13.3-43.3 34.2 21.9 49.7 103.6 240.3 125.6 288.6 15-29.7 57.8-109.2 75.3-142.8-13.9-28.3-58.6-133.9-72.8-160-9.7-17.8-36.1-19.4-55.8-19.7V49.8l142.5.3v13.1c-19.4.6-38.1 7.8-29.4 26.1 18.9 40 30.6 68.1 48.1 104.7 5.6-10.8 34.7-69.4 48.1-100.8 8.9-20.6-3.9-28.6-38.6-29.4.3-3.6 0-10.3.3-13.6 44.4-.3 111.1-.3 123.1-.6v13.6c-22.5.8-45.8 12.8-58.1 31.7l-59.2 122.8c6.4 16.1 63.3 142.8 69.2 156.7L559.2 91.8c-8.6-23.1-36.4-28.1-47.2-28.3V49.6l127.8 1.1.2.5z"/>
        // </symbol>
        // <symbol id="svg-link" viewBox="0 0 512 512">
        //         <path d="M301.148 394.702l-79.2 79.19c-50.778 50.799-133.037 50.824-183.84 0-50.799-50.778-50.824-133.037 0-183.84l79.19-79.2a132.833 132.833 0 0 1 3.532-3.403c7.55-7.005 19.795-2.004 20.208 8.286.193 4.807.598 9.607 1.216 14.384.481 3.717-.746 7.447-3.397 10.096-16.48 16.469-75.142 75.128-75.3 75.286-36.738 36.759-36.731 96.188 0 132.94 36.759 36.738 96.188 36.731 132.94 0l79.2-79.2.36-.36c36.301-36.672 36.14-96.07-.37-132.58-8.214-8.214-17.577-14.58-27.585-19.109-4.566-2.066-7.426-6.667-7.134-11.67a62.197 62.197 0 0 1 2.826-15.259c2.103-6.601 9.531-9.961 15.919-7.28 15.073 6.324 29.187 15.62 41.435 27.868 50.688 50.689 50.679 133.17 0 183.851zm-90.296-93.554c12.248 12.248 26.362 21.544 41.435 27.868 6.388 2.68 13.816-.68 15.919-7.28a62.197 62.197 0 0 0 2.826-15.259c.292-5.003-2.569-9.604-7.134-11.67-10.008-4.528-19.371-10.894-27.585-19.109-36.51-36.51-36.671-95.908-.37-132.58l.36-.36 79.2-79.2c36.752-36.731 96.181-36.738 132.94 0 36.731 36.752 36.738 96.181 0 132.94-.157.157-58.819 58.817-75.3 75.286-2.651 2.65-3.878 6.379-3.397 10.096a163.156 163.156 0 0 1 1.216 14.384c.413 10.291 12.659 15.291 20.208 8.286a131.324 131.324 0 0 0 3.532-3.403l79.19-79.2c50.824-50.803 50.799-133.062 0-183.84-50.802-50.824-133.062-50.799-183.84 0l-79.2 79.19c-50.679 50.682-50.688 133.163 0 183.851z"/>
        // </symbol>
        //     <symbol id="svg-external-link" viewBox="0 0 448 512">
        //     <path d="M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm16 400c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V80c0-8.822 7.178-16 16-16h352c8.822 0 16 7.178 16 16v352zM99.515 374.828c-4.686-4.686-4.686-12.284 0-16.971l195.15-195.15-.707-.707-89.958.342c-6.627 0-12-5.373-12-12v-9.999c0-6.628 5.372-12 12-12L340 128c6.627 0 12 5.372 12 12l-.343 136c0 6.627-5.373 12-12 12h-9.999c-6.627 0-12-5.373-12-12l.342-89.958-.707-.707-195.15 195.15c-4.686 4.686-12.284 4.686-16.971 0l-5.657-5.657z"/>
        // </symbol>
        // <symbol id="svg-external-link" viewBox="0 0 512 512">
        //     <path d="M256 40c118.621 0 216 96.075 216 216 0 119.291-96.61 216-216 216-119.244 0-216-96.562-216-216 0-119.203 96.602-216 216-216m0-32C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm-36 344h12V232h-12c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h48c6.627 0 12 5.373 12 12v140h12c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12h-72c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12zm36-240c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"/>
        // </symbol>
        let markup = svgIcons;
        inject(mf.element, css_248z$1);
        // Auto-populate the ALT_KEYS table
        ALT_KEYS_BASE['foreground-color'] = [];
        for (const color of LINE_COLORS) {
            ALT_KEYS_BASE['foreground-color'].push({
                classes: 'small-button',
                content: '<span style="border-radius:50%;width:32px;height:32px; box-sizing: border-box; border: 3px solid ' +
                    color +
                    '"></span>',
                command: '["applyStyle",{"color":"' + color + '"}]',
            });
        }
        ALT_KEYS_BASE['background-color'] = [];
        for (const color of AREA_COLORS) {
            ALT_KEYS_BASE['background-color'].push({
                classes: 'small-button',
                content: '<span style="border-radius:50%;width:32px;height:32px; background:' +
                    color +
                    '"></span>',
                command: '["applyStyle",{"backgroundColor":"' + color + '"}]',
            });
        }
        ALT_KEYS = { ...ALT_KEYS_BASE };
        Object.keys(ALT_KEYS).forEach((key) => {
            ALT_KEYS[key] = ALT_KEYS[key].slice();
        });
        const UPPER_ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const LOWER_ALPHA = 'abcdefghijklmnopqrstuvwxyz';
        const DIGITS = '0123456789';
        // Define the alternate set for uppercase keys
        for (let i = 0; i < 26; i++) {
            const key = UPPER_ALPHA[i];
            if (!ALT_KEYS[key])
                ALT_KEYS[key] = [];
            ALT_KEYS[key].unshift({
                latex: '\\mathbb{' + key + '}',
                aside: 'blackboard',
                insert: '\\mathbb{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathbf{' + key + '}',
                aside: 'bold',
                insert: '\\mathbf{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathsf{' + key + '}',
                aside: 'sans',
                insert: '\\mathsf{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathtt{' + key + '}',
                aside: 'monospace',
                insert: '\\mathtt{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathcal{' + key + '}',
                aside: 'calligraphy',
                insert: '\\mathcal{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathfrak{' + key + '}',
                aside: 'fraktur',
                insert: '\\mathfrak{' + key + '}',
            });
        }
        // Define the alternate set for lowercase keys
        for (let i = 0; i <= 26; i++) {
            const key = LOWER_ALPHA[i];
            if (!ALT_KEYS[key])
                ALT_KEYS[key] = [];
            ALT_KEYS[key].unshift({
                latex: '\\mathsf{' + key + '}',
                aside: 'sans',
                insert: '\\mathsf{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathbf{' + key + '}',
                aside: 'bold',
                insert: '\\mathbf{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathtt{' + key + '}',
                aside: 'monospace',
                insert: '\\mathtt{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathfrak{' + key + '}',
                aside: 'fraktur',
                insert: '\\mathfrak{' + key + '}',
            });
        }
        for (let i = 0; i < 10; i++) {
            const key = DIGITS[i];
            if (!ALT_KEYS[key])
                ALT_KEYS[key] = [];
            // The mathbb font does not appear to include digits,
            // although it's supposed to.
            // ALT_KEYS[key].push({
            //         latex: '\\underset{\\textsf{\\footnotesize blackboard}}{\\mathbb{' + key + '}}',
            //         insert: '\\mathbb{' + key + '}}'});
            ALT_KEYS[key].unshift({
                latex: '\\mathbf{' + key + '}',
                aside: 'bold',
                insert: '\\mathbf{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathsf{' + key + '}',
                aside: 'sans',
                insert: '\\mathsf{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathtt{' + key + '}',
                aside: 'monospace',
                insert: '\\mathtt{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathcal{' + key + '}',
                aside: 'script',
                insert: '\\mathcal{' + key + '}',
            });
            ALT_KEYS[key].unshift({
                latex: '\\mathfrak{' + key + '}',
                aside: 'fraktur',
                insert: '\\mathfrak{' + key + '}',
            });
        }
        let keyboardIDs = mf.config.virtualKeyboards;
        if (!keyboardIDs) {
            keyboardIDs = 'all';
        }
        keyboardIDs = keyboardIDs.replace(/\ball\b/i, 'numeric functions symbols roman  greek');
        const layers = {
            ...LAYERS,
            ...((_a = mf.config.customVirtualKeyboardLayers) !== null && _a !== void 0 ? _a : {}),
        };
        const keyboards = {
            ...KEYBOARDS,
            ...((_b = mf.config.customVirtualKeyboards) !== null && _b !== void 0 ? _b : {}),
        };
        const keyboardList = keyboardIDs.replace(/\s+/g, ' ').split(' ');
        for (const keyboard of keyboardList) {
            if (!keyboards[keyboard]) {
                console.error('Unknown virtual keyboard "' + keyboard + '"');
                break;
            }
            // Add the default layer to the list of layers,
            // and make sure the list of layers is uniquified.
            let keyboardLayers = keyboards[keyboard].layers || [];
            if (keyboards[keyboard].layer) {
                keyboardLayers.push(keyboards[keyboard].layer);
            }
            keyboardLayers = Array.from(new Set(keyboardLayers));
            for (const layer of keyboardLayers) {
                if (!layers[layer]) {
                    console.error('Unknown virtual keyboard layer: "' + layer + '"');
                    break;
                }
                if (typeof layers[layer] === 'object') {
                    // Process JSON layer to web element based layer.
                    let tempLayer = ``;
                    if (layers[layer].styles) {
                        tempLayer += `<style>${layers[layer].styles}</style>`;
                    }
                    if (layers[layer].backdrop) {
                        tempLayer += `<div class='${layers[layer].backdrop}'>`;
                    }
                    if (layers[layer].container) {
                        tempLayer += `<div class='${layers[layer].container}'>`;
                    }
                    if (layers[layer].rows) {
                        tempLayer += `<div class='rows'>`;
                        for (const row of layers[layer].rows) {
                            tempLayer += `<ul>`;
                            for (const col of row) {
                                tempLayer += `<li`;
                                if (col.class) {
                                    tempLayer += ` class="${col.class}"`;
                                }
                                if (col.key) {
                                    tempLayer += ` data-key="${col.key}"`;
                                }
                                if (col.command) {
                                    if (typeof col.command === 'string') {
                                        tempLayer += ` data-command='"${col.command}"'`;
                                    }
                                    else {
                                        tempLayer += ` data-command='`;
                                        tempLayer += JSON.stringify(col.command);
                                        tempLayer += `'`;
                                    }
                                }
                                if (col.insert) {
                                    tempLayer += ` data-insert="${col.insert}"`;
                                }
                                if (col.latex) {
                                    tempLayer += ` data-latex="${col.latex}"`;
                                }
                                if (col.aside) {
                                    tempLayer += ` data-aside="${col.aside}"`;
                                }
                                if (col.altKeys) {
                                    tempLayer += ` data-alt-keys="${col.altKeys}"`;
                                }
                                if (col.shifted) {
                                    tempLayer += ` data-shifted="${col.shifted}"`;
                                }
                                if (col.shiftedCommand) {
                                    tempLayer += ` data-shifted-command="${col.shiftedCommand}"`;
                                }
                                tempLayer += `>${col.label ? col.label : ''}</li>`;
                            }
                            tempLayer += `</ul>`;
                        }
                        tempLayer += `</div>`;
                    }
                    if (layers[layer].container) {
                        tempLayer += '</div>';
                    }
                    if (layers[layer].backdrop) {
                        tempLayer += '</div>';
                    }
                    layers[layer] = tempLayer;
                }
                markup +=
                    `<div tabindex="-1" class='keyboard-layer' data-layer='` +
                        layer +
                        `'>`;
                markup += makeKeyboardToolbar(mf, keyboardIDs, keyboard);
                const layerMarkup = typeof layers[layer] === 'function'
                    ? layers[layer]()
                    : layers[layer];
                // A layer can contain 'shortcuts' (i.e. <row> tags) that need to
                // be expanded
                markup += expandLayerMarkup(mf, layerMarkup);
                markup += '</div>';
            }
        }
        const result = document.createElement('div');
        result.className = 'ML__keyboard';
        if (theme) {
            result.classList.add(theme);
        }
        else if (mf.config.virtualKeyboardTheme) {
            result.classList.add(mf.config.virtualKeyboardTheme);
        }
        result.innerHTML = mf.config.createHTML(markup);
        // Attach the element handlers
        makeKeycap(mf, [].slice.call(result.querySelectorAll('.keycap, .action, .fnbutton, .bigfnbutton')));
        const elList = result.getElementsByClassName('layer-switch');
        for (let i = 0; i < elList.length; ++i) {
            if (elList[i].classList.contains('shift')) {
                // This is a potential press-and-hold layer switch
                attachButtonHandlers(mf, elList[i], {
                    // When the modifier is initially pressed, we will shift the labels
                    // (if available)
                    pressed: ['shiftKeyboardLayer', 'shift'],
                    // If the key is released before a delay, we switch to the target layer
                    default: [
                        'switchKeyboardLayer',
                        elList[i].getAttribute('data-layer'),
                    ],
                    // If the key is released after a longer delay, we restore the
                    // shifted labels
                    pressAndHoldEnd: 'unshiftKeyboardLayer',
                });
            }
            else {
                // This is a simple layer switch
                attachButtonHandlers(mf, elList[i], {
                    default: [
                        'switchKeyboardLayer',
                        elList[i].getAttribute('data-layer'),
                    ],
                });
            }
        }
        // Select the first keyboard as the initial one.
        const layerElements = result.getElementsByClassName('keyboard-layer');
        Array.from(layerElements).forEach((x) => {
            x.addEventListener('mousedown', (evt) => {
                evt.preventDefault();
                evt.stopPropagation();
            });
            x.addEventListener('touchstart', (evt) => {
                evt.preventDefault();
                evt.stopPropagation();
            }, { passive: false });
        });
        layerElements[0].classList.add('is-visible');
        // Listen to know when the mouse has been released without being
        // captured to remove the alternate keys panel and the shifted state of the
        // keyboard.
        // @todo should use a scrim instead (to prevent elements underneat the alt
        // layer from reacting while the alt layer is up)
        window.addEventListener('mouseup', function () {
            hideAlternateKeys();
            unshiftKeyboardLayer(mf);
        });
        window.addEventListener('blur', function () {
            hideAlternateKeys();
            unshiftKeyboardLayer(mf);
        });
        window.addEventListener('touchend', function () {
            hideAlternateKeys();
            unshiftKeyboardLayer(mf);
        });
        window.addEventListener('touchcancel', function () {
            hideAlternateKeys();
            unshiftKeyboardLayer(mf);
        });
        return result;
    }
    function hideAlternateKeys(_mathfield) {
        const altContainer = document.getElementById('mathlive-alternate-keys-panel');
        if (altContainer) {
            altContainer.classList.remove('is-visible');
            altContainer.innerHTML = '';
            releaseSharedElement(altContainer);
        }
        return false;
    }
    /*
     * Restore the key labels and commands to the state before a modifier key
     * was pressed.
     *
     */
    function unshiftKeyboardLayer(mathfield) {
        const keycaps = mathfield.virtualKeyboard.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
        if (keycaps) {
            for (let i = 0; i < keycaps.length; i++) {
                const keycap = keycaps[i];
                const content = keycap.getAttribute('data-unshifted-content');
                if (content) {
                    keycap.innerHTML = mathfield.config.createHTML(content);
                }
                const command = keycap.getAttribute('data-unshifted-command');
                if (command) {
                    keycap.setAttribute('data-' + mathfield.config.namespace + 'command', command);
                }
            }
        }
        return false;
    }
    function updateUndoRedoButtons(mathfield) {
        var _a;
        const virtualKeyboardToolbar = (_a = mathfield.virtualKeyboard) === null || _a === void 0 ? void 0 : _a.querySelector('.keyboard-toolbar');
        if (virtualKeyboardToolbar) {
            const undoButton = virtualKeyboardToolbar.querySelector('[data-command=\'"undo"\']');
            const redoButton = virtualKeyboardToolbar.querySelector('[data-command=\'"redo"\']');
            if (mathfield.canRedo()) {
                redoButton.classList.remove('disabled');
            }
            else {
                redoButton.classList.add('disabled');
            }
            if (mathfield.canUndo()) {
                undoButton.classList.remove('disabled');
            }
            else {
                undoButton.classList.add('disabled');
            }
        }
    }

    /*
     * Alternate options are displayed when a key on the virtual keyboard is pressed
     * and held.
     *
     */
    register$2({
        showAlternateKeys: (mathfield, keycap, altKeys) => {
            const altContainer = getSharedElement('mathlive-alternate-keys-panel', 'ML__keyboard alternate-keys');
            if (mathfield.virtualKeyboard.classList.contains('material')) {
                altContainer.classList.add('material');
            }
            if (altKeys.length >= 7) {
                // Width 4
                altContainer.style.width = '286px';
            }
            else if (altKeys.length === 4 || altKeys.length === 2) {
                // Width 2
                altContainer.style.width = '146px';
            }
            else if (altKeys.length === 1) {
                // Width 1
                altContainer.style.width = '86px';
            }
            else {
                // Width 3
                altContainer.style.width = '146px';
            }
            // Reset container height
            altContainer.style.height = 'auto';
            let markup = '';
            for (const altKey of altKeys) {
                markup += '<li';
                if (typeof altKey === 'string') {
                    markup +=
                        ' data-latex="' + altKey.replace(/"/g, '&quot;') + '"';
                }
                else {
                    if (altKey.latex) {
                        markup +=
                            ' data-latex="' +
                                altKey.latex.replace(/"/g, '&quot;') +
                                '"';
                    }
                    if (altKey.content) {
                        markup +=
                            ' data-content="' +
                                altKey.content.replace(/"/g, '&quot;') +
                                '"';
                    }
                    if (altKey.insert) {
                        markup +=
                            ' data-insert="' +
                                altKey.insert.replace(/"/g, '&quot;') +
                                '"';
                    }
                    if (altKey.command) {
                        markup +=
                            " data-command='" +
                                altKey.command.replace(/"/g, '&quot;') +
                                "'";
                    }
                    if (altKey.aside) {
                        markup +=
                            ' data-aside="' +
                                altKey.aside.replace(/"/g, '&quot;') +
                                '"';
                    }
                    if (altKey.classes) {
                        markup += ' data-classes="' + altKey.classes + '"';
                    }
                }
                markup += '>';
                markup += altKey.label || '';
                markup += '</li>';
            }
            markup = '<ul>' + markup + '</ul>';
            altContainer.innerHTML = mathfield.config.createHTML(markup);
            makeKeycap(mathfield, [].slice.call(altContainer.getElementsByTagName('li')), 'performAlternateKeys');
            const keycapEl = mathfield.virtualKeyboard.querySelector('div.keyboard-layer.is-visible div.rows ul li[data-alt-keys="' +
                keycap +
                '"]');
            const position = keycapEl.getBoundingClientRect();
            if (position) {
                if (position.top - altContainer.clientHeight < 0) {
                    // altContainer.style.maxWidth = '320px';  // Up to six columns
                    altContainer.style.width = 'auto';
                    if (altKeys.length <= 6) {
                        altContainer.style.height = '56px'; // 1 row
                    }
                    else if (altKeys.length <= 12) {
                        altContainer.style.height = '108px'; // 2 rows
                    }
                    else {
                        altContainer.style.height = '205px'; // 3 rows
                    }
                }
                const top = (position.top - altContainer.clientHeight + 5).toString() +
                    'px';
                const left = Math.max(0, Math.min(window.innerWidth - altContainer.offsetWidth, (position.left +
                    position.right -
                    altContainer.offsetWidth) /
                    2)) + 'px';
                altContainer.style.transform =
                    'translate(' + left + ',' + top + ')';
                altContainer.classList.add('is-visible');
            }
            return false;
        },
    }, { target: 'virtual-keyboard' });
    function switchKeyboardLayer(mathfield, layer) {
        if (mathfield.config.virtualKeyboardMode !== 'off') {
            if (layer !== 'lower-command' &&
                layer !== 'upper-command' &&
                layer !== 'symbols-command') {
                // If we switch to a non-command keyboard layer, first exit command mode.
                complete(mathfield);
            }
            showVirtualKeyboard(mathfield);
            // If the alternate keys panel was visible, hide it
            hideAlternateKeys();
            // If we were in a temporarily shifted state (shift-key held down)
            // restore our state before switching to a new layer.
            unshiftKeyboardLayer(mathfield);
            const layers = mathfield.virtualKeyboard.getElementsByClassName('keyboard-layer');
            // Search for the requested layer
            let found = false;
            for (let i = 0; i < layers.length; i++) {
                if (layers[i].dataset.layer === layer) {
                    found = true;
                    break;
                }
            }
            // We did find the layer, switch to it.
            // If we didn't find it, do nothing and keep the current layer
            if (found) {
                for (let i = 0; i < layers.length; i++) {
                    if (layers[i].dataset.layer === layer) {
                        layers[i].classList.add('is-visible');
                    }
                    else {
                        layers[i].classList.remove('is-visible');
                    }
                }
            }
            mathfield.$focus();
        }
        return true;
    }
    /*
     * Temporarily change the labels and the command of the keys
     * (for example when a modifier key is held down.)
     */
    register$2({
        shiftKeyboardLayer: (mathfield) => {
            const keycaps = mathfield.virtualKeyboard.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
            if (keycaps) {
                for (let i = 0; i < keycaps.length; i++) {
                    const keycap = keycaps[i];
                    let shiftedContent = keycap.getAttribute('data-shifted');
                    if (shiftedContent || /^[a-z]$/.test(keycap.innerHTML)) {
                        keycap.setAttribute('data-unshifted-content', keycap.innerHTML);
                        if (!shiftedContent) {
                            shiftedContent = keycap.innerHTML.toUpperCase();
                        }
                        keycap.innerHTML = mathfield.config.createHTML(shiftedContent);
                        const command = keycap.getAttribute('data-' + mathfield.config.namespace + 'command');
                        if (command) {
                            keycap.setAttribute('data-unshifted-command', command);
                            const shifteCommand = keycap.getAttribute('data-shifted-command');
                            if (shifteCommand) {
                                keycap.setAttribute('data-' +
                                    mathfield.config.namespace +
                                    'command', shifteCommand);
                            }
                            else {
                                const commandObj = JSON.parse(command);
                                if (isArray(commandObj)) {
                                    commandObj[1] = commandObj[1].toUpperCase();
                                }
                                keycap.setAttribute('data-' +
                                    mathfield.config.namespace +
                                    'command', JSON.stringify(commandObj));
                            }
                        }
                    }
                }
            }
            return false;
        },
    }, { target: 'virtual-keyboard' });
    register$2({
        hideAlternateKeys: (mathfield) => hideAlternateKeys(),
        /*
         * The command invoked when an alternate key is pressed.
         * We need to hide the Alternate Keys panel, then perform the
         * command.
         */
        performAlternateKeys: (mathfield, command) => {
            hideAlternateKeys();
            return mathfield.$perform(command);
        },
        switchKeyboardLayer: (mathfield, layer) => switchKeyboardLayer(mathfield, layer),
        unshiftKeyboardLayer: (mathfield) => unshiftKeyboardLayer(mathfield),
        insertAndUnshiftKeyboardLayer: (mathfield, c) => {
            mathfield.$insert(c);
            unshiftKeyboardLayer(mathfield);
            return true;
        },
    }, { target: 'virtual-keyboard' });
    register$2({
        /* Toggle the virtual keyboard, but switch to the alternate theme if available */
        toggleVirtualKeyboardAlt: (mathfield) => {
            let hadAltTheme = false;
            if (mathfield.virtualKeyboard) {
                hadAltTheme = mathfield.virtualKeyboard.classList.contains('material');
                mathfield.virtualKeyboard.remove();
                delete mathfield.virtualKeyboard;
                mathfield.virtualKeyboard = null;
            }
            showVirtualKeyboard(mathfield, hadAltTheme ? '' : 'material');
            return false;
        },
        /** Toggle the virtual keyboard, but switch another keyboard layout */
        toggleVirtualKeyboardShift: (mathfield) => {
            var _a, _b;
            mathfield.config.virtualKeyboardLayout = {
                qwerty: 'azerty',
                azerty: 'qwertz',
                qwertz: 'dvorak',
                dvorak: 'colemak',
                colemak: 'qwerty',
            }[mathfield.config.virtualKeyboardLayout];
            const layer = (_b = (_a = mathfield.virtualKeyboard) === null || _a === void 0 ? void 0 : _a.querySelector('div.keyboard-layer.is-visible').id) !== null && _b !== void 0 ? _b : '';
            if (mathfield.virtualKeyboard) {
                mathfield.virtualKeyboard.remove();
                delete mathfield.virtualKeyboard;
                mathfield.virtualKeyboard = null;
            }
            showVirtualKeyboard(mathfield);
            if (layer) {
                switchKeyboardLayer(mathfield, layer);
            }
            return false;
        },
    }, { target: 'virtual-keyboard' });
    function showVirtualKeyboard(mathfield, theme = '') {
        mathfield.virtualKeyboardVisible = false;
        toggleVirtualKeyboard(mathfield, theme);
        return false;
    }
    function hideVirtualKeyboard(mathfield) {
        mathfield.virtualKeyboardVisible = true;
        toggleVirtualKeyboard(mathfield);
        return false;
    }
    function toggleVirtualKeyboard(mathfield, theme) {
        mathfield.virtualKeyboardVisible = !mathfield.virtualKeyboardVisible;
        if (mathfield.virtualKeyboardVisible) {
            if (mathfield.virtualKeyboard) {
                mathfield.virtualKeyboard.classList.add('is-visible');
            }
            else {
                // Construct the virtual keyboard
                mathfield.virtualKeyboard = makeKeyboard(mathfield, theme);
                // Let's make sure that tapping on the keyboard focuses the field
                on(mathfield.virtualKeyboard, 'touchstart:passive mousedown', () => {
                    mathfield.$focus();
                });
                document.body.appendChild(mathfield.virtualKeyboard);
            }
            // For the transition effect to work, the property has to be changed
            // after the insertion in the DOM. Use setTimeout
            window.setTimeout(() => {
                mathfield.virtualKeyboard.classList.add('is-visible');
            }, 1);
        }
        else if (mathfield.virtualKeyboard) {
            mathfield.virtualKeyboard.classList.remove('is-visible');
        }
        if (typeof mathfield.config.onVirtualKeyboardToggle === 'function') {
            mathfield.config.onVirtualKeyboardToggle(mathfield, mathfield.virtualKeyboardVisible, mathfield.virtualKeyboard);
        }
        return false;
    }
    register$2({
        toggleVirtualKeyboard: (mathfield, theme) => toggleVirtualKeyboard(mathfield, theme),
        hideVirtualKeyboard: (mathfield) => hideVirtualKeyboard(mathfield),
        showVirtualKeyboard: (mathfield, theme) => showVirtualKeyboard(mathfield, theme),
    }, { target: 'virtual-keyboard' });

    var css_248z$1$1 = "@-webkit-keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}@keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}.ML__caret:after{content:\"\";border:none;border-radius:2px;border-right:2px solid var(--caret);margin-right:-2px;position:relative;left:-1px;-webkit-animation:ML__caret-blink 1.05s step-end infinite forwards;animation:ML__caret-blink 1.05s step-end infinite forwards}.ML__text-caret:after{content:\"\";border:none;border-radius:1px;border-right:1px solid var(--caret);margin-right:-1px;position:relative;left:0;-webkit-animation:ML__caret-blink 1.05s step-end infinite forwards;animation:ML__caret-blink 1.05s step-end infinite forwards}.ML__command-caret:after{content:\"_\";border:none;margin-right:-1ex;position:relative;color:var(--caret);-webkit-animation:ML__caret-blink 1.05s step-end infinite forwards;animation:ML__caret-blink 1.05s step-end infinite forwards}.ML__fieldcontainer{display:flex;flex-flow:row;justify-content:space-between;align-items:flex-end;min-height:39px;touch-action:none;width:100%;--hue:212;--highlight:hsl(var(--hue),97%,85%);--caret:hsl(var(--hue),40%,49%);--highlight-inactive:#ccc;--primary:hsl(var(--hue),40%,50%);--secondary:hsl(var(--hue),19%,26%);--on-secondary:hsl(var(--hue),19%,26%)}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__fieldcontainer{--highlight:hsl(var(--hue),40%,49%);--highlight-inactive:hsl(var(--hue),10%,35%);--caret:hsl(var(--hue),97%,85%);--secondary:hsl(var(--hue),25%,35%);--on-secondary:#fafafa}}body[theme=dark] .ML__fieldcontainer{--highlight:hsl(var(--hue),40%,49%);--highlight-inactive:hsl(var(--hue),10%,35%);--caret:hsl(var(--hue),97%,85%);--secondary:hsl(var(--hue),25%,35%);--on-secondary:#fafafa}.ML__fieldcontainer:focus{outline:2px solid var(--primary);outline-offset:3px}.ML__fieldcontainer__field{align-self:center;position:relative;overflow:hidden;line-height:0;padding:2px;width:100%}.ML__virtual-keyboard-toggle{display:flex;align-self:center;align-items:center;flex-shrink:0;flex-direction:column;justify-content:center;width:34px;height:34px;padding:0;margin-right:4px;cursor:pointer;box-sizing:border-box;border-radius:50%;border:1px solid transparent;transition:background .2s cubic-bezier(.64,.09,.08,1);color:var(--primary);fill:currentColor;background:transparent}.ML__virtual-keyboard-toggle:hover{background:hsl(var(--hue),25%,35%);color:#fafafa;fill:currentColor;border-radius:50%;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2)}.ML__popover{visibility:hidden;min-width:160px;background-color:rgba(97,97,97,.95);color:#fff;text-align:center;border-radius:6px;position:fixed;z-index:1;display:flex;flex-direction:column;justify-content:center;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);transition:all .2s cubic-bezier(.64,.09,.08,1)}.ML__popover:after{content:\"\";position:absolute;top:-5px;left:calc(50% - 3px);width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;font-size:1rem;border-bottom:5px solid rgba(97,97,97,.9)}.ML__popover--reverse-direction:after{top:auto;bottom:-5px;border-top:5px solid rgba(97,97,97,.9);border-bottom:0}.ML__textarea__textarea{transform:scale(0);resize:none;position:absolute;clip:rect(0 0 0 0);width:1px;height:1px;font-size:16px}.ML__focused .ML__text{background:hsla(var(--hue),40%,50%,.1)}.ML__smart-fence__close{opacity:.5}.ML__selection{background:var(--highlight-inactive);box-sizing:border-box}.ML__focused .ML__selection{background:var(--highlight)!important;color:var(--on-highlight)}.ML__contains-caret.ML__close,.ML__contains-caret.ML__open,.ML__contains-caret>.ML__close,.ML__contains-caret>.ML__open,.sqrt.ML__contains-caret>.sqrt-sign,.sqrt.ML__contains-caret>.vlist>span>.sqrt-line{color:var(--caret)}.ML__command{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace;letter-spacing:-1px;font-weight:400;line-height:1em;color:var(--primary)}:not(.ML__command)+.ML__command{margin-left:.25em}.ML__command+:not(.ML__command){padding-left:.25em}.ML__suggestion{opacity:.5}.ML__virtual-keyboard-toggle.pressed{background:hsla(0,0%,70%,.5)}.ML__virtual-keyboard-toggle:focus{outline:none;border-radius:50%;border:2px solid var(--primary)}.ML__virtual-keyboard-toggle.active,.ML__virtual-keyboard-toggle.active:hover{background:hsla(0,0%,70%,.5);color:#000;fill:currentColor}.ML__scroller{position:fixed;z-index:1;top:0;height:100vh;width:200px}[data-ML__tooltip]{position:relative}[data-ML__tooltip][data-placement=top]:after{top:inherit;bottom:100%}[data-ML__tooltip]:after{position:absolute;visibility:hidden;content:attr(data-ML__tooltip);display:inline-table;top:110%;width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:200px;padding:8px;background:#616161;color:#fff;text-align:center;z-index:2;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);border-radius:2px;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-weight:400;font-size:12px;opacity:0;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1)}@media only screen and (max-width:767px){[data-ML__tooltip]:after{height:32px;padding:4px 16px;font-size:14px}}[data-ML__tooltip]:hover{position:relative}[data-ML__tooltip]:hover:after{visibility:visible;opacity:1;transform:scale(1)}[data-ML__tooltip][data-delay]:after{transition-delay:0s}[data-ML__tooltip][data-delay]:hover:after{transition-delay:1s}";

    var css_248z$2 = ".ML__sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}body.ML__fonts-loading .ML__base{visibility:hidden}.ML__base{visibility:inherit;display:inline-block;position:relative;cursor:text}.ML__strut,.ML__strut--bottom{display:inline-block;min-height:.5em}.ML__small-delim{font-family:KaTeX_Main}.ML__text{font-family:var(--ml_text-font-family,system-ui,-apple-system,BlinkMacSystemFont,\"Segoe UI\",\"Roboto\",\"Oxygen\",\"Ubuntu\",\"Cantarell\",\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif);white-space:pre}.ML__cmr{font-family:KaTeX_Main;font-style:normal}.ML__mathit{font-family:KaTeX_Math;font-style:italic}.ML__mathbf{font-family:KaTeX_Main;font-weight:700}.lcGreek.ML__mathbf{font-family:KaTeX_Math;font-weight:400}.ML__mathbfit{font-family:KaTeX_Math;font-weight:700;font-style:italic}.ML__ams,.ML__bb{font-family:KaTeX_AMS}.ML__cal{font-family:KaTeX_Caligraphic}.ML__frak{font-family:KaTeX_Fraktur}.ML__tt{font-family:KaTeX_Typewriter}.ML__script{font-family:KaTeX_Script}.ML__sans{font-family:KaTeX_SansSerif}.ML__series_el,.ML__series_ul{font-weight:100}.ML__series_l{font-weight:200}.ML__series_sl{font-weight:300}.ML__series_sb{font-weight:500}.ML__bold,.ML__boldsymbol{font-weight:700}.ML__series_eb{font-weight:800}.ML__series_ub{font-weight:900}.ML__series_uc{font-stretch:ultra-condensed}.ML__series_ec{font-stretch:extra-condensed}.ML__series_c{font-stretch:condensed}.ML__series_sc{font-stretch:semi-condensed}.ML__series_sx{font-stretch:semi-expanded}.ML__series_x{font-stretch:expanded}.ML__series_ex{font-stretch:extra-expanded}.ML__series_ux{font-stretch:ultra-expanded}.ML__it{font-style:italic}.ML__shape_ol{-webkit-text-stroke:1px #000;text-stroke:1px #000;color:transparent}.ML__shape_sc{font-variant:small-caps}.ML__shape_sl{font-style:oblique}.ML__emph{color:#bc2612}.ML__emph .ML__emph{color:#0c7f99}.ML__highlight{color:#007cb2;background:#edd1b0}.ML__mathlive{display:inline-block;line-height:0;direction:ltr;text-align:left;text-indent:0;text-rendering:auto;font-family:KaTeX_Main;font-style:normal;font-size-adjust:none;letter-spacing:normal;word-wrap:normal;word-spacing:normal;white-space:nowrap;text-shadow:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:-webkit-min-content;width:-moz-min-content;width:min-content;transform:translateZ(0)}.ML__mathlive .reset-textstyle.scriptstyle{font-size:.7em}.ML__mathlive .reset-textstyle.scriptscriptstyle{font-size:.5em}.ML__mathlive .reset-scriptstyle.textstyle{font-size:1.42857em}.ML__mathlive .reset-scriptstyle.scriptscriptstyle{font-size:.71429em}.ML__mathlive .reset-scriptscriptstyle.textstyle{font-size:2em}.ML__mathlive .reset-scriptscriptstyle.scriptstyle{font-size:1.4em}.ML__mathlive .style-wrap{position:relative}.ML__mathlive .vlist{display:inline-block}.ML__mathlive .vlist>span{display:block;height:0;position:relative;line-height:0}.ML__mathlive .vlist>span>span{display:inline-block}.ML__mathlive .msubsup{text-align:left}.ML__mathlive .mfrac>span{text-align:center}.ML__mathlive .mfrac .frac-line{width:100%}.ML__mathlive .mfrac .frac-line:after{content:\"\";display:block;margin-top:-.04em;border-bottom-style:solid;border-bottom-width:.04em;min-height:.04em;box-sizing:content-box}.ML__mathlive .rspace.negativethinspace{margin-right:-.16667em}.ML__mathlive .rspace.thinspace{margin-right:.16667em}.ML__mathlive .rspace.negativemediumspace{margin-right:-.22222em}.ML__mathlive .rspace.mediumspace{margin-right:.22222em}.ML__mathlive .rspace.thickspace{margin-right:.27778em}.ML__mathlive .rspace.sixmuspace{margin-right:.333333em}.ML__mathlive .rspace.eightmuspace{margin-right:.444444em}.ML__mathlive .rspace.enspace{margin-right:.5em}.ML__mathlive .rspace.twelvemuspace{margin-right:.666667em}.ML__mathlive .rspace.quad{margin-right:1em}.ML__mathlive .rspace.qquad{margin-right:2em}.ML__mathlive .mspace{display:inline-block}.ML__mathlive .mspace.negativethinspace{margin-left:-.16667em}.ML__mathlive .mspace.thinspace{width:.16667em}.ML__mathlive .mspace.negativemediumspace{margin-left:-.22222em}.ML__mathlive .mspace.mediumspace{width:.22222em}.ML__mathlive .mspace.thickspace{width:.27778em}.ML__mathlive .mspace.sixmuspace{width:.333333em}.ML__mathlive .mspace.eightmuspace{width:.444444em}.ML__mathlive .mspace.enspace{width:.5em}.ML__mathlive .mspace.twelvemuspace{width:.666667em}.ML__mathlive .mspace.quad{width:1em}.ML__mathlive .mspace.qquad{width:2em}.ML__mathlive .llap,.ML__mathlive .rlap{width:0;position:relative}.ML__mathlive .llap>.inner,.ML__mathlive .rlap>.inner{position:absolute}.ML__mathlive .llap>.fix,.ML__mathlive .rlap>.fix{display:inline-block}.ML__mathlive .llap>.inner{right:0}.ML__mathlive .rlap>.inner{left:0}.ML__mathlive .rule{display:inline-block;border:0 solid;position:relative}.ML__mathlive .overline .overline-line,.ML__mathlive .underline .underline-line{width:100%}.ML__mathlive .overline .overline-line:before,.ML__mathlive .underline .underline-line:before{border-bottom-style:solid;border-bottom-width:.04em;content:\"\";display:block}.ML__mathlive .overline .overline-line:after,.ML__mathlive .underline .underline-line:after{border-bottom-style:solid;border-bottom-width:.04em;min-height:thin;content:\"\";display:block;margin-top:-1px}.ML__mathlive .stretchy{display:block;position:absolute;width:100%;left:0;overflow:hidden}.ML__mathlive .stretchy:after,.ML__mathlive .stretchy:before{content:\"\"}.ML__mathlive .stretchy svg{display:block;position:absolute;width:100%;height:inherit;fill:currentColor;stroke:currentColor;fill-rule:nonzero;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1}.ML__mathlive .slice-1-of-2{left:0}.ML__mathlive .slice-1-of-2,.ML__mathlive .slice-2-of-2{display:inline-flex;position:absolute;width:50.2%;overflow:hidden}.ML__mathlive .slice-2-of-2{right:0}.ML__mathlive .slice-1-of-3{display:inline-flex;position:absolute;left:0;width:25.1%;overflow:hidden}.ML__mathlive .slice-2-of-3{display:inline-flex;position:absolute;left:25%;width:50%;overflow:hidden}.ML__mathlive .slice-3-of-3{display:inline-flex;position:absolute;right:0;width:25.1%;overflow:hidden}.ML__mathlive .slice-1-of-1{display:inline-flex;position:absolute;width:100%;left:0;overflow:hidden}.ML__mathlive .sqrt{display:inline-block}.ML__mathlive .sqrt>.sqrt-sign{font-family:KaTeX_Main;position:relative}.ML__mathlive .sqrt .sqrt-line{height:.04em;width:100%}.ML__mathlive .sqrt .sqrt-line:before{content:\"\";display:block;margin-top:-.04em;border-bottom-style:solid;border-bottom-width:.04em;min-height:.5px}.ML__mathlive .sqrt .sqrt-line:after{border-bottom-width:1px;content:\" \";display:block;margin-top:-.1em}.ML__mathlive .sqrt>.root{margin-left:.27777778em;margin-right:-.55555556em}.ML__mathlive .fontsize-ensurer,.ML__mathlive .sizing{display:inline-block}.ML__mathlive .fontsize-ensurer.reset-size1.size1,.ML__mathlive .sizing.reset-size1.size1{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size1.size2,.ML__mathlive .sizing.reset-size1.size2{font-size:1.4em}.ML__mathlive .fontsize-ensurer.reset-size1.size3,.ML__mathlive .sizing.reset-size1.size3{font-size:1.6em}.ML__mathlive .fontsize-ensurer.reset-size1.size4,.ML__mathlive .sizing.reset-size1.size4{font-size:1.8em}.ML__mathlive .fontsize-ensurer.reset-size1.size5,.ML__mathlive .sizing.reset-size1.size5{font-size:2em}.ML__mathlive .fontsize-ensurer.reset-size1.size6,.ML__mathlive .sizing.reset-size1.size6{font-size:2.4em}.ML__mathlive .fontsize-ensurer.reset-size1.size7,.ML__mathlive .sizing.reset-size1.size7{font-size:2.88em}.ML__mathlive .fontsize-ensurer.reset-size1.size8,.ML__mathlive .sizing.reset-size1.size8{font-size:3.46em}.ML__mathlive .fontsize-ensurer.reset-size1.size9,.ML__mathlive .sizing.reset-size1.size9{font-size:4.14em}.ML__mathlive .fontsize-ensurer.reset-size1.size10,.ML__mathlive .sizing.reset-size1.size10{font-size:4.98em}.ML__mathlive .fontsize-ensurer.reset-size2.size1,.ML__mathlive .sizing.reset-size2.size1{font-size:.71428571em}.ML__mathlive .fontsize-ensurer.reset-size2.size2,.ML__mathlive .sizing.reset-size2.size2{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size2.size3,.ML__mathlive .sizing.reset-size2.size3{font-size:1.14285714em}.ML__mathlive .fontsize-ensurer.reset-size2.size4,.ML__mathlive .sizing.reset-size2.size4{font-size:1.28571429em}.ML__mathlive .fontsize-ensurer.reset-size2.size5,.ML__mathlive .sizing.reset-size2.size5{font-size:1.42857143em}.ML__mathlive .fontsize-ensurer.reset-size2.size6,.ML__mathlive .sizing.reset-size2.size6{font-size:1.71428571em}.ML__mathlive .fontsize-ensurer.reset-size2.size7,.ML__mathlive .sizing.reset-size2.size7{font-size:2.05714286em}.ML__mathlive .fontsize-ensurer.reset-size2.size8,.ML__mathlive .sizing.reset-size2.size8{font-size:2.47142857em}.ML__mathlive .fontsize-ensurer.reset-size2.size9,.ML__mathlive .sizing.reset-size2.size9{font-size:2.95714286em}.ML__mathlive .fontsize-ensurer.reset-size2.size10,.ML__mathlive .sizing.reset-size2.size10{font-size:3.55714286em}.ML__mathlive .fontsize-ensurer.reset-size3.size1,.ML__mathlive .sizing.reset-size3.size1{font-size:.625em}.ML__mathlive .fontsize-ensurer.reset-size3.size2,.ML__mathlive .sizing.reset-size3.size2{font-size:.875em}.ML__mathlive .fontsize-ensurer.reset-size3.size3,.ML__mathlive .sizing.reset-size3.size3{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size3.size4,.ML__mathlive .sizing.reset-size3.size4{font-size:1.125em}.ML__mathlive .fontsize-ensurer.reset-size3.size5,.ML__mathlive .sizing.reset-size3.size5{font-size:1.25em}.ML__mathlive .fontsize-ensurer.reset-size3.size6,.ML__mathlive .sizing.reset-size3.size6{font-size:1.5em}.ML__mathlive .fontsize-ensurer.reset-size3.size7,.ML__mathlive .sizing.reset-size3.size7{font-size:1.8em}.ML__mathlive .fontsize-ensurer.reset-size3.size8,.ML__mathlive .sizing.reset-size3.size8{font-size:2.1625em}.ML__mathlive .fontsize-ensurer.reset-size3.size9,.ML__mathlive .sizing.reset-size3.size9{font-size:2.5875em}.ML__mathlive .fontsize-ensurer.reset-size3.size10,.ML__mathlive .sizing.reset-size3.size10{font-size:3.1125em}.ML__mathlive .fontsize-ensurer.reset-size4.size1,.ML__mathlive .sizing.reset-size4.size1{font-size:.55555556em}.ML__mathlive .fontsize-ensurer.reset-size4.size2,.ML__mathlive .sizing.reset-size4.size2{font-size:.77777778em}.ML__mathlive .fontsize-ensurer.reset-size4.size3,.ML__mathlive .sizing.reset-size4.size3{font-size:.88888889em}.ML__mathlive .fontsize-ensurer.reset-size4.size4,.ML__mathlive .sizing.reset-size4.size4{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size4.size5,.ML__mathlive .sizing.reset-size4.size5{font-size:1.11111111em}.ML__mathlive .fontsize-ensurer.reset-size4.size6,.ML__mathlive .sizing.reset-size4.size6{font-size:1.33333333em}.ML__mathlive .fontsize-ensurer.reset-size4.size7,.ML__mathlive .sizing.reset-size4.size7{font-size:1.6em}.ML__mathlive .fontsize-ensurer.reset-size4.size8,.ML__mathlive .sizing.reset-size4.size8{font-size:1.92222222em}.ML__mathlive .fontsize-ensurer.reset-size4.size9,.ML__mathlive .sizing.reset-size4.size9{font-size:2.3em}.ML__mathlive .fontsize-ensurer.reset-size4.size10,.ML__mathlive .sizing.reset-size4.size10{font-size:2.76666667em}.ML__mathlive .fontsize-ensurer.reset-size5.size1,.ML__mathlive .sizing.reset-size5.size1{font-size:.5em}.ML__mathlive .fontsize-ensurer.reset-size5.size2,.ML__mathlive .sizing.reset-size5.size2{font-size:.7em}.ML__mathlive .fontsize-ensurer.reset-size5.size3,.ML__mathlive .sizing.reset-size5.size3{font-size:.8em}.ML__mathlive .fontsize-ensurer.reset-size5.size4,.ML__mathlive .sizing.reset-size5.size4{font-size:.9em}.ML__mathlive .fontsize-ensurer.reset-size5.size5,.ML__mathlive .sizing.reset-size5.size5{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size5.size6,.ML__mathlive .sizing.reset-size5.size6{font-size:1.2em}.ML__mathlive .fontsize-ensurer.reset-size5.size7,.ML__mathlive .sizing.reset-size5.size7{font-size:1.44em}.ML__mathlive .fontsize-ensurer.reset-size5.size8,.ML__mathlive .sizing.reset-size5.size8{font-size:1.73em}.ML__mathlive .fontsize-ensurer.reset-size5.size9,.ML__mathlive .sizing.reset-size5.size9{font-size:2.07em}.ML__mathlive .fontsize-ensurer.reset-size5.size10,.ML__mathlive .sizing.reset-size5.size10{font-size:2.49em}.ML__mathlive .fontsize-ensurer.reset-size6.size1,.ML__mathlive .sizing.reset-size6.size1{font-size:.41666667em}.ML__mathlive .fontsize-ensurer.reset-size6.size2,.ML__mathlive .sizing.reset-size6.size2{font-size:.58333333em}.ML__mathlive .fontsize-ensurer.reset-size6.size3,.ML__mathlive .sizing.reset-size6.size3{font-size:.66666667em}.ML__mathlive .fontsize-ensurer.reset-size6.size4,.ML__mathlive .sizing.reset-size6.size4{font-size:.75em}.ML__mathlive .fontsize-ensurer.reset-size6.size5,.ML__mathlive .sizing.reset-size6.size5{font-size:.83333333em}.ML__mathlive .fontsize-ensurer.reset-size6.size6,.ML__mathlive .sizing.reset-size6.size6{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size6.size7,.ML__mathlive .sizing.reset-size6.size7{font-size:1.2em}.ML__mathlive .fontsize-ensurer.reset-size6.size8,.ML__mathlive .sizing.reset-size6.size8{font-size:1.44166667em}.ML__mathlive .fontsize-ensurer.reset-size6.size9,.ML__mathlive .sizing.reset-size6.size9{font-size:1.725em}.ML__mathlive .fontsize-ensurer.reset-size6.size10,.ML__mathlive .sizing.reset-size6.size10{font-size:2.075em}.ML__mathlive .fontsize-ensurer.reset-size7.size1,.ML__mathlive .sizing.reset-size7.size1{font-size:.34722222em}.ML__mathlive .fontsize-ensurer.reset-size7.size2,.ML__mathlive .sizing.reset-size7.size2{font-size:.48611111em}.ML__mathlive .fontsize-ensurer.reset-size7.size3,.ML__mathlive .sizing.reset-size7.size3{font-size:.55555556em}.ML__mathlive .fontsize-ensurer.reset-size7.size4,.ML__mathlive .sizing.reset-size7.size4{font-size:.625em}.ML__mathlive .fontsize-ensurer.reset-size7.size5,.ML__mathlive .sizing.reset-size7.size5{font-size:.69444444em}.ML__mathlive .fontsize-ensurer.reset-size7.size6,.ML__mathlive .sizing.reset-size7.size6{font-size:.83333333em}.ML__mathlive .fontsize-ensurer.reset-size7.size7,.ML__mathlive .sizing.reset-size7.size7{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size7.size8,.ML__mathlive .sizing.reset-size7.size8{font-size:1.20138889em}.ML__mathlive .fontsize-ensurer.reset-size7.size9,.ML__mathlive .sizing.reset-size7.size9{font-size:1.4375em}.ML__mathlive .fontsize-ensurer.reset-size7.size10,.ML__mathlive .sizing.reset-size7.size10{font-size:1.72916667em}.ML__mathlive .fontsize-ensurer.reset-size8.size1,.ML__mathlive .sizing.reset-size8.size1{font-size:.28901734em}.ML__mathlive .fontsize-ensurer.reset-size8.size2,.ML__mathlive .sizing.reset-size8.size2{font-size:.40462428em}.ML__mathlive .fontsize-ensurer.reset-size8.size3,.ML__mathlive .sizing.reset-size8.size3{font-size:.46242775em}.ML__mathlive .fontsize-ensurer.reset-size8.size4,.ML__mathlive .sizing.reset-size8.size4{font-size:.52023121em}.ML__mathlive .fontsize-ensurer.reset-size8.size5,.ML__mathlive .sizing.reset-size8.size5{font-size:.57803468em}.ML__mathlive .fontsize-ensurer.reset-size8.size6,.ML__mathlive .sizing.reset-size8.size6{font-size:.69364162em}.ML__mathlive .fontsize-ensurer.reset-size8.size7,.ML__mathlive .sizing.reset-size8.size7{font-size:.83236994em}.ML__mathlive .fontsize-ensurer.reset-size8.size8,.ML__mathlive .sizing.reset-size8.size8{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size8.size9,.ML__mathlive .sizing.reset-size8.size9{font-size:1.19653179em}.ML__mathlive .fontsize-ensurer.reset-size8.size10,.ML__mathlive .sizing.reset-size8.size10{font-size:1.43930636em}.ML__mathlive .fontsize-ensurer.reset-size9.size1,.ML__mathlive .sizing.reset-size9.size1{font-size:.24154589em}.ML__mathlive .fontsize-ensurer.reset-size9.size2,.ML__mathlive .sizing.reset-size9.size2{font-size:.33816425em}.ML__mathlive .fontsize-ensurer.reset-size9.size3,.ML__mathlive .sizing.reset-size9.size3{font-size:.38647343em}.ML__mathlive .fontsize-ensurer.reset-size9.size4,.ML__mathlive .sizing.reset-size9.size4{font-size:.43478261em}.ML__mathlive .fontsize-ensurer.reset-size9.size5,.ML__mathlive .sizing.reset-size9.size5{font-size:.48309179em}.ML__mathlive .fontsize-ensurer.reset-size9.size6,.ML__mathlive .sizing.reset-size9.size6{font-size:.57971014em}.ML__mathlive .fontsize-ensurer.reset-size9.size7,.ML__mathlive .sizing.reset-size9.size7{font-size:.69565217em}.ML__mathlive .fontsize-ensurer.reset-size9.size8,.ML__mathlive .sizing.reset-size9.size8{font-size:.83574879em}.ML__mathlive .fontsize-ensurer.reset-size9.size9,.ML__mathlive .sizing.reset-size9.size9{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size9.size10,.ML__mathlive .sizing.reset-size9.size10{font-size:1.20289855em}.ML__mathlive .fontsize-ensurer.reset-size10.size1,.ML__mathlive .sizing.reset-size10.size1{font-size:.20080321em}.ML__mathlive .fontsize-ensurer.reset-size10.size2,.ML__mathlive .sizing.reset-size10.size2{font-size:.2811245em}.ML__mathlive .fontsize-ensurer.reset-size10.size3,.ML__mathlive .sizing.reset-size10.size3{font-size:.32128514em}.ML__mathlive .fontsize-ensurer.reset-size10.size4,.ML__mathlive .sizing.reset-size10.size4{font-size:.36144578em}.ML__mathlive .fontsize-ensurer.reset-size10.size5,.ML__mathlive .sizing.reset-size10.size5{font-size:.40160643em}.ML__mathlive .fontsize-ensurer.reset-size10.size6,.ML__mathlive .sizing.reset-size10.size6{font-size:.48192771em}.ML__mathlive .fontsize-ensurer.reset-size10.size7,.ML__mathlive .sizing.reset-size10.size7{font-size:.57831325em}.ML__mathlive .fontsize-ensurer.reset-size10.size8,.ML__mathlive .sizing.reset-size10.size8{font-size:.69477912em}.ML__mathlive .fontsize-ensurer.reset-size10.size9,.ML__mathlive .sizing.reset-size10.size9{font-size:.8313253em}.ML__mathlive .fontsize-ensurer.reset-size10.size10,.ML__mathlive .sizing.reset-size10.size10{font-size:1em}.ML__mathlive .delimsizing.size1{font-family:KaTeX_Size1}.ML__mathlive .delimsizing.size2{font-family:KaTeX_Size2}.ML__mathlive .delimsizing.size3{font-family:KaTeX_Size3}.ML__mathlive .delimsizing.size4{font-family:KaTeX_Size4}.ML__mathlive .delimsizing.mult .delim-size1{font-family:KaTeX_Size1;vertical-align:top}.ML__mathlive .delimsizing.mult .delim-size4{font-family:KaTeX_Size4;vertical-align:top}.ML__mathlive .nulldelimiter{width:.12em}.ML__mathlive .op-symbol{position:relative}.ML__mathlive .op-symbol.small-op{font-family:KaTeX_Size1}.ML__mathlive .op-symbol.large-op{font-family:KaTeX_Size2}.ML__mathlive .op-limits .vlist>span{text-align:center}.ML__mathlive .op-over-under>.vlist>span:first-child,.ML__mathlive .op-over-under>.vlist>span:last-child{text-align:center}.ML__mathlive .accent>.vlist>span{text-align:center}.ML__mathlive .accent .accent-body>span{font-family:KaTeX_Main;width:0}.ML__mathlive .accent .accent-body.accent-vec>span{position:relative;left:.326em}.ML__mathlive .mtable .vertical-separator{display:inline-block;margin:0 -.025em;border-right:.05em solid}.ML__mathlive .mtable .arraycolsep{display:inline-block}.ML__mathlive .mtable .col-align-m>.vlist{text-align:center}.ML__mathlive .mtable .col-align-c>.vlist{text-align:center}.ML__mathlive .mtable .col-align-l>.vlist{text-align:left}.ML__mathlive .mtable .col-align-r>.vlist{text-align:right}.ML__error{background-image:radial-gradient(ellipse at center,#cc0041,transparent 70%);background-repeat:repeat-x;background-size:3px 3px;background-position:0 98%}.ML__placeholder{opacity:.7;padding-left:.4ex;padding-right:.4ex;padding-top:.4ex}";

    var css_248z$3 = "div.ML__popover.is-visible{visibility:inherit;-webkit-animation:ML__fade-in .15s cubic-bezier(0,0,.2,1);animation:ML__fade-in .15s cubic-bezier(0,0,.2,1)}@-webkit-keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}@keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}.ML__popover__content{border-radius:6px;padding:2px;cursor:pointer;min-height:100px;display:flex;flex-direction:column;justify-content:center;margin-left:8px;margin-right:8px}.ML__popover__content a{color:#5ea6fd;padding-top:.3em;margin-top:.4em;display:block}.ML__popover__content a:hover{color:#5ea6fd;text-decoration:underline}.ML__popover__content.active,.ML__popover__content.pressed,.ML__popover__content:hover{background:hsla(0,0%,100%,.1)}.ML__popover__command{font-size:1.6rem}.ML__popover__prev-shortcut{height:31px;opacity:.1;cursor:pointer;margin-left:8px;margin-right:8px;padding-top:4px;padding-bottom:2px}.ML__popover__next-shortcut:hover,.ML__popover__prev-shortcut:hover{opacity:.3}.ML__popover__next-shortcut.active,.ML__popover__next-shortcut.pressed,.ML__popover__prev-shortcut.active,.ML__popover__prev-shortcut.pressed{opacity:1}.ML__popover__next-shortcut>span,.ML__popover__prev-shortcut>span{padding:5px;border-radius:50%;width:20px;height:20px;display:inline-block}.ML__popover__prev-shortcut>span>span{margin-top:-2px;display:block}.ML__popover__next-shortcut>span>span{margin-top:2px;display:block}.ML__popover__next-shortcut:hover>span,.ML__popover__prev-shortcut:hover>span{background:hsla(0,0%,100%,.1)}.ML__popover__next-shortcut{height:34px;opacity:.1;cursor:pointer;margin-left:8px;margin-right:8px;padding-top:2px;padding-bottom:4px}.ML__popover__shortcut{font-size:.8em;margin-top:.25em}.ML__popover__note,.ML__popover__shortcut{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;opacity:.7;padding-top:.25em}.ML__popover__note{font-size:.8rem;line-height:1em;padding-left:.5em;padding-right:.5em}.ML__shortcut-join{opacity:.5}";

    var css_248z$4 = ".ML__keystroke-caption{visibility:hidden;background:var(--secondary);border-color:var(--secondary-border);box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);text-align:center;border-radius:6px;padding:16px;position:absolute;z-index:1;display:flex;flex-direction:row;justify-content:center;--keystroke:#fff;--on-keystroke:#555;--keystroke-border:#f7f7f7}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keystroke-caption{--keystroke:hsl(var(--hue),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue),50%,25%)}}body[theme=dark] .ML__keystroke-caption{--keystroke:hsl(var(--hue),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue),50%,25%)}.ML__keystroke-caption>span{min-width:14px;margin:0 8px 0 0;padding:4px;background-color:var(--keystroke);color:var(--on-keystroke);fill:currentColor;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:1em;border-radius:6px;border:2px solid var(--keystroke-border)}";

    /**
     * This module parses and outputs an Abstract Syntax Tree representing the
     * formula using the {@tutorial math-json | MathJSON } format.
     *
     * To use it, use the {@linkcode atomtoAST | atomtoAST()}  method.
     */
    // type MathJson =
    //     | string
    //     | number
    //     | boolean
    //     | null
    //     | { [property: string]: MathJson }
    //     | MathJson[];
    const CANONICAL_NAMES = {
        // CONSTANTS
        '\\imaginaryI': '\u2148',
        '\\imaginaryJ': '\u2149',
        '\\pi': 'π',
        '\\exponentialE': '\u212f',
        // ARITHMETIC
        '﹢': '+',
        '＋': '+',
        '−': '-',
        '-': '-',
        '﹣': '-',
        '－': '-',
        '\\times': '*',
        '\\cdot': '*',
        '⨉': '*',
        '️✖': '*',
        '️×': '*',
        '.': '*',
        '÷': '/',
        // '/':             '/',        // SOLIDUS
        '⁄': '/',
        '／': '/',
        '!': 'factorial',
        '\\mp': 'minusplus',
        '\\ne': '!=',
        '\\coloneq': ':=',
        '\\questeq': '?=',
        '\\approx': 'approx',
        '\\cong': 'congruent',
        '\\sim': 'similar',
        '\\equiv': 'equiv',
        '\\pm': 'plusminus',
        '\\land': 'and',
        '\\wedge': 'and',
        '\\lor': 'or',
        '\\vee': 'or',
        '\\oplus': 'xor',
        '\\veebar': 'xor',
        '\\lnot': 'not',
        '\\neg': 'not',
        '\\exists': 'exists',
        '\\nexists': '!exists',
        '\\forall': 'forAll',
        '\\backepsilon': 'suchThat',
        '\\therefore': 'therefore',
        '\\because': 'because',
        '\\nabla': 'nabla',
        '\\circ': 'circle',
        // '\\oplus':       'oplus',
        '\\ominus': 'ominus',
        '\\odot': 'odot',
        '\\otimes': 'otimes',
        '\\zeta': 'Zeta',
        '\\Gamma': 'Gamma',
        '\\min': 'min',
        '\\max': 'max',
        '\\mod': 'mod',
        '\\lim': 'lim',
        '\\sum': 'sum',
        '\\prod': 'prod',
        '\\int': 'integral',
        '\\iint': 'integral2',
        '\\iiint': 'integral3',
        '\\Re': 'Re',
        '\\gothicCapitalR': 'Re',
        '\\Im': 'Im',
        '\\gothicCapitalI': 'Im',
        '\\binom': 'nCr',
        '\\partial': 'partial',
        '\\differentialD': 'differentialD',
        '\\capitalDifferentialD': 'capitalDifferentialD',
        '\\Finv': 'Finv',
        '\\Game': 'Game',
        '\\wp': 'wp',
        '\\ast': 'ast',
        '\\star': 'star',
        '\\asymp': 'asymp',
        // Function domain, limits
        '\\to': 'to',
        '\\gets': 'gets',
        // Sets
        '\\in': 'elementof',
        '\\notin': '!elementof',
        '\\ni': 'ownedby',
        '\\owns': 'ownedby',
        '\\subset': 'subset',
        '\\supset': 'superset',
        '\\complement': 'complement',
        // Logic
        '\\rightarrow': 'shortLogicalImplies',
        '\\leftarrow': 'shortLogicalImpliedBy',
        '\\leftrightarrow': 'shortLogicalEquivalent',
        '\\longrightarrow': 'logicalImplies',
        '\\longleftarrow': 'logicalImpliedBy',
        '\\longleftrightarrow': 'logicalEquivalent',
        // Metalogic
        '\\Rightarrow': 'shortImplies',
        '\\Leftarrow': 'shortImpliedBy',
        '\\Leftrightarrow': 'shortEquivalent',
        '\\implies': 'implies',
        '\\Longrightarrow': 'implies',
        '\\impliedby': 'impliedBy',
        '\\Longleftarrow': 'impliedBy',
        '\\iff': 'equivalent',
        '\\Longleftrightarrow': 'equivalent',
    };
    // The OP_NAME table maps a canonical name to a function name
    const OP_NAME = {
        '+': 'add',
        '*': 'multiply',
        '-': 'subtract',
        '/': 'divide',
        '=': 'equal',
        ':=': 'assign',
        '!=': 'ne',
        '?=': 'questeq',
        approx: 'approx',
        congruent: 'congruent',
        similar: 'similar',
        equiv: 'equiv',
        '<': 'lt',
        '>': 'gt',
        '<=': 'le',
        '>=': 'ge',
        '≤': 'le',
        '≥': 'ge',
        '>>': 'gg',
        '<<': 'll',
        '**': 'pow',
        '++': 'increment',
        '--': 'decrement',
    };
    // The FUNCTION_TEMPLATE table maps a canonical name to a LaTeX template
    const FUNCTION_TEMPLATE = {
        equal: '%0 = %1',
        ne: '%0 \\ne %1',
        questeq: '%0 \\questeq %1',
        approx: '%0 \\approx %1',
        congruent: '%0 \\cong %1',
        similar: '%0 \\sim %1',
        equiv: '%0 \\equiv %1',
        assign: '%0 := %1',
        lt: '%0 < %1',
        gt: '%0 > %1',
        le: '%0 \\le %1',
        ge: '%0 \\ge %1',
        // TRIGONOMETRY
        sin: '\\sin%_%^ %0',
        cos: '\\cos%_%^ %0',
        tan: '\\tan%_%^ %0',
        cot: '\\cot%_%^ %0',
        sec: '\\sec%_%^ %0',
        csc: '\\csc%_%^ %0',
        sinh: '\\sinh %0',
        cosh: '\\cosh %0',
        tanh: '\\tanh %0',
        csch: '\\csch %0',
        sech: '\\sech %0',
        coth: '\\coth %0',
        arcsin: '\\arcsin %0',
        arccos: '\\arccos %0',
        arctan: '\\arctan %0',
        arccot: '\\arcctg %0',
        arcsec: '\\arcsec %0',
        arccsc: '\\arccsc %0',
        arsinh: '\\arsinh %0',
        arcosh: '\\arcosh %0',
        artanh: '\\artanh %0',
        arcsch: '\\arcsch %0',
        arsech: '\\arsech %0',
        arcoth: '\\arcoth %0',
        // LOGARITHMS
        ln: '\\ln%_%^ %',
        log: '\\log%_%^ %',
        lg: '\\lg %',
        lb: '\\lb %',
        // Big operator
        sum: '\\sum%_%^ %0',
        prod: '\\prod%_%^ %0',
        // OTHER
        Zeta: '\\zeta%_%^ %',
        Gamma: '\\Gamma %',
        min: '\\min%_%^ %',
        max: '\\max%_%^ %',
        mod: '\\mod%_%^ %',
        lim: '\\lim%_%^ %',
        binom: '\\binom %',
        nabla: '\\nabla %',
        curl: '\\nabla\\times %0',
        div: '\\nabla\\cdot %0',
        floor: '\\lfloor %0 \\rfloor%_%^',
        ceil: '\\lceil %0 \\rceil%_%^',
        abs: '\\left| %0 \\right|%_%^',
        norm: '\\lVert %0 \\rVert%_%^',
        ucorner: '\\ulcorner %0 \\urcorner%_%^',
        lcorner: '\\llcorner %0 \\lrcorner%_%^',
        angle: '\\langle %0 \\rangle%_%^',
        group: '\\lgroup %0 \\rgroup%_%^',
        moustache: '\\lmoustache %0 \\rmoustache%_%^',
        brace: '\\lbrace %0 \\rbrace%_%^',
        'sqrt[]': '\\sqrt[%^]{%0}',
        sqrt: '\\sqrt{%0}',
        lcm: '\\operatorname{lcm}%',
        gcd: '\\operatorname{gcd}%',
        erf: '\\operatorname{erf}%',
        erfc: '\\operatorname{erfc}%',
        randomReal: '\\operatorname{randomReal}%',
        randomInteger: '\\operatorname{randomInteger}%',
        // Logic operators
        and: '%0 \\land %1',
        or: '%0 \\lor %1',
        xor: '%0 \\oplus %1',
        not: '%0 \\lnot %1',
        // Other operators
        circle: '%0 \\circ %1',
        ast: '%0 \\ast %1',
        star: '%0 \\star %1',
        asymp: '%0 \\asymp %1',
        '/': '\\frac{%0}{%1}',
        Re: '\\Re{%0}',
        Im: '\\Im{%0}',
        factorial: '%0!',
        factorial2: '%0!!',
    };
    // From www.w3.org/TR/MathML3/appendixc.html
    // The keys of OP_PRECEDENCE are "canonical names"
    // (the values of the CANONICAL_NAMES table above, e.g. "?=")
    // Those are different from the latex names (e.g. \\questeq)
    // and from the function names (e.g. "questeq")
    const OP_PRECEDENCE = {
        degree: 880,
        nabla: 740,
        curl: 740,
        partial: 740,
        differentialD: 740,
        capitalDifferentialD: 740,
        '**': 720,
        odot: 710,
        // Logical not
        not: 680,
        // Division
        div: 660,
        solidus: 660,
        '/': 660,
        setminus: 650,
        '%': 640,
        otimes: 410,
        // Set operators
        union: 350,
        intersection: 350,
        // Multiplication, division and modulo
        '*': 390,
        ast: 390,
        '.': 390,
        oplus: 300,
        ominus: 300,
        // Addition
        '+': 275,
        '-': 275,
        '+-': 275,
        '-+': 275,
        // Most circled-ops are 265
        circle: 265,
        circledast: 265,
        circledcirc: 265,
        star: 265,
        // Range
        '..': 263,
        // Unit conversion
        to: 262,
        in: 262,
        '|': 261,
        // Relational
        congruent: 265,
        equiv: 260,
        '=': 260,
        '!=': 255,
        '?=': 255,
        similar: 250,
        approx: 247,
        '<': 245,
        '>': 243,
        '>=': 242,
        '≥': 242,
        '<=': 241,
        // Set operator
        complement: 240,
        subset: 240,
        superset: 240,
        // @todo and equality and neg operators
        elementof: 240,
        '!elementof': 240,
        //
        exists: 230,
        '!exists': 230,
        forall: 230,
        // Logical operators
        and: 200,
        xor: 195,
        or: 190,
        // Note: 'not' is 680
        // center, low, diag, vert ellipsis         150
        // Composition/sequence
        suchThat: 110,
        ':': 100,
        // '..':               100,
        // '...':               100,
        // Conditional (?:)
        // Assignment
        assign: 80,
        ':=': 80,
        therefore: 70,
        because: 70,
        // Arrows
        // Note: MathML had 270 for the arrows, but this
        // would not work for (a = b => b = a)
        // See also https://en.wikipedia.org/wiki/Logical_connective#Order_of_precedence
        // for a suggested precedence (note that in this page lower precedence
        // has the opposite meaning as what we use)
        shortLogicalImplies: 52,
        shortImplies: 51,
        logicalImplies: 50,
        implies: 49,
        shortLogicalImpliedBy: 48,
        shortImpliedBy: 47,
        logicalImpliedBy: 46,
        impliedBy: 45,
        shortLogicalEquivalent: 44,
        shortEquivalent: 43,
        logicalEquivalent: 42,
        equivalent: 41,
        ',': 40,
        ';': 30,
    };
    function getArg(ast, index) {
        return isArray(ast.arg) ? ast.arg[index] : undefined;
    }
    /**
     * Given a canonical name, return its precedence
     * @param canonicalName, for example "and"
     */
    function getPrecedence(canonicalName) {
        return canonicalName ? OP_PRECEDENCE[canonicalName] || -1 : -1;
    }
    function getAssociativity(canonicalName) {
        if (/=|=>/.test(canonicalName)) {
            return 'right';
        }
        return 'left';
    }
    /**
     *
     * @param name - function canonical name
     */
    function getLatexTemplateForFunction(name) {
        let result = FUNCTION_TEMPLATE[name];
        if (!result) {
            result =
                name.length > 1
                    ? '\\operatorname{' + name + '}%^%_ %'
                    : name + '%^%_ %';
        }
        return result;
    }
    /**
     *
     * @param name symbol name, e.g. "alpha"
     */
    function getLatexForSymbol(name) {
        let result = FUNCTION_TEMPLATE[name];
        if (result) {
            return result.replace('%1', '').replace('%0', '').replace('%', '');
        }
        if (name.length > 1) {
            result = '\\' + name;
        }
        if (!result) {
            result = unicodeStringToLatex('math', name);
        }
        return result;
    }
    function isFunction$1(canonicalName) {
        if (canonicalName === 'f' || canonicalName === 'g')
            return true;
        const t = FUNCTION_TEMPLATE[canonicalName];
        if (!t)
            return false;
        // A plain "%" is a placeholder for an argument list, indicating a function
        if (/%[^01_^]?/.test(t))
            return true;
        return false;
    }
    /**
     *
     * @param latex, for example '\\times'
     * @retur the canonical name for the input, for example '*'
     */
    function getCanonicalName(latex) {
        latex = (latex || '').trim();
        let result = CANONICAL_NAMES[latex];
        if (!result) {
            if (/^\\[^{}]+$/.test(latex)) {
                const info = getInfo(latex, 'math', {});
                if (info) {
                    result = info.value || latex.slice(1);
                }
                else {
                    result = latex.slice(1);
                }
            }
            else {
                result = latex;
            }
        }
        return result;
    }
    /**
     * Return the operator precedence of the atom
     * or null if not an operator
     */
    function opPrec(atom) {
        if (!atom)
            return null;
        const name = getCanonicalName(getString(atom));
        const result = [
            getPrecedence(name),
            getAssociativity(name),
        ];
        if (result[0] <= 0)
            return null;
        return result;
    }
    function isOperator(atom) {
        return opPrec(atom) !== null;
    }
    const DELIM_FUNCTION = {
        '\\lfloor\\rfloor': 'floor',
        '\\lceil\\rceil': 'ceil',
        '\\vert\\vert': 'abs',
        '\\lvert\\rvert': 'abs',
        '||': 'abs',
        '\\Vert\\Vert': 'norm',
        '\\lVert\\rVert': 'norm',
        '\\ulcorner\\urcorner': 'ucorner',
        '\\llcorner\\lrcorner': 'lcorner',
        '\\langle\\rangle': 'angle',
        '\\lgroup\\rgroup': 'group',
        '\\lmoustache\\rmoustache': 'moustache',
        '\\lbrace\\rbrace': 'brace',
    };
    const POSTFIX_FUNCTION = {
        '!': 'factorial',
        '\\dag': 'dagger',
        '\\dagger': 'dagger',
        '\\ddagger': 'dagger2',
        '\\maltese': 'maltese',
        '\\backprime': 'backprime',
        '\\backdoubleprime': 'backprime2',
        '\\prime': 'prime',
        '\\doubleprime': 'prime2',
        '\\$': '$',
        '\\%': '%',
        '\\_': '_',
        '\\degree': 'degree',
    };
    const ASSOCIATIVE_FUNCTION = {
        '+': 'add',
        '-': 'add',
        // handled specifically so that the
        // argument is negated
        '*': 'multiply',
        '=': 'equal',
        ',': 'list',
        ';': 'list2',
        and: 'and',
        or: 'or',
        xor: 'xor',
        union: 'union',
        // shortLogicalEquivalent and logicalEquivalent map to the same function
        // they mean the same thing, but have a difference precedence.
        shortLogicalEquivalent: 'logicalEquivalent',
        logicalEquivalent: 'logicalEquivalent',
        // shortEquivalent and equivalent map to the same function
        // they mean the same thing, but have a difference precedence.
        shortEquivalent: 'equivalent',
        equivalent: 'equivalent',
    };
    const SUPER_ASSOCIATIVE_FUNCTION = {
        ',': 'list',
        ';': 'list2',
    };
    function getString(atom) {
        if (typeof atom === 'string')
            return atom;
        if (isArray(atom)) {
            let result = '';
            for (const subAtom of atom) {
                result += getString(subAtom);
            }
            return result;
        }
        if (atom.symbol &&
            !/^\\math(op|bin|rel|open|punct|ord|inner)/.test(atom.symbol)) {
            return atom.symbol;
        }
        if (atom.type === 'leftright') {
            return '';
        }
        if (typeof atom.body === 'string') {
            return atom.body;
        }
        if (isArray(atom.body)) {
            let result = '';
            for (const subAtom of atom.body) {
                result += getString(subAtom);
            }
            return result;
        }
        return '';
    }
    /**
     *
     * @param {object} expr - Abstract Syntax Tree object
     * @return A string, the symbol, or undefined
     */
    function asSymbol(node) {
        return typeof node.sym === 'string'
            ? getLatexForSymbol(node.sym) || node.sym
            : '';
    }
    /**
     *
     * @param {object} node - Abstract Syntax Tree node
     * @return A JavaScript number, the value of the AST or NaN
     */
    function asMachineNumber(node) {
        return parseFloat(node.num);
    }
    function isNumber$1(node) {
        return typeof node === 'object' && typeof node.num !== 'undefined';
    }
    function numberRe(node) {
        let result = 0;
        if (isNumber$1(node)) {
            if (typeof node.num === 'object') {
                result =
                    typeof node.num.re !== 'undefined'
                        ? parseFloatToPrecision(node.num.re)
                        : 0;
            }
            else {
                result = parseFloat(node.num);
            }
        }
        return result;
    }
    function numberIm(node) {
        let result = 0;
        if (isNumber$1(node)) {
            if (typeof node.num === 'object') {
                result =
                    typeof node.num.im !== 'undefined'
                        ? parseFloatToPrecision(node.num.im)
                        : 0;
            }
        }
        return result;
    }
    function isComplexWithRealAndImaginary(node) {
        return numberRe(node) !== 0 && numberIm(node) !== 0;
    }
    function hasSup(node) {
        return node && typeof node.sup !== 'undefined';
    }
    function hasSub(node) {
        return node && typeof node.sub !== 'undefined';
    }
    /**
     * Return true if the current atom is of the specified type and value.
     */
    function isAtom(expr, type, value) {
        let result = false;
        const atom = expr.atoms[expr.index];
        if (atom && atom.type === type) {
            if (typeof value === 'undefined') {
                result = true;
            }
            else {
                result = getString(atom) === value;
            }
        }
        return result;
    }
    function wrapFn(functionName, ...params) {
        const result = { fn: functionName, arg: undefined };
        if (params) {
            const args = [];
            for (const arg of params) {
                if (arg)
                    args.push(arg);
            }
            if (args.length > 0)
                result.arg = args;
        }
        return result;
    }
    function wrapNum(num) {
        if (typeof num === 'number') {
            return { num: num.toString() };
        }
        else if (typeof num === 'string') {
            return { num: num };
        }
        else if (typeof num === 'object') {
            // This is a complex number
            console.assert(typeof num['re'] === 'string' || typeof num['im'] === 'string');
            return { num: num };
        }
        return undefined;
    }
    /**
     * Return the negative of the expression. Usually { fn:'negate', arg }
     * but for numbers, the negated number
     * @param {object} node
     * @private
     */
    function negate(node) {
        if (isNumber$1(node)) {
            const re = numberRe(node);
            const im = numberIm(node);
            if (im !== 0) {
                if (re !== 0) {
                    node.num.re = (-re).toString();
                }
                node.num.im = (-im).toString();
            }
            else {
                node.num = (-re).toString();
            }
            return node;
        }
        return wrapFn('negate', node);
    }
    function nextIsSupsub(expr) {
        const atom = expr.atoms[expr.index + 1];
        return atom && atom.type === 'msubsup';
    }
    /**
     * Parse for a possible sup/sub attached directly to the current atom
     * or to a following 'msubsup' atom.
     * After the call, the index points to the next atom to process.
     * @param {object} expr
     * @private
     */
    function parseSupsub(expr, options) {
        let atom = expr.atoms[expr.index];
        // Is there a supsub directly on this atom?
        if (atom &&
            (typeof atom.superscript !== 'undefined' ||
                typeof atom.subscript !== 'undefined')) {
            // Move to the following atom
            expr.index += 1;
        }
        else {
            atom = null;
        }
        // If this atom didn't have a sup/sub,
        // is the following atom a subsup atom?
        if (!atom) {
            atom = expr.atoms[expr.index + 1];
            if (!atom ||
                atom.type !== 'msubsup' ||
                !(atom.superscript || atom.subscript)) {
                atom = null;
            }
            else {
                // Yes. Skip the current atom and the supsub
                expr.index += 2;
            }
        }
        if (atom) {
            if (typeof atom.subscript !== 'undefined') {
                expr.ast.sub = parse$1(atom.subscript, options);
            }
            if (typeof atom.superscript !== 'undefined') {
                if (atom.type === 'msubsup') {
                    if (/['\u2032]|\\prime/.test(getString(atom.superscript))) {
                        expr.index += 1;
                        atom = expr.atoms[expr.index + 1];
                        if (atom &&
                            atom.type === 'msubsup' &&
                            /['\u2032]|\\prime/.test(getString(atom.superscript))) {
                            expr.ast.sup = { sym: '\u2033' }; // DOUBLE-PRIME
                        }
                        else {
                            expr.ast.sup = { sym: '\u2032' }; // PRIME
                            expr.index -= 1;
                        }
                    }
                    else if (/['\u2033]|\\doubleprime/.test(getString(atom.superscript))) {
                        expr.ast.sup = { sym: '\u2033' }; // DOUBLE-PRIME
                    }
                    else if (expr.ast) {
                        expr.ast.sup = parse$1(atom.superscript, options);
                    }
                }
                else {
                    expr.ast.sup = parse$1(atom.superscript, options);
                }
            }
        }
        else {
            // Didn't find a supsup either on this atom and there was no 'msubsup'
            // Time to move on to the next atom.
            expr.index += 1;
        }
        return expr;
    }
    /**
     * Parse postfix operators, such as "!" (factorial)
     * @private
     */
    function parsePostfix(expr, options) {
        const lhs = expr.ast;
        if (nextIsDigraph(expr, '!!')) {
            expr.index += 1;
            expr.ast = wrapFn('factorial2', lhs);
            expr = parseSupsub(expr, options);
            expr = parsePostfix(expr, options);
            return expr;
        }
        if (nextIsDigraph(expr, '++')) {
            expr.index += 1;
            expr.ast = wrapFn('increment', lhs);
            expr = parseSupsub(expr, options);
            expr = parsePostfix(expr, options);
            return expr;
        }
        if (nextIsDigraph(expr, '--')) {
            expr.index += 1;
            expr.ast = wrapFn('decrement', lhs);
            expr = parseSupsub(expr, options);
            expr = parsePostfix(expr, options);
            return expr;
        }
        const atom = expr.atoms[expr.index];
        if ((atom === null || atom === void 0 ? void 0 : atom.symbol) && POSTFIX_FUNCTION[atom.symbol]) {
            expr.ast = wrapFn(POSTFIX_FUNCTION[atom.symbol], lhs);
            expr = parseSupsub(expr, options);
            expr = parsePostfix(expr, options);
        }
        return expr;
    }
    /**
     * Delimiters can be expressed:
     * - as a matching pair of regular characters: '(a)'
     * - a as 'leftright' expression: '\left(a\right)'
     * - as a matching pair of 'sizeddelim': '\Bigl(a\Bigr)
     *
     * Note that the '\delim' command is only used for delimiters in the middle
     * of a \left\right pair and not to represent pair-matched delimiters.
     *
     * This function handles all three cases
     */
    function parseDelim(expr, ldelim, rdelim, options) {
        expr.index = expr.index || 0;
        if (expr.atoms.length === 0 || expr.index >= expr.atoms.length) {
            expr.ast = undefined;
            return expr;
        }
        const savedPrec = expr.minPrec;
        expr.minPrec = 0;
        let atom = expr.atoms[expr.index];
        if (!ldelim) {
            // If we didn't expect a specific delimiter, parse any delimiter
            // and return it as a function application
            let pairedDelim = true;
            if (atom.type === 'mopen') {
                ldelim = atom.symbol;
                rdelim = RIGHT_DELIM[ldelim];
            }
            else if (atom.type === 'sizeddelim') {
                ldelim = atom.delim;
                rdelim = RIGHT_DELIM[ldelim];
            }
            else if (atom.type === 'leftright') {
                pairedDelim = false;
                ldelim = atom.leftDelim;
                rdelim = atom.rightDelim;
                // If we have an unclosed smart fence, assume the right delim is
                // matching the left delim
                if (rdelim === '?')
                    rdelim = RIGHT_DELIM[ldelim];
            }
            else if (atom.type === 'textord') {
                ldelim = atom.symbol;
                rdelim = RIGHT_DELIM[ldelim];
            }
            if (ldelim && rdelim) {
                if (ldelim === '|' && rdelim === '|') {
                    // Check if this could be a ||x|| instead of |x|
                    const atom = expr.atoms[expr.index + 1];
                    if (atom && atom.type === 'textord' && atom.symbol === '|') {
                        // Yes, it's a ||x||
                        ldelim = '\\lVert';
                        rdelim = '\\rVert';
                    }
                }
                expr = parseDelim(expr, ldelim, rdelim, options);
                if (expr) {
                    if (pairedDelim)
                        expr.index += 1;
                    expr.ast = {
                        fn: DELIM_FUNCTION[ldelim + rdelim] || ldelim + rdelim,
                        arg: [expr.ast],
                    };
                    expr.minPrec = savedPrec;
                    return expr;
                }
            }
            return undefined;
        }
        if (atom.type === 'mopen' && getString(atom) === ldelim) {
            expr.index += 1; // Skip the open delim
            expr = parseExpression(expr, options);
            atom = expr.atoms[expr.index];
            if (atom && atom.type === 'mclose' && getString(atom) === rdelim) {
                if (nextIsSupsub(expr)) {
                    // Wrap in a group if we have an upcoming superscript or subscript
                    expr.ast = { group: expr.ast };
                }
                expr = parseSupsub(expr, options);
                expr = parsePostfix(expr, options);
            } // TODO: else, syntax error?
        }
        else if (atom.type === 'textord' && getString(atom) === ldelim) {
            expr.index += 1; // Skip the open delim
            expr = parseExpression(expr, options);
            atom = expr.atoms[expr.index];
            if (atom && atom.type === 'textord' && getString(atom) === rdelim) {
                expr.index += 1;
                expr = parseSupsub(expr, options);
                expr = parsePostfix(expr, options);
            } // TODO: else, syntax error?
        }
        else if (ldelim === '\\lVert' &&
            atom.type === 'textord' &&
            atom.symbol === '|') {
            atom = expr.atoms[expr.index + 1];
            if (atom && atom.type === 'textord' && atom.symbol === '|') {
                // This is an opening ||
                expr.index += 2; // Skip the open delim
                expr = parseExpression(expr, options);
                atom = expr.atoms[expr.index];
                const atom2 = expr.atoms[expr.index + 1];
                if (atom &&
                    atom.type === 'textord' &&
                    atom.symbol === '|' &&
                    atom2 &&
                    atom2.type === 'textord' &&
                    atom2.symbol === '|') {
                    // This was a closing ||
                    expr.index += 2;
                    expr = parseSupsub(expr, options);
                    expr = parsePostfix(expr, options);
                }
            }
        }
        else if (atom.type === 'sizeddelim' && atom.delim === ldelim) {
            expr.index += 1; // Skip the open delim
            expr = parseExpression(expr, options);
            atom = expr.atoms[expr.index];
            if (atom && atom.type === 'sizeddelim' && atom.delim === rdelim) {
                expr.index += 1;
                expr = parseSupsub(expr, options);
                expr = parsePostfix(expr, options);
            } // TODO: else, syntax error?
        }
        else if (atom.type === 'leftright' &&
            atom.leftDelim === ldelim &&
            (atom.rightDelim === '?' || atom.rightDelim === rdelim)) {
            // This atom type includes the content of the parenthetical expression
            // in its body
            expr.ast = parse$1(atom.body, options);
            if (nextIsSupsub(expr)) {
                // Wrap in a group if we have an upcoming superscript or subscript
                expr.ast = { group: expr.ast };
            }
            expr = parseSupsub(expr, options);
            expr = parsePostfix(expr, options);
        }
        else {
            return undefined;
        }
        expr.minPrec = savedPrec;
        return expr;
    }
    function nextIsDigraph(expr, digraph) {
        expr.index = expr.index || 0;
        if (expr.atoms.length <= 1 || expr.index >= expr.atoms.length - 1) {
            return false;
        }
        return (digraph ===
            getString(expr.atoms[expr.index]) +
                getString(expr.atoms[expr.index + 1]));
    }
    /**
     * Some symbols are made up of two consecutive characters.
     * Handle them here. Return undefined if not a digraph.
     * TODO: other digraphs:
     * :=
     * ++
     * **
     * =:
     * °C U+2103
     * °F U+2109
     * @private
     *
     */
    function parseDigraph(expr) {
        expr.index = expr.index || 0;
        if (expr.atoms.length <= 1 || expr.index >= expr.atoms.length - 1) {
            return undefined;
        }
        if (isAtom(expr, 'textord', '\\nabla')) {
            expr.index += 1;
            if (isAtom(expr, 'mbin', '\\times')) {
                expr.index += 1;
                expr.ast = 'curl'; // divergence
                return expr;
            }
            else if (isAtom(expr, 'mbin', '\\cdot')) {
                expr.index += 1;
                expr.ast = 'div';
                return expr;
            }
            expr.index -= 1;
        }
        else {
            const digraph = expr.atoms[expr.index].symbol + expr.atoms[expr.index + 1].symbol;
            const result = /^(>=|<=|>>|<<|:=|!=)$/.test(digraph) ? digraph : '';
            if (result) {
                expr.index += 1;
            }
            return result;
        }
        return undefined;
    }
    function parsePrimary(expr, options) {
        // <primary> := ('-'|'+) <primary> | <number> |
        //              '(' <expression> ')' | <symbol> | <text> (<expression>)
        expr.index = expr.index || 0;
        expr.ast = undefined;
        if (expr.atoms.length === 0 || expr.index >= expr.atoms.length) {
            return expr;
        }
        let atom = expr.atoms[expr.index];
        if (atom.mode === 'text') {
            let text = '';
            while (expr.atoms[expr.index] &&
                expr.atoms[expr.index].mode === 'text') {
                text += expr.atoms[expr.index].body;
                expr.index += 1;
            }
            expr.ast = { text: text };
            return expr;
        }
        const val = getCanonicalName(getString(atom));
        const digraph = parseDigraph(expr);
        if (digraph) {
            expr.ast = wrapFn(expr.ast, parsePrimary(expr, options).ast);
        }
        else if (atom.type === 'root') {
            expr.index = 0;
            expr.atoms = atom.body;
            return parsePrimary(expr, options);
        }
        else if (atom.type === 'mbin' && val === '-') {
            // Prefix - sign
            expr.index += 1; // Skip the '-' symbol
            expr = parsePrimary(expr, options);
            expr.ast = negate(expr.ast);
        }
        else if (atom.type === 'mbin' && val === '+') {
            // Prefix + sign
            expr.index += 1; // Skip the '+' symbol
            expr = parsePrimary(expr, options);
            expr.ast = wrapFn('add', expr.ast);
        }
        else if (atom.type === 'mord' && /^[0-9.]$/.test(atom.symbol)) {
            // Looks like a number
            let num = '';
            let done = false;
            let pat = /^[0-9.eEdD]$/;
            while (expr.index < expr.atoms.length &&
                !done &&
                (isAtom(expr, 'spacing') ||
                    ((isAtom(expr, 'mord') ||
                        isAtom(expr, 'mpunct', ',') ||
                        isAtom(expr, 'mbin')) &&
                        pat.test(expr.atoms[expr.index].symbol)))) {
                if (expr.atoms[expr.index].type === 'spacing') {
                    expr.index += 1;
                }
                else if (typeof expr.atoms[expr.index].superscript !== 'undefined' ||
                    typeof expr.atoms[expr.index].subscript !== 'undefined') {
                    done = true;
                }
                else {
                    let digit = expr.atoms[expr.index].symbol;
                    if (digit === 'd' || digit === 'D') {
                        digit = 'e';
                        pat = /^[0-9+-.]$/;
                    }
                    else if (digit === 'e' || digit === 'E') {
                        if (nextIsSupsub(expr)) {
                            digit = '';
                            expr.index -= 1;
                            done = true;
                        }
                        else {
                            digit = 'E';
                            pat = /^[0-9+-.]$/;
                        }
                    }
                    else if (pat === /^[0-9+-.]$/) {
                        pat = /^[0-9]$/;
                    }
                    num += digit === ',' ? '' : digit;
                    expr.index += 1;
                }
            }
            expr.ast = num ? wrapNum(num) : undefined;
            // This was a number. Is it followed by a fraction, e.g. 2 1/2
            atom = expr.atoms[expr.index];
            if (atom && atom.type === 'genfrac' && !isNaN(expr.ast.num)) {
                // Add an invisible plus, i.e. 2 1/2 = 2 + 1/2
                const lhs = expr.ast;
                expr = parsePrimary(expr, options);
                expr.ast = wrapFn('add', lhs, expr.ast);
            }
            if (atom &&
                atom.type === 'group' &&
                atom.symbol &&
                atom.symbol.startsWith('\\nicefrac')) {
                // \nicefrac macro, add an invisible plus
                const lhs = expr.ast;
                expr = parsePrimary(expr, options);
                expr.ast = wrapFn('add', lhs, expr.ast);
            }
            if (atom && atom.type === 'msubsup') {
                expr = parseSupsub(expr, options);
            }
            expr = parsePostfix(expr, options);
        }
        else if (atom.type === 'genfrac' || atom.type === 'surd') {
            // A fraction or a square/cube root
            expr.ast = atomToMathJson(atom, options);
            expr = parseSupsub(expr, options);
            expr = parsePostfix(expr, options);
        }
        else if (atom.type === 'mord' || atom.type === 'mbin') {
            // A 'mord' but not a number: either an identifier ('x') or
            // a function ('\\Zeta')
            if (isFunction$1(val) && !isOperator(atom)) {
                // A function
                expr.ast = { fn: val };
                expr = parseSupsub(expr, options);
                const fn = expr.ast;
                const arg = parsePrimary(expr, options).ast;
                if (arg && /^(list0|list|list2)$/.test(arg.fn)) {
                    fn.arg = arg.arg;
                }
                else if (arg) {
                    fn.arg = [arg];
                }
                expr.ast = fn;
            }
            else {
                // An identifier
                expr.ast = atomToMathJson(atom, options);
                if (expr.ast.sym === 'ⅈ') {
                    // It's 'i', the imaginary unit
                    expr.ast = wrapNum({ im: '1' });
                }
                expr = parseSupsub(expr, options);
            }
            expr = parsePostfix(expr, options);
        }
        else if (atom.type === 'textord') {
            // Note that 'textord' can also be operators, and are handled as such
            // in parseExpression()
            if (!isOperator(atom)) {
                // This doesn't look like a textord operator
                if (!RIGHT_DELIM[atom.symbol || atom.body]) {
                    // Not an operator, not a fence, it's a symbol or a function
                    if (isFunction$1(val)) {
                        // It's a function
                        expr.ast = { fn: val };
                        expr = parseSupsub(expr, options);
                        const fn = expr.ast;
                        expr.index += 1; // Skip the function name
                        fn.arg = [parsePrimary(expr, options).ast];
                        expr.ast = fn;
                        expr = parsePostfix(expr, options);
                    }
                    else {
                        // It was a symbol...
                        expr.ast = atomToMathJson(atom, options);
                        if (typeof atom.superscript === 'undefined') {
                            expr.index += 1;
                        }
                        expr = parseSupsub(expr, options);
                        expr = parsePostfix(expr, options);
                    }
                }
            }
        }
        else if (atom.type === 'mop') {
            // Could be a function or an operator.
            if ((/^\\(mathop|operatorname|operatorname\*)/.test(atom.symbol) ||
                isFunction$1(val)) &&
                !isOperator(atom)) {
                expr.ast = {
                    fn: /^\\(mathop|operatorname|operatorname\*)/.test(atom.symbol)
                        ? getString(atom.body)
                        : val,
                };
                expr = parseSupsub(expr, options);
                if (hasSup(expr.ast)) {
                    // There was an exponent with the function.
                    // This may be an inverse function
                    const INVERSE_FUNCTION = {
                        sin: 'arcsin',
                        cos: 'arccos',
                        tan: 'arctan',
                        cot: 'arccot',
                        sec: 'arcsec',
                        csc: 'arccsc',
                        sinh: 'arsinh',
                        cosh: 'arcosh',
                        tanh: 'artanh',
                        csch: 'arcsch',
                        sech: 'arsech',
                        coth: 'arcoth',
                    };
                    if (asMachineNumber(expr.ast.sup) === -1 &&
                        INVERSE_FUNCTION[val]) {
                        expr.ast = wrapFn(INVERSE_FUNCTION[val], parsePrimary(expr, options).ast);
                    }
                    else {
                        // Keep the exponent, add the argument
                        const fn = expr.ast;
                        fn.arg = [parsePrimary(expr, options).ast];
                        expr.ast = fn;
                    }
                }
                else {
                    const fn = expr.ast;
                    const arg = parsePrimary(expr, options).ast;
                    if (arg && /^(list0|list|list2)$/.test(arg.fn)) {
                        fn.arg = arg.arg;
                    }
                    else if (arg) {
                        fn.arg = [arg];
                    }
                    expr.ast = fn;
                }
            }
        }
        else if (atom.type === 'array') {
            expr.index += 1;
            expr.ast = atomToMathJson(atom, options);
        }
        else if (atom.type === 'group') {
            expr.index += 1;
            expr.ast = atomToMathJson(atom, options);
        }
        else if (atom.type === 'mclose') {
            return expr;
        }
        else if (atom.type === 'error') {
            expr.index += 1;
            expr.ast = { error: atom.symbol };
            return expr;
        }
        if (expr.ast === undefined) {
            // Parse either a group of paren, and return their content as the result
            // or a pair of delimiters, and return them as a function applied
            // to their content, i.e. "|x|" -> {fn: "||", arg: "x"}
            const delim = parseDelim(expr, '(', ')', options) ||
                parseDelim(expr, null, null, options);
            if (delim) {
                expr = delim;
            }
            else if (!isOperator(atom)) {
                // This is not an operator (if it is, it may be an operator
                // dealing with an empty lhs. It's possible.
                // Couldn't interpret the expression. Output an error.
                if (atom.type === 'placeholder') {
                    // Default value for a placeholder is 0
                    // (except for the denominator of a 'genfrac')
                    expr.ast = wrapNum(0);
                }
                else {
                    expr.ast = { text: '?' };
                    expr.ast.error = 'Unexpected token ' + "'" + atom.type + "'";
                    if (atom.latex) {
                        expr.ast.latex = atom.latex;
                    }
                    else if (atom.body && atom.toLatex) {
                        expr.ast.latex = atom.toLatex();
                    }
                }
                expr.index += 1; // Skip the unexpected token, and attempt to continue
            }
        }
        atom = expr.atoms[expr.index];
        if (atom &&
            (atom.type === 'mord' ||
                atom.type === 'surd' ||
                atom.type === 'mop' ||
                atom.type === 'mopen' ||
                atom.type === 'sizeddelim' ||
                atom.type === 'leftright')) {
            if (atom.type === 'sizeddelim') {
                for (const d in RIGHT_DELIM) {
                    if (atom.delim === RIGHT_DELIM[d]) {
                        // This is (most likely) a closing delim, exit.
                        // There are ambiguous cases, for example |x|y|z|.
                        expr.index += 1;
                        return expr;
                    }
                }
            }
            if ((atom.type === 'mord' || atom.type === 'mop') && isOperator(atom)) {
                // It's actually an operator
                return expr;
            }
            const lhs = expr.ast;
            expr.ast = {};
            expr = parsePrimary(expr, options);
            if ((expr === null || expr === void 0 ? void 0 : expr.ast) && lhs) {
                if ((isFunction$1(lhs.fn) && typeof lhs.arg === 'undefined') ||
                    (isArray(lhs.arg) && lhs.arg.length === 0)) {
                    // A function with no arguments followed by a list ->
                    // the list becomes the argument to the function
                    if (expr.ast.fn === 'list2' || expr.ast.fn === 'list') {
                        expr.ast = wrapFn(lhs.fn, expr.ast.arg);
                    }
                    else {
                        // A function "f(x)" or "√x" followed by something else:
                        // implicit multiply
                        expr.ast = wrapFn('multiply', lhs, expr.ast);
                    }
                }
                else {
                    // Invisible times, e.g. '2x'
                    if (expr.ast.fn === 'multiply') {
                        expr.ast.arg.unshift(lhs);
                    }
                    else if (numberIm(lhs) === 0 &&
                        numberRe(lhs) !== 0 &&
                        numberIm(expr.ast) === 1 &&
                        numberRe(expr.ast) === 0) {
                        // Imaginary number, i.e. "3i"
                        expr.ast = wrapNum({ im: numberRe(lhs).toString() });
                    }
                    else {
                        expr.ast = wrapFn('multiply', lhs, expr.ast);
                    }
                }
            }
            else {
                expr.ast = lhs;
            }
        }
        return expr;
    }
    /**
     * Given an atom or an array of atoms, return their AST representation as
     * an object.
     * @param {object} expr An expressions, including expr.atoms, expr.index,
     * expr.minPrec the minimum precedence that this parser should parse
     * before returning; expr.ast, the resulting AST.
     * @return {object} the expr object, updated
     * @private
     */
    function parseExpression(expr, options) {
        expr.index = expr.index || 0;
        expr.ast = undefined;
        if (expr.atoms.length === 0 || expr.index >= expr.atoms.length)
            return expr;
        expr.minPrec = expr.minPrec || 0;
        let lhs = parsePrimary(expr, options).ast;
        let done = false;
        const minPrec = expr.minPrec;
        while (!done) {
            const atom = expr.atoms[expr.index];
            const digraph = parseDigraph(expr);
            done = !atom || atom.mode === 'text' || (!digraph && !isOperator(atom));
            let prec, assoc;
            if (!done) {
                [prec, assoc] = digraph
                    ? [getPrecedence(digraph), getAssociativity(digraph)]
                    : opPrec(atom);
                done = prec < minPrec;
            }
            if (!done) {
                const opName = digraph || getCanonicalName(getString(atom));
                if (assoc === 'left') {
                    expr.minPrec = prec + 1;
                }
                else {
                    expr.minPrec = prec;
                }
                expr.index += 1;
                if (opName === '|') {
                    if (typeof atom.subscript !== 'undefined' ||
                        (expr.atoms[expr.index] &&
                            typeof expr.atoms[expr.index].subscript !==
                                'undefined' &&
                            expr.atoms[expr.index].type === 'msubsup')) {
                        // Bind is a special function. It doesn't have a rhs, and
                        // its argument is a subscript.
                        expr.ast = {};
                        const subArg = parseSupsub(expr, options).ast.sub;
                        lhs = wrapFn('bind', lhs);
                        if (subArg && subArg.fn === 'equal' && lhs.arg) {
                            // This is a subscript of the form "x=..."
                            lhs.arg.push(getArg(subArg, 0));
                            lhs.arg.push(getArg(subArg, 1));
                        }
                        else if (subArg &&
                            lhs.arg &&
                            (subArg.fn === 'list' || subArg.fn === 'list2')) {
                            // Form: "x=0;n=3;z=5"
                            let currentSym = { sym: 'x' };
                            for (let i = 0; i < subArg.arg.length; i++) {
                                if (subArg.arg[i].fn === 'equal') {
                                    currentSym = getArg(subArg.arg[i], 0);
                                    lhs.arg.push(currentSym);
                                    lhs.arg.push(getArg(subArg.arg[i], 1));
                                }
                                else {
                                    lhs.arg.push(currentSym);
                                    lhs.arg.push(subArg.arg[i]);
                                }
                            }
                        }
                        else if (subArg) {
                            // Default identifier if none provided
                            lhs.arg.push({ sym: 'x' });
                            lhs.arg.push(subArg);
                        }
                    }
                    else {
                        // That was a "|", but not with a subscript after, so
                        // it's the end of the expression, might be a right fence.
                        done = true;
                    }
                }
                else {
                    const rhs = parseExpression(expr, options).ast;
                    // Some operators (',' and ';' for example) convert into a function
                    // even if there's only two arguments. They're super associative...
                    let fn = SUPER_ASSOCIATIVE_FUNCTION[opName];
                    if (fn && lhs && lhs.fn !== fn) {
                        // Only promote them if the lhs is not already the same function.
                        // If it is, we'll combine it below.
                        lhs = wrapFn(fn, lhs);
                    }
                    // Promote subtraction to an addition
                    if (opName === '-') {
                        if ((lhs === null || lhs === void 0 ? void 0 : lhs.arg) && lhs.fn === 'add') {
                            // add(x,y) - z -> add(x, y, -z)
                            if (rhs !== undefined)
                                lhs.arg.push(negate(rhs));
                        }
                        else if (lhs && lhs.fn === 'subtract') {
                            // x-y - z      -> add(x, -y, -z)
                            lhs = wrapFn('add', getArg(lhs, 0), negate(getArg(lhs, 1)), negate(rhs));
                        }
                        else if (isNumber$1(lhs) &&
                            !hasSup(lhs) &&
                            isNumber$1(rhs) &&
                            !hasSup(rhs) &&
                            (typeof rhs.num.re === 'undefined' ||
                                rhs.num.re === '0') &&
                            typeof rhs.num.im !== 'undefined') {
                            lhs = {
                                num: {
                                    re: lhs.num,
                                    im: (-parseFloat(rhs.num.im)).toString(),
                                },
                            };
                        }
                        else {
                            lhs = wrapFn('subtract', lhs, rhs);
                        }
                    }
                    else {
                        // Is there a function (e.g. 'add') implementing the
                        // associative version of this operator (e.g. '+')?
                        fn = ASSOCIATIVE_FUNCTION[opName];
                        if (fn === 'add' && lhs && lhs.fn === 'subtract') {
                            // subtract(x, y) + z -> add(x, -y, z)
                            lhs = wrapFn('add', getArg(lhs, 0), negate(getArg(lhs, 1)), rhs);
                        }
                        else if (fn && lhs && lhs.fn === fn && !hasSup(lhs)) {
                            // add(x,y) + z -> add(x, y, z)
                            if (typeof rhs !== 'undefined') {
                                if (rhs.fn === fn && !hasSup(rhs) && rhs.arg) {
                                    // add(x, y) = add (a, b)
                                    lhs.arg = [...lhs.arg, ...rhs.arg];
                                }
                                else if (lhs.arg) {
                                    lhs.arg.push(rhs);
                                }
                            }
                        }
                        else if (fn && rhs && rhs.arg && rhs.fn === fn) {
                            // x =    y = z -> equal(x, y, z)
                            rhs.arg.unshift(lhs);
                            lhs = rhs;
                        }
                        else if (fn === 'multiply' &&
                            isNumber$1(lhs) &&
                            !hasSup(lhs) &&
                            rhs &&
                            asMachineNumber(rhs) === 10 &&
                            isNumber$1(rhs.sup)) {
                            // n * 10^m
                            lhs = wrapNum(asMachineNumber(lhs) *
                                Math.pow(10, asMachineNumber(rhs.sup)));
                        }
                        else if (fn === 'add' &&
                            isNumber$1(lhs) &&
                            !hasSup(lhs) &&
                            rhs &&
                            numberIm(rhs) !== 0 &&
                            !hasSup(rhs)) {
                            lhs = {
                                num: {
                                    re: lhs.num,
                                    im: rhs.num.im,
                                },
                            };
                        }
                        else {
                            lhs = wrapFn(fn || OP_NAME[opName] || opName, lhs, rhs);
                        }
                    }
                }
            }
        }
        expr.ast = lhs;
        return expr;
    }
    /**
     * Return a string escaped as necessary to comply with the JSON format
     * @param {string} s
     * @return {string}
     * @private
     */
    function escapeText(s) {
        return s
            .replace(/[\\]/g, '\\\\')
            .replace(/["]/g, '\\"')
            .replace(/[\b]/g, '\\b')
            .replace(/[\f]/g, '\\f')
            .replace(/[\n]/g, '\\n')
            .replace(/[\r]/g, '\\r')
            .replace(/[\t]/g, '\\t');
    }
    /**
     * Return an AST representation of a single atom
     *
     */
    function atomToMathJson(atom, options) {
        var _a, _b, _c;
        const MATH_VARIANTS = {
            'double-struck': 'double-struck',
            calligraphic: 'script',
            script: 'script',
            fraktur: 'fraktur',
            'sans-serif': 'sans-serif',
            monospace: 'monospace',
        };
        // TODO: See https://www.w3.org/TR/MathML2/chapter6.html#chars.letter-like-tables
        let result = {};
        let sym = '';
        let m;
        let lhs, rhs;
        let variant = MATH_VARIANTS[atom.variant +
            (!atom.variantStyle || atom.variantStyle === 'up'
                ? ''
                : '-' + atom.variantStyle)];
        let variantSym;
        let style = '';
        if (atom.fontSeries === 'b')
            style += 'bold';
        if (atom.fontShape === 'it')
            style += 'italic';
        const command = atom.symbol;
        switch (atom.type) {
            case 'root':
            case 'group':
                // Macros appear as group as well. Handle some of them.
                if ((_a = atom.symbol) === null || _a === void 0 ? void 0 : _a.startsWith('\\nicefrac')) {
                    m = atom.symbol.slice(9).match(/({.*}|[^}])({.*}|[^}])/);
                    if (m) {
                        if (m[1].length === 1) {
                            lhs = m[1];
                        }
                        else {
                            lhs = m[1].substr(1, m[1].length - 2);
                        }
                        lhs = parseString(lhs, 'math', null, options.macros);
                        if (m[2].length === 1) {
                            rhs = m[2];
                        }
                        else {
                            rhs = m[2].substr(1, m[2].length - 2);
                        }
                        rhs = parseString(rhs, 'math', null, options.macros);
                        result = wrapFn('divide', parse$1(lhs, options), parse$1(rhs, options));
                    }
                    else {
                        result = { fn: 'divide' };
                    }
                }
                else {
                    result = { group: parse$1(atom.body, options) };
                }
                break;
            case 'genfrac':
                // If there's no denominator, or a placeholder, use "1" as the value
                result = wrapFn('divide', parse$1(atom.numer, options), ((_c = (_b = atom.denom) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) === 'placeholder'
                    ? wrapNum(1)
                    : parse$1(atom.denom, options));
                break;
            case 'surd':
                if (atom.index) {
                    result = wrapFn('pow', parse$1(atom.body, options), wrapFn('divide', wrapNum(1), parse$1(atom.index, options)));
                }
                else {
                    result = wrapFn('sqrt', parse$1(atom.body, options));
                }
                break;
            case 'rule':
                break;
            // case 'line':
            case 'overlap':
                // case 'accent':
                break;
            case 'overunder':
                break;
            case 'mord':
            case 'textord':
            case 'mbin':
                // Check to see if it's a \char command
                m = !command
                    ? undefined
                    : command.match(/[{]?\\char"([0-9abcdefABCDEF]*)[}]?/);
                if (m) {
                    sym = String.fromCodePoint(parseInt(m[1], 16));
                }
                else {
                    sym = getCanonicalName(getString(atom));
                    if (sym.length > 0 && sym.charAt(0) === '\\') {
                        // This is an identifier with no special handling.
                        // Use the Unicode value if outside ASCII range
                        if (typeof atom.body === 'string') {
                            // TODO: consider making this an option?
                            // if (atom.body.charCodeAt(0) > 255) {
                            //     sym = '&#x' + ('000000' +
                            //         atom.body.charCodeAt(0).toString(16)).substr(-4) + ';';
                            // } else {
                            sym = atom.body;
                            // }
                        }
                    }
                }
                variantSym = escapeText(mathVariantToUnicode(sym, variant, style));
                if (variantSym !== sym) {
                    // If there's a specific Unicode character matching this one
                    // no need to record a variant.
                    result = { sym: variantSym };
                    variant = 'normal';
                }
                else {
                    result = { sym: sym };
                }
                break;
            // case 'mpunct':
            //     result = '<mo separator="true">' + command + '</mo>';
            //     break;
            case 'minner':
                break;
            case 'mop':
                break;
            case 'box':
                result = parse$1(atom.body, options);
                break;
            case 'enclose':
                // result = '<menclose notation="';
                // for (const notation in atom.notation) {
                //     if (Object.prototype.hasOwnProperty.call(atom.notation, notation) &&
                //         atom.notation[notation]) {
                //         result += sep + notation;
                //         sep = ' ';
                //     }
                // }
                // result += '">' + toAST(atom.body).mathML + '</menclose>';
                break;
            case 'array':
                if (atom.environmentName === 'cardinality') {
                    // @revisit... It's an environment, but not an array...?
                    result = wrapFn('card', parse$1(atom.array, options));
                }
                else if (/array|matrix|pmatrix|bmatrix/.test(atom.environmentName)) {
                    result = { fn: 'array', args: [] };
                    for (const row of atom.array) {
                        result.args.push(row.map((cell) => parse$1(cell, options)));
                    }
                }
                else if (atom.environmentName === 'cases') {
                    result = { fn: 'cases', args: [] };
                    for (const row of atom.array) {
                        if (row[0]) {
                            const statement = [];
                            statement.push(parse$1(row[0], options));
                            let condition = parse$1(row[1], options);
                            if (condition) {
                                if (condition.fn === 'text' && condition.arg) {
                                    if (/^(if|when|for)$/i.test(condition.arg[0].trim())) {
                                        condition = condition.arg.filter((x) => typeof x !== 'string');
                                    }
                                }
                            }
                            statement.push(condition !== null && condition !== void 0 ? condition : {});
                            result.args.push(statement);
                        }
                    }
                }
                break;
            case 'spacing':
            case 'space':
            case 'mathstyle':
                break;
            default:
                result = undefined;
                console.warn('Unhandled atom "' +
                    atom.type +
                    '" in "' +
                    (atom.symbol || atom.body) +
                    '"');
        }
        if (result && variant && variant !== 'normal') {
            result.variant = variant;
        }
        if (result && typeof atom.cssClass === 'string') {
            result.class = atom.cssClass;
        }
        if (result && typeof atom.cssId === 'string') {
            result.id = atom.cssId;
        }
        return result;
    }
    function filterPresentationAtoms(atoms) {
        if (!atoms)
            return [];
        let result;
        if (isArray(atoms)) {
            result = [];
            for (const atom of atoms) {
                const filter = filterPresentationAtoms(atom);
                result = result.concat(filter);
            }
        }
        else {
            if (atoms.type === 'spacing' || atoms.type === 'first') {
                return [];
            }
            else if (atoms.type === 'box') {
                result = filterPresentationAtoms(atoms.body);
            }
            else {
                if (atoms.body && isArray(atoms.body)) {
                    atoms.body = filterPresentationAtoms(atoms.body);
                }
                if (atoms.superscript && isArray(atoms.superscript)) {
                    atoms.superscript = filterPresentationAtoms(atoms.superscript);
                }
                if (atoms.subscript && isArray(atoms.subscript)) {
                    atoms.subscript = filterPresentationAtoms(atoms.subscript);
                }
                if (atoms.index && isArray(atoms.index)) {
                    atoms.index = filterPresentationAtoms(atoms.index);
                }
                if (atoms.denom && isArray(atoms.denom)) {
                    atoms.denom = filterPresentationAtoms(atoms.denom);
                }
                if (atoms.numer && isArray(atoms.numer)) {
                    atoms.numer = filterPresentationAtoms(atoms.numer);
                }
                if (atoms.array && isArray(atoms.array)) {
                    atoms.array = atoms.array.map((row) => row.map((cell) => filterPresentationAtoms(cell)));
                }
                result = [atoms];
            }
        }
        return result;
    }
    /**
     * Parse a sequence of text zone and math zones:
     * <sentence> := ((<text>) <expression>)+
     */
    function parseSentence(expr, options) {
        expr.index = expr.index || 0;
        expr.ast = undefined;
        const zones = [];
        // Iterate while we have atoms to look at
        while (expr.atoms[expr.index]) {
            if (expr.atoms[expr.index].mode === 'text') {
                // Text mode atom...
                let text = '';
                while (expr.atoms[expr.index] &&
                    expr.atoms[expr.index].mode === 'text') {
                    text += expr.atoms[expr.index].body;
                    expr.index += 1;
                }
                zones.push(wrapFn('text', text));
            }
            else {
                const z = parseExpression(expr, options).ast;
                // Something went wrong in parsing the expression...
                if (!z)
                    return undefined;
                zones.push(z);
            }
        }
        if (zones.length > 1) {
            return wrapFn('sequence', ...zones);
        }
        return zones[0] || undefined;
    }
    function parse$1(atoms, options) {
        return parseSentence({ atoms: filterPresentationAtoms(atoms) }, options);
    }
    function atomtoMathJson(atoms, options) {
        return parse$1(atoms, options);
    }
    /**
     *
     * @param {string} fence - The fence to wrap around the arguments
     * @return {string} - A string wrapped in the fence
     */
    function wrapFence(fence, ...args) {
        fence = fence || '.. ';
        let result = '';
        if (args.length > 0) {
            if (fence[0] !== '.')
                result += fence[0];
            let sep = '';
            for (const arg of args) {
                result += sep + arg;
                sep = fence[2];
            }
            if (fence[1] !== '.')
                result += fence[1];
        }
        return result;
    }
    /**
     * Return a formatted mantissa:
     * 1234567 -> 123 456 7...
     * 1233333 -> 12(3)
     * @param {string} m
     * @param {Object.<string, any>} config
     * @private
     */
    function formatMantissa(m, config) {
        const originalLength = m.length;
        // The last digit may have been rounded, if it exceeds the precison,
        // which could throw off the
        // repeating pattern detection. Ignore   it.
        m = m.substr(0, config.precision - 2);
        for (let i = 0; i < m.length - 16; i++) {
            // Offset is the part of the mantissa that is not repeating
            const offset = m.substr(0, i);
            // Try to find a repeating pattern of length j
            for (let j = 0; j < 17; j++) {
                const cycle = m.substr(i, j + 1);
                const times = Math.floor((m.length - offset.length) / cycle.length);
                if (times > 1) {
                    if ((offset + cycle.repeat(times + 1)).startsWith(m)) {
                        // We've found a repeating pattern!
                        if (cycle === '0') {
                            return offset.replace(/(\d{3})/g, '$1' + config.groupSeparator);
                        }
                        return (offset.replace(/(\d{3})/g, '$1' + config.groupSeparator) +
                            config.beginRepeatingDigits +
                            cycle.replace(/(\d{3})/g, '$1' + config.groupSeparator) +
                            config.endRepeatingDigits);
                    }
                }
            }
        }
        if (originalLength !== m.length) {
            m += '\\ldots';
        }
        return m.replace(/(\d{3})/g, '$1' + config.groupSeparator);
    }
    function parseFloatToPrecision(num) {
        return parseFloat(parseFloat(num).toPrecision(15));
    }
    /**
     *
     * @param num - A number, represented as a string (e.g. "-12.45"
     *  particularly useful for arbitrary precision numbers) or a number (-12.45)
     * @return A LaTeX representation of the AST
     */
    function numberAsLatex(num, config) {
        let result = '';
        let value;
        if (typeof config.precision === 'number') {
            if (typeof num === 'number') {
                value = parseFloatToPrecision(num);
            }
            else {
                let sign = '';
                let exponent = '';
                if (num[0] === '-') {
                    sign = '-';
                    num = num.substr(1);
                }
                else if (num[0] === '+') {
                    num = num.substr(1);
                }
                if (num.indexOf('.') >= 0) {
                    const m = num.match(/(\d*).(\d*)([e|E]([-+]?[0-9]*))?/);
                    const base = m[1];
                    const mantissa = m[2].substring(0, Math.min(config.precision - base.length, m[2].length));
                    exponent = m[4] || '';
                    if (base === '0') {
                        let p = 0; // Index of the first non-zero digit after the decimal
                        while (mantissa[p] === '0' && p < mantissa.length) {
                            p += 1;
                        }
                        let r = '';
                        if (p <= 4) {
                            r = '0' + config.decimalMarker;
                            r += mantissa.substr(0, p);
                            r += formatMantissa(num.substr(r.length), config);
                        }
                        else if (p + 1 >= config.precision) {
                            r = '0';
                            sign = '';
                        }
                        else {
                            r = num[p];
                            const f = formatMantissa(num.substr(p + 1), config);
                            if (f) {
                                r += config.decimalMarker + f;
                            }
                        }
                        if (r !== '0') {
                            if (num.length - 1 > config.precision &&
                                !r.endsWith('}') &&
                                !r.endsWith('\\ldots')) {
                                r += '\\ldots';
                            }
                            if (p > 4) {
                                r += config.exponentProduct;
                                if (config.exponentMarker) {
                                    r += config.exponentMarker + (1 - p).toString();
                                }
                                else {
                                    r += '10^{' + (1 - p).toString() + '}';
                                }
                            }
                        }
                        num = r;
                    }
                    else {
                        num = base.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
                        const f = formatMantissa(mantissa, config);
                        if (f) {
                            num += config.decimalMarker + f;
                            // if (num.length - 1 > config.precision && !num.endsWith('}') && !num.endsWith('\\ldots')) {
                            //     num += '\\ldots';
                            // }
                        }
                    }
                }
                else if (num.length > config.precision) {
                    const len = num.length;
                    let r = num[0];
                    const f = formatMantissa(num.substr(2), config);
                    if (f) {
                        r += config.decimalMarker + f;
                        if (r[r.length - 1] !== '}') {
                            r += '\\ldots';
                        }
                    }
                    if (r !== '1') {
                        r += config.exponentProduct;
                    }
                    else {
                        r = '';
                    }
                    if (config.exponentMarker) {
                        r += config.exponentMarker + (len - 2).toString();
                    }
                    else {
                        r += '10^{' + (len - 2).toString() + '}';
                    }
                    num = r;
                }
                else {
                    num = num.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
                }
                if (exponent) {
                    // There is an exponent...
                    if (config.exponentMarker) {
                        exponent = config.exponentMarker + exponent;
                    }
                    else {
                        exponent =
                            config.exponentProduct + ' 10^{' + exponent + '}';
                    }
                }
                return sign + num + exponent;
            }
        }
        if (config.scientificNotation === 'engineering') {
            // Ensure the exponent is a multiple of 3
            if (value === 0) {
                result = '0';
            }
            else {
                const y = Math.abs(value);
                let exponent = Math.round(Math.log10(y));
                exponent = exponent - (exponent % 3);
                if (y < 1000)
                    exponent = 0;
                const mantissa = y / Math.pow(10, exponent);
                let mantissaString = '';
                const m = mantissa.toString().match(/^(.*)\.(.*)$/);
                if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {
                    mantissaString = m[1] + config.decimalMarker + m[2];
                }
                if (config.groupSeparator) {
                    mantissaString = formatMantissa(mantissa.toExponential(), config);
                }
                let exponentString = '';
                if (exponent === 0) {
                    exponentString = '';
                }
                else if (config.exponentMarker) {
                    exponentString = config.exponentMarker + exponent;
                }
                else {
                    exponentString =
                        config.exponentProduct + ' 10^{' + exponent + '}';
                }
                result = (value < 0 ? '-' : '') + mantissaString + exponentString;
            }
        }
        else {
            const valString = typeof num === 'string' ? num : num.toString();
            let m = valString.match(/^(.*)[e|E]([-+]?[0-9]*)$/i);
            let base, exponent, mantissa;
            base = valString;
            mantissa = '';
            if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {
                // There is an exponent...
                base = m[1];
                if (config.exponentMarker) {
                    exponent = config.exponentMarker + m[2];
                }
                else {
                    exponent = config.exponentProduct + ' 10^{' + m[2] + '}';
                }
            }
            m = base.match(/^(.*)\.(.*)$/);
            if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {
                base = m[1];
                mantissa = m[2];
            }
            if (config.groupSeparator) {
                base = base.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
                mantissa = formatMantissa(mantissa, config);
            }
            if (mantissa)
                mantissa = config.decimalMarker + mantissa;
            result = base + mantissa + (exponent || '');
        }
        return result;
    }
    /**
     *
     * @param {object} ast - Abstract Syntax Tree object (in canonical form)
     * @return {string} A LaTeX representation of the AST
     */
    function jsonToLatex(ast, options) {
        const config = Object.assign({
            precision: 14,
            decimalMarker: '.',
            groupSeparator: '\\, ',
            product: '\\cdot ',
            exponentProduct: '\\cdot ',
            exponentMarker: '',
            arcSeparator: '\\,',
            scientificNotation: 'auto',
            beginRepeatingDigits: '\\overline{',
            endRepeatingDigits: '}',
        }, options);
        let result = '';
        if (ast === undefined)
            return '';
        if (typeof ast === 'string') {
            result = ast;
        }
        else if (ast.latex) {
            // If ast.latex key is present, use it to render the element
            result = ast.latex;
        }
        else if (isNumber$1(ast)) {
            const val = asMachineNumber(ast);
            if (val === -Infinity) {
                result = '-\\infty ';
            }
            else if (val === Infinity) {
                result = '\\infty ';
            }
            else if (typeof ast.num === 'object' &&
                (typeof ast.num.re === 'string' || typeof ast.num.im === 'string')) {
                const re = numberRe(ast);
                const im = numberIm(ast);
                if (isNaN(re) || isNaN(im)) {
                    result = '\\text{NaN}';
                }
                else if (Math.abs(im) <= Number.EPSILON &&
                    Math.abs(re) <= Number.EPSILON) {
                    result = '0';
                }
                else {
                    if (Math.abs(re) > Number.EPSILON) {
                        result = numberAsLatex(re, config);
                    }
                    if (Math.abs(im) > Number.EPSILON) {
                        if (Math.abs(re) > Number.EPSILON) {
                            result += im > 0 ? '+' : '';
                        }
                        result +=
                            (Math.abs(im) !== 1 ? numberAsLatex(im, config) : '') +
                                '\\imaginaryI ';
                    }
                }
            }
            else if (isNaN(val)) {
                result = '\\text{NaN}';
            }
            else {
                result = numberAsLatex(ast.num, config);
            }
            if (hasSup(ast))
                result += '^{' + jsonToLatex(ast.sup, config) + '}';
            if (hasSub(ast))
                result += '_{' + jsonToLatex(ast.sub, config) + '}';
        }
        else if (ast.group) {
            result = jsonToLatex(ast.group, config);
            if (!isNumber$1(ast.group) && !asSymbol(ast.group)) {
                result = wrapFence(ast.fence || '(),', result);
            }
            else if (numberIm(ast.group) !== 0) {
                result = wrapFence(ast.fence || '(),', result);
            }
            if (hasSup(ast))
                result += '^{' + jsonToLatex(ast.sup, config) + '}';
            if (hasSub(ast))
                result += '_{' + jsonToLatex(ast.sub, config) + '}';
        }
        else if (ast.fn) {
            if (ast.fn === 'bind') {
                result = jsonToLatex(getArg(ast, 0), config) + '|_{';
                if (ast.arg && ast.arg.length === 2) {
                    result += jsonToLatex(getArg(ast, 1));
                }
                else {
                    let sep = '';
                    for (let i = 1; i < ast.arg.length; i += 2) {
                        result +=
                            sep +
                                jsonToLatex(getArg(ast, i)) +
                                ' = ' +
                                jsonToLatex(getArg(ast, i + 1));
                        sep = ', ';
                    }
                }
                result += '}';
            }
            else if (ast.fn === 'divide') {
                result =
                    '\\frac{' +
                        jsonToLatex(getArg(ast, 0), config) +
                        '}{' +
                        jsonToLatex(getArg(ast, 1), config) +
                        '}';
            }
            else if (ast.fn === 'negate') {
                result = '-' + jsonToLatex(getArg(ast, 0), config);
            }
            else if (ast.fn === 'subtract') {
                result =
                    jsonToLatex(getArg(ast, 0), config) +
                        ' - ' +
                        jsonToLatex(getArg(ast, 1), config);
            }
            else if ((ast.fn === 'add' || ast.fn === 'multiply') &&
                isArray(ast.arg)) {
                const a = [];
                for (const exp of ast.arg) {
                    if (exp.fn === 'add' || exp.fn === 'subtract') {
                        a.push(wrapFence('() ', jsonToLatex(exp, config)));
                    }
                    else if (isComplexWithRealAndImaginary(exp)) {
                        // Complex numbers that have both a real and imaginary part
                        // should be wrapped in parentheses
                        a.push(wrapFence('() ', jsonToLatex(exp, config)));
                    }
                    else if (hasSup(ast) &&
                        !(numberIm(exp) === 0 || numberIm(exp) === 1)) {
                        // Wrap with parentheses if there's an exponent
                        // and the imaginary part is neither 0 nor 1
                        a.push(wrapFence('() ', jsonToLatex(exp, config)));
                    }
                    else {
                        a.push(jsonToLatex(exp, config));
                    }
                }
                if (ast.fn === 'multiply') {
                    if (ast.arg &&
                        ast.arg.length === 2 &&
                        (isNumber$1(ast.arg[0]) || ast.arg[0].fn === 'divide') &&
                        (!isNumber$1(ast.arg[1]) ||
                            (numberRe(ast.arg[1]) === 0 &&
                                numberIm(ast.arg[1]) === 1))) {
                        // Invisible times:
                        // (number or fraction) * not a number
                        // or (number or fraction) * imaginary unit
                        result = a[0] + a[1];
                    }
                    else {
                        result = a.join(' \\times ');
                    }
                }
                else {
                    // Addition (and subtraction)
                    if (ast.arg && ast.arg.length === 1) {
                        if (ast.arg[0].fn === 'negate' ||
                            (isNumber$1(ast.arg[0]) &&
                                asMachineNumber(ast.arg[0]) < 0)) {
                            // a[0] has a negative sign
                            result = a[0];
                        }
                        else {
                            // Single non-negative element, add a '+' in front
                            result = '+' + a[0];
                        }
                    }
                    else {
                        result = a[0];
                        for (let i = 1; i < ast.arg.length; i++) {
                            if (ast.arg[i].fn === 'negate' ||
                                (isNumber$1(ast.arg[i]) &&
                                    asMachineNumber(ast.arg[i]) < 0)) {
                                // a[i] already has a negative sign, so we can do an
                                // implicit add
                                result += a[i];
                            }
                            else {
                                result += ' + ' + a[i];
                            }
                        }
                    }
                }
            }
            else if (ast.fn === 'list' || ast.fn === 'list2') {
                const a = [];
                if (ast.arg) {
                    for (const exp of ast.arg) {
                        a.push(jsonToLatex(exp, config));
                    }
                }
                result = a.join(ast.fn === 'list2' ? '; ' : ', ');
            }
            else if (ast.fn === 'sequence') {
                result = joinLatex(ast.arg.map((x) => jsonToLatex(x, config)));
            }
            else if (ast.fn === 'text') {
                result = '\\text{' + (ast.arg[0] || '') + '}';
            }
            else if (ast.fn === 'pow' &&
                isArray(ast.arg) &&
                ast.arg.length >= 2) {
                result = jsonToLatex(getArg(ast, 0), config);
                if (!isNumber$1(getArg(ast, 0)) && !asSymbol(getArg(ast, 0))) {
                    result = wrapFence(ast.fence || '(),', result);
                }
                result += '^{' + jsonToLatex(getArg(ast, 1), config) + '}';
            }
            else if (ast.fn === 'equal' && ast.arg && ast.arg.length > 2) {
                result = ast.arg.map((x) => jsonToLatex(x, config)).join(' = ');
            }
            else {
                const fn = getLatexTemplateForFunction(ast.fn);
                result = fn;
                let argstring = '';
                const parenRequired = /%(?![01_^])/.test(fn) &&
                    isArray(ast.arg) &&
                    ast.arg.length > 1;
                if (parenRequired) {
                    // Parenthesis are required if argument list is longer than 1
                    result += wrapFence(ast.fence || '(),', ...ast.arg.map((x) => jsonToLatex(x, config)));
                }
                else if (isArray(ast.arg) && ast.arg.length > 0) {
                    // The parenthesis may be optional...
                    const arg0 = jsonToLatex(getArg(ast, 0), config);
                    const arg1 = jsonToLatex(getArg(ast, 1), config);
                    const argsn = [...ast.arg];
                    if (/%0/.test(fn)) {
                        result = result.replace('%0', arg0);
                        argsn.shift();
                    }
                    if (/%1/.test(fn)) {
                        result = result.replace('%1', arg1);
                        argsn.shift();
                    }
                    if (argsn.length > 0) {
                        argstring = wrapFence(ast.fence || '(),', ...argsn.map((x) => jsonToLatex(x, config)));
                    }
                }
                else {
                    // Empty argument list
                    argstring = wrapFence(ast.fence || '(),', '');
                }
                if (hasSup(ast)) {
                    result = result.replace('%^', '^{' + jsonToLatex(ast.sup, config) + '}');
                }
                else {
                    result = result.replace('%^', '');
                }
                if (hasSub(ast)) {
                    result = result.replace('%_', '_{' + jsonToLatex(ast.sub, config) + '}');
                }
                else {
                    result = result.replace('%_', '');
                }
                // Insert the arguments in the function template (%)
                result = result.replace(/%(?![01_^])/, argstring);
                // If there are any placeholders left, remove them
                result = result.replace('%0', '').replace('%1', '');
            }
        }
        else if (typeof ast.sym === 'string') {
            result = asSymbol(ast);
            // Is it a Unicode value?
            let m = result.match(/^&#x([0-9a-f]+);$/i);
            if (m === null || m === void 0 ? void 0 : m[1]) {
                result = String.fromCodePoint(parseInt(m[1], 16));
            }
            else {
                m = result.match(/^&#([0-9]+);$/i);
                if (m === null || m === void 0 ? void 0 : m[1]) {
                    result = String.fromCodePoint(parseInt(m[1]));
                }
            }
            // Is there a variant info attached to it?
            if (typeof ast.variant === 'string') {
                const MATH_VARIANTS = {
                    normal: 'mathrm',
                    'double-struck': 'mathbb',
                    bold: 'mathbf',
                    // 'script': 'mathcal',
                    fraktur: 'mathfrak',
                    script: 'mathscr',
                    'sans-serif': 'mathsf',
                    monospace: 'mathtt',
                };
                result = '\\' + MATH_VARIANTS[ast.variant] + '{' + result + '}';
            }
            if (hasSup(ast))
                result += '^{' + jsonToLatex(ast.sup, config) + '}';
            if (hasSub(ast))
                result += '_{' + jsonToLatex(ast.sub, config) + '}';
        }
        else if (typeof ast.text === 'string') {
            result = '\\text{' + ast.text + '}';
        }
        // If there was an error attached to this node,
        // display it on a red background
        if (typeof ast.error === 'string') {
            result = '\\bbox[#F56165]{' + result + '}';
        }
        return result;
    }

    class MathfieldPrivate {
        /**
         * To create a mathfield, you would typically use {@linkcode makeMathField | MathLive.makeMathField()}
         * instead of invoking directly this constructor.
         *
         *
         * @param element - The DOM element that this mathfield is attached to.
         * Note that `element.mathfield` is this object.
         */
        constructor(element, config) {
            this.stylesheets = [];
            // Setup default config options
            this.config = update$1(getDefault(), config);
            this.element = element;
            element['mathfield'] = this;
            // Save existing content
            this.originalContent = element.innerHTML;
            let elementText = this.element.textContent;
            if (elementText) {
                elementText = elementText.trim();
            }
            // Load the fonts, inject the core and mathfield stylesheets
            loadFonts(this.config.fontsDirectory, this.config.onError);
            this.stylesheets.push(inject(element, css_248z$2));
            this.stylesheets.push(inject(element, css_248z$1$1));
            // Additional elements used for UI.
            // They are retrieved in order a bit later, so they need to be kept in sync
            // 1.0/ The field, where the math equation will be displayed
            // 1.1/ The virtual keyboard toggle
            // 2/ The popover panel which displays info in command mode
            // 3/ The keystroke caption panel (option+shift+K)
            // 4/ The virtual keyboard
            // 5.0/ The area to stick MathML for screen reading larger exprs (not used right now)
            //      The for the area is that focus would bounce their and then back triggering the
            //         screen reader to read it
            // 5.1/ The aria-live region for announcements
            let markup = '';
            if (!this.config.substituteTextArea) {
                if (/android|ipad|ipod|iphone/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)) {
                    // On Android or iOS, don't use a textarea, which has the side effect of
                    // bringing up the OS virtual keyboard
                    markup += `<span class='ML__textarea'>
                <span class='ML__textarea__textarea'
                    tabindex="0" role="textbox"
                    style='display:inline-block;height:1px;width:1px' >
                </span>
            </span>`;
                }
                else {
                    markup +=
                        '<span class="ML__textarea">' +
                            '<textarea class="ML__textarea__textarea" autocapitalize="off" autocomplete="off" ' +
                            'autocorrect="off" spellcheck="false" aria-hidden="true" tabindex="0">' +
                            '</textarea>' +
                            '</span>';
                }
            }
            else {
                if (typeof this.config.substituteTextArea === 'string') {
                    markup += this.config.substituteTextArea;
                }
                else {
                    // We don't really need this one, but we keep it here so that the
                    // indexes below remain the same whether a substituteTextArea is
                    // provided or not.
                    markup += '<span></span>';
                }
            }
            markup +=
                '<span class="ML__fieldcontainer">' +
                    '<span class="ML__fieldcontainer__field"></span>';
            // Only display the virtual keyboard toggle if the virtual keyboard mode is
            // 'manual'
            if (this.config.virtualKeyboardMode === 'manual') {
                markup += `<div class="ML__virtual-keyboard-toggle" role="button" data-ML__tooltip="${localize('tooltip.toggle virtual keyboard')}">`;
                // data-ML__tooltip='Toggle Virtual Keyboard'
                if (this.config.virtualKeyboardToggleGlyph) {
                    markup += this.config.virtualKeyboardToggleGlyph;
                }
                else {
                    markup += `<span style="width: 21px; margin-top: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>`;
                }
                markup += '</div>';
            }
            else {
                markup += '<span ></span>';
            }
            markup += '</span>';
            markup += `
        <div class="ML__sr-only">
            <span aria-live="assertive" aria-atomic="true"></span>
            <span></span>
        </div>
    `;
            this.element.innerHTML = this.config.createHTML(markup);
            let iChild = 0; // index of child -- used to make changes below easier
            if (typeof this.config.substituteTextArea === 'function') {
                this.textarea = this.config.substituteTextArea();
            }
            else {
                this.textarea = this.element.children[iChild++]
                    .firstElementChild;
            }
            this.field = this.element.children[iChild].children[0];
            // Listen to 'wheel' events to scroll (horizontally) the field when it overflows
            this.field.addEventListener('wheel', (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                const wheelDelta = typeof ev.deltaX === 'undefined' ? ev.detail : -ev.deltaX;
                if (isFinite(wheelDelta)) {
                    this.field.scroll({
                        top: 0,
                        left: this.field.scrollLeft - wheelDelta * 5,
                    });
                }
            }, { passive: false });
            this.virtualKeyboardToggleDOMNode = this.element.children[iChild++]
                .children[1];
            attachButtonHandlers(this, this.virtualKeyboardToggleDOMNode, {
                default: 'toggleVirtualKeyboard',
                alt: 'toggleVirtualKeyboardAlt',
                shift: 'toggleVirtualKeyboardShift',
            });
            this.ariaLiveText = this.element.children[iChild]
                .children[0];
            this.accessibleNode = this.element.children[iChild++]
                .children[1];
            // Some panels are shared amongst instances of mathfield
            // (there's a single instance in the document)
            this.popover = getSharedElement('mathlive-popover-panel', 'ML__popover');
            this.stylesheets.push(inject(element, css_248z$3));
            this.keystrokeCaption = getSharedElement('mathlive-keystroke-caption-panel', 'ML__keystroke-caption');
            this.stylesheets.push(inject(element, css_248z$4));
            // The keystroke caption panel and the command bar are
            // initially hidden
            this.keystrokeCaptionVisible = false;
            this.virtualKeyboardVisible = false;
            this.keystrokeBuffer = '';
            this.keystrokeBufferStates = [];
            this.keystrokeBufferResetTimer = null;
            // This index indicates which of the suggestions available to
            // display in the popover panel
            this.suggestionIndex = 0;
            // The input mode (text, math, command)
            // While getAnchorMode() represent the mode of the current selection,
            // this.mode is the mode chosen by the user. It indicates the mode the
            // next character typed will be interpreted in.
            // It is often identical to getAnchorMode() since changing the selection
            // changes the mode, but sometimes it is not, for example when a user
            // enters a mode changing command.
            this.mode = this.config.defaultMode;
            this.smartModeSuppressed = false;
            // Current style (color, weight, italic, etc...)
            // Reflects the style to be applied on next insertion, if any
            this.style = {};
            // Focus/blur state
            this.blurred = true;
            on(this.element, 'focus', this);
            on(this.element, 'blur', this);
            // Capture clipboard events
            on(this.textarea, 'cut', this);
            on(this.textarea, 'copy', this);
            on(this.textarea, 'paste', this);
            // Delegate keyboard events
            delegateKeyboardEvents(this.textarea, {
                allowDeadKey: () => this.mode === 'text',
                typedText: (text) => onTypedText(this, text),
                paste: () => {
                    return onPaste(this);
                },
                keystroke: (keystroke, e) => onKeystroke(this, keystroke, e),
                focus: () => this._onFocus(),
                blur: () => this._onBlur(),
            });
            // Delegate mouse and touch events
            if (window.PointerEvent) {
                // Use modern pointer events if available
                on(this.field, 'pointerdown', this);
            }
            else {
                on(this.field, 'touchstart:active mousedown', this);
            }
            // Request notification for when the window is resized (
            // or the device switched from portrait to landscape) to adjust
            // the UI (popover, etc...)
            on(window, 'resize', this);
            // Setup the model
            this.model = new ModelPrivate({
                mode: this.config.defaultMode,
                macros: this.config.macros,
                removeExtraneousParentheses: this.config
                    .removeExtraneousParentheses,
            }, {
                onContentDidChange: (_sender) => this.config.onContentDidChange(this),
                onSelectionDidChange: (_sender) => this._onSelectionDidChange(),
                onContentWillChange: () => this.config.onContentWillChange(this),
                onSelectionWillChange: () => this.config.onSelectionWillChange(this),
                onError: this.config.onError,
            }, {
                announce: (_sender, command, modelBefore, atoms) => { var _a, _b; return (_b = (_a = this.config).onAnnounce) === null || _b === void 0 ? void 0 : _b.call(_a, this, command, modelBefore, atoms); },
                moveOut: (_sender, direction) => this.config.onMoveOutOf(this, direction),
                tabOut: (_sender, direction) => this.config.onTabOutOf(this, direction),
            }, this);
            // Prepare to manage undo/redo
            this.undoManager = new UndoManager(this.model);
            // Use the content of the element for the initial value of the mathfield
            insert$1(this.model, elementText, {
                insertionMode: 'replaceAll',
                selectionMode: 'after',
                format: 'latex',
                mode: 'math',
                suppressChangeNotifications: true,
                macros: this.config.macros,
            });
            // Now start recording potentially undoable actions
            this.undoManager.startRecording();
            this.undoManager.snapshot(this.config);
            this.model.setListeners({
                onContentDidChange: (_sender) => this.config.onContentDidChange(this),
                onSelectionDidChange: (_sender) => this._onSelectionDidChange(),
                onContentWillChange: () => this.config.onContentWillChange(this),
                onSelectionWillChange: () => this.config.onSelectionWillChange(this),
                onError: this.config.onError,
            });
            this.model.setHooks({
                announce: (_sender, command, modelBefore, atoms) => { var _a, _b; return (_b = (_a = this.config).onAnnounce) === null || _b === void 0 ? void 0 : _b.call(_a, this, command, modelBefore, atoms); },
                moveOut: (_sender, direction) => this.config.onMoveOutOf(this, direction),
                tabOut: (_sender, direction) => this.config.onTabOutOf(this, direction),
            });
            if (!this.config.locale.startsWith(getActiveKeyboardLayout().locale)) {
                setKeyboardLayoutLocale(this.config.locale);
            }
            this.keybindings = normalizeKeybindings(this.config.keybindings, (e) => {
                if (typeof this.config.onError === 'function') {
                    this.config.onError({
                        code: 'invalid-keybinding',
                        arg: e.join('\n'),
                    });
                }
                console.log(e.join('\n'));
            });
            requestUpdate(this);
        }
        $setConfig(config) {
            this.config = update$1(this.config, config);
            this.model.setListeners({
                onContentDidChange: (_sender) => this.config.onContentDidChange(this),
                onSelectionDidChange: (_sender) => this._onSelectionDidChange(),
                onContentWillChange: () => this.config.onContentWillChange(this),
                onSelectionWillChange: () => this.config.onSelectionWillChange(this),
                onError: this.config.onError,
            });
            this.model.setHooks({
                announce: (_sender, command, modelBefore, atoms) => { var _a, _b; return (_b = (_a = this.config).onAnnounce) === null || _b === void 0 ? void 0 : _b.call(_a, this, command, modelBefore, atoms); },
                moveOut: (_sender, direction) => this.config.onMoveOutOf(this, direction),
                tabOut: (_sender, direction) => this.config.onTabOutOf(this, direction),
            });
            if (!this.config.locale.startsWith(getActiveKeyboardLayout().locale)) {
                setKeyboardLayoutLocale(this.config.locale);
            }
            this.keybindings = normalizeKeybindings(this.config.keybindings, (e) => {
                if (typeof this.config.onError === 'function') {
                    this.config.onError({
                        code: 'invalid-keybinding',
                        arg: e.join('\n'),
                    });
                }
                console.log(e.join('\n'));
            });
            if (!this.config.readOnly) {
                this._onBlur();
            }
            requestUpdate(this);
        }
        getConfig(keys) {
            return get(this.config, keys);
        }
        /*
         * handleEvent is a function invoked when an event is registered with an
         * object instead ( see `addEventListener()` in `on()`)
         * The name is defined by addEventListener() and cannot be changed.
         * This pattern is used to be able to release bound event handlers,
         * (event handlers that need access to `this`) as the bind() function
         * would create a new function that would have to be kept track off
         * to be able to properly remove the event handler later.
         */
        handleEvent(evt) {
            switch (evt.type) {
                case 'focus':
                    this._onFocus();
                    break;
                case 'blur':
                    this._onBlur();
                    break;
                case 'touchstart':
                case 'mousedown':
                    // iOS <=13 Safari and Firefox on Android
                    onPointerDown(this, evt);
                    break;
                case 'pointerdown':
                    onPointerDown(this, evt);
                    break;
                case 'resize': {
                    if (this.resizeTimer) {
                        window.cancelAnimationFrame(this.resizeTimer);
                    }
                    this.resizeTimer = window.requestAnimationFrame(() => isValidMathfield(this) && this._onResize());
                    break;
                }
                case 'cut':
                    onCut(this);
                    break;
                case 'copy':
                    onCopy(this, evt);
                    break;
                case 'paste':
                    onPaste(this);
                    break;
                default:
                    console.warn('Unexpected event type', evt.type);
            }
        }
        $revertToOriginalContent() {
            this.element.innerHTML = this.config.createHTML(this.originalContent);
            delete this.element['mathfield'];
            delete this.accessibleNode;
            delete this.ariaLiveText;
            delete this.field;
            off(this.textarea, 'cut', this);
            off(this.textarea, 'copy', this);
            off(this.textarea, 'paste', this);
            this.textarea.remove();
            delete this.textarea;
            this.virtualKeyboardToggleDOMNode.remove();
            delete this.virtualKeyboardToggleDOMNode;
            releaseSharedElement(this.popover);
            delete this.popover;
            releaseSharedElement(this.keystrokeCaption);
            delete this.keystrokeCaption;
            releaseSharedElement(this.virtualKeyboard);
            delete this.virtualKeyboard;
            releaseSharedElement(document.getElementById('mathlive-alternate-keys-panel'));
            off(this.element, 'pointerdown', this);
            off(this.element, 'touchstart:active mousedown', this);
            off(this.element, 'focus', this);
            off(this.element, 'blur', this);
            off(window, 'resize', this);
            delete this.element;
            this.stylesheets.forEach((x) => x.release());
        }
        resetKeystrokeBuffer() {
            this.keystrokeBuffer = '';
            this.keystrokeBufferStates = [];
            clearTimeout(this.keystrokeBufferResetTimer);
        }
        _onSelectionDidChange() {
            // Every atom before the new caret position is now committed
            commitCommandStringBeforeInsertionPoint(this.model);
            // Keep the content of the textarea in sync wiht the selection.
            // This will allow cut/copy to work.
            const result = selectionIsCollapsed(this.model)
                ? ''
                : makeRoot('math', getSelectedAtoms(this.model)).toLatex(false);
            const textarea = this.textarea;
            if (result) {
                textarea.value = result;
                // The textarea may be a span (on mobile, for example), so check that
                // it has a select() before calling it.
                if (this.$hasFocus() && textarea.select) {
                    textarea.select();
                }
            }
            else {
                textarea.value = '';
                textarea.setAttribute('aria-label', '');
            }
            // Update the mode
            {
                const previousMode = this.mode;
                this.mode = getAnchorMode(this.model) || this.config.defaultMode;
                if (this.mode !== previousMode &&
                    typeof this.config.onModeChange === 'function') {
                    this.config.onModeChange(this, this.mode);
                }
                if (previousMode === 'command' && this.mode !== 'command') {
                    hidePopover(this);
                    removeCommandString(this.model);
                }
            }
            // Defer the updating of the popover position: we'll need the tree to be
            // re-rendered first to get an updated caret position
            updatePopoverPosition(this, { deferred: true });
            // Invoke client listeners, if provided.
            if (typeof this.config.onSelectionDidChange === 'function') {
                this.config.onSelectionDidChange(this);
            }
        }
        _onFocus() {
            if (this.config.readOnly)
                return;
            if (this.blurred) {
                this.blurred = false;
                // The textarea may be a span (on mobile, for example), so check that
                // it has a focus() before calling it.
                if (this.textarea.focus) {
                    this.textarea.focus();
                }
                if (this.config.virtualKeyboardMode === 'onfocus') {
                    showVirtualKeyboard(this);
                }
                updatePopoverPosition(this);
                if (this.config.onFocus) {
                    this.config.onFocus(this);
                }
                requestUpdate(this);
            }
        }
        _onBlur() {
            if (!this.blurred) {
                this.blurred = true;
                this.ariaLiveText.textContent = '';
                if (this.config.virtualKeyboardMode === 'onfocus') {
                    hideVirtualKeyboard(this);
                }
                complete(this, { discard: true });
                requestUpdate(this);
                if (this.config.onBlur) {
                    this.config.onBlur(this);
                }
            }
        }
        _onResize() {
            this.element.classList.remove('ML__isNarrowWidth', 'ML__isWideWidth', 'ML__isExtendedWidth');
            if (window.innerWidth >= 1024) {
                this.element.classList.add('ML__isExtendedWidth');
            }
            else if (window.innerWidth >= 768) {
                this.element.classList.add('ML__isWideWidth');
            }
            else {
                this.element.classList.add('ML__isNarrowWidth');
            }
            updatePopoverPosition(this);
        }
        $perform(command) {
            return perform(this, command);
        }
        formatMathlist(root, format) {
            format = format || 'latex';
            let result = '';
            if (format === 'latex' || format === 'latex-expanded') {
                result = root.toLatex(format === 'latex-expanded');
            }
            else if (format === 'mathML') {
                result = atomsToMathML(root, this.config);
            }
            else if (format === 'spoken') {
                result = atomToSpeakableText(root, this.config);
            }
            else if (format === 'spoken-text') {
                const saveTextToSpeechMarkup = this.config.textToSpeechMarkup;
                this.config.textToSpeechMarkup = '';
                result = atomToSpeakableText(root, this.config);
                this.config.textToSpeechMarkup = saveTextToSpeechMarkup;
            }
            else if (format === 'spoken-ssml' ||
                format === 'spoken-ssml-withHighlighting') {
                const saveTextToSpeechMarkup = this.config.textToSpeechMarkup;
                // const savedAtomIdsSettings = this.config.atomIdsSettings;    // @revisit
                this.config.textToSpeechMarkup = 'ssml';
                // if (format === 'spoken-ssml-withHighlighting') {     // @revisit
                //     this.config.atomIdsSettings = { seed: 'random' };
                // }
                result = atomToSpeakableText(root, this.config);
                this.config.textToSpeechMarkup = saveTextToSpeechMarkup;
                // this.config.atomIdsSettings = savedAtomIdsSettings;      // @revisit
            }
            else if (format === 'json') {
                const json = atomtoMathJson(root);
                // const json = parseLatex(root.toLatex(true), {
                //     form: 'canonical',
                // });
                result = JSON.stringify(json);
            }
            else if (format === 'json-2') {
                const json = atomtoMathJson(root);
                // const json = parseLatex(root.toLatex(true), {
                //     form: 'canonical',
                // });
                result = JSON.stringify(json, null, 2);
            }
            else if (format === 'ASCIIMath') {
                result = atomToAsciiMath(root);
            }
            else {
                console.warn('Unknown format :', format);
            }
            return result;
        }
        $text(format) {
            return this.formatMathlist(this.model.root, format);
        }
        $selectedText(format) {
            const atoms = getSelectedAtoms(this.model);
            if (!atoms) {
                return '';
            }
            const root = makeRoot('math', atoms);
            return this.formatMathlist(root, format);
        }
        $selectionIsCollapsed() {
            return selectionIsCollapsed(this.model);
        }
        $selectionDepth() {
            return this.model.path.length;
        }
        /**
         * Checks if the selection starts at the beginning of the selection group.
         */
        $selectionAtStart() {
            return this.model.startOffset() === 0;
        }
        $selectionAtEnd() {
            return this.model.endOffset() >= this.model.siblings().length - 1;
        }
        /**
         *  True if the entire group is selected
         */
        groupIsSelected() {
            return (this.model.startOffset() === 0 &&
                this.model.endOffset() >= this.model.siblings().length - 1);
        }
        $latex(text, options) {
            if (typeof text === 'string') {
                const oldValue = this.model.root.toLatex();
                if (text !== oldValue) {
                    options = options !== null && options !== void 0 ? options : { mode: 'math' };
                    insert$1(this.model, text, {
                        insertionMode: 'replaceAll',
                        selectionMode: 'after',
                        format: 'latex',
                        mode: 'math',
                        suppressChangeNotifications: options.suppressChangeNotifications,
                        macros: this.config.macros,
                    });
                    this.undoManager.snapshot(this.config);
                    requestUpdate(this);
                }
                return text;
            }
            // Return the content as LaTeX
            return this.model.root.toLatex();
        }
        $el() {
            return this.element;
        }
        scrollIntoView() {
            var _a;
            // If a render is pending, do it now to make sure we have correct layout
            // and caret position
            if (this.dirty) {
                render(this);
            }
            let pos = (_a = getCaretPosition(this.field)) === null || _a === void 0 ? void 0 : _a.x;
            const fieldBounds = this.field.getBoundingClientRect();
            if (typeof pos === 'undefined') {
                const selectionBounds = getSelectionBounds(this.field);
                if (selectionBounds !== null) {
                    pos =
                        selectionBounds.right +
                            fieldBounds.left -
                            this.field.scrollLeft;
                }
            }
            if (typeof pos !== 'undefined') {
                const x = pos - window.scrollX;
                if (x < fieldBounds.left) {
                    this.field.scroll({
                        top: 0,
                        left: x - fieldBounds.left + this.field.scrollLeft - 20,
                        behavior: 'smooth',
                    });
                }
                else if (x > fieldBounds.right) {
                    this.field.scroll({
                        top: 0,
                        left: x - fieldBounds.right + this.field.scrollLeft + 20,
                        behavior: 'smooth',
                    });
                }
            }
        }
        $insert(s, options) {
            if (typeof s === 'string' && s.length > 0) {
                options = options !== null && options !== void 0 ? options : { mode: 'math' };
                if (options.focus) {
                    this.$focus();
                }
                if (options.feedback) {
                    if (this.config.keypressVibration && (navigator === null || navigator === void 0 ? void 0 : navigator.vibrate)) {
                        navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
                    }
                    if (this.keypressSound) {
                        this.keypressSound.load();
                        this.keypressSound.play();
                    }
                }
                if (s === '\\\\') {
                    // This string is interpreted as an "insert row after" command
                    addRowAfter(this.model);
                }
                else if (s === '&') {
                    addColumnAfter(this.model);
                }
                else {
                    const savedStyle = this.style;
                    insert$1(this.model, s, {
                        mode: this.mode,
                        style: getAnchorStyle(this.model),
                        ...options,
                    });
                    if (options.resetStyle) {
                        this.style = savedStyle;
                    }
                }
                this.undoManager.snapshot(this.config);
                requestUpdate(this);
                return true;
            }
            return false;
        }
        switchMode(mode, prefix = '', suffix = '') {
            this.resetKeystrokeBuffer();
            // Suppress (temporarily) smart mode if switching to/from text or math
            // This prevents switching to/from command mode from supressing smart mode.
            this.smartModeSuppressed =
                /text|math/.test(this.mode) && /text|math/.test(mode);
            if (prefix) {
                this.$insert(prefix, {
                    format: 'latex',
                    mode: { math: 'text', text: 'math' }[mode],
                });
            }
            // Remove any error indicator on the current command sequence (if there is one)
            decorateCommandStringAroundInsertionPoint(this.model, false);
            if (mode === 'command') {
                removeSuggestion(this.model);
                hidePopover(this);
                this.suggestionIndex = 0;
                // Switch to the command mode keyboard layer
                if (this.virtualKeyboardVisible) {
                    switchKeyboardLayer(this, 'lower-command');
                }
                insert$1(this.model, '\u001b', { mode: 'math' });
            }
            else {
                this.mode = mode;
            }
            if (suffix) {
                this.$insert(suffix, {
                    format: 'latex',
                    mode: mode,
                });
            }
            // Notify of mode change
            if (typeof this.config.onModeChange === 'function') {
                this.config.onModeChange(this, this.mode);
            }
            requestUpdate(this);
        }
        $hasFocus() {
            return (document.hasFocus() && deepActiveElement(document) === this.textarea);
        }
        $focus() {
            if (!this.$hasFocus()) {
                // The textarea may be a span (on mobile, for example), so check that
                // it has a focus() before calling it.
                if (typeof this.textarea.focus === 'function') {
                    this.textarea.focus();
                }
                this.model.announce('line');
            }
        }
        $blur() {
            if (this.$hasFocus()) {
                if (this.textarea.blur) {
                    this.textarea.blur();
                }
            }
        }
        $select() {
            selectAll(this.model);
        }
        $clearSelection() {
            deleteChar(this.model);
        }
        $applyStyle(style) {
            applyStyle$3(this.model, style);
        }
        $keystroke(keys, evt) {
            return onKeystroke(this, keys, evt);
        }
        $typedText(text) {
            onTypedText(this, text);
        }
        canUndo() {
            return this.undoManager.canUndo();
        }
        canRedo() {
            return this.undoManager.canRedo();
        }
        popUndoStack() {
            this.undoManager.pop();
        }
        snapshot() {
            this.undoManager.snapshot({
                ...this.config,
                onUndoStateDidChange: (mf, reason) => {
                    updateUndoRedoButtons(this);
                    this.config.onUndoStateDidChange(mf, reason);
                },
            });
        }
        snapshotAndCoalesce() {
            this.undoManager.snapshotAndCoalesce({
                ...this.config,
                onUndoStateDidChange: (mf, reason) => {
                    updateUndoRedoButtons(this);
                    this.config.onUndoStateDidChange(mf, reason);
                },
            });
        }
        getUndoRecord() {
            return this.undoManager.save();
        }
        restoreToUndoRecord(s) {
            this.undoManager.restore(s, {
                ...this.config,
                suppressChangeNotifications: true,
            });
        }
        undo() {
            return this.undoManager.undo({
                ...this.config,
                onUndoStateDidChange: (mf, reason) => {
                    updateUndoRedoButtons(this);
                    this.config.onUndoStateDidChange(mf, reason);
                },
            });
        }
        redo() {
            return this.undoManager.redo({
                ...this.config,
                onUndoStateDidChange: (mf, reason) => {
                    updateUndoRedoButtons(this);
                    this.config.onUndoStateDidChange(mf, reason);
                },
            });
        }
    }
    function deepActiveElement(root = document) {
        var _a, _b;
        if ((_b = (_a = root.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.activeElement) {
            return deepActiveElement(root.activeElement.shadowRoot);
        }
        return root.activeElement;
    }

    /* eslint no-console:0 */
    function findEndOfMath(delimiter, text, startIndex) {
        // Adapted from
        // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx
        let index = startIndex;
        let braceLevel = 0;
        const delimLength = delimiter.length;
        while (index < text.length) {
            const character = text[index];
            if (braceLevel <= 0 &&
                text.slice(index, index + delimLength) === delimiter) {
                return index;
            }
            else if (character === '\\') {
                index++;
            }
            else if (character === '{') {
                braceLevel++;
            }
            else if (character === '}') {
                braceLevel--;
            }
            index++;
        }
        return -1;
    }
    function splitAtDelimiters(startData, leftDelim, rightDelim, mathstyle) {
        const finalData = [];
        for (let i = 0; i < startData.length; i++) {
            if (startData[i].type === 'text') {
                const text = startData[i].data;
                let lookingForLeft = true;
                let currIndex = 0;
                let nextIndex;
                nextIndex = text.indexOf(leftDelim);
                if (nextIndex !== -1) {
                    currIndex = nextIndex;
                    if (currIndex > 0) {
                        finalData.push({
                            type: 'text',
                            data: text.slice(0, currIndex),
                        });
                    }
                    lookingForLeft = false;
                }
                let done = false;
                while (!done) {
                    if (lookingForLeft) {
                        nextIndex = text.indexOf(leftDelim, currIndex);
                        if (nextIndex === -1) {
                            done = true;
                            break;
                        }
                        if (currIndex !== nextIndex) {
                            finalData.push({
                                type: 'text',
                                data: text.slice(currIndex, nextIndex),
                            });
                        }
                        currIndex = nextIndex;
                    }
                    else {
                        nextIndex = findEndOfMath(rightDelim, text, currIndex + leftDelim.length);
                        if (nextIndex === -1) {
                            done = true;
                            break;
                        }
                        finalData.push({
                            type: 'math',
                            data: text.slice(currIndex + leftDelim.length, nextIndex),
                            rawData: text.slice(currIndex, nextIndex + rightDelim.length),
                            mathstyle: mathstyle,
                        });
                        currIndex = nextIndex + rightDelim.length;
                    }
                    lookingForLeft = !lookingForLeft;
                }
                if (currIndex < text.length) {
                    finalData.push({
                        type: 'text',
                        data: text.slice(currIndex),
                    });
                }
            }
            else {
                finalData.push(startData[i]);
            }
        }
        return finalData;
    }
    function splitWithDelimiters(text, delimiters) {
        let data = [{ type: 'text', data: text }];
        for (let i = 0; i < delimiters.inline.length; i++) {
            const delimiter = delimiters.inline[i];
            data = splitAtDelimiters(data, delimiter[0], delimiter[1], 'textstyle');
        }
        for (let i = 0; i < delimiters.display.length; i++) {
            const delimiter = delimiters.display[i];
            data = splitAtDelimiters(data, delimiter[0], delimiter[1], 'displaystyle');
        }
        return data;
    }
    function createMathMLNode(latex, options) {
        // Create a node for AT (Assistive Technology, e.g. screen reader) to speak, etc.
        // This node has a style that makes it be invisible to display but is seen by AT
        const span = document.createElement('span');
        try {
            const html = "<math xmlns='http://www.w3.org/1998/Math/MathML'>" +
                options.renderToMathML(latex, options) +
                '</math>';
            span.innerHTML = options.createHTML ? options.createHTML(html) : html;
        }
        catch (e) {
            console.error("Could not convert'" + latex + "' to MathML with ", e);
            span.textContent = latex;
        }
        span.className = 'ML__sr-only';
        return span;
    }
    function createMarkupNode(text, options, mathstyle, createNodeOnFailure) {
        // Create a node for displaying math.
        //   This is slightly ugly because in the case of failure to create the markup,
        //   sometimes a text node is desired and sometimes not.
        //   'createTextNodeOnFailure' controls this and null is returned when no node is created.
        // This node is made invisible to AT (screen readers)
        let span = document.createElement('span');
        span.setAttribute('aria-hidden', 'true');
        if (options.preserveOriginalContent) {
            span.setAttribute('data-' + options.namespace + 'original-content', text);
            if (mathstyle) {
                span.setAttribute('data-' + options.namespace + 'original-mathstyle', mathstyle);
            }
        }
        try {
            loadFonts(options.fontsDirectory);
            inject(null, css_248z$2);
            const html = options.renderToMarkup(text, {
                mathstyle: mathstyle !== null && mathstyle !== void 0 ? mathstyle : 'displaystyle',
                format: 'html',
                macros: options.macros,
            });
            span.innerHTML = options.createHTML ? options.createHTML(html) : html;
        }
        catch (e) {
            console.error("Could not parse'" + text + "' with ", e);
            if (createNodeOnFailure) {
                span = document.createTextNode(text);
            }
            else {
                return null;
            }
        }
        return span;
    }
    function createAccessibleMarkupPair(text, mathstyle, options, createNodeOnFailure) {
        // Create a math node (a span with an accessible component and a visual component)
        // If there is an error in parsing the latex, 'createNodeOnFailure' controls whether
        //   'null' is returned or an accessible node with the text used.
        const markupNode = createMarkupNode(text, options, mathstyle, createNodeOnFailure);
        if (markupNode &&
            /\b(mathml|speakable-text)\b/i.test(options.renderAccessibleContent)) {
            const fragment = document.createDocumentFragment();
            if (/\bmathml\b/i.test(options.renderAccessibleContent) &&
                options.renderToMathML) {
                fragment.appendChild(createMathMLNode(text, options));
            }
            if (/\bspeakable-text\b/i.test(options.renderAccessibleContent) &&
                options.renderToSpeakableText) {
                const span = document.createElement('span');
                const html = options.renderToSpeakableText(text, options);
                span.innerHTML = options.createHTML
                    ? options.createHTML(html)
                    : html;
                span.className = 'ML__sr-only';
                fragment.appendChild(span);
            }
            fragment.appendChild(markupNode);
            return fragment;
        }
        return markupNode;
    }
    function scanText$1(text, options) {
        // If the text starts with '\begin'...
        // (this is a MathJAX behavior)
        let fragment = null;
        if (options.TeX.processEnvironments && /^\s*\\begin/.test(text)) {
            fragment = document.createDocumentFragment();
            fragment.appendChild(createAccessibleMarkupPair(text, undefined, options, true));
        }
        else {
            if (!text.trim())
                return null;
            const data = splitWithDelimiters(text, options.TeX.delimiters);
            if (data.length === 1 && data[0].type === 'text') {
                // This text contains no math. No need to continue processing
                return null;
            }
            fragment = document.createDocumentFragment();
            for (let i = 0; i < data.length; i++) {
                if (data[i].type === 'text') {
                    fragment.appendChild(document.createTextNode(data[i].data));
                }
                else {
                    fragment.appendChild(createAccessibleMarkupPair(data[i].data, data[i].mathstyle, options, true));
                }
            }
        }
        return fragment;
    }
    function scanElement(elem, options) {
        const originalContent = elem.getAttribute('data-' + options.namespace + 'original-content');
        if (originalContent) {
            const mathstyle = elem.getAttribute('data-' + options.namespace + 'mathstyle');
            const span = createAccessibleMarkupPair(originalContent, mathstyle, options, false);
            if (span != null) {
                elem.textContent = '';
                elem.appendChild(span);
            }
            return;
        }
        if (elem.childNodes.length === 1 && elem.childNodes[0].nodeType === 3) {
            // This is a node with textual content only. Perhaps an opportunity
            // to simplify and avoid creating extra nested elements...
            const text = elem.childNodes[0].textContent;
            if (options.TeX.processEnvironments && /^\s*\\begin/.test(text)) {
                elem.textContent = '';
                elem.appendChild(createAccessibleMarkupPair(text, undefined, options, true));
                return;
            }
            const data = splitWithDelimiters(text, options.TeX.delimiters);
            if (data.length === 1 && data[0].type === 'math') {
                // The entire content is a math expression: we can replace the content
                // with the latex markup without creating additional wrappers.
                elem.textContent = '';
                elem.appendChild(createAccessibleMarkupPair(data[0].data, data[0].mathstyle, options, true));
                return;
            }
            else if (data.length === 1 && data[0].type === 'text') {
                // This element only contained text with no math. No need to
                // do anything.
                return;
            }
        }
        for (let i = 0; i < elem.childNodes.length; i++) {
            const childNode = elem.childNodes[i];
            if (childNode.nodeType === 3) {
                // A text node
                // Look for math mode delimiters inside the text
                const frag = scanText$1(childNode.textContent, options);
                if (frag) {
                    i += frag.childNodes.length - 1;
                    elem.replaceChild(frag, childNode);
                }
            }
            else if (childNode.nodeType === 1) {
                // An element node
                const tag = childNode.nodeName.toLowerCase();
                if (tag === 'script' &&
                    options.processScriptTypePattern.test(childNode.type)) {
                    let style = 'displaystyle';
                    for (const l of childNode.type.split(';')) {
                        const v = l.split('=');
                        if (v[0].toLowerCase() === 'mode') {
                            if (v[1].toLoweCase() === 'display') {
                                style = 'displaystyle';
                            }
                            else {
                                style = 'textstyle';
                            }
                        }
                    }
                    const span = createAccessibleMarkupPair(childNode.textContent, style, options, true);
                    childNode.parentNode.replaceChild(span, childNode);
                }
                else if (tag !== 'script') {
                    // Element node
                    // console.assert(childNode.className !== 'formula');
                    const shouldRender = options.processClassPattern.test(childNode.className) ||
                        !(options.skipTags.includes(tag) ||
                            options.ignoreClassPattern.test(childNode.className));
                    if (shouldRender) {
                        if (elem.childNodes.length === 1 &&
                            elem.childNodes[0].nodeType === 3) {
                            const formula = elem.textContent;
                            elem.textContent = '';
                            elem.appendChild(createAccessibleMarkupPair(formula, 'displaystyle', options, true));
                        }
                        else {
                            scanElement(childNode, options);
                        }
                    }
                }
            }
            // Otherwise, it's something else, and ignore it.
        }
    }
    const defaultOptions = {
        // Optional namespace for the `data-` attributes.
        namespace: '',
        // Name of tags whose content will not be scanned for math delimiters
        skipTags: [
            'noscript',
            'style',
            'textarea',
            'pre',
            'code',
            'annotation',
            'annotation-xml',
        ],
        // <script> tags of the following types will be processed. Others, ignored.
        processScriptType: 'math/tex',
        // Regex pattern of the class name of elements whose contents should not
        // be processed
        ignoreClass: 'tex2jax_ignore',
        // Regex pattern of the class name of elements whose contents should
        // be processed when they appear inside ones that are ignored.
        processClass: 'tex2jax_process',
        // Indicate whether to preserve or discard the original content of the
        // elements being rendered in a 'data-original-content' attribute.
        preserveOriginalContent: true,
        // Indicate the format to use to render accessible content
        renderAccessibleContent: 'mathml',
        TeX: {
            processEnvironments: true,
            delimiters: {
                inline: [['\\(', '\\)']],
                display: [
                    ['$$', '$$'],
                    ['\\[', '\\]'],
                ],
            },
        },
    };
    function renderMathInElement(elem, options) {
        try {
            options = { ...defaultOptions, ...options };
            options.ignoreClassPattern = new RegExp(options.ignoreClass);
            options.processClassPattern = new RegExp(options.processClass);
            options.processScriptTypePattern = new RegExp(options.processScriptType);
            options.macros = MACROS;
            // Validate the namespace (used for `data-` attributes)
            if (options.namespace) {
                if (!/^[a-z]+[-]?$/.test(options.namespace)) {
                    throw Error('options.namespace must be a string of lowercase characters only');
                }
                if (!/-$/.test(options.namespace)) {
                    options.namespace += '-';
                }
            }
            scanElement(elem, options);
        }
        catch (e) {
            if (e instanceof Error) {
                console.error('renderMathInElement(): ' + e.message);
            }
            else {
                console.error('renderMathInElement(): Could not render math for element ' +
                    elem);
            }
        }
    }
    var AutoRender = {
        renderMathInElement,
    };

    /**
     * This module contains utilities to debug mathlive internal data structures.
     *
     * It is also used by the automated test suite.
     */
    function latexToAsciiMath(latex, mode = 'math') {
        const mathlist = parseString(latex, mode, null, null);
        return atomToAsciiMath(mathlist);
    }
    function asciiMathToLatex(ascii) {
        const [, result] = parseMathString(ascii, { format: 'ASCIIMath' });
        return result;
    }
    /**
     *
     * @param symbol specify which span to consider.
     * If a string, a span whose body match the string
     * If a number, the nth span in the list
     * If an array, each element in the array indicate the nth child to traverse
     */
    function getSymbol(spans, symbol) {
        if (!spans)
            return null;
        let childSymbol = null;
        if (Array.isArray(symbol)) {
            childSymbol = symbol.slice(); // Clone the array
            symbol = childSymbol.shift(); // Get the first element and remove it from the array
        }
        let result = null;
        if (typeof symbol === 'number' && symbol < spans.length) {
            if (childSymbol && childSymbol.length > 0) {
                return getSymbol(spans[symbol].children, childSymbol);
            }
            return spans[symbol];
        }
        else if (typeof symbol === 'string') {
            for (let i = 0; i < spans.length; i++) {
                // Does this span match the symbol we're looking for?
                if (spans[i].body === symbol) {
                    if (childSymbol && childSymbol.length > 0) {
                        return getSymbol(spans[i].children, childSymbol);
                    }
                    return spans[i];
                }
                // If not, try its children
                result = getSymbol(spans[i].children, symbol);
                if (result)
                    return result;
            }
            return result;
        }
        return null;
    }
    function getProp(spans, symbol, prop) {
        const s = getSymbol(spans, symbol);
        if (s)
            return s[prop];
        return null;
    }
    /**
     * Return the type ('mbin', etc...) of a span
     */
    function getType(spans, symbol) {
        const s = getSymbol(spans, symbol);
        if (s)
            return s.type;
        return null;
    }
    function getStyle(spans, symbol, prop) {
        const s = getSymbol(spans, symbol);
        if (s === null || s === void 0 ? void 0 : s.style)
            return s.style[prop];
        return null;
    }
    function getClasses(spans, symbol) {
        var _a;
        const s = getSymbol(spans, symbol);
        if (s)
            return (_a = s.classes) !== null && _a !== void 0 ? _a : '';
        return null;
    }
    function hasClass(spans, symbol, cls) {
        const classes = getClasses(spans, symbol);
        if (!classes)
            return false;
        const clsList = classes.split(' ');
        for (let j = 0; j < clsList.length; j++) {
            if (clsList[j] === cls)
                return true;
        }
        return false;
    }
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    function spanToString(span, indent = '') {
        let result = '';
        if (Array.isArray(span)) {
            if (span.length === 0) {
                result += '[]\n';
            }
            else {
                result += '[\n';
                for (let i = 0; i < span.length; i++) {
                    result += spanToString(span[i], '\t' + indent + i + ',');
                    result += i < span.length - 1 ? ',\n' : '\n';
                }
                result += indent + ']\n';
            }
        }
        else {
            result = indent + '{\n';
            if (span.type) {
                result += indent + 'type:"' + span.type + '",\n';
            }
            if (span.body && span.body.length > 0) {
                result += indent + 'body:"' + span.body + '",\n';
            }
            if (span.classes && span.classes.length > 0) {
                result += indent + 'classes:"' + span.classes + '",\n';
            }
            if (span.style) {
                for (const s in span.style) {
                    if (Object.prototype.hasOwnProperty.call(span.style, s)) {
                        result += indent + s + ':"';
                        result += span.style[s] + '",\n';
                    }
                }
            }
            if (span.children && span.children.length > 0) {
                result +=
                    indent +
                        'children:' +
                        span.children.map((x) => spanToString(x, indent)).join('; ');
            }
            result += indent + '}';
        }
        return result;
    }
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////
    function spanToMarkup(span, indent = '') {
        // if (indent.length === 0) {
        //     result += '<table>';
        // }
        let result = '';
        if (Array.isArray(span)) {
            for (let i = 0; i < span.length; i++) {
                result += spanToMarkup(span[i], indent);
            }
        }
        else if (span) {
            result = '<br>' + indent;
            if (span.classes.includes('fontsize-ensurer')) {
                result += 'FONTSIZE-ENSURER';
            }
            else {
                if (span.type) {
                    result += '<span class="type">' + span.type + '</span>';
                }
                if (span.body && span.body.length > 0) {
                    result += '<span class="value">' + span.body + '</span>';
                }
                if (span.classes && span.classes.length > 0) {
                    result +=
                        '&nbsp;<span class="classes">' + span.classes + '</span>';
                }
                if (span.isTight) {
                    result += '&nbsp;<span class="stylevalue"> tight </span>';
                }
                if (span.caret) {
                    result += '&nbsp;<span class="stylevalue"> caret </span>';
                }
                if (span.style) {
                    for (const s in span.style) {
                        if (Object.prototype.hasOwnProperty.call(span.style, s)) {
                            result +=
                                '&nbsp;<span class="styleprop">' + s + ':</span>';
                            result +=
                                '<span class="stylevalue"> ' +
                                    span.style[s] +
                                    '</span>;&nbsp;';
                        }
                    }
                }
                if (span.children) {
                    result += span.children
                        .map((x) => spanToMarkup(x, indent + '▷'))
                        .join('; ');
                }
            }
        }
        return result;
    }
    function mathListColorToMarkup(mathlist, propname) {
        let result = '';
        if (mathlist[propname]) {
            result += '<span class="styleprop">' + propname + '=</span>';
            result +=
                '<span style="font-size:2em;vertical-align:middle;color:' +
                    mathlist[propname] +
                    '">&#9632;</span>';
            result += '<span class="stylevalue">';
            result += mathlist[propname];
            result += '</span>';
        }
        return result;
    }
    function mathListPropToMarkup(mathlist, propname) {
        let result = '';
        if (mathlist[propname]) {
            result += '<span class="styleprop">' + propname + '=</span>';
            result += '<span class="stylevalue">';
            result += mathlist[propname];
            result += '</span>" ';
        }
        return result;
    }
    function mathlistToMarkup(mathlist, indent = '') {
        if (!mathlist)
            return '';
        let result = '';
        if (Array.isArray(mathlist)) {
            for (let i = 0; i < mathlist.length; i++) {
                result += mathlistToMarkup(mathlist[i], i + '.' + indent);
            }
        }
        else {
            result = '<br>' + indent;
            if (mathlist.type) {
                result += '<span class="type';
                result += mathlist.isSelected ? ' selected' : '';
                result += mathlist.caret ? ' caret' : '';
                result +=
                    '">' +
                        mathlist.type +
                        (mathlist.caret ? ' caret ' : '') +
                        '</span>';
            }
            if (typeof mathlist.body === 'string' && mathlist.body.length > 0) {
                result += '&nbsp;<span class="value">';
                result += mathlist.body;
                if (mathlist.body.charCodeAt(0) < 32 ||
                    mathlist.body.charCodeAt(0) > 127) {
                    result +=
                        '&nbsp;U+' +
                            ('000000' + mathlist.body.charCodeAt(0).toString(16)).substr(-6);
                }
                result += '</span>&nbsp;';
            }
            if (mathlist.fontFamily === 'mathrm') {
                result += '<span style="opacity:.2">';
                result += mathListPropToMarkup(mathlist, 'fontFamily');
                result += '</span>';
            }
            else {
                result += mathListPropToMarkup(mathlist, 'fontFamily');
            }
            // Type 'genfrac'
            result += mathListPropToMarkup(mathlist, 'hasBarLine');
            result += mathListPropToMarkup(mathlist, 'leftDelim');
            result += mathListPropToMarkup(mathlist, 'rightDelim');
            result += mathListPropToMarkup(mathlist, 'continuousFraction');
            // Type...?
            result += mathListPropToMarkup(mathlist, 'limits');
            result += mathListPropToMarkup(mathlist, 'symbol');
            // Type 'color'
            result += mathListColorToMarkup(mathlist, 'framecolor');
            // Type 'mathstyle'
            result += mathListPropToMarkup(mathlist, 'mathstyle');
            // Type 'sizeddelim'
            result += mathListPropToMarkup(mathlist, 'size');
            result += mathListPropToMarkup(mathlist, 'cls');
            result += mathListPropToMarkup(mathlist, 'delim');
            // Type 'rule'
            result += mathListPropToMarkup(mathlist, 'shift');
            result += mathListPropToMarkup(mathlist, 'width');
            result += mathListPropToMarkup(mathlist, 'height');
            // Type 'line'
            result += mathListPropToMarkup(mathlist, 'position');
            // Type 'overunder'
            result += mathlistToMarkup(mathlist.overscript, indent + '↑');
            result += mathlistToMarkup(mathlist.underscript, indent + '↓');
            result += mathlistToMarkup(mathlist.superscript, indent + '↑');
            result += mathlistToMarkup(mathlist.subscript, indent + '↓');
            result += mathlistToMarkup(mathlist.body, indent + '▶');
            result += mathlistToMarkup(mathlist.numer, indent + '\u25B2');
            result += mathlistToMarkup(mathlist.denom, indent + '\u25Bc');
            if (mathlist.array) {
                for (let i = 0; i < mathlist.array.length; i++) {
                    result +=
                        '<br>' +
                            indent +
                            '\u2317 row ' +
                            (i + 1) +
                            '/' +
                            mathlist.array.length;
                    for (let j = 0; j < mathlist.array[i].length; j++) {
                        result += mathlistToMarkup(mathlist.array[i][j], indent + '\u2317\u232A');
                    }
                }
            }
        }
        return result;
    }
    // Export the public interface for this module
    var MathLiveDebug = {
        mathlistToMarkup,
        spanToMarkup,
        spanToString,
        hasClass,
        getClasses,
        getProp,
        getStyle,
        getType,
        latexToAsciiMath,
        asciiMathToLatex,
        FUNCTIONS,
        MATH_SYMBOLS,
        TEXT_SYMBOLS,
        ENVIRONMENTS,
        MACROS,
        INLINE_SHORTCUTS,
        DEFAULT_KEYBINDINGS,
        getKeybindingMarkup,
    };

    function removeHighlight(element) {
        element.classList.remove('ML__highlight');
        if (element.children) {
            for (const child of element.children) {
                removeHighlight(child);
            }
        }
    }
    /**
     * Highlights the span corresponding to the specified atomID.
     *
     * This is used for text-to-speech with synchronized highlighting (read aloud)
     *
     * @category Read Aloud
     * @param {string} atomID
     *
     */
    function highlightAtomID(element, atomID) {
        var _a;
        if (!atomID || ((_a = element['dataset']) === null || _a === void 0 ? void 0 : _a.atomId) === atomID) {
            element.classList.add('ML__highlight');
            if (element.children && element.children.length > 0) {
                Array.from(element.children).forEach((x) => {
                    highlightAtomID(x);
                });
            }
        }
        else {
            element.classList.remove('ML__highlight');
            if (element.children && element.children.length > 0) {
                Array.from(element.children).forEach((x) => {
                    highlightAtomID(x, atomID);
                });
            }
        }
    }
    /**
     * "Read Aloud" is an asynchronous operation that reads the
     * reading with synchronized highlighting
     *
     * @param element - The DOM element to highlight
     * @param text - The text to speak
     */
    function defaultReadAloudHook(element, text, config) {
        var _a;
        if (!window) {
            return;
        }
        if (!config && window['mathlive']) {
            config = window['mathlive'].config;
        }
        config = config !== null && config !== void 0 ? config : {};
        if (config.speechEngine !== 'amazon') {
            console.warn('Use Amazon TTS Engine for synchronized highlighting');
            if (config.speakHook)
                config.speakHook(text, config);
            return;
        }
        if (!window['AWS']) {
            console.warn('AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk');
            return;
        }
        const polly = new window['AWS'].Polly({ apiVersion: '2016-06-10' });
        const params = {
            OutputFormat: 'json',
            VoiceId: config.speechEngineVoice || 'Joanna',
            Engine: 'standard',
            Text: text,
            TextType: 'ssml',
            SpeechMarkTypes: ['ssml'],
        };
        window['mathlive'] = (_a = window['mathlive']) !== null && _a !== void 0 ? _a : {};
        window['mathlive'].readAloudElement = element;
        const statusHook = config.onReadAloudStatus || window['mathlive'].onReadAloudStatus;
        // Request the mark points
        polly.synthesizeSpeech(params, (err, data) => {
            if (err) {
                console.warn('polly.synthesizeSpeech() error:', err, err.stack);
                return;
            }
            if (!data || !data.AudioStream) {
                console.log('polly.synthesizeSpeech():' + data);
                return;
            }
            const response = new TextDecoder('utf-8').decode(new Uint8Array(data.AudioStream));
            window['mathlive'].readAloudMarks = response
                .split('\n')
                .map((x) => (x ? JSON.parse(x) : {}));
            window['mathlive'].readAloudTokens = [];
            for (const mark of window['mathlive'].readAloudMarks) {
                if (mark.value) {
                    window['mathlive'].readAloudTokens.push(mark.value);
                }
            }
            window['mathlive'].readAloudCurrentMark = '';
            // Request the audio
            params.OutputFormat = 'mp3';
            params.SpeechMarkTypes = [];
            polly.synthesizeSpeech(params, function (err, data) {
                if (err) {
                    console.warn('polly.synthesizeSpeech(', text, ') error:', err, err.stack);
                    return;
                }
                if (!data || !data.AudioStream) {
                    return;
                }
                const uInt8Array = new Uint8Array(data.AudioStream);
                const blob = new Blob([uInt8Array.buffer], {
                    type: 'audio/mpeg',
                });
                const url = URL.createObjectURL(blob);
                if (!window['mathlive'].readAloudAudio) {
                    window['mathlive'].readAloudAudio = new Audio();
                    window['mathlive'].readAloudAudio.addEventListener('ended', () => {
                        const mathfield = window['mathlive'].readAloudMathField;
                        if (statusHook) {
                            statusHook(mathfield, 'ended');
                        }
                        if (mathfield) {
                            render(mathfield);
                            window['mathlive'].readAloudElement = null;
                            window['mathlive'].readAloudMathField = null;
                            window['mathlive'].readAloudTokens = [];
                            window['mathlive'].readAloudMarks = [];
                            window['mathlive'].readAloudCurrentMark = '';
                        }
                        else {
                            removeHighlight(window['mathlive'].readAloudElement);
                        }
                    });
                    window['mathlive'].readAloudAudio.addEventListener('timeupdate', () => {
                        let value = '';
                        // The target, the atom we're looking for, is the one matching the current audio
                        // plus 100 ms. By anticipating it a little bit, it feels more natural, otherwise it
                        // feels like the highlighting is trailing the audio.
                        const target = window['mathlive'].readAloudAudio.currentTime *
                            1000 +
                            100;
                        // Find the smallest element which is bigger than the target time
                        for (const mark of window['mathlive'].readAloudMarks) {
                            if (mark.time < target) {
                                value = mark.value;
                            }
                        }
                        if (window['mathlive'].readAloudCurrentMark !== value) {
                            window['mathlive'].readAloudCurrentToken = value;
                            if (value &&
                                value === window['mathlive'].readAloudFinalToken) {
                                window['mathlive'].readAloudAudio.pause();
                            }
                            else {
                                window['mathlive'].readAloudCurrentMark = value;
                                highlightAtomID(window['mathlive'].readAloudElement, window['mathlive'].readAloudCurrentMark);
                            }
                        }
                    });
                }
                else {
                    window['mathlive'].readAloudAudio.pause();
                }
                window['mathlive'].readAloudAudio.src = url;
                if (statusHook) {
                    statusHook(window['mathlive'].readAloudMathField, 'playing');
                }
                window['mathlive'].readAloudAudio.play();
            });
        });
    }
    /**
     * Returns the status of a Read Aloud operation (reading with synchronized
     * highlighting).
     *
     * Possible values are:
     * - `"ready"`
     * - `"playing"`
     * - `"paused"`
     * - `"unavailable"`
     *
     * **See** {@linkcode speak}
     * @category Read Aloud
     */
    function readAloudStatus() {
        var _a;
        if (!window)
            return 'unavailable';
        window['mathlive'] = (_a = window['mathlive']) !== null && _a !== void 0 ? _a : {};
        if (!window['mathlive'].readAloudAudio)
            return 'ready';
        if (window['mathlive'].readAloudAudio.paused)
            return 'paused';
        if (!window['mathlive'].readAloudAudio.ended)
            return 'playing';
        return 'ready';
    }
    /**
     * Pauses a read aloud operation if one is in progress.
     *
     * **See** {@linkcode speak}
     */
    function pauseReadAloud() {
        var _a;
        if (!window)
            return;
        window['mathlive'] = (_a = window['mathlive']) !== null && _a !== void 0 ? _a : {};
        if (window['mathlive'].readAloudAudio) {
            if (window['mathlive'].onReadAloudStatus) {
                window['mathlive'].onReadAloudStatus(window['mathlive'].readAloudMathField, 'paused');
            }
            window['mathlive'].readAloudAudio.pause();
        }
    }
    /**
     * Resumes a read aloud operation if one was paused.
     *
     * **See** {@linkcode speak}
     */
    function resumeReadAloud() {
        var _a;
        if (!window)
            return;
        window['mathlive'] = (_a = window['mathlive']) !== null && _a !== void 0 ? _a : {};
        if (window['mathlive'].readAloudAudio) {
            if (window['mathlive'].onReadAloudStatus) {
                window['mathlive'].onReadAloudStatus(window['mathlive'].readAloudMathField, 'playing');
            }
            window['mathlive'].readAloudAudio.play();
        }
    }
    /**
     * If a Read Aloud operation is in progress, read from a specified token
     *
     * **See** {@linkcode speak}
     *
     * @param count The number of tokens to read.
     */
    function playReadAloud(token, count) {
        var _a;
        if (!window)
            return;
        window['mathlive'] = (_a = window['mathlive']) !== null && _a !== void 0 ? _a : {};
        if (window['mathlive'].readAloudAudio) {
            let timeIndex = 0;
            window['mathlive'].readAloudFinalToken = null;
            if (token) {
                window['mathlive'].readAloudMarks =
                    window['mathlive'].readAloudMarks || [];
                for (const mark of window['mathlive'].readAloudMarks) {
                    if (mark.value === token) {
                        timeIndex = mark.time / 1000;
                    }
                }
                let tokenIndex = window['mathlive'].readAloudTokens.indexOf(token);
                if (tokenIndex >= 0) {
                    tokenIndex += count;
                    if (tokenIndex < window['mathlive'].readAloudTokens.length) {
                        window['mathlive'].readAloudFinalToken = tokenIndex;
                    }
                }
            }
            window['mathlive'].readAloudAudio.currentTime = timeIndex;
            if (window['mathlive'].onReadAloudStatus) {
                window['mathlive'].onReadAloudStatus(window['mathlive'].readAloudMathField, 'playing');
            }
            window['mathlive'].readAloudAudio.play();
        }
    }

    /// ^.*('\\.*').*
    // Frequency of a symbol.
    // String constants corresponding to frequency values,
    // which are the number of results returned by latexsearch.com
    // When the precise number is known, it is provided. Otherwise,
    // the following constants are used to denote an estimate.
    const CRYPTIC = 0;
    const ARCANE = 200;
    const RARE = 1200;
    const UNCOMMON = 2000;
    const COMMON = 3000;
    const SUPERCOMMON = 4000;
    /*
     * Set the metadata for the specified symbols
     *
     * metadata('Functions', ['\\sin', '\\cos'], COMMON, '$0{a}')
     *
     */
    function metadata(category, symbols, frequency = COMMON, template = '$0') {
        symbols.forEach((symbol) => {
            if (MATH_SYMBOLS[symbol]) {
                MATH_SYMBOLS[symbol].frequency = frequency;
                MATH_SYMBOLS[symbol].category = category;
                MATH_SYMBOLS[symbol].template = template.replace(/\$0/g, symbol);
            }
            if (FUNCTIONS[symbol]) {
                // Make a copy of the entry, since it could be shared by multiple
                // symbols
                FUNCTIONS[symbol] = {
                    ...FUNCTIONS[symbol],
                    frequency: frequency,
                    category: category,
                    template: template.replace(/\$0/g, symbol),
                };
            }
        });
    }
    metadata('Trigonometry', ['\\cos', '\\sin', '\\tan'], SUPERCOMMON);
    metadata('Trigonometry', [
        '\\arcsin',
        '\\arccos',
        '\\arctan',
        '\\arctg',
        '\\arcctg',
        '\\arcsec',
        '\\arccsc',
        '\\arsinh',
        '\\arcosh',
        '\\artanh',
        '\\arcsech',
        '\\arccsch',
        '\\arg',
        '\\ch',
        '\\cosec',
        '\\cosh',
        '\\cot',
        '\\cotg',
        '\\coth',
        '\\csc',
        '\\ctg',
        '\\cth',
        '\\lg',
        '\\lb',
        '\\sec',
        '\\sinh',
        '\\sh',
        '\\tanh',
        '\\tg',
        '\\th',
    ], UNCOMMON);
    metadata('Functions', ['\\ln', '\\log', '\\exp', '\\lim'], SUPERCOMMON);
    metadata('Functions', ['\\dim', '\\ker', '\\deg', '\\det', '\\mod', '\\min', '\\max'], COMMON);
    metadata('Functions', ['\\hom'], RARE);
    metadata('Decoration', ['\\rule'], ARCANE, '$0{2em}{1em}');
    metadata('Decoration', ['\\color', '\\textcolor'], ARCANE, '{$0{m0}A}{$0{m1}B}{$0{m2}C }{$0{m3}a}{$0{m4}b}{$0{m5}c}{$0{m6}8}');
    metadata('Decoration', ['\\overline', '\\underline'], COMMON, '$0{\\placeholder{}}');
    metadata('Decoration', ['\\enclose'], RARE, '\\enclose{updiagonalstrike,roundedbox}[1px solid red, mathbackground="#fbc0bd"]{x=0}');
    metadata('Decoration', ['\\fcolorbox'], RARE, '\\fcolorbox{#cd0030}{#ffd400}{\\unicode{"2B1A}}');
    metadata('Decoration', ['\\colorbox'], RARE, '\\colorbox{#fbc0bd}{\\unicode{"2B1A}}');
    metadata('Decoration', ['\\boxed', '\\cancel', '\\bcancel', '\\xcancel'], RARE, '$0{\\placeholder{}}');
    metadata('Decoration', ['\\bbox'], RARE, '\\bbox[#ffd400, solid 2px #ffd400]{\\unicode{"2B1A}}');
    metadata('Styling', ['\\mathbb'], SUPERCOMMON, '$0{Don Knuth}');
    metadata('Styling', [
        '\\textbf',
        '\\textup',
        '\\textit',
        '\\textrm',
        '\\textsf',
        '\\texttt',
        '\\textnormal',
        '\\textmd',
        '\\textsl',
        '\\textsc',
        '\\mathsf',
        '\\mathtt',
        '\\mathrm',
        '\\mathfrak',
        '\\mathcal',
        '\\mathscr',
        '\\mathbf',
        '\\mathmd',
        '\\mathit',
        '\\text',
        '\\mbox',
        '\\Bbb',
        '\\bold',
        '\\bm',
        '\\boldsymbol',
    ], COMMON, '$0{Don Knuth}');
    metadata('Styling', [
        '\\frak',
        '\\tt',
        '\\bf',
        '\\it',
        '\\rmfamily',
        '\\sffamily',
        '\\ttfamily',
        '\\class',
        '\\cssId',
    ], RARE, '{$0 Don Knuth}');
    metadata('Styling', ['\\bfseries', '\\mdseries', '\\upshape', '\\slshape', '\\scshape'], RARE, '\\text{$0 Don Knuth}');
    metadata('Styling', ['\\class', '\\cssId'], RARE, '$0{testIdentifier}{Don Knuth}');
    // Note: In LaTeX, \fontseries, \fontfamily, \fontshape are applicable to
    // text mode only
    metadata('Styling', ['\\fontseries'], RARE, '\\text{$0{b}Don Knuth}');
    metadata('Styling', ['\\fontfamily'], RARE, '\\text{$0{cmtt}Don Knuth}');
    metadata('Styling', ['\\fontshape'], RARE, '\\text{$0{sc}Don Knuth}');
    metadata('Styling', ['\\selectfont'], RARE, '\\text{$0}'); // no-op, but only valid in text mode
    metadata('Styling', ['\\emph'], RARE, 'Don$0{Knuth}');
    metadata('Styling', ['\\em'], RARE, 'Don{$0 Knuth}');
    metadata('Layout', [
        '\\mathop',
        '\\mathbin',
        '\\mathrel',
        '\\mathopen',
        '\\mathclose',
        '\\mathpunct',
        '\\mathord',
        '\\mathinner',
        '\\operatorname',
        '\\operatorname*',
    ], RARE, 'x=$0{arg}=0');
    metadata('Layout', ['\\middle'], RARE, '\\left\\{x$0|x>0\\right\\}');
    metadata('Layout', ['\\overset', '\\underset', '\\stackrel', '\\stackbin'], RARE, '$0{arg}{x=0}');
    metadata('Layout', ['\\rlap', '\\mathrlap'], RARE, '$0{/}0');
    metadata('Layout', ['\\llap', '\\mathllap'], RARE, 'o$0{/}');
    metadata('Fractions', ['\\frac'], SUPERCOMMON, '$0{\\placeholder{}}{\\placeholder{}}');
    metadata('Fractions', [
        '\\binom',
        '\\dfrac',
        '\\tfrac',
        '\\dbinom',
        '\\tbinom',
        '\\pdiff',
        '\\cfrac',
    ], RARE, '$0{\\placeholder{}}{\\placeholder{}}');
    metadata('Fractions', ['\\over', '\\atop', '\\choose'], RARE, '\\unicode{"2B1A} $0 \\unicode{"2B1A}');
    metadata('Fractions', ['\\overwithdelims', '\\atopwithdelims'], RARE, '{\\unicode{"2B1A} $0{\\lbrace}{\\rbrace} \\unicode{"2B1A}}');
    metadata('Extensible Operators', ['\\sum', '\\prod', '\\bigcap', '\\bigcup', '\\int'], SUPERCOMMON);
    metadata('Extensible Operators', ['\\bigoplus', '\\smallint', '\\iint', '\\oint'], COMMON);
    metadata('Extensible Operators', [
        '\\bigwedge',
        '\\bigvee',
        '\\coprod',
        '\\bigsqcup',
        '\\bigotimes',
        '\\bigodot',
        '\\biguplus',
        '\\intop',
        '\\sqcup',
        '\\sqcap',
        '\\uplus',
        '\\wr',
        '\\Cap',
        '\\Cup',
        '\\doublecap',
        '\\doublecup',
        '\\amalg',
        '\\iiint',
        '\\oiint',
        '\\oiiint',
        '\\intclockwise',
        '\\varointclockwise',
        '\\ointctrclockwise',
        '\\intctrclockwise',
    ], RARE);
    metadata('Accents', ['\\vec'], SUPERCOMMON);
    metadata('Accents', ['\\bar', '\\ddot', '\\acute', '\\tilde', '\\check'], COMMON, '$0{\\placeholder{}}');
    metadata('Accents', ['\\^', '\\`', "\\'"], RARE, '$0{e}');
    metadata('Accents', ['\\c'], RARE, '$0{c}');
    metadata('Accents', ['\\~'], RARE, '$0{n}');
    metadata('Accents', ['\\mathring', '\\hat', '\\dot', '\\breve', '\\grave'], RARE, '$0{\\placeholder{}}');
    metadata('Extensible Symbols', [
        '\\overrightarrow',
        '\\overleftarrow',
        '\\Overrightarrow',
        '\\overleftharpoon',
        '\\overrightharpoon',
        '\\overleftrightarrow',
        '\\overbrace',
        '\\overlinesegment',
        '\\overgroup',
        '\\widehat',
        '\\widecheck',
        '\\widetilde',
    ], COMMON, '$0{ABC}');
    metadata('Extensible Symbols', [
        '\\underrightarrow',
        '\\underleftarrow',
        '\\underleftrightarrow',
        '\\underbrace',
        '\\underlinesegment',
        '\\undergroup',
        '\\utilde',
    ], COMMON, '$0{ABC}');
    metadata('Sizing', [
        '\\tiny',
        '\\scriptsize',
        '\\footnotesize',
        '\\small',
        '\\normalsize',
        '\\large',
        '\\Large',
        '\\LARGE',
        '\\huge',
        '\\Huge',
    ], RARE, '$0{x=0}');
    metadata('Sizing', ['\\big', '\\Big', '\\bigg', '\\Bigg'], RARE, '$0($0)');
    metadata('Sizing', ['\\bigl', '\\Bigl', '\\biggl', '\\Biggl'], RARE, '$0(');
    metadata('Sizing', ['\\bigr', '\\Bigr', '\\biggr', '\\Biggr'], RARE, '$0)');
    metadata('Sizing', ['\\bigm', '\\Bigm', '\\biggm', '\\Biggm'], RARE, '$0|');
    metadata('Letterlike Symbols', [
        '\\nabla',
        '\\partial',
        '\\doubleStruckCapitalN',
        '\\N',
        '\\doubleStruckCapitalR',
        '\\R',
        '\\doubleStruckCapitalQ',
        '\\Q',
        '\\doubleStruckCapitalC',
        '\\C',
        '\\doubleStruckCapitalZ',
        '\\Z',
        '\\exponentialE',
        '\\forall',
        '\\exists',
        '\\nexists',
        '\\$',
        '\\%',
        '\\And',
        '\\degree',
    ], SUPERCOMMON);
    metadata('Letterlike Symbols', [
        '\\doubleStruckCapitalP',
        '\\P',
        '\\ell',
        '\\hbar',
        '\\hslash',
        '\\imath',
        '\\jmath',
        '\\imaginaryI',
        '\\imaginaryJ',
        '\\differentialD',
        '\\rd',
        '\\capitalDifferentialD',
        '\\rD',
        '\\differencedelta',
        '\\mid',
        '@',
        '\\Re',
        '\\Im',
    ], COMMON);
    metadata('Letterlike Symbols', [
        '\\top',
        '\\bot',
        '\\scriptCapitalE',
        '\\scriptCapitalH',
        '\\scriptCapitalL',
        '\\gothicCapitalC',
        '\\gothicCapitalH',
        '\\gothicCapitalI',
        '\\gothicCapitalR',
        '\\Bbbk',
        '\\Finv',
        '\\Game',
        '\\wp',
        '\\eth',
        '\\mho',
        '\\pounds',
        '\\yen',
        '\\euro',
    ], RARE);
    metadata('Crosses', ['\\dagger', '\\dag'], SUPERCOMMON);
    metadata('Crosses', ['\\ddag', '\\ddagger', '\\maltese', '\\textdagger', '\\textdaggerdbl'], RARE);
    metadata('Various', [
        '\\checkmark',
        '\\diagup',
        '\\diagdown',
        '\\angle',
        '\\measuredangle',
        '\\sphericalangle',
        '\\prime',
        '\\doubleprime',
        '\\backprime',
        '\\backdoubleprime',
        '\\sharp',
        '\\flat',
        '\\natural',
        '\\&',
        '\\#',
        '\\clubsuit',
        '\\spadesuit',
        '\\diamondsuit',
        '\\heartsuit',
        '\\backslash',
        '\\infty',
        '/',
        '\\_',
        '\\/',
        '|',
        "'",
    ], RARE);
    metadata('Various', ['\\unicode'], RARE, '$0{"2B1A}');
    metadata('Arrows', ['\\longrightarrow', '\\rightarrow', '\\Longrightarrow', '\\Rightarrow'], SUPERCOMMON);
    metadata('Arrows', [
        '\\longmapsto',
        '\\mapsto',
        '\\Longleftrightarrow',
        '\\rightleftarrows',
        '\\leftarrow',
        '\\curvearrowleft',
        '\\uparrow',
        '\\downarrow',
        '\\hookrightarrow',
        '\\rightharpoonup',
        '\\rightleftharpoons',
    ], COMMON);
    metadata('Arrows', [
        '\\Leftarrow',
        '\\longleftrightarrow',
        '\\longleftarrow',
        '\\Longleftarrow',
        '\\searrow',
        '\\nearrow',
        '\\swarrow',
        '\\nwarrow',
        '\\Uparrow',
        '\\Downarrow',
        '\\updownarrow',
        '\\Updownarrow',
        '\\hookleftarrow',
        '\\leftharpoonup',
        '\\leftharpoondown',
        '\\rightharpoondown',
        '\\leftrightarrows',
        '\\dashrightarrow',
        '\\dashleftarrow',
        '\\leftleftarrows',
        '\\Lleftarrow',
        '\\twoheadleftarrow',
        '\\leftarrowtail',
        '\\looparrowleft',
        '\\leftrightharpoons',
        '\\circlearrowleft',
        '\\Lsh',
        '\\upuparrows',
        '\\downharpoonleft',
        '\\multimap',
        '\\leftrightsquigarrow',
        '\\twoheadrightarrow',
        '\\rightarrowtail',
        '\\looparrowright',
        '\\curvearrowright',
        '\\circlearrowright',
        '\\Rsh',
        '\\downdownarrows',
        '\\upharpoonright',
        '\\downharpoonright',
        '\\rightsquigarrow',
        '\\leadsto',
        '\\Rrightarrow',
        '\\restriction',
    ], RARE);
    metadata('Arrows', ['\\upharpoonleft', '\\rightrightarrows'], CRYPTIC);
    // AMS Negated Arrows
    metadata('Negated Arrows', [
        '\\nrightarrow',
        '\\nRightarrow',
        '\\nleftrightarrow',
        '\\nLeftrightarrow',
        '\\nleftarrow',
        '\\nLeftarrow',
    ], RARE);
    metadata('Extensible Symbols', [
        '\\xrightarrow',
        '\\xleftarrow',
        '\\xRightarrow',
        '\\xLeftarrow',
        '\\xleftharpoonup',
        '\\xleftharpoondown',
        '\\xrightharpoonup',
        '\\xrightharpoondown',
        '\\xlongequal',
        '\\xtwoheadleftarrow',
        '\\xtwoheadrightarrow',
        '\\xleftrightarrow',
        '\\xLeftrightarrow',
        '\\xrightleftharpoons',
        '\\xleftrightharpoons',
        '\\xhookleftarrow',
        '\\xhookrightarrow',
        '\\xmapsto',
        '\\xtofrom',
        '\\xrightleftarrows',
        '\\xrightequilibrium',
        '\\xleftequilibrium',
    ], RARE, '$0[below]{above}=0');
    // AMS Negated Binary Relations
    metadata('Negated Relations', [
        '\\nless',
        '\\nleqslant',
        '\\lneq',
        '\\lneqq',
        '\\nleqq',
        '\\unlhd',
        '\\unrhd',
        '\\lvertneqq',
        '\\lnsim',
        '\\lnapprox',
        '\\nprec',
        '\\npreceq',
        '\\precnsim',
        '\\precnapprox',
        '\\nsim',
        '\\nshortmid',
        '\\nmid',
        '\\nvdash',
        '\\nvDash',
        '\\ngtr',
        '\\ngeqslant',
        '\\ngeqq',
        '\\gneq',
        '\\gneqq',
        '\\gvertneqq',
        '\\gnsim',
        '\\nsucc',
        '\\succnsim',
        '\\ncong',
        '\\nshortparallel',
        '\\nparallel',
        '\\nVDash',
        '\\nVdash',
        '\\precneqq',
        '\\succneqq',
        '\\gnapprox',
        '\\succnapprox',
        '\\nsucceq',
    ], RARE);
    // AMS Hebrew
    metadata('Hebrew', ['\\aleph', '\\beth', '\\daleth', '\\gimel'], RARE);
    metadata('Fences', [
        '\\lbrace',
        '\\rbrace',
        '\\vert',
        '\\Vert',
        '\\{',
        '\\}',
        '(',
        ')',
        '[',
        ']',
    ], SUPERCOMMON);
    metadata('Fences', [
        '\\langle',
        '\\rangle',
        '\\lfloor',
        '\\rfloor',
        '\\lceil',
        '\\rceil',
        '\\mvert',
        '\\|',
        '\\mVert',
    ], COMMON);
    metadata('Fences', [
        '\\lvert',
        '\\rvert',
        '\\lVert',
        '\\rVert',
        '\\lbrack',
        '\\rbrack',
        '\\ulcorner',
        '\\urcorner',
        '\\llcorner',
        '\\lrcorner',
        '\\lgroup',
        '\\rgroup',
        '\\lmoustache',
        '\\rmoustache',
    ], RARE);
    metadata('Relations', ['=', '\\ne', '\\neq', '<', '>', '\\leqslant', '\\geqslant', '\\approx'], SUPERCOMMON);
    metadata('Relations', [
        '\\lt',
        '\\gt',
        '\\le',
        '\\ge',
        '\\leq',
        '\\geq',
        '\\gg',
        '\\cong',
        '\\equiv',
        '\\prec',
        '\\preceq',
        '\\succ',
        '\\perp',
        '\\parallel',
        '\\propto',
        '\\smile',
        '\\frown',
        '\\sim',
        '\\gtrsim',
    ], COMMON);
    metadata('Relations', [
        '\\coloneq',
        '\\succeq',
        '\\approxeq',
        '\\thickapprox',
        '\\lessapprox',
        '\\gtrapprox',
        '\\precapprox',
        '\\succapprox',
        '\\thicksim',
        '\\succsim',
        '\\precsim',
        '\\backsim',
        '\\eqsim',
        '\\backsimeq',
        '\\simeq',
        '\\lesssim',
        '\\nleq',
        '\\ngeq',
        '\\smallsmile',
        '\\smallfrown',
        '\\bowtie',
        '\\asymp',
        '\\leqq',
        '\\eqslantless',
        '\\ll',
        '\\lll',
        '\\lessgtr',
        '\\lesseqgtr',
        '\\lesseqqgtr',
        '\\risingdotseq',
        '\\fallingdotseq',
        '\\preccurlyeq',
        '\\curlyeqprec',
        '\\vDash',
        '\\Vvdash',
        '\\bumpeq',
        '\\Bumpeq',
        '\\geqq',
        '\\eqslantgtr',
        '\\ggg',
        '\\gtrless',
        '\\gtreqless',
        '\\gtreqqless',
        '\\succcurlyeq',
        '\\curlyeqsucc',
        '\\Vdash',
        '\\shortmid',
        '\\shortparallel',
        '\\between',
        '\\pitchfork',
        '\\varpropto',
        '\\backepsilon',
        '\\llless',
        '\\gggtr',
        '\\lhd',
        '\\rhd',
        '\\Join',
        '\\doteq',
        '\\doteqdot',
        '\\Doteq',
        '\\eqcirc',
        '\\circeq',
        '\\lessdot',
        '\\gtrdot',
        '\\measeq',
        '\\eqdef',
        '\\questeq',
    ], RARE);
    metadata('Logic', ['\\leftrightarrow', '\\Leftrightarrow', '\\to'], SUPERCOMMON);
    metadata('Logic', ['\\models', '\\vdash'], COMMON);
    metadata('Logic', [
        '\\therefore',
        '\\because',
        '\\implies',
        '\\gets',
        '\\dashv',
        '\\impliedby',
        '\\biconditional',
        '\\roundimplies',
    ], RARE);
    metadata('Operators', ['+', '-', '*', '\\cdot'], SUPERCOMMON);
    metadata('Operators', ['\\sqrt'], SUPERCOMMON, '$0{\\placeholder{}}');
    metadata('Operators', ['\\pm', '\\mp', '\\times', '\\div', '\\surd'], COMMON);
    metadata('Operators', [
        '\\ltimes',
        '\\rtimes',
        '\\leftthreetimes',
        '\\rightthreetimes',
        '\\intercal',
        '\\dotplus',
        '\\centerdot',
        '\\doublebarwedge',
        '\\divideontimes',
        '\\divides',
    ], RARE);
    metadata('Logic', ['\\wedge', '\\vee', '\\neg'], SUPERCOMMON);
    metadata('Logic', ['\\lnot'], COMMON);
    metadata('Logic', [
        '\\land',
        '\\lor',
        '\\barwedge',
        '\\veebar',
        '\\nor',
        '\\curlywedge',
        '\\curlyvee',
    ], RARE);
    metadata('Greek', [
        '\\alpha',
        '\\beta',
        '\\gamma',
        '\\delta',
        '\\epsilon',
        '\\varepsilon',
        '\\zeta',
        '\\eta',
        '\\theta',
        '\\vartheta',
        '\\iota',
        '\\kappa',
        '\\varkappa',
        '\\lambda',
        '\\mu',
        '\\nu',
        '\\xi',
        '\\pi',
        '\\varpi',
        '\\rho',
        '\\varrho',
        '\\sigma',
        '\\varsigma',
        '\\tau',
        '\\phi',
        '\\varphi',
        '\\upsilon',
        '\\chi',
        '\\psi',
        '\\omega',
        '\\Gamma',
        '\\Delta',
        '\\Theta',
        '\\Lambda',
        '\\Xi',
        '\\Pi',
        '\\Sigma',
        '\\Upsilon',
        '\\Phi',
        '\\Psi',
        '\\Omega',
        '\\digamma',
        '\\omicron',
    ], COMMON);
    metadata('Sets', [
        '\\emptyset',
        '\\varnothing',
        '\\cap',
        '\\cup',
        '\\in',
        '\\notin',
        '\\subset',
        '\\supset',
        '\\subseteq',
        '\\supseteq',
        '\\sqsubseteq',
    ], SUPERCOMMON);
    metadata('Sets', [
        '\\setminus',
        '\\not',
        '\\ni',
        '\\sqsupseteq',
        '\\nsupseteqq',
        '\\supsetneq',
        '\\varsupsetneq',
        '\\supsetneqq',
        '\\varsupsetneqq',
    ], COMMON);
    metadata('Sets', [
        '\\smallsetminus',
        '\\complement',
        '\\owns',
        '\\subsetneq',
        '\\varsubsetneq',
        '\\subsetneqq',
        '\\varsubsetneqq',
        '\\nsubset',
        '\\nsupset',
        '\\nsubseteq',
        '\\nsupseteq',
        '\\nsubseteqq',
        '\\subseteqq',
        '\\Subset',
        '\\sqsubset',
        '\\supseteqq',
        '\\Supset',
        '\\sqsupset',
    ], RARE);
    metadata('Spacing', ['\\space, \\quad', '\\qquad'], COMMON, '\\unicode{"203A}$0\\unicode{"2039}');
    metadata('Spacing', ['\\!', '\\,', '\\:', '\\;', '\\enskip', '\\enspace'], RARE, '\\unicode{"203A}$0\\unicode{"2039}');
    metadata('Spacing', ['\\hspace', '\\hspace*'], RARE, '\\unicode{"203A}$0{1em}\\unicode{"2039}');
    metadata('Punctuation', [
        '\\colon',
        '\\cdotp',
        '\\ldots',
        '\\cdots',
        '\\ddots',
        '\\vdots',
        '?',
        '!',
        ':',
        '"',
        ',',
        '.',
        ';',
    ], COMMON);
    metadata('Punctuation', ['\\mathellipsis', '\\ldotp', '\\Colon'], RARE);
    metadata('Boxes', ['\\square', '\\Box'], COMMON);
    metadata('Boxes', ['\\blacksquare', '\\boxminus', '\\boxplus', '\\boxtimes', '\\boxdot'], RARE);
    metadata('Circles', ['\\circ', '\\bullet', '\\circleddash', '\\oplus', '\\otimes'], COMMON);
    metadata('Circles', [
        '\\bigcirc',
        '\\circledast',
        '\\ominus',
        '\\circledcirc',
        '\\oslash',
        '\\circledS',
        '\\circledR',
        '\\odot',
    ], RARE);
    metadata('Triangles', ['\\triangle', '\\triangleq'], COMMON);
    metadata('Triangles', [
        '\\bigtriangleup',
        '\\vartriangle',
        '\\triangledown',
        '\\bigtriangledown',
        '\\triangleleft',
        '\\vartriangleleft',
        '\\trianglelefteq',
        '\\ntriangleleft',
        '\\ntrianglelefteq',
        '\\triangleright',
        '\\vartriangleright',
        '\\trianglerighteq',
        '\\ntriangleright',
        '\\ntrianglerighteq',
        '\\blacktriangle',
        '\\blacktriangledown',
        '\\blacktriangleleft',
        '\\blacktriangleright',
    ], RARE);
    metadata('Shapes', ['\\ast', '\\star'], COMMON);
    metadata('Shapes', ['\\diamond', '\\Diamond', '\\lozenge', '\\blacklozenge', '\\bigstar'], RARE);

    // import { ErrorCode, Form, Expression, Dictionary } from './math-json/public';
    // import { parseLatex, emitLatex } from './math-json/math-json';
    // import { ParseLatexOptions, EmitLatexOptions } from './math-json/latex/public';
    function latexToMarkup$2(text, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.mathstyle = options.mathstyle || 'displaystyle';
        options.letterShapeStyle = options.letterShapeStyle || 'auto';
        options.macros = { ...MACROS, ...((_a = options.macros) !== null && _a !== void 0 ? _a : {}) };
        //
        // 1. Parse the formula and return a tree of atoms, e.g. 'genfrac'.
        //
        const atoms = parseString(text, 'math', null, options.macros, false, options.onError);
        //
        // 2. Transform the math atoms into elementary spans
        //    for example from genfrac to vlist.
        //
        let spans = decompose({
            mathstyle: MATHSTYLES[options.mathstyle],
            letterShapeStyle: options.letterShapeStyle,
        }, atoms);
        //
        // 3. Simplify by coalescing adjacent nodes
        //    for example, from <span>1</span><span>2</span>
        //    to <span>12</span>
        //
        spans = coalesce(spans);
        if (options.format === 'span')
            return spans;
        //
        // 4. Wrap the expression with struts
        //
        const wrapper = makeStruts(makeSpan(spans, 'ML__base'), 'ML__mathlive');
        //
        // 5. Generate markup
        //
        return wrapper.toMarkup();
    }
    function makeMathField(element, config) {
        var _a, _b;
        config = config !== null && config !== void 0 ? config : {};
        config.speakHook = (_a = config.speakHook) !== null && _a !== void 0 ? _a : defaultSpeakHook;
        config.readAloudHook = (_b = config.readAloudHook) !== null && _b !== void 0 ? _b : defaultReadAloudHook;
        return new MathfieldPrivate(getElement(element), config);
    }
    function latexToMathML(latex, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.macros = { ...MACROS, ...((_a = options.macros) !== null && _a !== void 0 ? _a : {}) };
        return atomsToMathML(parseString(latex, 'math', [], options.macros, false, options.onError), options);
    }
    function latexToAST(latex, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.macros = { ...MACROS, ...((_a = options.macros) !== null && _a !== void 0 ? _a : {}) };
        // return parseLatex(latex, options);
        return atomtoMathJson(parseString(latex, 'math', null, options.macros, false, options.onError), options);
    }
    function astToLatex(expr, options) {
        return jsonToLatex(typeof expr === 'string' ? JSON.parse(expr) : expr, options);
        // return emitLatex(expr, options);
    }
    // function latexToAST(
    //     latex: string,
    //     options?: ParseLatexOptions & {
    //         macros?: MacroDictionary;
    //         onError?: ErrorListener<ErrorCode>;
    //         form?: Form | Form[];
    //     }
    // ): Expression {
    //     options = options ?? {};
    //     options.macros = { ...MACROS, ...(options.macros ?? {}) };
    //     return parseLatex(latex, options);
    // }
    // function astToLatex(
    //     expr: Expression,
    //     options: EmitLatexOptions & {
    //         dictionary?: Dictionary;
    //         onError?: ErrorListener<ErrorCode>;
    //     }
    // ): string {
    //     return emitLatex(expr, options);
    // }
    function latexToSpeakableText(latex, options) {
        var _a;
        options = options !== null && options !== void 0 ? options : {};
        options.macros = (_a = options.macros) !== null && _a !== void 0 ? _a : {};
        Object.assign(options.macros, MACROS);
        const mathlist = parseString(latex, 'math', null, options.macros, false, options.onError);
        return atomToSpeakableText(mathlist, options);
    }
    function renderMathInDocument(options) {
        renderMathInElement$1(document.body, options);
    }
    function getElement(element) {
        if (typeof element === 'string') {
            const result = document.getElementById(element);
            if (result === null) {
                throw Error(`The element with ID "${element}" could not be found.`);
            }
            return result;
        }
        return element;
    }
    function renderMathInElement$1(element, options) {
        var _a, _b, _c, _d;
        options = options !== null && options !== void 0 ? options : {};
        options.renderToMarkup = (_a = options.renderToMarkup) !== null && _a !== void 0 ? _a : latexToMarkup$2;
        options.renderToMathML = (_b = options.renderToMathML) !== null && _b !== void 0 ? _b : latexToMathML;
        options.renderToSpeakableText = (_c = options.renderToSpeakableText) !== null && _c !== void 0 ? _c : latexToSpeakableText;
        options.macros = (_d = options.macros) !== null && _d !== void 0 ? _d : MACROS;
        AutoRender.renderMathInElement(getElement(element), options);
    }
    function validateNamespace(options) {
        if (typeof options.namespace === 'string') {
            if (!/^[a-z]+[-]?$/.test(options.namespace)) {
                throw Error('options.namespace must be a string of lowercase characters only');
            }
            if (!/-$/.test(options.namespace)) {
                options.namespace += '-';
            }
        }
    }
    function revertToOriginalContent(element, options) {
        var _a;
        if (element instanceof MathfieldPrivate) {
            element.$revertToOriginalContent();
        }
        else {
            // element is a pair: accessible span, math -- set it to the math part
            element = getElement(element).children[1];
            options = options !== null && options !== void 0 ? options : {};
            validateNamespace(options);
            const html = element.getAttribute('data-' + ((_a = options.namespace) !== null && _a !== void 0 ? _a : '') + 'original-content');
            element.innerHTML =
                typeof options.createHTML === 'function'
                    ? options.createHTML(html)
                    : html;
        }
    }
    function getOriginalContent(element, options) {
        var _a;
        if (element instanceof MathfieldPrivate) {
            return element.originalContent;
        }
        // element is a pair: accessible span, math -- set it to the math part
        element = getElement(element).children[1];
        options = options !== null && options !== void 0 ? options : {};
        validateNamespace(options);
        return element.getAttribute('data-' + ((_a = options.namespace) !== null && _a !== void 0 ? _a : '') + 'original-content');
    }
    // This SDK_VERSION variable will be replaced during the build process.
    const version = '0.55.0';
    var mathlive = {
        version,
        latexToMarkup: latexToMarkup$2,
        latexToMathML,
        latexToSpeakableText,
        latexToAST,
        astToLatex,
        makeMathField,
        renderMathInDocument,
        renderMathInElement: renderMathInElement$1,
        revertToOriginalContent,
        getOriginalContent,
        readAloud: defaultReadAloudHook,
        readAloudStatus,
        pauseReadAloud,
        resumeReadAloud,
        playReadAloud,
        debug: {
            getStyle: MathLiveDebug.getStyle,
            getType: MathLiveDebug.getType,
            spanToString: MathLiveDebug.spanToString,
            hasClass: MathLiveDebug.hasClass,
            latexToAsciiMath: MathLiveDebug.latexToAsciiMath,
            asciiMathToLatex: MathLiveDebug.asciiMathToLatex,
            FUNCTIONS: MathLiveDebug.FUNCTIONS,
            MATH_SYMBOLS: MathLiveDebug.MATH_SYMBOLS,
            TEXT_SYMBOLS: MathLiveDebug.TEXT_SYMBOLS,
            ENVIRONMENTS: MathLiveDebug.ENVIRONMENTS,
            MACROS: MathLiveDebug.MACROS,
            DEFAULT_KEYBINDINGS: MathLiveDebug.DEFAULT_KEYBINDINGS,
            getKeybindingMarkup: MathLiveDebug.getKeybindingMarkup,
        },
    };

    /* node_modules/svelte-fa/src/fa.svelte generated by Svelte v3.24.1 */

    const file$4 = "node_modules/svelte-fa/src/fa.svelte";

    // (104:0) {#if i[4]}
    function create_if_block(ctx) {
    	let svg;
    	let g1;
    	let g0;
    	let svg_viewBox_value;

    	function select_block_type(ctx, dirty) {
    		if (typeof /*i*/ ctx[8][4] == "string") return create_if_block_1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g1 = svg_element("g");
    			g0 = svg_element("g");
    			if_block.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			svg = claim_element(
    				nodes,
    				"svg",
    				{
    					id: true,
    					class: true,
    					style: true,
    					viewBox: true,
    					"aria-hidden": true,
    					role: true,
    					xmlns: true
    				},
    				1
    			);

    			var svg_nodes = children(svg);
    			g1 = claim_element(svg_nodes, "g", { transform: true }, 1);
    			var g1_nodes = children(g1);
    			g0 = claim_element(g1_nodes, "g", { transform: true }, 1);
    			var g0_nodes = children(g0);
    			if_block.l(g0_nodes);
    			g0_nodes.forEach(detach_dev);
    			g1_nodes.forEach(detach_dev);
    			svg_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(g0, "transform", /*transform*/ ctx[10]);
    			add_location(g0, file$4, 116, 6, 2052);
    			attr_dev(g1, "transform", "translate(256 256)");
    			add_location(g1, file$4, 113, 4, 2000);
    			attr_dev(svg, "id", /*id*/ ctx[1]);
    			attr_dev(svg, "class", /*clazz*/ ctx[0]);
    			attr_dev(svg, "style", /*s*/ ctx[9]);
    			attr_dev(svg, "viewBox", svg_viewBox_value = `0 0 ${/*i*/ ctx[8][0]} ${/*i*/ ctx[8][1]}`);
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "img");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$4, 104, 2, 1830);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g1);
    			append_dev(g1, g0);
    			if_block.m(g0, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(g0, null);
    				}
    			}

    			if (dirty & /*transform*/ 1024) {
    				attr_dev(g0, "transform", /*transform*/ ctx[10]);
    			}

    			if (dirty & /*id*/ 2) {
    				attr_dev(svg, "id", /*id*/ ctx[1]);
    			}

    			if (dirty & /*clazz*/ 1) {
    				attr_dev(svg, "class", /*clazz*/ ctx[0]);
    			}

    			if (dirty & /*s*/ 512) {
    				attr_dev(svg, "style", /*s*/ ctx[9]);
    			}

    			if (dirty & /*i*/ 256 && svg_viewBox_value !== (svg_viewBox_value = `0 0 ${/*i*/ ctx[8][0]} ${/*i*/ ctx[8][1]}`)) {
    				attr_dev(svg, "viewBox", svg_viewBox_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(104:0) {#if i[4]}",
    		ctx
    	});

    	return block;
    }

    // (124:8) {:else}
    function create_else_block(ctx) {
    	let path0;
    	let path0_d_value;
    	let path0_fill_value;
    	let path0_fill_opacity_value;
    	let path1;
    	let path1_d_value;
    	let path1_fill_value;
    	let path1_fill_opacity_value;

    	const block = {
    		c: function create() {
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			this.h();
    		},
    		l: function claim(nodes) {
    			path0 = claim_element(
    				nodes,
    				"path",
    				{
    					d: true,
    					fill: true,
    					"fill-opacity": true,
    					transform: true
    				},
    				1
    			);

    			children(path0).forEach(detach_dev);

    			path1 = claim_element(
    				nodes,
    				"path",
    				{
    					d: true,
    					fill: true,
    					"fill-opacity": true,
    					transform: true
    				},
    				1
    			);

    			children(path1).forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(path0, "d", path0_d_value = /*i*/ ctx[8][4][0]);
    			attr_dev(path0, "fill", path0_fill_value = /*secondaryColor*/ ctx[4] || /*color*/ ctx[2] || "currentColor");

    			attr_dev(path0, "fill-opacity", path0_fill_opacity_value = /*swapOpacity*/ ctx[7] != false
    			? /*primaryOpacity*/ ctx[5]
    			: /*secondaryOpacity*/ ctx[6]);

    			attr_dev(path0, "transform", "translate(-256 -256)");
    			add_location(path0, file$4, 124, 10, 2286);
    			attr_dev(path1, "d", path1_d_value = /*i*/ ctx[8][4][1]);
    			attr_dev(path1, "fill", path1_fill_value = /*primaryColor*/ ctx[3] || /*color*/ ctx[2] || "currentColor");

    			attr_dev(path1, "fill-opacity", path1_fill_opacity_value = /*swapOpacity*/ ctx[7] != false
    			? /*secondaryOpacity*/ ctx[6]
    			: /*primaryOpacity*/ ctx[5]);

    			attr_dev(path1, "transform", "translate(-256 -256)");
    			add_location(path1, file$4, 130, 10, 2529);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path0, anchor);
    			insert_dev(target, path1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*i*/ 256 && path0_d_value !== (path0_d_value = /*i*/ ctx[8][4][0])) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (dirty & /*secondaryColor, color*/ 20 && path0_fill_value !== (path0_fill_value = /*secondaryColor*/ ctx[4] || /*color*/ ctx[2] || "currentColor")) {
    				attr_dev(path0, "fill", path0_fill_value);
    			}

    			if (dirty & /*swapOpacity, primaryOpacity, secondaryOpacity*/ 224 && path0_fill_opacity_value !== (path0_fill_opacity_value = /*swapOpacity*/ ctx[7] != false
    			? /*primaryOpacity*/ ctx[5]
    			: /*secondaryOpacity*/ ctx[6])) {
    				attr_dev(path0, "fill-opacity", path0_fill_opacity_value);
    			}

    			if (dirty & /*i*/ 256 && path1_d_value !== (path1_d_value = /*i*/ ctx[8][4][1])) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (dirty & /*primaryColor, color*/ 12 && path1_fill_value !== (path1_fill_value = /*primaryColor*/ ctx[3] || /*color*/ ctx[2] || "currentColor")) {
    				attr_dev(path1, "fill", path1_fill_value);
    			}

    			if (dirty & /*swapOpacity, secondaryOpacity, primaryOpacity*/ 224 && path1_fill_opacity_value !== (path1_fill_opacity_value = /*swapOpacity*/ ctx[7] != false
    			? /*secondaryOpacity*/ ctx[6]
    			: /*primaryOpacity*/ ctx[5])) {
    				attr_dev(path1, "fill-opacity", path1_fill_opacity_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path0);
    			if (detaching) detach_dev(path1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(124:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (118:8) {#if typeof i[4] == 'string'}
    function create_if_block_1(ctx) {
    	let path;
    	let path_d_value;
    	let path_fill_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			this.h();
    		},
    		l: function claim(nodes) {
    			path = claim_element(nodes, "path", { d: true, fill: true, transform: true }, 1);
    			children(path).forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(path, "d", path_d_value = /*i*/ ctx[8][4]);
    			attr_dev(path, "fill", path_fill_value = /*color*/ ctx[2] || /*primaryColor*/ ctx[3] || "currentColor");
    			attr_dev(path, "transform", "translate(-256 -256)");
    			add_location(path, file$4, 118, 10, 2116);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*i*/ 256 && path_d_value !== (path_d_value = /*i*/ ctx[8][4])) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty & /*color, primaryColor*/ 12 && path_fill_value !== (path_fill_value = /*color*/ ctx[2] || /*primaryColor*/ ctx[3] || "currentColor")) {
    				attr_dev(path, "fill", path_fill_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(118:8) {#if typeof i[4] == 'string'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let if_block_anchor;
    	let if_block = /*i*/ ctx[8][4] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (if_block) if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*i*/ ctx[8][4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { class: clazz = "" } = $$props;
    	let { id = "" } = $$props;
    	let { style = "" } = $$props;
    	let { icon } = $$props;
    	let { fw = false } = $$props;
    	let { flip = false } = $$props;
    	let { pull = false } = $$props;
    	let { rotate = false } = $$props;
    	let { size = false } = $$props;
    	let { color = "" } = $$props;
    	let { primaryColor = "" } = $$props;
    	let { secondaryColor = "" } = $$props;
    	let { primaryOpacity = 1 } = $$props;
    	let { secondaryOpacity = 0.4 } = $$props;
    	let { swapOpacity = false } = $$props;
    	let i;
    	let s;
    	let transform;

    	const writable_props = [
    		"class",
    		"id",
    		"style",
    		"icon",
    		"fw",
    		"flip",
    		"pull",
    		"rotate",
    		"size",
    		"color",
    		"primaryColor",
    		"secondaryColor",
    		"primaryOpacity",
    		"secondaryOpacity",
    		"swapOpacity"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Fa> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Fa", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("class" in $$props) $$invalidate(0, clazz = $$props.class);
    		if ("id" in $$props) $$invalidate(1, id = $$props.id);
    		if ("style" in $$props) $$invalidate(11, style = $$props.style);
    		if ("icon" in $$props) $$invalidate(12, icon = $$props.icon);
    		if ("fw" in $$props) $$invalidate(13, fw = $$props.fw);
    		if ("flip" in $$props) $$invalidate(14, flip = $$props.flip);
    		if ("pull" in $$props) $$invalidate(15, pull = $$props.pull);
    		if ("rotate" in $$props) $$invalidate(16, rotate = $$props.rotate);
    		if ("size" in $$props) $$invalidate(17, size = $$props.size);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("primaryColor" in $$props) $$invalidate(3, primaryColor = $$props.primaryColor);
    		if ("secondaryColor" in $$props) $$invalidate(4, secondaryColor = $$props.secondaryColor);
    		if ("primaryOpacity" in $$props) $$invalidate(5, primaryOpacity = $$props.primaryOpacity);
    		if ("secondaryOpacity" in $$props) $$invalidate(6, secondaryOpacity = $$props.secondaryOpacity);
    		if ("swapOpacity" in $$props) $$invalidate(7, swapOpacity = $$props.swapOpacity);
    	};

    	$$self.$capture_state = () => ({
    		clazz,
    		id,
    		style,
    		icon,
    		fw,
    		flip,
    		pull,
    		rotate,
    		size,
    		color,
    		primaryColor,
    		secondaryColor,
    		primaryOpacity,
    		secondaryOpacity,
    		swapOpacity,
    		i,
    		s,
    		transform
    	});

    	$$self.$inject_state = $$props => {
    		if ("clazz" in $$props) $$invalidate(0, clazz = $$props.clazz);
    		if ("id" in $$props) $$invalidate(1, id = $$props.id);
    		if ("style" in $$props) $$invalidate(11, style = $$props.style);
    		if ("icon" in $$props) $$invalidate(12, icon = $$props.icon);
    		if ("fw" in $$props) $$invalidate(13, fw = $$props.fw);
    		if ("flip" in $$props) $$invalidate(14, flip = $$props.flip);
    		if ("pull" in $$props) $$invalidate(15, pull = $$props.pull);
    		if ("rotate" in $$props) $$invalidate(16, rotate = $$props.rotate);
    		if ("size" in $$props) $$invalidate(17, size = $$props.size);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("primaryColor" in $$props) $$invalidate(3, primaryColor = $$props.primaryColor);
    		if ("secondaryColor" in $$props) $$invalidate(4, secondaryColor = $$props.secondaryColor);
    		if ("primaryOpacity" in $$props) $$invalidate(5, primaryOpacity = $$props.primaryOpacity);
    		if ("secondaryOpacity" in $$props) $$invalidate(6, secondaryOpacity = $$props.secondaryOpacity);
    		if ("swapOpacity" in $$props) $$invalidate(7, swapOpacity = $$props.swapOpacity);
    		if ("i" in $$props) $$invalidate(8, i = $$props.i);
    		if ("s" in $$props) $$invalidate(9, s = $$props.s);
    		if ("transform" in $$props) $$invalidate(10, transform = $$props.transform);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*icon*/ 4096) {
    			 $$invalidate(8, i = icon && icon.icon || [0, 0, "", [], ""]);
    		}

    		if ($$self.$$.dirty & /*fw, pull, size, style*/ 174080) {
    			 {
    				let float;
    				let width;
    				const height = "1em";
    				let lineHeight;
    				let fontSize;
    				let textAlign;
    				let verticalAlign = "-.125em";
    				const overflow = "visible";

    				if (fw) {
    					textAlign = "center";
    					width = "1.25em";
    				}

    				if (pull) {
    					float = pull;
    				}

    				if (size) {
    					if (size == "lg") {
    						fontSize = "1.33333em";
    						lineHeight = ".75em";
    						verticalAlign = "-.225em";
    					} else if (size == "xs") {
    						fontSize = ".75em";
    					} else if (size == "sm") {
    						fontSize = ".875em";
    					} else {
    						fontSize = size.replace("x", "em");
    					}
    				}

    				const styleObj = {
    					float,
    					width,
    					height,
    					"line-height": lineHeight,
    					"font-size": fontSize,
    					"text-align": textAlign,
    					"vertical-align": verticalAlign,
    					overflow
    				};

    				let styleStr = "";

    				for (const prop in styleObj) {
    					if (styleObj[prop]) {
    						styleStr += `${prop}:${styleObj[prop]};`;
    					}
    				}

    				$$invalidate(9, s = styleStr + style);
    			}
    		}

    		if ($$self.$$.dirty & /*flip, rotate*/ 81920) {
    			 {
    				let t = "";

    				if (flip) {
    					let flipX = 1;
    					let flipY = 1;

    					if (flip == "horizontal") {
    						flipX = -1;
    					} else if (flip == "vertical") {
    						flipY = -1;
    					} else {
    						flipX = flipY = -1;
    					}

    					t += ` scale(${flipX} ${flipY})`;
    				}

    				if (rotate) {
    					t += ` rotate(${rotate} 0 0)`;
    				}

    				$$invalidate(10, transform = t);
    			}
    		}
    	};

    	return [
    		clazz,
    		id,
    		color,
    		primaryColor,
    		secondaryColor,
    		primaryOpacity,
    		secondaryOpacity,
    		swapOpacity,
    		i,
    		s,
    		transform,
    		style,
    		icon,
    		fw,
    		flip,
    		pull,
    		rotate,
    		size
    	];
    }

    class Fa extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			class: 0,
    			id: 1,
    			style: 11,
    			icon: 12,
    			fw: 13,
    			flip: 14,
    			pull: 15,
    			rotate: 16,
    			size: 17,
    			color: 2,
    			primaryColor: 3,
    			secondaryColor: 4,
    			primaryOpacity: 5,
    			secondaryOpacity: 6,
    			swapOpacity: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Fa",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*icon*/ ctx[12] === undefined && !("icon" in props)) {
    			console.warn("<Fa> was created without expected prop 'icon'");
    		}
    	}

    	get class() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fw() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fw(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flip() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flip(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pull() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pull(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotate() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotate(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get primaryColor() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set primaryColor(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get secondaryColor() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set secondaryColor(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get primaryOpacity() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set primaryOpacity(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get secondaryOpacity() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set secondaryOpacity(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get swapOpacity() {
    		throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set swapOpacity(value) {
    		throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const primary='#6200ee';

    var faNewspaper = {
      prefix: 'fas',
      iconName: 'newspaper',
      icon: [576, 512, [], "f1ea", "M552 64H88c-13.255 0-24 10.745-24 24v8H24c-13.255 0-24 10.745-24 24v272c0 30.928 25.072 56 56 56h472c26.51 0 48-21.49 48-48V88c0-13.255-10.745-24-24-24zM56 400a8 8 0 0 1-8-8V144h16v248a8 8 0 0 1-8 8zm236-16H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm-208-96H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm0-96H140c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h360c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12z"]
    };

    /* src/FlipCard.svelte generated by Svelte v3.24.1 */

    const file$5 = "src/FlipCard.svelte";
    const get_back_slot_changes = dirty => ({});
    const get_back_slot_context = ctx => ({});
    const get_front_slot_changes = dirty => ({});
    const get_front_slot_context = ctx => ({});

    // (8:25) Pas de front
    function fallback_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Pas de front");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "Pas de front");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(8:25) Pas de front",
    		ctx
    	});

    	return block;
    }

    // (11:24) Pad de Back
    function fallback_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Pad de Back");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "Pad de Back");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(11:24) Pad de Back",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let t;
    	let div1;
    	let current;
    	const front_slot_template = /*$$slots*/ ctx[2].front;
    	const front_slot = create_slot(front_slot_template, ctx, /*$$scope*/ ctx[1], get_front_slot_context);
    	const front_slot_or_fallback = front_slot || fallback_block_1(ctx);
    	const back_slot_template = /*$$slots*/ ctx[2].back;
    	const back_slot = create_slot(back_slot_template, ctx, /*$$scope*/ ctx[1], get_back_slot_context);
    	const back_slot_or_fallback = back_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			if (front_slot_or_fallback) front_slot_or_fallback.c();
    			t = space();
    			div1 = element("div");
    			if (back_slot_or_fallback) back_slot_or_fallback.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div3 = claim_element(nodes, "DIV", { class: true });
    			var div3_nodes = children(div3);
    			div2 = claim_element(div3_nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			div0 = claim_element(div2_nodes, "DIV", { class: true });
    			var div0_nodes = children(div0);
    			if (front_slot_or_fallback) front_slot_or_fallback.l(div0_nodes);
    			div0_nodes.forEach(detach_dev);
    			t = claim_space(div2_nodes);
    			div1 = claim_element(div2_nodes, "DIV", { class: true });
    			var div1_nodes = children(div1);
    			if (back_slot_or_fallback) back_slot_or_fallback.l(div1_nodes);
    			div1_nodes.forEach(detach_dev);
    			div2_nodes.forEach(detach_dev);
    			div3_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div0, "class", "front svelte-1nrktq7");
    			add_location(div0, file$5, 6, 4, 104);
    			attr_dev(div1, "class", "back svelte-1nrktq7");
    			add_location(div1, file$5, 9, 4, 184);
    			attr_dev(div2, "class", "flipper svelte-1nrktq7");
    			add_location(div2, file$5, 5, 2, 78);
    			attr_dev(div3, "class", "card svelte-1nrktq7");
    			toggle_class(div3, "flip", /*flip*/ ctx[0]);
    			add_location(div3, file$5, 4, 0, 46);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);

    			if (front_slot_or_fallback) {
    				front_slot_or_fallback.m(div0, null);
    			}

    			append_dev(div2, t);
    			append_dev(div2, div1);

    			if (back_slot_or_fallback) {
    				back_slot_or_fallback.m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (front_slot) {
    				if (front_slot.p && dirty & /*$$scope*/ 2) {
    					update_slot(front_slot, front_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_front_slot_changes, get_front_slot_context);
    				}
    			}

    			if (back_slot) {
    				if (back_slot.p && dirty & /*$$scope*/ 2) {
    					update_slot(back_slot, back_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_back_slot_changes, get_back_slot_context);
    				}
    			}

    			if (dirty & /*flip*/ 1) {
    				toggle_class(div3, "flip", /*flip*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(front_slot_or_fallback, local);
    			transition_in(back_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(front_slot_or_fallback, local);
    			transition_out(back_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (front_slot_or_fallback) front_slot_or_fallback.d(detaching);
    			if (back_slot_or_fallback) back_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { flip = false } = $$props;
    	const writable_props = ["flip"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FlipCard> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("FlipCard", $$slots, ['front','back']);

    	$$self.$$set = $$props => {
    		if ("flip" in $$props) $$invalidate(0, flip = $$props.flip);
    		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ flip });

    	$$self.$inject_state = $$props => {
    		if ("flip" in $$props) $$invalidate(0, flip = $$props.flip);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [flip, $$scope, $$slots];
    }

    class FlipCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { flip: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FlipCard",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get flip() {
    		throw new Error("<FlipCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flip(value) {
    		throw new Error("<FlipCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-loading-spinners/src/Circle3.svelte generated by Svelte v3.24.1 */

    const file$6 = "node_modules/svelte-loading-spinners/src/Circle3.svelte";

    function create_fragment$7(ctx) {
    	let div10;
    	let div9;
    	let div8;
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let div3;
    	let div2;
    	let t2;
    	let t3;
    	let div5;
    	let div4;
    	let t4;
    	let t5;
    	let div7;
    	let div6;
    	let t6;

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(" ");
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t2 = text(" ");
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t4 = text(" ");
    			t5 = space();
    			div7 = element("div");
    			div6 = element("div");
    			t6 = text(" ");
    			this.h();
    		},
    		l: function claim(nodes) {
    			div10 = claim_element(nodes, "DIV", { class: true, style: true });
    			var div10_nodes = children(div10);
    			div9 = claim_element(div10_nodes, "DIV", { class: true });
    			var div9_nodes = children(div9);
    			div8 = claim_element(div9_nodes, "DIV", { class: true });
    			var div8_nodes = children(div8);
    			div1 = claim_element(div8_nodes, "DIV", { class: true });
    			var div1_nodes = children(div1);
    			div0 = claim_element(div1_nodes, "DIV", { class: true });
    			var div0_nodes = children(div0);
    			t0 = claim_text(div0_nodes, " ");
    			div0_nodes.forEach(detach_dev);
    			div1_nodes.forEach(detach_dev);
    			t1 = claim_space(div8_nodes);
    			div3 = claim_element(div8_nodes, "DIV", { class: true });
    			var div3_nodes = children(div3);
    			div2 = claim_element(div3_nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			t2 = claim_text(div2_nodes, " ");
    			div2_nodes.forEach(detach_dev);
    			div3_nodes.forEach(detach_dev);
    			t3 = claim_space(div8_nodes);
    			div5 = claim_element(div8_nodes, "DIV", { class: true });
    			var div5_nodes = children(div5);
    			div4 = claim_element(div5_nodes, "DIV", { class: true });
    			var div4_nodes = children(div4);
    			t4 = claim_text(div4_nodes, " ");
    			div4_nodes.forEach(detach_dev);
    			div5_nodes.forEach(detach_dev);
    			t5 = claim_space(div8_nodes);
    			div7 = claim_element(div8_nodes, "DIV", { class: true });
    			var div7_nodes = children(div7);
    			div6 = claim_element(div7_nodes, "DIV", { class: true });
    			var div6_nodes = children(div6);
    			t6 = claim_text(div6_nodes, " ");
    			div6_nodes.forEach(detach_dev);
    			div7_nodes.forEach(detach_dev);
    			div8_nodes.forEach(detach_dev);
    			div9_nodes.forEach(detach_dev);
    			div10_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div0, "class", "ball ball-top-left svelte-1t1q7st");
    			add_location(div0, file$6, 95, 8, 2102);
    			attr_dev(div1, "class", "single-ball svelte-1t1q7st");
    			add_location(div1, file$6, 94, 6, 2067);
    			attr_dev(div2, "class", "ball ball-top-right svelte-1t1q7st");
    			add_location(div2, file$6, 98, 8, 2206);
    			attr_dev(div3, "class", "contener_mixte");
    			add_location(div3, file$6, 97, 6, 2168);
    			attr_dev(div4, "class", "ball ball-bottom-left svelte-1t1q7st");
    			add_location(div4, file$6, 101, 8, 2311);
    			attr_dev(div5, "class", "contener_mixte");
    			add_location(div5, file$6, 100, 6, 2273);
    			attr_dev(div6, "class", "ball ball-bottom-right svelte-1t1q7st");
    			add_location(div6, file$6, 104, 8, 2418);
    			attr_dev(div7, "class", "contener_mixte");
    			add_location(div7, file$6, 103, 6, 2380);
    			attr_dev(div8, "class", "ball-container svelte-1t1q7st");
    			add_location(div8, file$6, 93, 4, 2031);
    			attr_dev(div9, "class", "inner svelte-1t1q7st");
    			add_location(div9, file$6, 92, 2, 2006);
    			attr_dev(div10, "class", "wrapper svelte-1t1q7st");
    			set_style(div10, "--size", /*size*/ ctx[0] + /*unit*/ ctx[1]);
    			set_style(div10, "--floatSize", /*size*/ ctx[0]);
    			set_style(div10, "--ballTopLeftColor", /*ballTopLeft*/ ctx[2]);
    			set_style(div10, "--ballTopRightColor", /*ballTopRight*/ ctx[3]);
    			set_style(div10, "--ballBottomLeftColor", /*ballBottomLeft*/ ctx[4]);
    			set_style(div10, "--ballBottomRightColor", /*ballBottomRight*/ ctx[5]);
    			add_location(div10, file$6, 88, 0, 1767);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div1);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div8, t1);
    			append_dev(div8, div3);
    			append_dev(div3, div2);
    			append_dev(div2, t2);
    			append_dev(div8, t3);
    			append_dev(div8, div5);
    			append_dev(div5, div4);
    			append_dev(div4, t4);
    			append_dev(div8, t5);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div6, t6);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*size, unit*/ 3) {
    				set_style(div10, "--size", /*size*/ ctx[0] + /*unit*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 1) {
    				set_style(div10, "--floatSize", /*size*/ ctx[0]);
    			}

    			if (dirty & /*ballTopLeft*/ 4) {
    				set_style(div10, "--ballTopLeftColor", /*ballTopLeft*/ ctx[2]);
    			}

    			if (dirty & /*ballTopRight*/ 8) {
    				set_style(div10, "--ballTopRightColor", /*ballTopRight*/ ctx[3]);
    			}

    			if (dirty & /*ballBottomLeft*/ 16) {
    				set_style(div10, "--ballBottomLeftColor", /*ballBottomLeft*/ ctx[4]);
    			}

    			if (dirty & /*ballBottomRight*/ 32) {
    				set_style(div10, "--ballBottomRightColor", /*ballBottomRight*/ ctx[5]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { size = 60 } = $$props;
    	let { unit = "px" } = $$props;
    	let { ballTopLeft = "#FF3E00" } = $$props;
    	let { ballTopRight = "#F8B334" } = $$props;
    	let { ballBottomLeft = "#40B3FF" } = $$props;
    	let { ballBottomRight = "#676778" } = $$props;

    	const writable_props = [
    		"size",
    		"unit",
    		"ballTopLeft",
    		"ballTopRight",
    		"ballBottomLeft",
    		"ballBottomRight"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Circle3> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Circle3", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("unit" in $$props) $$invalidate(1, unit = $$props.unit);
    		if ("ballTopLeft" in $$props) $$invalidate(2, ballTopLeft = $$props.ballTopLeft);
    		if ("ballTopRight" in $$props) $$invalidate(3, ballTopRight = $$props.ballTopRight);
    		if ("ballBottomLeft" in $$props) $$invalidate(4, ballBottomLeft = $$props.ballBottomLeft);
    		if ("ballBottomRight" in $$props) $$invalidate(5, ballBottomRight = $$props.ballBottomRight);
    	};

    	$$self.$capture_state = () => ({
    		size,
    		unit,
    		ballTopLeft,
    		ballTopRight,
    		ballBottomLeft,
    		ballBottomRight
    	});

    	$$self.$inject_state = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("unit" in $$props) $$invalidate(1, unit = $$props.unit);
    		if ("ballTopLeft" in $$props) $$invalidate(2, ballTopLeft = $$props.ballTopLeft);
    		if ("ballTopRight" in $$props) $$invalidate(3, ballTopRight = $$props.ballTopRight);
    		if ("ballBottomLeft" in $$props) $$invalidate(4, ballBottomLeft = $$props.ballBottomLeft);
    		if ("ballBottomRight" in $$props) $$invalidate(5, ballBottomRight = $$props.ballBottomRight);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [size, unit, ballTopLeft, ballTopRight, ballBottomLeft, ballBottomRight];
    }

    class Circle3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			size: 0,
    			unit: 1,
    			ballTopLeft: 2,
    			ballTopRight: 3,
    			ballBottomLeft: 4,
    			ballBottomRight: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Circle3",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get size() {
    		throw new Error("<Circle3>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Circle3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get unit() {
    		throw new Error("<Circle3>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set unit(value) {
    		throw new Error("<Circle3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ballTopLeft() {
    		throw new Error("<Circle3>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ballTopLeft(value) {
    		throw new Error("<Circle3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ballTopRight() {
    		throw new Error("<Circle3>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ballTopRight(value) {
    		throw new Error("<Circle3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ballBottomLeft() {
    		throw new Error("<Circle3>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ballBottomLeft(value) {
    		throw new Error("<Circle3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ballBottomRight() {
    		throw new Error("<Circle3>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ballBottomRight(value) {
    		throw new Error("<Circle3>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Spinner.svelte generated by Svelte v3.24.1 */

    function create_fragment$8(ctx) {
    	let circle3;
    	let current;

    	circle3 = new Circle3({
    			props: {
    				size: "60",
    				unit: "px",
    				ballTopLeft: "#FF3E00",
    				ballTopRight: "#F8B334",
    				ballBottomLeft: "#40B3FF",
    				ballBottomRight: "#676778"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(circle3.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(circle3.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(circle3, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(circle3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(circle3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(circle3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Spinner> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Spinner", $$slots, []);
    	$$self.$capture_state = () => ({ Circle3 });
    	return [];
    }

    class Spinner extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Spinner",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src/FlashCard.svelte generated by Svelte v3.24.1 */

    const { console: console_1 } = globals;
    const file$7 = "src/FlashCard.svelte";

    // (34:6) {#if frontLocalUrlP}
    function create_if_block$1(ctx) {
    	let await_block_anchor;
    	let promise;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 8,
    		error: 9,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*frontLocalUrlP*/ ctx[2], info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		l: function claim(nodes) {
    			await_block_anchor = empty();
    			info.block.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*frontLocalUrlP*/ 4 && promise !== (promise = /*frontLocalUrlP*/ ctx[2]) && handle_promise(promise, info)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[8] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(34:6) {#if frontLocalUrlP}",
    		ctx
    	});

    	return block;
    }

    // (39:8) {:catch error}
    function create_catch_block(ctx) {
    	let p;
    	let t_value = /*error*/ ctx[9].message + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			this.h();
    		},
    		l: function claim(nodes) {
    			p = claim_element(nodes, "P", { style: true });
    			var p_nodes = children(p);
    			t = claim_text(p_nodes, t_value);
    			p_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_style(p, "color", "red");
    			add_location(p, file$7, 39, 10, 1126);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*frontLocalUrlP*/ 4 && t_value !== (t_value = /*error*/ ctx[9].message + "")) set_data_dev(t, t_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(39:8) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (37:8) {:then localUrl}
    function create_then_block(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			this.h();
    		},
    		l: function claim(nodes) {
    			img = claim_element(nodes, "IMG", { alt: true, src: true, width: true });
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(img, "alt", "flash card");
    			if (img.src !== (img_src_value = /*localUrl*/ ctx[8])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "width", "80%");
    			add_location(img, file$7, 37, 10, 1039);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*frontLocalUrlP*/ 4 && img.src !== (img_src_value = /*localUrl*/ ctx[8])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(37:8) {:then localUrl}",
    		ctx
    	});

    	return block;
    }

    // (35:31)            <Spinner />         {:then localUrl}
    function create_pending_block(ctx) {
    	let spinner;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(spinner.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(35:31)            <Spinner />         {:then localUrl}",
    		ctx
    	});

    	return block;
    }

    // (51:10) <Label>
    function create_default_slot_6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Réponse");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "Réponse");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(51:10) <Label>",
    		ctx
    	});

    	return block;
    }

    // (45:8) <Button           on:click="{toggleFlip}"           variant="raised"           class="button-shaped-round"           color="secondary"         >
    function create_default_slot_5(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(label.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(45:8) <Button           on:click=\\\"{toggleFlip}\\\"           variant=\\\"raised\\\"           class=\\\"button-shaped-round\\\"           color=\\\"secondary\\\"         >",
    		ctx
    	});

    	return block;
    }

    // (27:2) <div id='front' slot="front">
    function create_front_slot(ctx) {
    	let div0;
    	let div1;
    	let fa;
    	let t0;
    	let t1_value = /*card*/ ctx[0].theme + "";
    	let t1;
    	let t2;
    	let div3;
    	let t3_value = /*card*/ ctx[0].enounce + "";
    	let t3;
    	let t4;
    	let t5;
    	let div2;
    	let button;
    	let current;

    	fa = new Fa({
    			props: { icon: faNewspaper },
    			$$inline: true
    		});

    	let if_block = /*frontLocalUrlP*/ ctx[2] && create_if_block$1(ctx);

    	button = new Button_1({
    			props: {
    				variant: "raised",
    				class: "button-shaped-round",
    				color: "secondary",
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*toggleFlip*/ ctx[5]);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div1 = element("div");
    			create_component(fa.$$.fragment);
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			div3 = element("div");
    			t3 = text(t3_value);
    			t4 = space();
    			if (if_block) if_block.c();
    			t5 = space();
    			div2 = element("div");
    			create_component(button.$$.fragment);
    			this.h();
    		},
    		l: function claim(nodes) {
    			div0 = claim_element(nodes, "DIV", { id: true, slot: true });
    			var div0_nodes = children(div0);
    			div1 = claim_element(div0_nodes, "DIV", { class: true });
    			var div1_nodes = children(div1);
    			claim_component(fa.$$.fragment, div1_nodes);
    			t0 = claim_space(div1_nodes);
    			t1 = claim_text(div1_nodes, t1_value);
    			div1_nodes.forEach(detach_dev);
    			t2 = claim_space(div0_nodes);
    			div3 = claim_element(div0_nodes, "DIV", { class: true });
    			var div3_nodes = children(div3);
    			t3 = claim_text(div3_nodes, t3_value);
    			t4 = claim_space(div3_nodes);
    			if (if_block) if_block.l(div3_nodes);
    			t5 = claim_space(div3_nodes);
    			div2 = claim_element(div3_nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			claim_component(button.$$.fragment, div2_nodes);
    			div2_nodes.forEach(detach_dev);
    			div3_nodes.forEach(detach_dev);
    			div0_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div1, "class", "info svelte-wd6i35");
    			add_location(div1, file$7, 27, 4, 793);
    			attr_dev(div2, "class", "buttons svelte-wd6i35");
    			add_location(div2, file$7, 43, 6, 1204);
    			attr_dev(div3, "class", "content svelte-wd6i35");
    			add_location(div3, file$7, 31, 4, 880);
    			attr_dev(div0, "id", "front");
    			attr_dev(div0, "slot", "front");
    			add_location(div0, file$7, 26, 2, 759);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, div1);
    			mount_component(fa, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, t1);
    			append_dev(div0, t2);
    			append_dev(div0, div3);
    			append_dev(div3, t3);
    			append_dev(div3, t4);
    			if (if_block) if_block.m(div3, null);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			mount_component(button, div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*card*/ 1) && t1_value !== (t1_value = /*card*/ ctx[0].theme + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty & /*card*/ 1) && t3_value !== (t3_value = /*card*/ ctx[0].enounce + "")) set_data_dev(t3, t3_value);

    			if (/*frontLocalUrlP*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*frontLocalUrlP*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div3, t5);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const button_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fa.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fa.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(fa);
    			if (if_block) if_block.d();
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_front_slot.name,
    		type: "slot",
    		source: "(27:2) <div id='front' slot=\\\"front\\\">",
    		ctx
    	});

    	return block;
    }

    // (67:8) <Label>
    function create_default_slot_4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Question");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "Question");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(67:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (61:6) <Button         on:click="{toggleFlip}"         variant="raised"         class="button-shaped-round"         color="secondary"       >
    function create_default_slot_3(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(label.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(61:6) <Button         on:click=\\\"{toggleFlip}\\\"         variant=\\\"raised\\\"         class=\\\"button-shaped-round\\\"         color=\\\"secondary\\\"       >",
    		ctx
    	});

    	return block;
    }

    // (79:8) <Label>
    function create_default_slot_2(ctx) {
    	let t_value = (/*isLast*/ ctx[3] ? "Fin" : "Suivante") + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*isLast*/ 8 && t_value !== (t_value = (/*isLast*/ ctx[3] ? "Fin" : "Suivante") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(79:8) <Label>",
    		ctx
    	});

    	return block;
    }

    // (70:6) <Button         on:click="{() => {           if (!isLast) flip = false           setTimeout(onNext, 250)         }}"         variant="raised"         class="button-shaped-round"         color="secondary"       >
    function create_default_slot_1(ctx) {
    	let label;
    	let current;

    	label = new Label({
    			props: {
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(label.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(label.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(label, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const label_changes = {};

    			if (dirty & /*$$scope, isLast*/ 1032) {
    				label_changes.$$scope = { dirty, ctx };
    			}

    			label.$set(label_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(label, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(70:6) <Button         on:click=\\\"{() => {           if (!isLast) flip = false           setTimeout(onNext, 250)         }}\\\"         variant=\\\"raised\\\"         class=\\\"button-shaped-round\\\"         color=\\\"secondary\\\"       >",
    		ctx
    	});

    	return block;
    }

    // (57:2) <div id='back' slot="back" class="content">
    function create_back_slot(ctx) {
    	let div0;
    	let div1;
    	let t0;
    	let t1;
    	let div2;
    	let t2_value = /*card*/ ctx[0].answer + "";
    	let t2;
    	let t3;
    	let div3;
    	let button0;
    	let t4;
    	let button1;
    	let current;

    	button0 = new Button_1({
    			props: {
    				variant: "raised",
    				class: "button-shaped-round",
    				color: "secondary",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button0.$on("click", /*toggleFlip*/ ctx[5]);

    	button1 = new Button_1({
    			props: {
    				variant: "raised",
    				class: "button-shaped-round",
    				color: "secondary",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1.$on("click", /*click_handler*/ ctx[7]);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div1 = element("div");
    			t0 = text("Réponse");
    			t1 = space();
    			div2 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			div3 = element("div");
    			create_component(button0.$$.fragment);
    			t4 = space();
    			create_component(button1.$$.fragment);
    			this.h();
    		},
    		l: function claim(nodes) {
    			div0 = claim_element(nodes, "DIV", { id: true, slot: true, class: true });
    			var div0_nodes = children(div0);
    			div1 = claim_element(div0_nodes, "DIV", { class: true });
    			var div1_nodes = children(div1);
    			t0 = claim_text(div1_nodes, "Réponse");
    			div1_nodes.forEach(detach_dev);
    			t1 = claim_space(div0_nodes);
    			div2 = claim_element(div0_nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			t2 = claim_text(div2_nodes, t2_value);
    			div2_nodes.forEach(detach_dev);
    			t3 = claim_space(div0_nodes);
    			div3 = claim_element(div0_nodes, "DIV", { class: true });
    			var div3_nodes = children(div3);
    			claim_component(button0.$$.fragment, div3_nodes);
    			t4 = claim_space(div3_nodes);
    			claim_component(button1.$$.fragment, div3_nodes);
    			div3_nodes.forEach(detach_dev);
    			div0_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div1, "class", "title-answer svelte-wd6i35");
    			add_location(div1, file$7, 57, 4, 1514);
    			attr_dev(div2, "class", "answer svelte-wd6i35");
    			add_location(div2, file$7, 58, 4, 1558);
    			attr_dev(div3, "class", "buttons svelte-wd6i35");
    			add_location(div3, file$7, 59, 4, 1602);
    			attr_dev(div0, "id", "back");
    			attr_dev(div0, "slot", "back");
    			attr_dev(div0, "class", "content svelte-wd6i35");
    			add_location(div0, file$7, 56, 2, 1466);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, div1);
    			append_dev(div1, t0);
    			append_dev(div0, t1);
    			append_dev(div0, div2);
    			append_dev(div2, t2);
    			append_dev(div0, t3);
    			append_dev(div0, div3);
    			mount_component(button0, div3, null);
    			append_dev(div3, t4);
    			mount_component(button1, div3, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*card*/ 1) && t2_value !== (t2_value = /*card*/ ctx[0].answer + "")) set_data_dev(t2, t2_value);
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope, isLast*/ 1032) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(button0);
    			destroy_component(button1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_back_slot.name,
    		type: "slot",
    		source: "(57:2) <div id='back' slot=\\\"back\\\" class=\\\"content\\\">",
    		ctx
    	});

    	return block;
    }

    // (26:0) <FlipCard flip="{flip}">
    function create_default_slot$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = space();
    		},
    		l: function claim(nodes) {
    			t = claim_space(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(26:0) <FlipCard flip=\\\"{flip}\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let flipcard;
    	let current;

    	flipcard = new FlipCard({
    			props: {
    				flip: /*flip*/ ctx[4],
    				$$slots: {
    					default: [create_default_slot$1],
    					back: [create_back_slot],
    					front: [create_front_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(flipcard.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(flipcard.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(flipcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const flipcard_changes = {};
    			if (dirty & /*flip*/ 16) flipcard_changes.flip = /*flip*/ ctx[4];

    			if (dirty & /*$$scope, isLast, flip, onNext, card, frontLocalUrlP*/ 1055) {
    				flipcard_changes.$$scope = { dirty, ctx };
    			}

    			flipcard.$set(flipcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(flipcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(flipcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(flipcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { card = { enounce: "énoncé", answer: "réponse" } } = $$props;
    	let { onNext } = $$props;
    	let { frontLocalUrlP } = $$props;
    	let { backLocalUrlP } = $$props;
    	let { isLast = false } = $$props;
    	let flip = false;
    	const toggleFlip = () => $$invalidate(4, flip = !flip);

    	afterUpdate(() => {
    		console.log("mathlive");
    		mathlive.renderMathInElement("front");
    		mathlive.renderMathInElement("back");
    	});

    	const writable_props = ["card", "onNext", "frontLocalUrlP", "backLocalUrlP", "isLast"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<FlashCard> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("FlashCard", $$slots, []);

    	const click_handler = () => {
    		if (!isLast) $$invalidate(4, flip = false);
    		setTimeout(onNext, 250);
    	};

    	$$self.$$set = $$props => {
    		if ("card" in $$props) $$invalidate(0, card = $$props.card);
    		if ("onNext" in $$props) $$invalidate(1, onNext = $$props.onNext);
    		if ("frontLocalUrlP" in $$props) $$invalidate(2, frontLocalUrlP = $$props.frontLocalUrlP);
    		if ("backLocalUrlP" in $$props) $$invalidate(6, backLocalUrlP = $$props.backLocalUrlP);
    		if ("isLast" in $$props) $$invalidate(3, isLast = $$props.isLast);
    	};

    	$$self.$capture_state = () => ({
    		Button: Button_1,
    		Label,
    		Mathlive: mathlive,
    		Fa,
    		primary,
    		faNewspaper,
    		FlipCard,
    		Spinner,
    		afterUpdate,
    		card,
    		onNext,
    		frontLocalUrlP,
    		backLocalUrlP,
    		isLast,
    		flip,
    		toggleFlip
    	});

    	$$self.$inject_state = $$props => {
    		if ("card" in $$props) $$invalidate(0, card = $$props.card);
    		if ("onNext" in $$props) $$invalidate(1, onNext = $$props.onNext);
    		if ("frontLocalUrlP" in $$props) $$invalidate(2, frontLocalUrlP = $$props.frontLocalUrlP);
    		if ("backLocalUrlP" in $$props) $$invalidate(6, backLocalUrlP = $$props.backLocalUrlP);
    		if ("isLast" in $$props) $$invalidate(3, isLast = $$props.isLast);
    		if ("flip" in $$props) $$invalidate(4, flip = $$props.flip);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		card,
    		onNext,
    		frontLocalUrlP,
    		isLast,
    		flip,
    		toggleFlip,
    		backLocalUrlP,
    		click_handler
    	];
    }

    class FlashCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			card: 0,
    			onNext: 1,
    			frontLocalUrlP: 2,
    			backLocalUrlP: 6,
    			isLast: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FlashCard",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onNext*/ ctx[1] === undefined && !("onNext" in props)) {
    			console_1.warn("<FlashCard> was created without expected prop 'onNext'");
    		}

    		if (/*frontLocalUrlP*/ ctx[2] === undefined && !("frontLocalUrlP" in props)) {
    			console_1.warn("<FlashCard> was created without expected prop 'frontLocalUrlP'");
    		}

    		if (/*backLocalUrlP*/ ctx[6] === undefined && !("backLocalUrlP" in props)) {
    			console_1.warn("<FlashCard> was created without expected prop 'backLocalUrlP'");
    		}
    	}

    	get card() {
    		throw new Error("<FlashCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set card(value) {
    		throw new Error("<FlashCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onNext() {
    		throw new Error("<FlashCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onNext(value) {
    		throw new Error("<FlashCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get frontLocalUrlP() {
    		throw new Error("<FlashCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set frontLocalUrlP(value) {
    		throw new Error("<FlashCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backLocalUrlP() {
    		throw new Error("<FlashCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backLocalUrlP(value) {
    		throw new Error("<FlashCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isLast() {
    		throw new Error("<FlashCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isLast(value) {
    		throw new Error("<FlashCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe,
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    const collections = writable({});
      const images = writable({});

    var css_248z$5 = "@import url(\"https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap\");@keyframes mdc-select-float-native-control{0%{transform:translateY(8px);opacity:0}to{transform:translateY(0);opacity:1}}.mdc-line-ripple{position:absolute;bottom:0;left:0;width:100%;height:2px;transform:scaleX(0);transition:transform .18s cubic-bezier(.4,0,.2,1),opacity .18s cubic-bezier(.4,0,.2,1);opacity:0;z-index:2}.mdc-line-ripple--active{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating{opacity:0}.mdc-notched-outline{display:flex;position:absolute;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}.mdc-notched-outline[dir=rtl],[dir=rtl] .mdc-notched-outline{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;transition:border .15s cubic-bezier(.4,0,.2,1);border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}.mdc-notched-outline__leading[dir=rtl],.mdc-notched-outline__trailing,[dir=rtl] .mdc-notched-outline__leading{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{flex-grow:1}.mdc-notched-outline__trailing[dir=rtl],[dir=rtl] .mdc-notched-outline__trailing{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 24px)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;top:17px;bottom:auto;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:133.33333%}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl],[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{padding:0}.mdc-floating-label{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;line-height:1.75rem;font-weight:400;letter-spacing:.00937em;text-decoration:inherit;text-transform:inherit;position:absolute;left:0;transform-origin:left top;transition:transform .15s cubic-bezier(.4,0,.2,1),color .15s cubic-bezier(.4,0,.2,1);line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform}.mdc-floating-label[dir=rtl],[dir=rtl] .mdc-floating-label{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-floating-label--float-above{cursor:auto;transform:translateY(-50%) scale(.75)}.mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-standard .25s 1}@keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(0) translateY(-50%) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(4%) translateY(-50%) scale(.75)}66%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(-4%) translateY(-50%) scale(.75)}to{transform:translateX(0) translateY(-50%) scale(.75)}}@keyframes mdc-ripple-fg-radius-in{0%{animation-timing-function:cubic-bezier(.4,0,.2,1);transform:translate(var(--mdc-ripple-fg-translate-start,0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}}@keyframes mdc-ripple-fg-opacity-in{0%{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity,0)}}@keyframes mdc-ripple-fg-opacity-out{0%{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity,0)}to{opacity:0}}.mdc-ripple-surface--test-edge-var-bug{--mdc-ripple-surface-test-edge-var:1px solid #000;visibility:hidden}.mdc-ripple-surface--test-edge-var-bug:before{border:var(--mdc-ripple-surface-test-edge-var)}.mdc-select--with-leading-icon:not(.mdc-select--disabled) .mdc-select__icon{color:#000;color:var(--mdc-theme-on-surface,#000)}.mdc-select--with-leading-icon .mdc-select__icon{display:inline-block;position:absolute;bottom:16px;box-sizing:border-box;width:24px;height:24px;border:none;background-color:transparent;fill:currentColor;opacity:.54;text-decoration:none;cursor:pointer;user-select:none}.mdc-select__icon:not([tabindex]),.mdc-select__icon[tabindex=\"-1\"]{cursor:default;pointer-events:none}.mdc-select-helper-text{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.75rem;line-height:1.25rem;font-weight:400;letter-spacing:.03333em;text-decoration:inherit;text-transform:inherit;display:block;line-height:normal;margin:0;transition:opacity .18s cubic-bezier(.4,0,.2,1);opacity:0;will-change:opacity}.mdc-select-helper-text:before{display:inline-block;width:0;height:16px;content:\"\";vertical-align:0}.mdc-select-helper-text--persistent{transition:none;opacity:1;will-change:auto}.mdc-select{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);display:inline-flex;position:relative;box-sizing:border-box;height:56px;overflow:hidden;will-change:opacity,transform,color}.mdc-select:not(.mdc-select--disabled){background-color:#f5f5f5}.mdc-select:after,.mdc-select:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}.mdc-select:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-select.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-select.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-select.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}.mdc-select.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-select.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-select:after,.mdc-select:before{top:-50%;left:-50%;width:200%;height:200%}.mdc-select.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-select:after,.mdc-select:before{background-color:rgba(0,0,0,.87)}.mdc-select:hover:before{opacity:.04}.mdc-select.mdc-ripple-upgraded--background-focused:before,.mdc-select:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-select:not(.mdc-select--disabled) .mdc-select__native-control,.mdc-select:not(.mdc-select--disabled) .mdc-select__selected-text{color:rgba(0,0,0,.87)}.mdc-select:not(.mdc-select--disabled) .mdc-floating-label{color:rgba(0,0,0,.6)}.mdc-select:not(.mdc-select--disabled) .mdc-select__native-control,.mdc-select:not(.mdc-select--disabled) .mdc-select__selected-text{border-bottom-color:rgba(0,0,0,.42)}.mdc-select:not(.mdc-select--disabled)+.mdc-select-helper-text{color:rgba(0,0,0,.6)}.mdc-select,.mdc-select__native-control{border-radius:4px 4px 0 0}.mdc-select:not(.mdc-select--disabled).mdc-select--focused .mdc-line-ripple{background-color:#6200ee;background-color:var(--mdc-theme-primary,#6200ee)}.mdc-select:not(.mdc-select--disabled).mdc-select--focused .mdc-floating-label{color:rgba(98,0,238,.87)}.mdc-select:not(.mdc-select--disabled) .mdc-select__native-control:hover{border-bottom-color:rgba(0,0,0,.87)}.mdc-select .mdc-floating-label--float-above{transform:translateY(-70%) scale(.75)}.mdc-select .mdc-floating-label{left:16px;right:auto;top:21px;pointer-events:none}.mdc-select .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-select .mdc-floating-label{left:auto;right:16px}.mdc-select.mdc-select--with-leading-icon .mdc-floating-label{left:48px;right:auto}.mdc-select.mdc-select--with-leading-icon .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-select.mdc-select--with-leading-icon .mdc-floating-label{left:auto;right:48px}.mdc-select.mdc-select--outlined .mdc-floating-label{left:4px;right:auto;top:17px}.mdc-select.mdc-select--outlined .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-select.mdc-select--outlined .mdc-floating-label{left:auto;right:4px}.mdc-select.mdc-select--outlined.mdc-select--with-leading-icon .mdc-floating-label{left:36px;right:auto}.mdc-select.mdc-select--outlined.mdc-select--with-leading-icon .mdc-floating-label[dir=rtl],[dir=rtl] .mdc-select.mdc-select--outlined.mdc-select--with-leading-icon .mdc-floating-label{left:auto;right:36px}.mdc-select.mdc-select--outlined.mdc-select--with-leading-icon .mdc-floating-label--float-above{left:36px;right:auto}.mdc-select.mdc-select--outlined.mdc-select--with-leading-icon .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-select.mdc-select--outlined.mdc-select--with-leading-icon .mdc-floating-label--float-above{left:auto;right:36px}.mdc-select__dropdown-icon{background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='10' height='5' viewBox='7 10 10 5' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' opacity='.54' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\") no-repeat 50%;left:auto;right:8px;position:absolute;bottom:16px;width:24px;height:24px;transition:transform .15s cubic-bezier(.4,0,.2,1);pointer-events:none}.mdc-select__dropdown-icon[dir=rtl],[dir=rtl] .mdc-select__dropdown-icon{left:8px;right:auto}.mdc-select--focused .mdc-select__dropdown-icon{background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='10' height='5' viewBox='7 10 10 5' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%236200ee' fill-rule='evenodd' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\") no-repeat 50%}.mdc-select--activated .mdc-select__dropdown-icon{transform:rotate(180deg) translateY(-5px);transition:transform .15s cubic-bezier(.4,0,.2,1)}.mdc-select__native-control{padding-top:20px}.mdc-select.mdc-select--focused .mdc-line-ripple:after{transform:scaleY(2);opacity:1}.mdc-select+.mdc-select-helper-text{margin-right:12px;margin-left:12px}.mdc-select--outlined+.mdc-select-helper-text{margin-right:16px;margin-left:16px}.mdc-select--focused+.mdc-select-helper-text:not(.mdc-select-helper-text--validation-msg){opacity:1}.mdc-select__selected-text{min-width:200px;padding-top:22px}.mdc-select__native-control,.mdc-select__selected-text{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;line-height:1.75rem;font-weight:400;letter-spacing:.00937em;text-decoration:inherit;text-transform:inherit;box-sizing:border-box;width:100%;height:56px;padding:20px 52px 4px 16px;border:none;border-bottom:1px solid;outline:none;background-color:transparent;color:inherit;white-space:nowrap;cursor:pointer;appearance:none}.mdc-select__native-control[dir=rtl],.mdc-select__selected-text[dir=rtl],[dir=rtl] .mdc-select__native-control,[dir=rtl] .mdc-select__selected-text{padding-left:52px;padding-right:16px}.mdc-select__native-control::-ms-expand,.mdc-select__selected-text::-ms-expand{display:none}.mdc-select__native-control::-ms-value,.mdc-select__selected-text::-ms-value{background-color:transparent;color:inherit}@-moz-document url-prefix(\"\"){.mdc-select__native-control,.mdc-select__selected-text{text-indent:-2px}}.mdc-select--outlined{border:none;overflow:visible}.mdc-select--outlined:not(.mdc-select--disabled) .mdc-notched-outline__leading,.mdc-select--outlined:not(.mdc-select--disabled) .mdc-notched-outline__notch,.mdc-select--outlined:not(.mdc-select--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__native-control:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__native-control:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__native-control:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__selected-text:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__selected-text:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__selected-text:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-select--outlined:not(.mdc-select--disabled).mdc-select--focused .mdc-notched-outline .mdc-notched-outline__leading,.mdc-select--outlined:not(.mdc-select--disabled).mdc-select--focused .mdc-notched-outline .mdc-notched-outline__notch,.mdc-select--outlined:not(.mdc-select--disabled).mdc-select--focused .mdc-notched-outline .mdc-notched-outline__trailing{border-width:2px;border-color:#6200ee;border-color:var(--mdc-theme-primary,#6200ee)}.mdc-select--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined .25s 1}.mdc-select--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-radius:4px 0 0 4px}.mdc-select--outlined .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl],.mdc-select--outlined .mdc-notched-outline .mdc-notched-outline__trailing,[dir=rtl] .mdc-select--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-radius:0 4px 4px 0}.mdc-select--outlined .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl],[dir=rtl] .mdc-select--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-radius:4px 0 0 4px}.mdc-select--outlined .mdc-select__native-control{border-radius:4px}.mdc-select--outlined:after,.mdc-select--outlined:before{content:none}.mdc-select--outlined:not(.mdc-select--disabled){background-color:transparent}.mdc-select--outlined .mdc-floating-label--float-above{transform:translateY(-144%) scale(1);font-size:.75rem}.mdc-select--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-select--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-130%) scale(.75);font-size:1rem}.mdc-select--outlined .mdc-select__native-control,.mdc-select--outlined .mdc-select__selected-text{display:flex;padding:12px 52px 12px 16px;border:none;background-color:transparent;z-index:1}.mdc-select--outlined .mdc-select__native-control[dir=rtl],.mdc-select--outlined .mdc-select__selected-text[dir=rtl],[dir=rtl] .mdc-select--outlined .mdc-select__native-control,[dir=rtl] .mdc-select--outlined .mdc-select__selected-text{padding-left:52px;padding-right:16px}.mdc-select--outlined .mdc-select__selected-text{padding-top:14px}.mdc-select--outlined .mdc-select__icon{z-index:2}.mdc-select--outlined .mdc-floating-label{line-height:1.15rem;pointer-events:auto}.mdc-select--invalid:not(.mdc-select--disabled) .mdc-floating-label{color:#b00020;color:var(--mdc-theme-error,#b00020)}.mdc-select--invalid:not(.mdc-select--disabled) .mdc-select__native-control,.mdc-select--invalid:not(.mdc-select--disabled) .mdc-select__selected-text{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error,#b00020)}.mdc-select--invalid:not(.mdc-select--disabled).mdc-select--focused .mdc-line-ripple{background-color:#b00020;background-color:var(--mdc-theme-error,#b00020)}.mdc-select--invalid:not(.mdc-select--disabled).mdc-select--focused .mdc-floating-label{color:#b00020}.mdc-select--invalid:not(.mdc-select--disabled).mdc-select--invalid+.mdc-select-helper-text--validation-msg{color:#b00020;color:var(--mdc-theme-error,#b00020)}.mdc-select--invalid:not(.mdc-select--disabled) .mdc-select__native-control:hover{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error,#b00020)}.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled) .mdc-notched-outline__leading,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled) .mdc-notched-outline__notch,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled) .mdc-notched-outline__trailing,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__native-control:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__native-control:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__native-control:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__selected-text:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__selected-text:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled):not(.mdc-select--focused) .mdc-select__selected-text:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error,#b00020)}.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled).mdc-select--focused .mdc-notched-outline .mdc-notched-outline__leading,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled).mdc-select--focused .mdc-notched-outline .mdc-notched-outline__notch,.mdc-select--invalid.mdc-select--outlined:not(.mdc-select--disabled).mdc-select--focused .mdc-notched-outline .mdc-notched-outline__trailing{border-width:2px;border-color:#b00020;border-color:var(--mdc-theme-error,#b00020)}.mdc-select--invalid .mdc-select__dropdown-icon{background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='10' height='5' viewBox='7 10 10 5' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%23b00020' fill-rule='evenodd' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\") no-repeat 50%}.mdc-select--invalid+.mdc-select-helper-text--validation-msg{opacity:1}.mdc-select--required .mdc-floating-label:after{content:\"*\"}.mdc-select--disabled{background-color:#fafafa;cursor:default;pointer-events:none}.mdc-select--disabled .mdc-floating-label{color:rgba(0,0,0,.37)}.mdc-select--disabled .mdc-select__dropdown-icon{background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='10' height='5' viewBox='7 10 10 5' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' opacity='.37' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\") no-repeat 50%}.mdc-select--disabled .mdc-line-ripple{display:none}.mdc-select--disabled .mdc-select__icon{color:rgba(0,0,0,.37)}.mdc-select--disabled .mdc-select__native-control,.mdc-select--disabled .mdc-select__selected-text{color:rgba(0,0,0,.37);border-bottom-style:dotted}.mdc-select--disabled .mdc-select__selected-text{pointer-events:none}.mdc-select--disabled.mdc-select--outlined{background-color:transparent}.mdc-select--disabled.mdc-select--outlined .mdc-select__native-control,.mdc-select--disabled.mdc-select--outlined .mdc-select__selected-text{border-bottom-style:none}.mdc-select--disabled.mdc-select--outlined .mdc-notched-outline__leading,.mdc-select--disabled.mdc-select--outlined .mdc-notched-outline__notch,.mdc-select--disabled.mdc-select--outlined .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.16)}.mdc-select--with-leading-icon .mdc-select__icon{left:16px;right:auto}.mdc-select--with-leading-icon .mdc-select__icon[dir=rtl],[dir=rtl] .mdc-select--with-leading-icon .mdc-select__icon{left:auto;right:16px}.mdc-select--with-leading-icon .mdc-select__native-control,.mdc-select--with-leading-icon .mdc-select__selected-text{padding-left:48px;padding-right:32px}.mdc-select--with-leading-icon .mdc-select__native-control[dir=rtl],.mdc-select--with-leading-icon .mdc-select__selected-text[dir=rtl],[dir=rtl] .mdc-select--with-leading-icon .mdc-select__native-control,[dir=rtl] .mdc-select--with-leading-icon .mdc-select__selected-text{padding-left:32px;padding-right:48px}.mdc-select--with-leading-icon.mdc-select--outlined .mdc-floating-label--float-above{transform:translateY(-144%) translateX(-32px) scale(1)}.mdc-select--with-leading-icon.mdc-select--outlined .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-select--with-leading-icon.mdc-select--outlined .mdc-floating-label--float-above{transform:translateY(-144%) translateX(32px) scale(1)}.mdc-select--with-leading-icon.mdc-select--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-select--with-leading-icon.mdc-select--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-select--with-leading-icon.mdc-select--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-130%) translateX(-32px) scale(.75)}.mdc-select--with-leading-icon.mdc-select--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],.mdc-select--with-leading-icon.mdc-select--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-select--with-leading-icon.mdc-select--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,[dir=rtl] .mdc-select--with-leading-icon.mdc-select--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-130%) translateX(32px) scale(.75)}.mdc-select--with-leading-icon.mdc-select--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-select--with-leading-icon.mdc-select--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-select--with-leading-icon.mdc-select--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-select-outlined-leading-icon .25s 1}.mdc-select--with-leading-icon.mdc-select--outlined[dir=rtl] .mdc-floating-label--shake,[dir=rtl] .mdc-select--with-leading-icon.mdc-select--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-select-outlined-leading-icon-rtl .25s 1}.mdc-select--with-leading-icon.mdc-select__menu .mdc-list-item__text,.mdc-select--with-leading-icon.mdc-select__menu .mdc-list-item__text[dir=rtl],[dir=rtl] .mdc-select--with-leading-icon.mdc-select__menu .mdc-list-item__text{padding-left:32px;padding-right:32px}.mdc-select__menu .mdc-list .mdc-list-item--selected{color:#000;color:var(--mdc-theme-on-surface,#000)}.mdc-select__menu .mdc-list .mdc-list-item--selected:after,.mdc-select__menu .mdc-list .mdc-list-item--selected:before{background-color:#000}@supports not (-ms-ime-align:auto){.mdc-select__menu .mdc-list .mdc-list-item--selected:after,.mdc-select__menu .mdc-list .mdc-list-item--selected:before{background-color:var(--mdc-theme-on-surface,#000)}}.mdc-select__menu .mdc-list .mdc-list-item--selected:hover:before{opacity:.04}.mdc-select__menu .mdc-list .mdc-list-item--selected.mdc-ripple-upgraded--background-focused:before,.mdc-select__menu .mdc-list .mdc-list-item--selected:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-select__menu .mdc-list .mdc-list-item--selected:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-select__menu .mdc-list .mdc-list-item--selected:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-select__menu .mdc-list .mdc-list-item--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}@keyframes mdc-floating-label-shake-float-above-select-outlined-leading-icon{0%{transform:translateX(-32px) translateY(-130%) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(calc(4% - 32px)) translateY(-130%) scale(.75)}66%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(calc(-4% - 32px)) translateY(-130%) scale(.75)}to{transform:translateX(-32px) translateY(-130%) scale(.75)}}@keyframes mdc-floating-label-shake-float-above-select-outlined-leading-icon-rtl{0%{transform:translateX(32px) translateY(-130%) scale(.75)}33%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(calc(4% - -32px)) translateY(-130%) scale(.75)}66%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(calc(-4% - -32px)) translateY(-130%) scale(.75)}to{transform:translateX(32px) translateY(-130%) scale(.75)}}.mdc-list{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;line-height:1.75rem;font-weight:400;letter-spacing:.00937em;text-decoration:inherit;text-transform:inherit;line-height:1.5rem;margin:0;padding:8px 0;list-style-type:none;color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background,rgba(0,0,0,.87))}.mdc-list:focus{outline:none}.mdc-list-item__secondary-text{color:rgba(0,0,0,.54);color:var(--mdc-theme-text-secondary-on-background,rgba(0,0,0,.54))}.mdc-list-item__graphic{background-color:transparent;color:rgba(0,0,0,.38);color:var(--mdc-theme-text-icon-on-background,rgba(0,0,0,.38))}.mdc-list-item__meta{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-hint-on-background,rgba(0,0,0,.38))}.mdc-list-group__subheader{color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background,rgba(0,0,0,.87))}.mdc-list--dense{padding-top:4px;padding-bottom:4px;font-size:.812rem}.mdc-list-item{display:flex;position:relative;align-items:center;justify-content:flex-start;height:48px;padding:0 16px;overflow:hidden}.mdc-list-item:focus{outline:none}.mdc-list-item--activated,.mdc-list-item--activated .mdc-list-item__graphic,.mdc-list-item--selected,.mdc-list-item--selected .mdc-list-item__graphic{color:#6200ee;color:var(--mdc-theme-primary,#6200ee)}.mdc-list-item--disabled{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-disabled-on-background,rgba(0,0,0,.38))}.mdc-list-item__graphic{margin-left:0;margin-right:32px;width:24px;height:24px;flex-shrink:0;align-items:center;justify-content:center;fill:currentColor}.mdc-list-item[dir=rtl] .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list-item__graphic{margin-left:32px;margin-right:0}.mdc-list .mdc-list-item__graphic{display:inline-flex}.mdc-list-item__meta{margin-left:auto;margin-right:0}.mdc-list-item__meta:not(.material-icons){font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.75rem;line-height:1.25rem;font-weight:400;letter-spacing:.03333em;text-decoration:inherit;text-transform:inherit}.mdc-list-item[dir=rtl] .mdc-list-item__meta,[dir=rtl] .mdc-list-item .mdc-list-item__meta{margin-left:0;margin-right:auto}.mdc-list-item__text{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.mdc-list-item__text[for]{pointer-events:none}.mdc-list-item__primary-text{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;margin-top:0;line-height:normal;margin-bottom:-20px;display:block}.mdc-list-item__primary-text:before{display:inline-block;width:0;height:32px;content:\"\";vertical-align:0}.mdc-list-item__primary-text:after{display:inline-block;width:0;height:20px;content:\"\";vertical-align:-20px}.mdc-list--dense .mdc-list-item__primary-text{display:block;margin-top:0;line-height:normal;margin-bottom:-20px}.mdc-list--dense .mdc-list-item__primary-text:before{display:inline-block;width:0;height:24px;content:\"\";vertical-align:0}.mdc-list--dense .mdc-list-item__primary-text:after{display:inline-block;width:0;height:20px;content:\"\";vertical-align:-20px}.mdc-list-item__secondary-text{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:1.25rem;font-weight:400;letter-spacing:.01786em;text-decoration:inherit;text-transform:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;margin-top:0;line-height:normal;display:block}.mdc-list-item__secondary-text:before{display:inline-block;width:0;height:20px;content:\"\";vertical-align:0}.mdc-list--dense .mdc-list-item__secondary-text{display:block;margin-top:0;line-height:normal;font-size:inherit}.mdc-list--dense .mdc-list-item__secondary-text:before{display:inline-block;width:0;height:20px;content:\"\";vertical-align:0}.mdc-list--dense .mdc-list-item{height:40px}.mdc-list--dense .mdc-list-item__graphic{margin-left:0;margin-right:36px;width:20px;height:20px}.mdc-list-item[dir=rtl] .mdc-list--dense .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list--dense .mdc-list-item__graphic{margin-left:36px;margin-right:0}.mdc-list--avatar-list .mdc-list-item{height:56px}.mdc-list--avatar-list .mdc-list-item__graphic{margin-left:0;margin-right:16px;width:40px;height:40px;border-radius:50%}.mdc-list-item[dir=rtl] .mdc-list--avatar-list .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list--avatar-list .mdc-list-item__graphic{margin-left:16px;margin-right:0}.mdc-list--two-line .mdc-list-item__text{align-self:flex-start}.mdc-list--two-line .mdc-list-item{height:72px}.mdc-list--avatar-list.mdc-list--dense .mdc-list-item,.mdc-list--two-line.mdc-list--dense .mdc-list-item{height:60px}.mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic{margin-left:0;margin-right:20px;width:36px;height:36px}.mdc-list-item[dir=rtl] .mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic{margin-left:20px;margin-right:0}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item{cursor:pointer}a.mdc-list-item{color:inherit;text-decoration:none}.mdc-list-divider{height:0;margin:0;border:none;border-bottom:1px solid;border-bottom-color:rgba(0,0,0,.12)}.mdc-list-divider--padded{margin:0 16px}.mdc-list-divider--inset{margin-left:72px;margin-right:0;width:calc(100% - 72px)}.mdc-list-group[dir=rtl] .mdc-list-divider--inset,[dir=rtl] .mdc-list-group .mdc-list-divider--inset{margin-left:0;margin-right:72px}.mdc-list-divider--inset.mdc-list-divider--padded{width:calc(100% - 88px)}.mdc-list-group .mdc-list{padding:0}.mdc-list-group__subheader{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;line-height:1.75rem;font-weight:400;letter-spacing:.00937em;text-decoration:inherit;text-transform:inherit;margin:.75rem 16px}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:after,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:after,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:before{top:-50%;left:-50%;width:200%;height:200%}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:after,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:before{background-color:#000}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:hover:before{opacity:.04}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--background-focused:before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:before{opacity:.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:after,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:before{background-color:#6200ee}@supports not (-ms-ime-align:auto){:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:after,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:before{background-color:var(--mdc-theme-primary,#6200ee)}}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:hover:before{opacity:.16}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated.mdc-ripple-upgraded--background-focused:before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.24}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.24}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.24}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:before{opacity:.08}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:after,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:before{background-color:#6200ee}@supports not (-ms-ime-align:auto){:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:after,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:before{background-color:var(--mdc-theme-primary,#6200ee)}}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:hover:before{opacity:.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected.mdc-ripple-upgraded--background-focused:before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.2}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.2}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.2}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0)}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:after,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:after,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:before{top:-50%;left:-50%;width:200%;height:200%}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:after,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:before{background-color:#000}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--background-focused:before,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:relative;outline:none;overflow:hidden}.mdc-ripple-surface:after,.mdc-ripple-surface:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}.mdc-ripple-surface:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-ripple-surface.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-ripple-surface.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface:after,.mdc-ripple-surface:before{background-color:#000}.mdc-ripple-surface:hover:before{opacity:.04}.mdc-ripple-surface.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.mdc-ripple-surface:after,.mdc-ripple-surface:before{top:-50%;left:-50%;width:200%;height:200%}.mdc-ripple-surface.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]{overflow:visible}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:before{top:0;left:0;width:100%;height:100%}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:before{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0);width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface--primary:after,.mdc-ripple-surface--primary:before{background-color:#6200ee}@supports not (-ms-ime-align:auto){.mdc-ripple-surface--primary:after,.mdc-ripple-surface--primary:before{background-color:var(--mdc-theme-primary,#6200ee)}}.mdc-ripple-surface--primary:hover:before{opacity:.04}.mdc-ripple-surface--primary.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--primary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.mdc-ripple-surface--accent:after,.mdc-ripple-surface--accent:before{background-color:#018786}@supports not (-ms-ime-align:auto){.mdc-ripple-surface--accent:after,.mdc-ripple-surface--accent:before{background-color:var(--mdc-theme-secondary,#018786)}}.mdc-ripple-surface--accent:hover:before{opacity:.04}.mdc-ripple-surface--accent.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--accent.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.smui-list--three-line .mdc-list-item__text{align-self:flex-start}.smui-list--three-line .mdc-list-item{height:88px}.smui-list--three-line.mdc-list--dense .mdc-list-item{height:76px}.mdc-menu{min-width:112px}.mdc-menu .mdc-list,.mdc-menu .mdc-list-item__graphic,.mdc-menu .mdc-list-item__meta{color:rgba(0,0,0,.87)}.mdc-menu .mdc-list-divider{margin:8px 0}.mdc-menu .mdc-list-item{user-select:none}.mdc-menu .mdc-list-item--disabled{cursor:auto}@media screen and (-ms-high-contrast:active){.mdc-menu .mdc-list-item--disabled{opacity:.38}}.mdc-menu a.mdc-list-item .mdc-list-item__graphic,.mdc-menu a.mdc-list-item .mdc-list-item__text{pointer-events:none}.mdc-menu__selection-group{padding:0;fill:currentColor}.mdc-menu__selection-group .mdc-list-item{padding-left:56px;padding-right:16px}.mdc-menu__selection-group .mdc-list-item[dir=rtl],[dir=rtl] .mdc-menu__selection-group .mdc-list-item{padding-left:16px;padding-right:56px}.mdc-menu__selection-group .mdc-menu__selection-group-icon{left:16px;right:auto;display:none;position:absolute;top:50%;transform:translateY(-50%)}.mdc-menu__selection-group .mdc-menu__selection-group-icon[dir=rtl],[dir=rtl] .mdc-menu__selection-group .mdc-menu__selection-group-icon{left:auto;right:16px}.mdc-menu-item--selected .mdc-menu__selection-group-icon{display:inline}.mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-height:calc(100vh - 32px);margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;transition:opacity .03s linear,transform .12s cubic-bezier(0,0,.2,1);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background-color:#fff;background-color:var(--mdc-theme-surface,#fff);color:#000;color:var(--mdc-theme-on-surface,#000);border-radius:4px;transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(.8);opacity:0}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0;transition:opacity 75ms linear}.mdc-menu-surface[dir=rtl],[dir=rtl] .mdc-menu-surface{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.smui-menu-surface--static{position:static;z-index:0;display:inline-block;transform:scale(1);opacity:1}.mdc-select__native-control{-webkit-appearance:none;-moz-appearance:none;appearance:none}.smui-select--standard:after,.smui-select--standard:before{content:none}.smui-select--standard.mdc-select--disabled,.smui-select--standard:not(.mdc-select--disabled){background-color:transparent}.smui-select--standard .mdc-select__native-control,.smui-select--standard .mdc-select__selected-text{padding-left:0;padding-right:36px}.smui-select--standard .mdc-select__native-control[dir=rtl],.smui-select--standard .mdc-select__selected-text[dir=rtl],[dir=rtl] .smui-select--standard .mdc-select__native-control,[dir=rtl] .smui-select--standard .mdc-select__selected-text{padding-left:36px;padding-right:0}.smui-select--standard.mdc-select--with-leading-icon .mdc-select__native-control,.smui-select--standard.mdc-select--with-leading-icon .mdc-select__selected-text{padding-left:32px;padding-right:36px}.smui-select--standard.mdc-select--with-leading-icon .mdc-select__native-control[dir=rtl],.smui-select--standard.mdc-select--with-leading-icon .mdc-select__selected-text[dir=rtl],[dir=rtl] .smui-select--standard.mdc-select--with-leading-icon .mdc-select__native-control,[dir=rtl] .smui-select--standard.mdc-select--with-leading-icon .mdc-select__selected-text{padding-left:36px;padding-right:32px}.smui-select--standard .mdc-select__dropdown-icon{left:auto;right:0}.smui-select--standard .mdc-floating-label,.smui-select--standard .mdc-select__dropdown-icon[dir=rtl],[dir=rtl] .smui-select--standard .mdc-select__dropdown-icon{left:0;right:auto}.smui-select--standard .mdc-floating-label[dir=rtl],[dir=rtl] .smui-select--standard .mdc-floating-label{left:auto;right:0}.smui-select--standard.mdc-select--with-leading-icon .mdc-floating-label{left:32px;right:auto}.smui-select--standard.mdc-select--with-leading-icon .mdc-floating-label[dir=rtl],[dir=rtl] .smui-select--standard.mdc-select--with-leading-icon .mdc-floating-label{left:auto;right:32px}.smui-select--standard.mdc-select--with-leading-icon .mdc-select__icon{left:0;right:auto}.smui-select--standard.mdc-select--with-leading-icon .mdc-select__icon[dir=rtl],[dir=rtl] .smui-select--standard.mdc-select--with-leading-icon .mdc-select__icon{left:auto;right:0}.smui-select--standard+.mdc-select-helper-line{padding-left:0;padding-right:0}";
    styleInject(css_248z$5);

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$1 = {
        LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
        LABEL_SHAKE: 'mdc-floating-label--shake',
        ROOT: 'mdc-floating-label',
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFloatingLabelFoundation = /** @class */ (function (_super) {
        __extends(MDCFloatingLabelFoundation, _super);
        function MDCFloatingLabelFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCFloatingLabelFoundation.defaultAdapter, adapter)) || this;
            _this.shakeAnimationEndHandler_ = function () { return _this.handleShakeAnimationEnd_(); };
            return _this;
        }
        Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
            get: function () {
                return cssClasses$1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
            /**
             * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    getWidth: function () { return 0; },
                    registerInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCFloatingLabelFoundation.prototype.init = function () {
            this.adapter_.registerInteractionHandler('animationend', this.shakeAnimationEndHandler_);
        };
        MDCFloatingLabelFoundation.prototype.destroy = function () {
            this.adapter_.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler_);
        };
        /**
         * Returns the width of the label element.
         */
        MDCFloatingLabelFoundation.prototype.getWidth = function () {
            return this.adapter_.getWidth();
        };
        /**
         * Styles the label to produce a shake animation to indicate an error.
         * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
         */
        MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
            var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
            if (shouldShake) {
                this.adapter_.addClass(LABEL_SHAKE);
            }
            else {
                this.adapter_.removeClass(LABEL_SHAKE);
            }
        };
        /**
         * Styles the label to float or dock.
         * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
         */
        MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
            var _a = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
            if (shouldFloat) {
                this.adapter_.addClass(LABEL_FLOAT_ABOVE);
            }
            else {
                this.adapter_.removeClass(LABEL_FLOAT_ABOVE);
                this.adapter_.removeClass(LABEL_SHAKE);
            }
        };
        MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd_ = function () {
            var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
            this.adapter_.removeClass(LABEL_SHAKE);
        };
        return MDCFloatingLabelFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFloatingLabel = /** @class */ (function (_super) {
        __extends(MDCFloatingLabel, _super);
        function MDCFloatingLabel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCFloatingLabel.attachTo = function (root) {
            return new MDCFloatingLabel(root);
        };
        /**
         * Styles the label to produce the label shake for errors.
         * @param shouldShake If true, shakes the label by adding a CSS class; otherwise, stops shaking by removing the class.
         */
        MDCFloatingLabel.prototype.shake = function (shouldShake) {
            this.foundation_.shake(shouldShake);
        };
        /**
         * Styles the label to float/dock.
         * @param shouldFloat If true, floats the label by adding a CSS class; otherwise, docks it by removing the class.
         */
        MDCFloatingLabel.prototype.float = function (shouldFloat) {
            this.foundation_.float(shouldFloat);
        };
        MDCFloatingLabel.prototype.getWidth = function () {
            return this.foundation_.getWidth();
        };
        MDCFloatingLabel.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = {
                addClass: function (className) { return _this.root_.classList.add(className); },
                removeClass: function (className) { return _this.root_.classList.remove(className); },
                getWidth: function () { return _this.root_.scrollWidth; },
                registerInteractionHandler: function (evtType, handler) { return _this.listen(evtType, handler); },
                deregisterInteractionHandler: function (evtType, handler) { return _this.unlisten(evtType, handler); },
            };
            // tslint:enable:object-literal-sort-keys
            return new MDCFloatingLabelFoundation(adapter);
        };
        return MDCFloatingLabel;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$2 = {
        LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
        LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCLineRippleFoundation = /** @class */ (function (_super) {
        __extends(MDCLineRippleFoundation, _super);
        function MDCLineRippleFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCLineRippleFoundation.defaultAdapter, adapter)) || this;
            _this.transitionEndHandler_ = function (evt) { return _this.handleTransitionEnd(evt); };
            return _this;
        }
        Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
            get: function () {
                return cssClasses$2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
            /**
             * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    setStyle: function () { return undefined; },
                    registerEventHandler: function () { return undefined; },
                    deregisterEventHandler: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCLineRippleFoundation.prototype.init = function () {
            this.adapter_.registerEventHandler('transitionend', this.transitionEndHandler_);
        };
        MDCLineRippleFoundation.prototype.destroy = function () {
            this.adapter_.deregisterEventHandler('transitionend', this.transitionEndHandler_);
        };
        MDCLineRippleFoundation.prototype.activate = function () {
            this.adapter_.removeClass(cssClasses$2.LINE_RIPPLE_DEACTIVATING);
            this.adapter_.addClass(cssClasses$2.LINE_RIPPLE_ACTIVE);
        };
        MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
            this.adapter_.setStyle('transform-origin', xCoordinate + "px center");
        };
        MDCLineRippleFoundation.prototype.deactivate = function () {
            this.adapter_.addClass(cssClasses$2.LINE_RIPPLE_DEACTIVATING);
        };
        MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
            // Wait for the line ripple to be either transparent or opaque
            // before emitting the animation end event
            var isDeactivating = this.adapter_.hasClass(cssClasses$2.LINE_RIPPLE_DEACTIVATING);
            if (evt.propertyName === 'opacity') {
                if (isDeactivating) {
                    this.adapter_.removeClass(cssClasses$2.LINE_RIPPLE_ACTIVE);
                    this.adapter_.removeClass(cssClasses$2.LINE_RIPPLE_DEACTIVATING);
                }
            }
        };
        return MDCLineRippleFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCLineRipple = /** @class */ (function (_super) {
        __extends(MDCLineRipple, _super);
        function MDCLineRipple() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCLineRipple.attachTo = function (root) {
            return new MDCLineRipple(root);
        };
        /**
         * Activates the line ripple
         */
        MDCLineRipple.prototype.activate = function () {
            this.foundation_.activate();
        };
        /**
         * Deactivates the line ripple
         */
        MDCLineRipple.prototype.deactivate = function () {
            this.foundation_.deactivate();
        };
        /**
         * Sets the transform origin given a user's click location.
         * The `rippleCenter` is the x-coordinate of the middle of the ripple.
         */
        MDCLineRipple.prototype.setRippleCenter = function (xCoordinate) {
            this.foundation_.setRippleCenter(xCoordinate);
        };
        MDCLineRipple.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = {
                addClass: function (className) { return _this.root_.classList.add(className); },
                removeClass: function (className) { return _this.root_.classList.remove(className); },
                hasClass: function (className) { return _this.root_.classList.contains(className); },
                setStyle: function (propertyName, value) { return _this.root_.style.setProperty(propertyName, value); },
                registerEventHandler: function (evtType, handler) { return _this.listen(evtType, handler); },
                deregisterEventHandler: function (evtType, handler) { return _this.unlisten(evtType, handler); },
            };
            // tslint:enable:object-literal-sort-keys
            return new MDCLineRippleFoundation(adapter);
        };
        return MDCLineRipple;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$3 = {
        ANCHOR: 'mdc-menu-surface--anchor',
        ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
        ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
        FIXED: 'mdc-menu-surface--fixed',
        OPEN: 'mdc-menu-surface--open',
        ROOT: 'mdc-menu-surface',
    };
    // tslint:disable:object-literal-sort-keys
    var strings$1 = {
        CLOSED_EVENT: 'MDCMenuSurface:closed',
        OPENED_EVENT: 'MDCMenuSurface:opened',
        FOCUSABLE_ELEMENTS: [
            'button:not(:disabled)', '[href]:not([aria-disabled="true"])', 'input:not(:disabled)',
            'select:not(:disabled)', 'textarea:not(:disabled)', '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])',
        ].join(', '),
    };
    // tslint:enable:object-literal-sort-keys
    var numbers$1 = {
        /** Total duration of menu-surface open animation. */
        TRANSITION_OPEN_DURATION: 120,
        /** Total duration of menu-surface close animation. */
        TRANSITION_CLOSE_DURATION: 75,
        /** Margin left to the edge of the viewport when menu-surface is at maximum possible height. */
        MARGIN_TO_EDGE: 32,
        /** Ratio of anchor width to menu-surface width for switching from corner positioning to center positioning. */
        ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,
    };
    /**
     * Enum for bits in the {@see Corner) bitmap.
     */
    var CornerBit;
    (function (CornerBit) {
        CornerBit[CornerBit["BOTTOM"] = 1] = "BOTTOM";
        CornerBit[CornerBit["CENTER"] = 2] = "CENTER";
        CornerBit[CornerBit["RIGHT"] = 4] = "RIGHT";
        CornerBit[CornerBit["FLIP_RTL"] = 8] = "FLIP_RTL";
    })(CornerBit || (CornerBit = {}));
    /**
     * Enum for representing an element corner for positioning the menu-surface.
     *
     * The START constants map to LEFT if element directionality is left
     * to right and RIGHT if the directionality is right to left.
     * Likewise END maps to RIGHT or LEFT depending on the directionality.
     */
    var Corner;
    (function (Corner) {
        Corner[Corner["TOP_LEFT"] = 0] = "TOP_LEFT";
        Corner[Corner["TOP_RIGHT"] = 4] = "TOP_RIGHT";
        Corner[Corner["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
        Corner[Corner["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
        Corner[Corner["TOP_START"] = 8] = "TOP_START";
        Corner[Corner["TOP_END"] = 12] = "TOP_END";
        Corner[Corner["BOTTOM_START"] = 9] = "BOTTOM_START";
        Corner[Corner["BOTTOM_END"] = 13] = "BOTTOM_END";
    })(Corner || (Corner = {}));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$4 = {
        LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
        LIST_ITEM_CLASS: 'mdc-list-item',
        LIST_ITEM_DISABLED_CLASS: 'mdc-list-item--disabled',
        LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
        ROOT: 'mdc-list',
    };
    var strings$2 = {
        ACTION_EVENT: 'MDCList:action',
        ARIA_CHECKED: 'aria-checked',
        ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
        ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
        ARIA_CURRENT: 'aria-current',
        ARIA_DISABLED: 'aria-disabled',
        ARIA_ORIENTATION: 'aria-orientation',
        ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
        ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
        ARIA_SELECTED: 'aria-selected',
        CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"]:not(:disabled), input[type="radio"]:not(:disabled)',
        CHECKBOX_SELECTOR: 'input[type="checkbox"]:not(:disabled)',
        CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses$4.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$4.LIST_ITEM_CLASS + " a\n  ",
        FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses$4.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$4.LIST_ITEM_CLASS + " a,\n    ." + cssClasses$4.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses$4.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled)\n  ",
        RADIO_SELECTOR: 'input[type="radio"]:not(:disabled)',
    };
    var numbers$2 = {
        UNSET_INDEX: -1,
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];
    function isNumberArray(selectedIndex) {
        return selectedIndex instanceof Array;
    }
    var MDCListFoundation = /** @class */ (function (_super) {
        __extends(MDCListFoundation, _super);
        function MDCListFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCListFoundation.defaultAdapter, adapter)) || this;
            _this.wrapFocus_ = false;
            _this.isVertical_ = true;
            _this.isSingleSelectionList_ = false;
            _this.selectedIndex_ = numbers$2.UNSET_INDEX;
            _this.focusedItemIndex_ = numbers$2.UNSET_INDEX;
            _this.useActivatedClass_ = false;
            _this.ariaCurrentAttrValue_ = null;
            _this.isCheckboxList_ = false;
            _this.isRadioList_ = false;
            return _this;
        }
        Object.defineProperty(MDCListFoundation, "strings", {
            get: function () {
                return strings$2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCListFoundation, "cssClasses", {
            get: function () {
                return cssClasses$4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCListFoundation, "numbers", {
            get: function () {
                return numbers$2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCListFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClassForElementIndex: function () { return undefined; },
                    focusItemAtIndex: function () { return undefined; },
                    getAttributeForElementIndex: function () { return null; },
                    getFocusedElementIndex: function () { return 0; },
                    getListItemCount: function () { return 0; },
                    hasCheckboxAtIndex: function () { return false; },
                    hasRadioAtIndex: function () { return false; },
                    isCheckboxCheckedAtIndex: function () { return false; },
                    isFocusInsideList: function () { return false; },
                    isRootFocused: function () { return false; },
                    notifyAction: function () { return undefined; },
                    removeClassForElementIndex: function () { return undefined; },
                    setAttributeForElementIndex: function () { return undefined; },
                    setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },
                    setTabIndexForListItemChildren: function () { return undefined; },
                };
            },
            enumerable: true,
            configurable: true
        });
        MDCListFoundation.prototype.layout = function () {
            if (this.adapter_.getListItemCount() === 0) {
                return;
            }
            if (this.adapter_.hasCheckboxAtIndex(0)) {
                this.isCheckboxList_ = true;
            }
            else if (this.adapter_.hasRadioAtIndex(0)) {
                this.isRadioList_ = true;
            }
        };
        /**
         * Sets the private wrapFocus_ variable.
         */
        MDCListFoundation.prototype.setWrapFocus = function (value) {
            this.wrapFocus_ = value;
        };
        /**
         * Sets the isVertical_ private variable.
         */
        MDCListFoundation.prototype.setVerticalOrientation = function (value) {
            this.isVertical_ = value;
        };
        /**
         * Sets the isSingleSelectionList_ private variable.
         */
        MDCListFoundation.prototype.setSingleSelection = function (value) {
            this.isSingleSelectionList_ = value;
        };
        /**
         * Sets the useActivatedClass_ private variable.
         */
        MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {
            this.useActivatedClass_ = useActivated;
        };
        MDCListFoundation.prototype.getSelectedIndex = function () {
            return this.selectedIndex_;
        };
        MDCListFoundation.prototype.setSelectedIndex = function (index) {
            if (!this.isIndexValid_(index)) {
                return;
            }
            if (this.isCheckboxList_) {
                this.setCheckboxAtIndex_(index);
            }
            else if (this.isRadioList_) {
                this.setRadioAtIndex_(index);
            }
            else {
                this.setSingleSelectionAtIndex_(index);
            }
        };
        /**
         * Focus in handler for the list items.
         */
        MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {
            if (listItemIndex >= 0) {
                this.adapter_.setTabIndexForListItemChildren(listItemIndex, '0');
            }
        };
        /**
         * Focus out handler for the list items.
         */
        MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {
            var _this = this;
            if (listItemIndex >= 0) {
                this.adapter_.setTabIndexForListItemChildren(listItemIndex, '-1');
            }
            /**
             * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus
             * is moved to next element.
             */
            setTimeout(function () {
                if (!_this.adapter_.isFocusInsideList()) {
                    _this.setTabindexToFirstSelectedItem_();
                }
            }, 0);
        };
        /**
         * Key handler for the list.
         */
        MDCListFoundation.prototype.handleKeydown = function (evt, isRootListItem, listItemIndex) {
            var isArrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;
            var isArrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;
            var isArrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;
            var isArrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;
            var isHome = evt.key === 'Home' || evt.keyCode === 36;
            var isEnd = evt.key === 'End' || evt.keyCode === 35;
            var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
            var isSpace = evt.key === 'Space' || evt.keyCode === 32;
            if (this.adapter_.isRootFocused()) {
                if (isArrowUp || isEnd) {
                    evt.preventDefault();
                    this.focusLastElement();
                }
                else if (isArrowDown || isHome) {
                    evt.preventDefault();
                    this.focusFirstElement();
                }
                return;
            }
            var currentIndex = this.adapter_.getFocusedElementIndex();
            if (currentIndex === -1) {
                currentIndex = listItemIndex;
                if (currentIndex < 0) {
                    // If this event doesn't have a mdc-list-item ancestor from the
                    // current list (not from a sublist), return early.
                    return;
                }
            }
            var nextIndex;
            if ((this.isVertical_ && isArrowDown) || (!this.isVertical_ && isArrowRight)) {
                this.preventDefaultEvent_(evt);
                nextIndex = this.focusNextElement(currentIndex);
            }
            else if ((this.isVertical_ && isArrowUp) || (!this.isVertical_ && isArrowLeft)) {
                this.preventDefaultEvent_(evt);
                nextIndex = this.focusPrevElement(currentIndex);
            }
            else if (isHome) {
                this.preventDefaultEvent_(evt);
                nextIndex = this.focusFirstElement();
            }
            else if (isEnd) {
                this.preventDefaultEvent_(evt);
                nextIndex = this.focusLastElement();
            }
            else if (isEnter || isSpace) {
                if (isRootListItem) {
                    // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.
                    var target = evt.target;
                    if (target && target.tagName === 'A' && isEnter) {
                        return;
                    }
                    this.preventDefaultEvent_(evt);
                    if (this.isSelectableList_()) {
                        this.setSelectedIndexOnAction_(currentIndex);
                    }
                    this.adapter_.notifyAction(currentIndex);
                }
            }
            this.focusedItemIndex_ = currentIndex;
            if (nextIndex !== undefined) {
                this.setTabindexAtIndex_(nextIndex);
                this.focusedItemIndex_ = nextIndex;
            }
        };
        /**
         * Click handler for the list.
         */
        MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {
            if (index === numbers$2.UNSET_INDEX) {
                return;
            }
            if (this.isSelectableList_()) {
                this.setSelectedIndexOnAction_(index, toggleCheckbox);
            }
            this.adapter_.notifyAction(index);
            this.setTabindexAtIndex_(index);
            this.focusedItemIndex_ = index;
        };
        /**
         * Focuses the next element on the list.
         */
        MDCListFoundation.prototype.focusNextElement = function (index) {
            var count = this.adapter_.getListItemCount();
            var nextIndex = index + 1;
            if (nextIndex >= count) {
                if (this.wrapFocus_) {
                    nextIndex = 0;
                }
                else {
                    // Return early because last item is already focused.
                    return index;
                }
            }
            this.adapter_.focusItemAtIndex(nextIndex);
            return nextIndex;
        };
        /**
         * Focuses the previous element on the list.
         */
        MDCListFoundation.prototype.focusPrevElement = function (index) {
            var prevIndex = index - 1;
            if (prevIndex < 0) {
                if (this.wrapFocus_) {
                    prevIndex = this.adapter_.getListItemCount() - 1;
                }
                else {
                    // Return early because first item is already focused.
                    return index;
                }
            }
            this.adapter_.focusItemAtIndex(prevIndex);
            return prevIndex;
        };
        MDCListFoundation.prototype.focusFirstElement = function () {
            this.adapter_.focusItemAtIndex(0);
            return 0;
        };
        MDCListFoundation.prototype.focusLastElement = function () {
            var lastIndex = this.adapter_.getListItemCount() - 1;
            this.adapter_.focusItemAtIndex(lastIndex);
            return lastIndex;
        };
        /**
         * @param itemIndex Index of the list item
         * @param isEnabled Sets the list item to enabled or disabled.
         */
        MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {
            if (!this.isIndexValid_(itemIndex)) {
                return;
            }
            if (isEnabled) {
                this.adapter_.removeClassForElementIndex(itemIndex, cssClasses$4.LIST_ITEM_DISABLED_CLASS);
                this.adapter_.setAttributeForElementIndex(itemIndex, strings$2.ARIA_DISABLED, 'false');
            }
            else {
                this.adapter_.addClassForElementIndex(itemIndex, cssClasses$4.LIST_ITEM_DISABLED_CLASS);
                this.adapter_.setAttributeForElementIndex(itemIndex, strings$2.ARIA_DISABLED, 'true');
            }
        };
        /**
         * Ensures that preventDefault is only called if the containing element doesn't
         * consume the event, and it will cause an unintended scroll.
         */
        MDCListFoundation.prototype.preventDefaultEvent_ = function (evt) {
            var target = evt.target;
            var tagName = ("" + target.tagName).toLowerCase();
            if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
                evt.preventDefault();
            }
        };
        MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {
            if (this.selectedIndex_ === index) {
                return;
            }
            var selectedClassName = cssClasses$4.LIST_ITEM_SELECTED_CLASS;
            if (this.useActivatedClass_) {
                selectedClassName = cssClasses$4.LIST_ITEM_ACTIVATED_CLASS;
            }
            if (this.selectedIndex_ !== numbers$2.UNSET_INDEX) {
                this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);
            }
            this.adapter_.addClassForElementIndex(index, selectedClassName);
            this.setAriaForSingleSelectionAtIndex_(index);
            this.selectedIndex_ = index;
        };
        /**
         * Sets aria attribute for single selection at given index.
         */
        MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex_ = function (index) {
            // Detect the presence of aria-current and get the value only during list initialization when it is in unset state.
            if (this.selectedIndex_ === numbers$2.UNSET_INDEX) {
                this.ariaCurrentAttrValue_ =
                    this.adapter_.getAttributeForElementIndex(index, strings$2.ARIA_CURRENT);
            }
            var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;
            var ariaAttribute = isAriaCurrent ? strings$2.ARIA_CURRENT : strings$2.ARIA_SELECTED;
            if (this.selectedIndex_ !== numbers$2.UNSET_INDEX) {
                this.adapter_.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');
            }
            var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';
            this.adapter_.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
        };
        /**
         * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.
         */
        MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {
            this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);
            if (this.selectedIndex_ !== numbers$2.UNSET_INDEX) {
                this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings$2.ARIA_CHECKED, 'false');
            }
            this.adapter_.setAttributeForElementIndex(index, strings$2.ARIA_CHECKED, 'true');
            this.selectedIndex_ = index;
        };
        MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {
            for (var i = 0; i < this.adapter_.getListItemCount(); i++) {
                var isChecked = false;
                if (index.indexOf(i) >= 0) {
                    isChecked = true;
                }
                this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
                this.adapter_.setAttributeForElementIndex(i, strings$2.ARIA_CHECKED, isChecked ? 'true' : 'false');
            }
            this.selectedIndex_ = index;
        };
        MDCListFoundation.prototype.setTabindexAtIndex_ = function (index) {
            if (this.focusedItemIndex_ === numbers$2.UNSET_INDEX && index !== 0) {
                // If no list item was selected set first list item's tabindex to -1.
                // Generally, tabindex is set to 0 on first list item of list that has no preselected items.
                this.adapter_.setAttributeForElementIndex(0, 'tabindex', '-1');
            }
            else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {
                this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', '-1');
            }
            this.adapter_.setAttributeForElementIndex(index, 'tabindex', '0');
        };
        /**
         * @return Return true if it is single selectin list, checkbox list or radio list.
         */
        MDCListFoundation.prototype.isSelectableList_ = function () {
            return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;
        };
        MDCListFoundation.prototype.setTabindexToFirstSelectedItem_ = function () {
            var targetIndex = 0;
            if (this.isSelectableList_()) {
                if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== numbers$2.UNSET_INDEX) {
                    targetIndex = this.selectedIndex_;
                }
                else if (isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {
                    targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) { return Math.min(currentIndex, minIndex); });
                }
            }
            this.setTabindexAtIndex_(targetIndex);
        };
        MDCListFoundation.prototype.isIndexValid_ = function (index) {
            var _this = this;
            if (index instanceof Array) {
                if (!this.isCheckboxList_) {
                    throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
                }
                if (index.length === 0) {
                    return true;
                }
                else {
                    return index.some(function (i) { return _this.isIndexInRange_(i); });
                }
            }
            else if (typeof index === 'number') {
                if (this.isCheckboxList_) {
                    throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);
                }
                return this.isIndexInRange_(index);
            }
            else {
                return false;
            }
        };
        MDCListFoundation.prototype.isIndexInRange_ = function (index) {
            var listSize = this.adapter_.getListItemCount();
            return index >= 0 && index < listSize;
        };
        MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {
            if (toggleCheckbox === void 0) { toggleCheckbox = true; }
            if (this.isCheckboxList_) {
                this.toggleCheckboxAtIndex_(index, toggleCheckbox);
            }
            else {
                this.setSelectedIndex(index);
            }
        };
        MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {
            var isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);
            if (toggleCheckbox) {
                isChecked = !isChecked;
                this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
            }
            this.adapter_.setAttributeForElementIndex(index, strings$2.ARIA_CHECKED, isChecked ? 'true' : 'false');
            // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.
            var selectedIndexes = this.selectedIndex_ === numbers$2.UNSET_INDEX ? [] : this.selectedIndex_.slice();
            if (isChecked) {
                selectedIndexes.push(index);
            }
            else {
                selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });
            }
            this.selectedIndex_ = selectedIndexes;
        };
        return MDCListFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCList = /** @class */ (function (_super) {
        __extends(MDCList, _super);
        function MDCList() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(MDCList.prototype, "vertical", {
            set: function (value) {
                this.foundation_.setVerticalOrientation(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCList.prototype, "listElements", {
            get: function () {
                return [].slice.call(this.root_.querySelectorAll("." + cssClasses$4.LIST_ITEM_CLASS));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCList.prototype, "wrapFocus", {
            set: function (value) {
                this.foundation_.setWrapFocus(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCList.prototype, "singleSelection", {
            set: function (isSingleSelectionList) {
                this.foundation_.setSingleSelection(isSingleSelectionList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCList.prototype, "selectedIndex", {
            get: function () {
                return this.foundation_.getSelectedIndex();
            },
            set: function (index) {
                this.foundation_.setSelectedIndex(index);
            },
            enumerable: true,
            configurable: true
        });
        MDCList.attachTo = function (root) {
            return new MDCList(root);
        };
        MDCList.prototype.initialSyncWithDOM = function () {
            this.handleClick_ = this.handleClickEvent_.bind(this);
            this.handleKeydown_ = this.handleKeydownEvent_.bind(this);
            this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);
            this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);
            this.listen('keydown', this.handleKeydown_);
            this.listen('click', this.handleClick_);
            this.listen('focusin', this.focusInEventListener_);
            this.listen('focusout', this.focusOutEventListener_);
            this.layout();
            this.initializeListType();
        };
        MDCList.prototype.destroy = function () {
            this.unlisten('keydown', this.handleKeydown_);
            this.unlisten('click', this.handleClick_);
            this.unlisten('focusin', this.focusInEventListener_);
            this.unlisten('focusout', this.focusOutEventListener_);
        };
        MDCList.prototype.layout = function () {
            var direction = this.root_.getAttribute(strings$2.ARIA_ORIENTATION);
            this.vertical = direction !== strings$2.ARIA_ORIENTATION_HORIZONTAL;
            // List items need to have at least tabindex=-1 to be focusable.
            [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])'))
                .forEach(function (el) {
                el.setAttribute('tabindex', '-1');
            });
            // Child button/a elements are not tabbable until the list item is focused.
            [].slice.call(this.root_.querySelectorAll(strings$2.FOCUSABLE_CHILD_ELEMENTS))
                .forEach(function (el) { return el.setAttribute('tabindex', '-1'); });
            this.foundation_.layout();
        };
        /**
         * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.
         */
        MDCList.prototype.initializeListType = function () {
            var _this = this;
            var checkboxListItems = this.root_.querySelectorAll(strings$2.ARIA_ROLE_CHECKBOX_SELECTOR);
            var singleSelectedListItem = this.root_.querySelector("\n      ." + cssClasses$4.LIST_ITEM_ACTIVATED_CLASS + ",\n      ." + cssClasses$4.LIST_ITEM_SELECTED_CLASS + "\n    ");
            var radioSelectedListItem = this.root_.querySelector(strings$2.ARIA_CHECKED_RADIO_SELECTOR);
            if (checkboxListItems.length) {
                var preselectedItems = this.root_.querySelectorAll(strings$2.ARIA_CHECKED_CHECKBOX_SELECTOR);
                this.selectedIndex =
                    [].map.call(preselectedItems, function (listItem) { return _this.listElements.indexOf(listItem); });
            }
            else if (singleSelectedListItem) {
                if (singleSelectedListItem.classList.contains(cssClasses$4.LIST_ITEM_ACTIVATED_CLASS)) {
                    this.foundation_.setUseActivatedClass(true);
                }
                this.singleSelection = true;
                this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);
            }
            else if (radioSelectedListItem) {
                this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
            }
        };
        /**
         * Updates the list item at itemIndex to the desired isEnabled state.
         * @param itemIndex Index of the list item
         * @param isEnabled Sets the list item to enabled or disabled.
         */
        MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {
            this.foundation_.setEnabled(itemIndex, isEnabled);
        };
        MDCList.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            var adapter = {
                addClassForElementIndex: function (index, className) {
                    var element = _this.listElements[index];
                    if (element) {
                        element.classList.add(className);
                    }
                },
                focusItemAtIndex: function (index) {
                    var element = _this.listElements[index];
                    if (element) {
                        element.focus();
                    }
                },
                getAttributeForElementIndex: function (index, attr) { return _this.listElements[index].getAttribute(attr); },
                getFocusedElementIndex: function () { return _this.listElements.indexOf(document.activeElement); },
                getListItemCount: function () { return _this.listElements.length; },
                hasCheckboxAtIndex: function (index) {
                    var listItem = _this.listElements[index];
                    return !!listItem.querySelector(strings$2.CHECKBOX_SELECTOR);
                },
                hasRadioAtIndex: function (index) {
                    var listItem = _this.listElements[index];
                    return !!listItem.querySelector(strings$2.RADIO_SELECTOR);
                },
                isCheckboxCheckedAtIndex: function (index) {
                    var listItem = _this.listElements[index];
                    var toggleEl = listItem.querySelector(strings$2.CHECKBOX_SELECTOR);
                    return toggleEl.checked;
                },
                isFocusInsideList: function () {
                    return _this.root_.contains(document.activeElement);
                },
                isRootFocused: function () { return document.activeElement === _this.root_; },
                notifyAction: function (index) {
                    _this.emit(strings$2.ACTION_EVENT, { index: index }, /** shouldBubble */ true);
                },
                removeClassForElementIndex: function (index, className) {
                    var element = _this.listElements[index];
                    if (element) {
                        element.classList.remove(className);
                    }
                },
                setAttributeForElementIndex: function (index, attr, value) {
                    var element = _this.listElements[index];
                    if (element) {
                        element.setAttribute(attr, value);
                    }
                },
                setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {
                    var listItem = _this.listElements[index];
                    var toggleEl = listItem.querySelector(strings$2.CHECKBOX_RADIO_SELECTOR);
                    toggleEl.checked = isChecked;
                    var event = document.createEvent('Event');
                    event.initEvent('change', true, true);
                    toggleEl.dispatchEvent(event);
                },
                setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {
                    var element = _this.listElements[listItemIndex];
                    var listItemChildren = [].slice.call(element.querySelectorAll(strings$2.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
                    listItemChildren.forEach(function (el) { return el.setAttribute('tabindex', tabIndexValue); });
                },
            };
            return new MDCListFoundation(adapter);
        };
        /**
         * Used to figure out which list item this event is targetting. Or returns -1 if
         * there is no list item
         */
        MDCList.prototype.getListItemIndex_ = function (evt) {
            var eventTarget = evt.target;
            var nearestParent = closest(eventTarget, "." + cssClasses$4.LIST_ITEM_CLASS + ", ." + cssClasses$4.ROOT);
            // Get the index of the element if it is a list item.
            if (nearestParent && matches(nearestParent, "." + cssClasses$4.LIST_ITEM_CLASS)) {
                return this.listElements.indexOf(nearestParent);
            }
            return -1;
        };
        /**
         * Used to figure out which element was clicked before sending the event to the foundation.
         */
        MDCList.prototype.handleFocusInEvent_ = function (evt) {
            var index = this.getListItemIndex_(evt);
            this.foundation_.handleFocusIn(evt, index);
        };
        /**
         * Used to figure out which element was clicked before sending the event to the foundation.
         */
        MDCList.prototype.handleFocusOutEvent_ = function (evt) {
            var index = this.getListItemIndex_(evt);
            this.foundation_.handleFocusOut(evt, index);
        };
        /**
         * Used to figure out which element was focused when keydown event occurred before sending the event to the
         * foundation.
         */
        MDCList.prototype.handleKeydownEvent_ = function (evt) {
            var index = this.getListItemIndex_(evt);
            var target = evt.target;
            this.foundation_.handleKeydown(evt, target.classList.contains(cssClasses$4.LIST_ITEM_CLASS), index);
        };
        /**
         * Used to figure out which element was clicked before sending the event to the foundation.
         */
        MDCList.prototype.handleClickEvent_ = function (evt) {
            var index = this.getListItemIndex_(evt);
            var target = evt.target;
            // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.
            var toggleCheckbox = !matches(target, strings$2.CHECKBOX_RADIO_SELECTOR);
            this.foundation_.handleClick(index, toggleCheckbox);
        };
        return MDCList;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCMenuSurfaceFoundation = /** @class */ (function (_super) {
        __extends(MDCMenuSurfaceFoundation, _super);
        function MDCMenuSurfaceFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCMenuSurfaceFoundation.defaultAdapter, adapter)) || this;
            _this.isOpen_ = false;
            _this.isQuickOpen_ = false;
            _this.isHoistedElement_ = false;
            _this.isFixedPosition_ = false;
            _this.openAnimationEndTimerId_ = 0;
            _this.closeAnimationEndTimerId_ = 0;
            _this.animationRequestId_ = 0;
            _this.anchorCorner_ = Corner.TOP_START;
            _this.anchorMargin_ = { top: 0, right: 0, bottom: 0, left: 0 };
            _this.position_ = { x: 0, y: 0 };
            return _this;
        }
        Object.defineProperty(MDCMenuSurfaceFoundation, "cssClasses", {
            get: function () {
                return cssClasses$3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "strings", {
            get: function () {
                return strings$1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "numbers", {
            get: function () {
                return numbers$1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "Corner", {
            get: function () {
                return Corner;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenuSurfaceFoundation, "defaultAdapter", {
            /**
             * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    hasAnchor: function () { return false; },
                    isElementInContainer: function () { return false; },
                    isFocused: function () { return false; },
                    isRtl: function () { return false; },
                    getInnerDimensions: function () { return ({ height: 0, width: 0 }); },
                    getAnchorDimensions: function () { return null; },
                    getWindowDimensions: function () { return ({ height: 0, width: 0 }); },
                    getBodyDimensions: function () { return ({ height: 0, width: 0 }); },
                    getWindowScroll: function () { return ({ x: 0, y: 0 }); },
                    setPosition: function () { return undefined; },
                    setMaxHeight: function () { return undefined; },
                    setTransformOrigin: function () { return undefined; },
                    saveFocus: function () { return undefined; },
                    restoreFocus: function () { return undefined; },
                    notifyClose: function () { return undefined; },
                    notifyOpen: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCMenuSurfaceFoundation.prototype.init = function () {
            var _a = MDCMenuSurfaceFoundation.cssClasses, ROOT = _a.ROOT, OPEN = _a.OPEN;
            if (!this.adapter_.hasClass(ROOT)) {
                throw new Error(ROOT + " class required in root element.");
            }
            if (this.adapter_.hasClass(OPEN)) {
                this.isOpen_ = true;
            }
        };
        MDCMenuSurfaceFoundation.prototype.destroy = function () {
            clearTimeout(this.openAnimationEndTimerId_);
            clearTimeout(this.closeAnimationEndTimerId_);
            // Cancel any currently running animations.
            cancelAnimationFrame(this.animationRequestId_);
        };
        /**
         * @param corner Default anchor corner alignment of top-left menu surface corner.
         */
        MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function (corner) {
            this.anchorCorner_ = corner;
        };
        /**
         * @param margin Set of margin values from anchor.
         */
        MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function (margin) {
            this.anchorMargin_.top = margin.top || 0;
            this.anchorMargin_.right = margin.right || 0;
            this.anchorMargin_.bottom = margin.bottom || 0;
            this.anchorMargin_.left = margin.left || 0;
        };
        /** Used to indicate if the menu-surface is hoisted to the body. */
        MDCMenuSurfaceFoundation.prototype.setIsHoisted = function (isHoisted) {
            this.isHoistedElement_ = isHoisted;
        };
        /** Used to set the menu-surface calculations based on a fixed position menu. */
        MDCMenuSurfaceFoundation.prototype.setFixedPosition = function (isFixedPosition) {
            this.isFixedPosition_ = isFixedPosition;
        };
        /** Sets the menu-surface position on the page. */
        MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function (x, y) {
            this.position_.x = this.isFinite_(x) ? x : 0;
            this.position_.y = this.isFinite_(y) ? y : 0;
        };
        MDCMenuSurfaceFoundation.prototype.setQuickOpen = function (quickOpen) {
            this.isQuickOpen_ = quickOpen;
        };
        MDCMenuSurfaceFoundation.prototype.isOpen = function () {
            return this.isOpen_;
        };
        /**
         * Open the menu surface.
         */
        MDCMenuSurfaceFoundation.prototype.open = function () {
            var _this = this;
            this.adapter_.saveFocus();
            if (!this.isQuickOpen_) {
                this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
            }
            this.animationRequestId_ = requestAnimationFrame(function () {
                _this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                _this.dimensions_ = _this.adapter_.getInnerDimensions();
                _this.autoPosition_();
                if (_this.isQuickOpen_) {
                    _this.adapter_.notifyOpen();
                }
                else {
                    _this.openAnimationEndTimerId_ = setTimeout(function () {
                        _this.openAnimationEndTimerId_ = 0;
                        _this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
                        _this.adapter_.notifyOpen();
                    }, numbers$1.TRANSITION_OPEN_DURATION);
                }
            });
            this.isOpen_ = true;
        };
        /**
         * Closes the menu surface.
         */
        MDCMenuSurfaceFoundation.prototype.close = function (skipRestoreFocus) {
            var _this = this;
            if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }
            if (!this.isQuickOpen_) {
                this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
            }
            requestAnimationFrame(function () {
                _this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                if (_this.isQuickOpen_) {
                    _this.adapter_.notifyClose();
                }
                else {
                    _this.closeAnimationEndTimerId_ = setTimeout(function () {
                        _this.closeAnimationEndTimerId_ = 0;
                        _this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
                        _this.adapter_.notifyClose();
                    }, numbers$1.TRANSITION_CLOSE_DURATION);
                }
            });
            this.isOpen_ = false;
            if (!skipRestoreFocus) {
                this.maybeRestoreFocus_();
            }
        };
        /** Handle clicks and close if not within menu-surface element. */
        MDCMenuSurfaceFoundation.prototype.handleBodyClick = function (evt) {
            var el = evt.target;
            if (this.adapter_.isElementInContainer(el)) {
                return;
            }
            this.close();
        };
        /** Handle keys that close the surface. */
        MDCMenuSurfaceFoundation.prototype.handleKeydown = function (evt) {
            var keyCode = evt.keyCode, key = evt.key;
            var isEscape = key === 'Escape' || keyCode === 27;
            if (isEscape) {
                this.close();
            }
        };
        MDCMenuSurfaceFoundation.prototype.autoPosition_ = function () {
            var _a;
            // Compute measurements for autoposition methods reuse.
            this.measurements_ = this.getAutoLayoutMeasurements_();
            var corner = this.getOriginCorner_();
            var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight_(corner);
            var verticalAlignment = this.hasBit_(corner, CornerBit.BOTTOM) ? 'bottom' : 'top';
            var horizontalAlignment = this.hasBit_(corner, CornerBit.RIGHT) ? 'right' : 'left';
            var horizontalOffset = this.getHorizontalOriginOffset_(corner);
            var verticalOffset = this.getVerticalOriginOffset_(corner);
            var _b = this.measurements_, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;
            var position = (_a = {},
                _a[horizontalAlignment] = horizontalOffset,
                _a[verticalAlignment] = verticalOffset,
                _a);
            // Center align when anchor width is comparable or greater than menu surface, otherwise keep corner.
            if (anchorSize.width / surfaceSize.width > numbers$1.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
                horizontalAlignment = 'center';
            }
            // If the menu-surface has been hoisted to the body, it's no longer relative to the anchor element
            if (this.isHoistedElement_ || this.isFixedPosition_) {
                this.adjustPositionForHoistedElement_(position);
            }
            this.adapter_.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
            this.adapter_.setPosition(position);
            this.adapter_.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');
        };
        /**
         * @return Measurements used to position menu surface popup.
         */
        MDCMenuSurfaceFoundation.prototype.getAutoLayoutMeasurements_ = function () {
            var anchorRect = this.adapter_.getAnchorDimensions();
            var bodySize = this.adapter_.getBodyDimensions();
            var viewportSize = this.adapter_.getWindowDimensions();
            var windowScroll = this.adapter_.getWindowScroll();
            if (!anchorRect) {
                // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                anchorRect = {
                    top: this.position_.y,
                    right: this.position_.x,
                    bottom: this.position_.y,
                    left: this.position_.x,
                    width: 0,
                    height: 0,
                };
                // tslint:enable:object-literal-sort-keys
            }
            return {
                anchorSize: anchorRect,
                bodySize: bodySize,
                surfaceSize: this.dimensions_,
                viewportDistance: {
                    // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                    top: anchorRect.top,
                    right: viewportSize.width - anchorRect.right,
                    bottom: viewportSize.height - anchorRect.bottom,
                    left: anchorRect.left,
                },
                viewportSize: viewportSize,
                windowScroll: windowScroll,
            };
        };
        /**
         * Computes the corner of the anchor from which to animate and position the menu surface.
         */
        MDCMenuSurfaceFoundation.prototype.getOriginCorner_ = function () {
            // Defaults: open from the top left.
            var corner = Corner.TOP_LEFT;
            var _a = this.measurements_, viewportDistance = _a.viewportDistance, anchorSize = _a.anchorSize, surfaceSize = _a.surfaceSize;
            var isBottomAligned = this.hasBit_(this.anchorCorner_, CornerBit.BOTTOM);
            var availableTop = isBottomAligned ? viewportDistance.top + anchorSize.height + this.anchorMargin_.bottom
                : viewportDistance.top + this.anchorMargin_.top;
            var availableBottom = isBottomAligned ? viewportDistance.bottom - this.anchorMargin_.bottom
                : viewportDistance.bottom + anchorSize.height - this.anchorMargin_.top;
            var topOverflow = surfaceSize.height - availableTop;
            var bottomOverflow = surfaceSize.height - availableBottom;
            if (bottomOverflow > 0 && topOverflow < bottomOverflow) {
                corner = this.setBit_(corner, CornerBit.BOTTOM);
            }
            var isRtl = this.adapter_.isRtl();
            var isFlipRtl = this.hasBit_(this.anchorCorner_, CornerBit.FLIP_RTL);
            var avoidHorizontalOverlap = this.hasBit_(this.anchorCorner_, CornerBit.RIGHT);
            var isAlignedRight = (avoidHorizontalOverlap && !isRtl) ||
                (!avoidHorizontalOverlap && isFlipRtl && isRtl);
            var availableLeft = isAlignedRight ? viewportDistance.left + anchorSize.width + this.anchorMargin_.right :
                viewportDistance.left + this.anchorMargin_.left;
            var availableRight = isAlignedRight ? viewportDistance.right - this.anchorMargin_.right :
                viewportDistance.right + anchorSize.width - this.anchorMargin_.left;
            var leftOverflow = surfaceSize.width - availableLeft;
            var rightOverflow = surfaceSize.width - availableRight;
            if ((leftOverflow < 0 && isAlignedRight && isRtl) ||
                (avoidHorizontalOverlap && !isAlignedRight && leftOverflow < 0) ||
                (rightOverflow > 0 && leftOverflow < rightOverflow)) {
                corner = this.setBit_(corner, CornerBit.RIGHT);
            }
            return corner;
        };
        /**
         * @param corner Origin corner of the menu surface.
         * @return Maximum height of the menu surface, based on available space. 0 indicates should not be set.
         */
        MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight_ = function (corner) {
            var viewportDistance = this.measurements_.viewportDistance;
            var maxHeight = 0;
            var isBottomAligned = this.hasBit_(corner, CornerBit.BOTTOM);
            var isBottomAnchored = this.hasBit_(this.anchorCorner_, CornerBit.BOTTOM);
            var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
            // When maximum height is not specified, it is handled from CSS.
            if (isBottomAligned) {
                maxHeight = viewportDistance.top + this.anchorMargin_.top - MARGIN_TO_EDGE;
                if (!isBottomAnchored) {
                    maxHeight += this.measurements_.anchorSize.height;
                }
            }
            else {
                maxHeight =
                    viewportDistance.bottom - this.anchorMargin_.bottom + this.measurements_.anchorSize.height - MARGIN_TO_EDGE;
                if (isBottomAnchored) {
                    maxHeight -= this.measurements_.anchorSize.height;
                }
            }
            return maxHeight;
        };
        /**
         * @param corner Origin corner of the menu surface.
         * @return Horizontal offset of menu surface origin corner from corresponding anchor corner.
         */
        MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset_ = function (corner) {
            var anchorSize = this.measurements_.anchorSize;
            // isRightAligned corresponds to using the 'right' property on the surface.
            var isRightAligned = this.hasBit_(corner, CornerBit.RIGHT);
            var avoidHorizontalOverlap = this.hasBit_(this.anchorCorner_, CornerBit.RIGHT);
            if (isRightAligned) {
                var rightOffset = avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin_.left : this.anchorMargin_.right;
                // For hoisted or fixed elements, adjust the offset by the difference between viewport width and body width so
                // when we calculate the right value (`adjustPositionForHoistedElement_`) based on the element position,
                // the right property is correct.
                if (this.isHoistedElement_ || this.isFixedPosition_) {
                    return rightOffset - (this.measurements_.viewportSize.width - this.measurements_.bodySize.width);
                }
                return rightOffset;
            }
            return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin_.right : this.anchorMargin_.left;
        };
        /**
         * @param corner Origin corner of the menu surface.
         * @return Vertical offset of menu surface origin corner from corresponding anchor corner.
         */
        MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset_ = function (corner) {
            var anchorSize = this.measurements_.anchorSize;
            var isBottomAligned = this.hasBit_(corner, CornerBit.BOTTOM);
            var avoidVerticalOverlap = this.hasBit_(this.anchorCorner_, CornerBit.BOTTOM);
            var y = 0;
            if (isBottomAligned) {
                y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin_.top : -this.anchorMargin_.bottom;
            }
            else {
                y = avoidVerticalOverlap ? (anchorSize.height + this.anchorMargin_.bottom) : this.anchorMargin_.top;
            }
            return y;
        };
        /** Calculates the offsets for positioning the menu-surface when the menu-surface has been hoisted to the body. */
        MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement_ = function (position) {
            var e_1, _a;
            var _b = this.measurements_, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance;
            var props = Object.keys(position);
            try {
                for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                    var prop = props_1_1.value;
                    var value = position[prop] || 0;
                    // Hoisted surfaces need to have the anchor elements location on the page added to the
                    // position properties for proper alignment on the body.
                    value += viewportDistance[prop];
                    // Surfaces that are absolutely positioned need to have additional calculations for scroll
                    // and bottom positioning.
                    if (!this.isFixedPosition_) {
                        if (prop === 'top') {
                            value += windowScroll.y;
                        }
                        else if (prop === 'bottom') {
                            value -= windowScroll.y;
                        }
                        else if (prop === 'left') {
                            value += windowScroll.x;
                        }
                        else { // prop === 'right'
                            value -= windowScroll.x;
                        }
                    }
                    position[prop] = value;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * The last focused element when the menu surface was opened should regain focus, if the user is
         * focused on or within the menu surface when it is closed.
         */
        MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus_ = function () {
            var isRootFocused = this.adapter_.isFocused();
            var childHasFocus = document.activeElement && this.adapter_.isElementInContainer(document.activeElement);
            if (isRootFocused || childHasFocus) {
                this.adapter_.restoreFocus();
            }
        };
        MDCMenuSurfaceFoundation.prototype.hasBit_ = function (corner, bit) {
            return Boolean(corner & bit); // tslint:disable-line:no-bitwise
        };
        MDCMenuSurfaceFoundation.prototype.setBit_ = function (corner, bit) {
            return corner | bit; // tslint:disable-line:no-bitwise
        };
        /**
         * isFinite that doesn't force conversion to number type.
         * Equivalent to Number.isFinite in ES2015, which is not supported in IE.
         */
        MDCMenuSurfaceFoundation.prototype.isFinite_ = function (num) {
            return typeof num === 'number' && isFinite(num);
        };
        return MDCMenuSurfaceFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cachedCssTransformPropertyName_;
    /**
     * Returns the name of the correct transform property to use on the current browser.
     */
    function getTransformPropertyName(globalObj, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (cachedCssTransformPropertyName_ === undefined || forceRefresh) {
            var el = globalObj.document.createElement('div');
            cachedCssTransformPropertyName_ = 'transform' in el.style ? 'transform' : 'webkitTransform';
        }
        return cachedCssTransformPropertyName_;
    }

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCMenuSurface = /** @class */ (function (_super) {
        __extends(MDCMenuSurface, _super);
        function MDCMenuSurface() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCMenuSurface.attachTo = function (root) {
            return new MDCMenuSurface(root);
        };
        MDCMenuSurface.prototype.initialSyncWithDOM = function () {
            var _this = this;
            var parentEl = this.root_.parentElement;
            this.anchorElement = parentEl && parentEl.classList.contains(cssClasses$3.ANCHOR) ? parentEl : null;
            if (this.root_.classList.contains(cssClasses$3.FIXED)) {
                this.setFixedPosition(true);
            }
            this.handleKeydown_ = function (evt) { return _this.foundation_.handleKeydown(evt); };
            this.handleBodyClick_ = function (evt) { return _this.foundation_.handleBodyClick(evt); };
            this.registerBodyClickListener_ = function () { return document.body.addEventListener('click', _this.handleBodyClick_); };
            this.deregisterBodyClickListener_ = function () { return document.body.removeEventListener('click', _this.handleBodyClick_); };
            this.listen('keydown', this.handleKeydown_);
            this.listen(strings$1.OPENED_EVENT, this.registerBodyClickListener_);
            this.listen(strings$1.CLOSED_EVENT, this.deregisterBodyClickListener_);
        };
        MDCMenuSurface.prototype.destroy = function () {
            this.unlisten('keydown', this.handleKeydown_);
            this.unlisten(strings$1.OPENED_EVENT, this.registerBodyClickListener_);
            this.unlisten(strings$1.CLOSED_EVENT, this.deregisterBodyClickListener_);
            _super.prototype.destroy.call(this);
        };
        MDCMenuSurface.prototype.isOpen = function () {
            return this.foundation_.isOpen();
        };
        MDCMenuSurface.prototype.open = function () {
            this.foundation_.open();
        };
        MDCMenuSurface.prototype.close = function (skipRestoreFocus) {
            if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }
            this.foundation_.close(skipRestoreFocus);
        };
        Object.defineProperty(MDCMenuSurface.prototype, "quickOpen", {
            set: function (quickOpen) {
                this.foundation_.setQuickOpen(quickOpen);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Removes the menu-surface from it's current location and appends it to the
         * body to overcome any overflow:hidden issues.
         */
        MDCMenuSurface.prototype.hoistMenuToBody = function () {
            document.body.appendChild(this.root_);
            this.setIsHoisted(true);
        };
        /** Sets the foundation to use page offsets for an positioning when the menu is hoisted to the body. */
        MDCMenuSurface.prototype.setIsHoisted = function (isHoisted) {
            this.foundation_.setIsHoisted(isHoisted);
        };
        /** Sets the element that the menu-surface is anchored to. */
        MDCMenuSurface.prototype.setMenuSurfaceAnchorElement = function (element) {
            this.anchorElement = element;
        };
        /** Sets the menu-surface to position: fixed. */
        MDCMenuSurface.prototype.setFixedPosition = function (isFixed) {
            if (isFixed) {
                this.root_.classList.add(cssClasses$3.FIXED);
            }
            else {
                this.root_.classList.remove(cssClasses$3.FIXED);
            }
            this.foundation_.setFixedPosition(isFixed);
        };
        /** Sets the absolute x/y position to position based on. Requires the menu to be hoisted. */
        MDCMenuSurface.prototype.setAbsolutePosition = function (x, y) {
            this.foundation_.setAbsolutePosition(x, y);
            this.setIsHoisted(true);
        };
        /**
         * @param corner Default anchor corner alignment of top-left surface corner.
         */
        MDCMenuSurface.prototype.setAnchorCorner = function (corner) {
            this.foundation_.setAnchorCorner(corner);
        };
        MDCMenuSurface.prototype.setAnchorMargin = function (margin) {
            this.foundation_.setAnchorMargin(margin);
        };
        MDCMenuSurface.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = {
                addClass: function (className) { return _this.root_.classList.add(className); },
                removeClass: function (className) { return _this.root_.classList.remove(className); },
                hasClass: function (className) { return _this.root_.classList.contains(className); },
                hasAnchor: function () { return !!_this.anchorElement; },
                notifyClose: function () { return _this.emit(MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {}); },
                notifyOpen: function () { return _this.emit(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {}); },
                isElementInContainer: function (el) { return _this.root_.contains(el); },
                isRtl: function () { return getComputedStyle(_this.root_).getPropertyValue('direction') === 'rtl'; },
                setTransformOrigin: function (origin) {
                    var propertyName = getTransformPropertyName(window) + "-origin";
                    _this.root_.style.setProperty(propertyName, origin);
                },
                isFocused: function () { return document.activeElement === _this.root_; },
                saveFocus: function () {
                    _this.previousFocus_ = document.activeElement;
                },
                restoreFocus: function () {
                    if (_this.root_.contains(document.activeElement)) {
                        if (_this.previousFocus_ && _this.previousFocus_.focus) {
                            _this.previousFocus_.focus();
                        }
                    }
                },
                getInnerDimensions: function () {
                    return { width: _this.root_.offsetWidth, height: _this.root_.offsetHeight };
                },
                getAnchorDimensions: function () { return _this.anchorElement ? _this.anchorElement.getBoundingClientRect() : null; },
                getWindowDimensions: function () {
                    return { width: window.innerWidth, height: window.innerHeight };
                },
                getBodyDimensions: function () {
                    return { width: document.body.clientWidth, height: document.body.clientHeight };
                },
                getWindowScroll: function () {
                    return { x: window.pageXOffset, y: window.pageYOffset };
                },
                setPosition: function (position) {
                    _this.root_.style.left = 'left' in position ? position.left + "px" : '';
                    _this.root_.style.right = 'right' in position ? position.right + "px" : '';
                    _this.root_.style.top = 'top' in position ? position.top + "px" : '';
                    _this.root_.style.bottom = 'bottom' in position ? position.bottom + "px" : '';
                },
                setMaxHeight: function (height) {
                    _this.root_.style.maxHeight = height;
                },
            };
            // tslint:enable:object-literal-sort-keys
            return new MDCMenuSurfaceFoundation(adapter);
        };
        return MDCMenuSurface;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$5 = {
        MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',
        MENU_SELECTION_GROUP: 'mdc-menu__selection-group',
        ROOT: 'mdc-menu',
    };
    var strings$3 = {
        ARIA_CHECKED_ATTR: 'aria-checked',
        ARIA_DISABLED_ATTR: 'aria-disabled',
        CHECKBOX_SELECTOR: 'input[type="checkbox"]',
        LIST_SELECTOR: '.mdc-list',
        SELECTED_EVENT: 'MDCMenu:selected',
    };
    var numbers$3 = {
        FOCUS_ROOT_INDEX: -1,
    };
    var DefaultFocusState;
    (function (DefaultFocusState) {
        DefaultFocusState[DefaultFocusState["NONE"] = 0] = "NONE";
        DefaultFocusState[DefaultFocusState["LIST_ROOT"] = 1] = "LIST_ROOT";
        DefaultFocusState[DefaultFocusState["FIRST_ITEM"] = 2] = "FIRST_ITEM";
        DefaultFocusState[DefaultFocusState["LAST_ITEM"] = 3] = "LAST_ITEM";
    })(DefaultFocusState || (DefaultFocusState = {}));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCMenuFoundation = /** @class */ (function (_super) {
        __extends(MDCMenuFoundation, _super);
        function MDCMenuFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCMenuFoundation.defaultAdapter, adapter)) || this;
            _this.closeAnimationEndTimerId_ = 0;
            _this.defaultFocusState_ = DefaultFocusState.LIST_ROOT;
            return _this;
        }
        Object.defineProperty(MDCMenuFoundation, "cssClasses", {
            get: function () {
                return cssClasses$5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenuFoundation, "strings", {
            get: function () {
                return strings$3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenuFoundation, "numbers", {
            get: function () {
                return numbers$3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenuFoundation, "defaultAdapter", {
            /**
             * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClassToElementAtIndex: function () { return undefined; },
                    removeClassFromElementAtIndex: function () { return undefined; },
                    addAttributeToElementAtIndex: function () { return undefined; },
                    removeAttributeFromElementAtIndex: function () { return undefined; },
                    elementContainsClass: function () { return false; },
                    closeSurface: function () { return undefined; },
                    getElementIndex: function () { return -1; },
                    notifySelected: function () { return undefined; },
                    getMenuItemCount: function () { return 0; },
                    focusItemAtIndex: function () { return undefined; },
                    focusListRoot: function () { return undefined; },
                    getSelectedSiblingOfItemAtIndex: function () { return -1; },
                    isSelectableItemAtIndex: function () { return false; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCMenuFoundation.prototype.destroy = function () {
            if (this.closeAnimationEndTimerId_) {
                clearTimeout(this.closeAnimationEndTimerId_);
            }
            this.adapter_.closeSurface();
        };
        MDCMenuFoundation.prototype.handleKeydown = function (evt) {
            var key = evt.key, keyCode = evt.keyCode;
            var isTab = key === 'Tab' || keyCode === 9;
            if (isTab) {
                this.adapter_.closeSurface(/** skipRestoreFocus */ true);
            }
        };
        MDCMenuFoundation.prototype.handleItemAction = function (listItem) {
            var _this = this;
            var index = this.adapter_.getElementIndex(listItem);
            if (index < 0) {
                return;
            }
            this.adapter_.notifySelected({ index: index });
            this.adapter_.closeSurface();
            // Wait for the menu to close before adding/removing classes that affect styles.
            this.closeAnimationEndTimerId_ = setTimeout(function () {
                // Recompute the index in case the menu contents have changed.
                var recomputedIndex = _this.adapter_.getElementIndex(listItem);
                if (_this.adapter_.isSelectableItemAtIndex(recomputedIndex)) {
                    _this.setSelectedIndex(recomputedIndex);
                }
            }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
        };
        MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {
            switch (this.defaultFocusState_) {
                case DefaultFocusState.FIRST_ITEM:
                    this.adapter_.focusItemAtIndex(0);
                    break;
                case DefaultFocusState.LAST_ITEM:
                    this.adapter_.focusItemAtIndex(this.adapter_.getMenuItemCount() - 1);
                    break;
                case DefaultFocusState.NONE:
                    // Do nothing.
                    break;
                default:
                    this.adapter_.focusListRoot();
                    break;
            }
        };
        /**
         * Sets default focus state where the menu should focus every time when menu
         * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
         * default.
         */
        MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {
            this.defaultFocusState_ = focusState;
        };
        /**
         * Selects the list item at `index` within the menu.
         * @param index Index of list item within the menu.
         */
        MDCMenuFoundation.prototype.setSelectedIndex = function (index) {
            this.validatedIndex_(index);
            if (!this.adapter_.isSelectableItemAtIndex(index)) {
                throw new Error('MDCMenuFoundation: No selection group at specified index.');
            }
            var prevSelectedIndex = this.adapter_.getSelectedSiblingOfItemAtIndex(index);
            if (prevSelectedIndex >= 0) {
                this.adapter_.removeAttributeFromElementAtIndex(prevSelectedIndex, strings$3.ARIA_CHECKED_ATTR);
                this.adapter_.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses$5.MENU_SELECTED_LIST_ITEM);
            }
            this.adapter_.addClassToElementAtIndex(index, cssClasses$5.MENU_SELECTED_LIST_ITEM);
            this.adapter_.addAttributeToElementAtIndex(index, strings$3.ARIA_CHECKED_ATTR, 'true');
        };
        /**
         * Sets the enabled state to isEnabled for the menu item at the given index.
         * @param index Index of the menu item
         * @param isEnabled The desired enabled state of the menu item.
         */
        MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {
            this.validatedIndex_(index);
            if (isEnabled) {
                this.adapter_.removeClassFromElementAtIndex(index, cssClasses$4.LIST_ITEM_DISABLED_CLASS);
                this.adapter_.addAttributeToElementAtIndex(index, strings$3.ARIA_DISABLED_ATTR, 'false');
            }
            else {
                this.adapter_.addClassToElementAtIndex(index, cssClasses$4.LIST_ITEM_DISABLED_CLASS);
                this.adapter_.addAttributeToElementAtIndex(index, strings$3.ARIA_DISABLED_ATTR, 'true');
            }
        };
        MDCMenuFoundation.prototype.validatedIndex_ = function (index) {
            var menuSize = this.adapter_.getMenuItemCount();
            var isIndexInRange = index >= 0 && index < menuSize;
            if (!isIndexInRange) {
                throw new Error('MDCMenuFoundation: No list item at specified index.');
            }
        };
        return MDCMenuFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCMenu = /** @class */ (function (_super) {
        __extends(MDCMenu, _super);
        function MDCMenu() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCMenu.attachTo = function (root) {
            return new MDCMenu(root);
        };
        MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {
            if (menuSurfaceFactory === void 0) { menuSurfaceFactory = function (el) { return new MDCMenuSurface(el); }; }
            if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }
            this.menuSurfaceFactory_ = menuSurfaceFactory;
            this.listFactory_ = listFactory;
        };
        MDCMenu.prototype.initialSyncWithDOM = function () {
            var _this = this;
            this.menuSurface_ = this.menuSurfaceFactory_(this.root_);
            var list = this.root_.querySelector(strings$3.LIST_SELECTOR);
            if (list) {
                this.list_ = this.listFactory_(list);
                this.list_.wrapFocus = true;
            }
            else {
                this.list_ = null;
            }
            this.handleKeydown_ = function (evt) { return _this.foundation_.handleKeydown(evt); };
            this.handleItemAction_ = function (evt) { return _this.foundation_.handleItemAction(_this.items[evt.detail.index]); };
            this.handleMenuSurfaceOpened_ = function () { return _this.foundation_.handleMenuSurfaceOpened(); };
            this.menuSurface_.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);
            this.listen('keydown', this.handleKeydown_);
            this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);
        };
        MDCMenu.prototype.destroy = function () {
            if (this.list_) {
                this.list_.destroy();
            }
            this.menuSurface_.destroy();
            this.menuSurface_.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);
            this.unlisten('keydown', this.handleKeydown_);
            this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(MDCMenu.prototype, "open", {
            get: function () {
                return this.menuSurface_.isOpen();
            },
            set: function (value) {
                if (value) {
                    this.menuSurface_.open();
                }
                else {
                    this.menuSurface_.close();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenu.prototype, "wrapFocus", {
            get: function () {
                return this.list_ ? this.list_.wrapFocus : false;
            },
            set: function (value) {
                if (this.list_) {
                    this.list_.wrapFocus = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenu.prototype, "items", {
            /**
             * Return the items within the menu. Note that this only contains the set of elements within
             * the items container that are proper list items, and not supplemental / presentational DOM
             * elements.
             */
            get: function () {
                return this.list_ ? this.list_.listElements : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCMenu.prototype, "quickOpen", {
            set: function (quickOpen) {
                this.menuSurface_.quickOpen = quickOpen;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Sets default focus state where the menu should focus every time when menu
         * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
         * default.
         * @param focusState Default focus state.
         */
        MDCMenu.prototype.setDefaultFocusState = function (focusState) {
            this.foundation_.setDefaultFocusState(focusState);
        };
        /**
         * @param corner Default anchor corner alignment of top-left menu corner.
         */
        MDCMenu.prototype.setAnchorCorner = function (corner) {
            this.menuSurface_.setAnchorCorner(corner);
        };
        MDCMenu.prototype.setAnchorMargin = function (margin) {
            this.menuSurface_.setAnchorMargin(margin);
        };
        /**
         * Sets the list item as the selected row at the specified index.
         * @param index Index of list item within menu.
         */
        MDCMenu.prototype.setSelectedIndex = function (index) {
            this.foundation_.setSelectedIndex(index);
        };
        /**
         * Sets the enabled state to isEnabled for the menu item at the given index.
         * @param index Index of the menu item
         * @param isEnabled The desired enabled state of the menu item.
         */
        MDCMenu.prototype.setEnabled = function (index, isEnabled) {
            this.foundation_.setEnabled(index, isEnabled);
        };
        /**
         * @return The item within the menu at the index specified.
         */
        MDCMenu.prototype.getOptionByIndex = function (index) {
            var items = this.items;
            if (index < items.length) {
                return this.items[index];
            }
            else {
                return null;
            }
        };
        MDCMenu.prototype.setFixedPosition = function (isFixed) {
            this.menuSurface_.setFixedPosition(isFixed);
        };
        MDCMenu.prototype.hoistMenuToBody = function () {
            this.menuSurface_.hoistMenuToBody();
        };
        MDCMenu.prototype.setIsHoisted = function (isHoisted) {
            this.menuSurface_.setIsHoisted(isHoisted);
        };
        MDCMenu.prototype.setAbsolutePosition = function (x, y) {
            this.menuSurface_.setAbsolutePosition(x, y);
        };
        /**
         * Sets the element that the menu-surface is anchored to.
         */
        MDCMenu.prototype.setAnchorElement = function (element) {
            this.menuSurface_.anchorElement = element;
        };
        MDCMenu.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = {
                addClassToElementAtIndex: function (index, className) {
                    var list = _this.items;
                    list[index].classList.add(className);
                },
                removeClassFromElementAtIndex: function (index, className) {
                    var list = _this.items;
                    list[index].classList.remove(className);
                },
                addAttributeToElementAtIndex: function (index, attr, value) {
                    var list = _this.items;
                    list[index].setAttribute(attr, value);
                },
                removeAttributeFromElementAtIndex: function (index, attr) {
                    var list = _this.items;
                    list[index].removeAttribute(attr);
                },
                elementContainsClass: function (element, className) { return element.classList.contains(className); },
                closeSurface: function (skipRestoreFocus) { return _this.menuSurface_.close(skipRestoreFocus); },
                getElementIndex: function (element) { return _this.items.indexOf(element); },
                notifySelected: function (evtData) { return _this.emit(strings$3.SELECTED_EVENT, {
                    index: evtData.index,
                    item: _this.items[evtData.index],
                }); },
                getMenuItemCount: function () { return _this.items.length; },
                focusItemAtIndex: function (index) { return _this.items[index].focus(); },
                focusListRoot: function () { return _this.root_.querySelector(strings$3.LIST_SELECTOR).focus(); },
                isSelectableItemAtIndex: function (index) { return !!closest(_this.items[index], "." + cssClasses$5.MENU_SELECTION_GROUP); },
                getSelectedSiblingOfItemAtIndex: function (index) {
                    var selectionGroupEl = closest(_this.items[index], "." + cssClasses$5.MENU_SELECTION_GROUP);
                    var selectedItemEl = selectionGroupEl.querySelector("." + cssClasses$5.MENU_SELECTED_LIST_ITEM);
                    return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;
                },
            };
            // tslint:enable:object-literal-sort-keys
            return new MDCMenuFoundation(adapter);
        };
        return MDCMenu;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$4 = {
        NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch',
    };
    var numbers$4 = {
        // This should stay in sync with $mdc-notched-outline-padding * 2.
        NOTCH_ELEMENT_PADDING: 8,
    };
    var cssClasses$6 = {
        NO_LABEL: 'mdc-notched-outline--no-label',
        OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
        OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded',
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCNotchedOutlineFoundation = /** @class */ (function (_super) {
        __extends(MDCNotchedOutlineFoundation, _super);
        function MDCNotchedOutlineFoundation(adapter) {
            return _super.call(this, __assign({}, MDCNotchedOutlineFoundation.defaultAdapter, adapter)) || this;
        }
        Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
            get: function () {
                return strings$4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
            get: function () {
                return cssClasses$6;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
            get: function () {
                return numbers$4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
            /**
             * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    setNotchWidthProperty: function () { return undefined; },
                    removeNotchWidthProperty: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
         */
        MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
            var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
            if (notchWidth > 0) {
                notchWidth += numbers$4.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
            }
            this.adapter_.setNotchWidthProperty(notchWidth);
            this.adapter_.addClass(OUTLINE_NOTCHED);
        };
        /**
         * Removes notched outline selector to close the notch in the outline.
         */
        MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
            var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
            this.adapter_.removeClass(OUTLINE_NOTCHED);
            this.adapter_.removeNotchWidthProperty();
        };
        return MDCNotchedOutlineFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCNotchedOutline = /** @class */ (function (_super) {
        __extends(MDCNotchedOutline, _super);
        function MDCNotchedOutline() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCNotchedOutline.attachTo = function (root) {
            return new MDCNotchedOutline(root);
        };
        MDCNotchedOutline.prototype.initialSyncWithDOM = function () {
            this.notchElement_ = this.root_.querySelector(strings$4.NOTCH_ELEMENT_SELECTOR);
            var label = this.root_.querySelector('.' + MDCFloatingLabelFoundation.cssClasses.ROOT);
            if (label) {
                label.style.transitionDuration = '0s';
                this.root_.classList.add(cssClasses$6.OUTLINE_UPGRADED);
                requestAnimationFrame(function () {
                    label.style.transitionDuration = '';
                });
            }
            else {
                this.root_.classList.add(cssClasses$6.NO_LABEL);
            }
        };
        /**
         * Updates classes and styles to open the notch to the specified width.
         * @param notchWidth The notch width in the outline.
         */
        MDCNotchedOutline.prototype.notch = function (notchWidth) {
            this.foundation_.notch(notchWidth);
        };
        /**
         * Updates classes and styles to close the notch.
         */
        MDCNotchedOutline.prototype.closeNotch = function () {
            this.foundation_.closeNotch();
        };
        MDCNotchedOutline.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = {
                addClass: function (className) { return _this.root_.classList.add(className); },
                removeClass: function (className) { return _this.root_.classList.remove(className); },
                setNotchWidthProperty: function (width) { return _this.notchElement_.style.setProperty('width', width + 'px'); },
                removeNotchWidthProperty: function () { return _this.notchElement_.style.removeProperty('width'); },
            };
            // tslint:enable:object-literal-sort-keys
            return new MDCNotchedOutlineFoundation(adapter);
        };
        return MDCNotchedOutline;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$7 = {
        ACTIVATED: 'mdc-select--activated',
        DISABLED: 'mdc-select--disabled',
        FOCUSED: 'mdc-select--focused',
        INVALID: 'mdc-select--invalid',
        OUTLINED: 'mdc-select--outlined',
        REQUIRED: 'mdc-select--required',
        ROOT: 'mdc-select',
        SELECTED_ITEM_CLASS: 'mdc-list-item--selected',
        WITH_LEADING_ICON: 'mdc-select--with-leading-icon',
    };
    var strings$5 = {
        ARIA_CONTROLS: 'aria-controls',
        ARIA_SELECTED_ATTR: 'aria-selected',
        CHANGE_EVENT: 'MDCSelect:change',
        ENHANCED_VALUE_ATTR: 'data-value',
        HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
        LABEL_SELECTOR: '.mdc-floating-label',
        LEADING_ICON_SELECTOR: '.mdc-select__icon',
        LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
        MENU_SELECTOR: '.mdc-select__menu',
        NATIVE_CONTROL_SELECTOR: '.mdc-select__native-control',
        OUTLINE_SELECTOR: '.mdc-notched-outline',
        SELECTED_ITEM_SELECTOR: "." + cssClasses$7.SELECTED_ITEM_CLASS,
        SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text',
    };
    var numbers$5 = {
        LABEL_SCALE: 0.75,
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCSelectFoundation = /** @class */ (function (_super) {
        __extends(MDCSelectFoundation, _super);
        /* istanbul ignore next: optional argument is not a branch statement */
        /**
         * @param adapter
         * @param foundationMap Map from subcomponent names to their subfoundations.
         */
        function MDCSelectFoundation(adapter, foundationMap) {
            if (foundationMap === void 0) { foundationMap = {}; }
            var _this = _super.call(this, __assign({}, MDCSelectFoundation.defaultAdapter, adapter)) || this;
            _this.leadingIcon_ = foundationMap.leadingIcon;
            _this.helperText_ = foundationMap.helperText;
            return _this;
        }
        Object.defineProperty(MDCSelectFoundation, "cssClasses", {
            get: function () {
                return cssClasses$7;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelectFoundation, "numbers", {
            get: function () {
                return numbers$5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelectFoundation, "strings", {
            get: function () {
                return strings$5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelectFoundation, "defaultAdapter", {
            /**
             * See {@link MDCSelectAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    activateBottomLine: function () { return undefined; },
                    deactivateBottomLine: function () { return undefined; },
                    setValue: function () { return undefined; },
                    getValue: function () { return ''; },
                    floatLabel: function () { return undefined; },
                    getLabelWidth: function () { return 0; },
                    hasOutline: function () { return false; },
                    notchOutline: function () { return undefined; },
                    closeOutline: function () { return undefined; },
                    openMenu: function () { return undefined; },
                    closeMenu: function () { return undefined; },
                    isMenuOpen: function () { return false; },
                    setSelectedIndex: function () { return undefined; },
                    setDisabled: function () { return undefined; },
                    setRippleCenter: function () { return undefined; },
                    notifyChange: function () { return undefined; },
                    checkValidity: function () { return false; },
                    setValid: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCSelectFoundation.prototype.setSelectedIndex = function (index) {
            this.adapter_.setSelectedIndex(index);
            this.adapter_.closeMenu();
            var didChange = true;
            this.handleChange(didChange);
        };
        MDCSelectFoundation.prototype.setValue = function (value) {
            this.adapter_.setValue(value);
            var didChange = true;
            this.handleChange(didChange);
        };
        MDCSelectFoundation.prototype.getValue = function () {
            return this.adapter_.getValue();
        };
        MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {
            if (isDisabled) {
                this.adapter_.addClass(cssClasses$7.DISABLED);
            }
            else {
                this.adapter_.removeClass(cssClasses$7.DISABLED);
            }
            this.adapter_.setDisabled(isDisabled);
            this.adapter_.closeMenu();
            if (this.leadingIcon_) {
                this.leadingIcon_.setDisabled(isDisabled);
            }
        };
        /**
         * @param content Sets the content of the helper text.
         */
        MDCSelectFoundation.prototype.setHelperTextContent = function (content) {
            if (this.helperText_) {
                this.helperText_.setContent(content);
            }
        };
        MDCSelectFoundation.prototype.layout = function () {
            var openNotch = this.getValue().length > 0;
            this.notchOutline(openNotch);
        };
        MDCSelectFoundation.prototype.handleMenuOpened = function () {
            this.adapter_.addClass(cssClasses$7.ACTIVATED);
        };
        MDCSelectFoundation.prototype.handleMenuClosed = function () {
            this.adapter_.removeClass(cssClasses$7.ACTIVATED);
        };
        /**
         * Handles value changes, via change event or programmatic updates.
         */
        MDCSelectFoundation.prototype.handleChange = function (didChange) {
            if (didChange === void 0) { didChange = true; }
            var value = this.getValue();
            var optionHasValue = value.length > 0;
            var isRequired = this.adapter_.hasClass(cssClasses$7.REQUIRED);
            this.notchOutline(optionHasValue);
            if (!this.adapter_.hasClass(cssClasses$7.FOCUSED)) {
                this.adapter_.floatLabel(optionHasValue);
            }
            if (didChange) {
                this.adapter_.notifyChange(value);
                if (isRequired) {
                    this.setValid(this.isValid());
                    if (this.helperText_) {
                        this.helperText_.setValidity(this.isValid());
                    }
                }
            }
        };
        /**
         * Handles focus events from select element.
         */
        MDCSelectFoundation.prototype.handleFocus = function () {
            this.adapter_.addClass(cssClasses$7.FOCUSED);
            this.adapter_.floatLabel(true);
            this.notchOutline(true);
            this.adapter_.activateBottomLine();
            if (this.helperText_) {
                this.helperText_.showToScreenReader();
            }
        };
        /**
         * Handles blur events from select element.
         */
        MDCSelectFoundation.prototype.handleBlur = function () {
            if (this.adapter_.isMenuOpen()) {
                return;
            }
            this.adapter_.removeClass(cssClasses$7.FOCUSED);
            this.handleChange(false);
            this.adapter_.deactivateBottomLine();
            var isRequired = this.adapter_.hasClass(cssClasses$7.REQUIRED);
            if (isRequired) {
                this.setValid(this.isValid());
                if (this.helperText_) {
                    this.helperText_.setValidity(this.isValid());
                }
            }
        };
        MDCSelectFoundation.prototype.handleClick = function (normalizedX) {
            if (this.adapter_.isMenuOpen()) {
                return;
            }
            this.adapter_.setRippleCenter(normalizedX);
            this.adapter_.openMenu();
        };
        MDCSelectFoundation.prototype.handleKeydown = function (event) {
            if (this.adapter_.isMenuOpen()) {
                return;
            }
            var isEnter = event.key === 'Enter' || event.keyCode === 13;
            var isSpace = event.key === 'Space' || event.keyCode === 32;
            var arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;
            var arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;
            if (this.adapter_.hasClass(cssClasses$7.FOCUSED) && (isEnter || isSpace || arrowUp || arrowDown)) {
                this.adapter_.openMenu();
                event.preventDefault();
            }
        };
        /**
         * Opens/closes the notched outline.
         */
        MDCSelectFoundation.prototype.notchOutline = function (openNotch) {
            if (!this.adapter_.hasOutline()) {
                return;
            }
            var isFocused = this.adapter_.hasClass(cssClasses$7.FOCUSED);
            if (openNotch) {
                var labelScale = numbers$5.LABEL_SCALE;
                var labelWidth = this.adapter_.getLabelWidth() * labelScale;
                this.adapter_.notchOutline(labelWidth);
            }
            else if (!isFocused) {
                this.adapter_.closeOutline();
            }
        };
        /**
         * Sets the aria label of the leading icon.
         */
        MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {
            if (this.leadingIcon_) {
                this.leadingIcon_.setAriaLabel(label);
            }
        };
        /**
         * Sets the text content of the leading icon.
         */
        MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {
            if (this.leadingIcon_) {
                this.leadingIcon_.setContent(content);
            }
        };
        MDCSelectFoundation.prototype.setValid = function (isValid) {
            this.adapter_.setValid(isValid);
        };
        MDCSelectFoundation.prototype.isValid = function () {
            return this.adapter_.checkValidity();
        };
        return MDCSelectFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$6 = {
        ARIA_HIDDEN: 'aria-hidden',
        ROLE: 'role',
    };
    var cssClasses$8 = {
        HELPER_TEXT_PERSISTENT: 'mdc-select-helper-text--persistent',
        HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCSelectHelperTextFoundation = /** @class */ (function (_super) {
        __extends(MDCSelectHelperTextFoundation, _super);
        function MDCSelectHelperTextFoundation(adapter) {
            return _super.call(this, __assign({}, MDCSelectHelperTextFoundation.defaultAdapter, adapter)) || this;
        }
        Object.defineProperty(MDCSelectHelperTextFoundation, "cssClasses", {
            get: function () {
                return cssClasses$8;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelectHelperTextFoundation, "strings", {
            get: function () {
                return strings$6;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelectHelperTextFoundation, "defaultAdapter", {
            /**
             * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    setAttr: function () { return undefined; },
                    removeAttr: function () { return undefined; },
                    setContent: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Sets the content of the helper text field.
         */
        MDCSelectHelperTextFoundation.prototype.setContent = function (content) {
            this.adapter_.setContent(content);
        };
        /**
         *  Sets the persistency of the helper text.
         */
        MDCSelectHelperTextFoundation.prototype.setPersistent = function (isPersistent) {
            if (isPersistent) {
                this.adapter_.addClass(cssClasses$8.HELPER_TEXT_PERSISTENT);
            }
            else {
                this.adapter_.removeClass(cssClasses$8.HELPER_TEXT_PERSISTENT);
            }
        };
        /**
         * @param isValidation True to make the helper text act as an error validation message.
         */
        MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {
            if (isValidation) {
                this.adapter_.addClass(cssClasses$8.HELPER_TEXT_VALIDATION_MSG);
            }
            else {
                this.adapter_.removeClass(cssClasses$8.HELPER_TEXT_VALIDATION_MSG);
            }
        };
        /**
         * Makes the helper text visible to screen readers.
         */
        MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {
            this.adapter_.removeAttr(strings$6.ARIA_HIDDEN);
        };
        /**
         * Sets the validity of the helper text based on the select validity.
         */
        MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {
            var helperTextIsPersistent = this.adapter_.hasClass(cssClasses$8.HELPER_TEXT_PERSISTENT);
            var helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses$8.HELPER_TEXT_VALIDATION_MSG);
            var validationMsgNeedsDisplay = helperTextIsValidationMsg && !selectIsValid;
            if (validationMsgNeedsDisplay) {
                this.adapter_.setAttr(strings$6.ROLE, 'alert');
            }
            else {
                this.adapter_.removeAttr(strings$6.ROLE);
            }
            if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
                this.hide_();
            }
        };
        /**
         * Hides the help text from screen readers.
         */
        MDCSelectHelperTextFoundation.prototype.hide_ = function () {
            this.adapter_.setAttr(strings$6.ARIA_HIDDEN, 'true');
        };
        return MDCSelectHelperTextFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCSelectHelperText = /** @class */ (function (_super) {
        __extends(MDCSelectHelperText, _super);
        function MDCSelectHelperText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCSelectHelperText.attachTo = function (root) {
            return new MDCSelectHelperText(root);
        };
        Object.defineProperty(MDCSelectHelperText.prototype, "foundation", {
            get: function () {
                return this.foundation_;
            },
            enumerable: true,
            configurable: true
        });
        MDCSelectHelperText.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = {
                addClass: function (className) { return _this.root_.classList.add(className); },
                removeClass: function (className) { return _this.root_.classList.remove(className); },
                hasClass: function (className) { return _this.root_.classList.contains(className); },
                setAttr: function (attr, value) { return _this.root_.setAttribute(attr, value); },
                removeAttr: function (attr) { return _this.root_.removeAttribute(attr); },
                setContent: function (content) {
                    _this.root_.textContent = content;
                },
            };
            // tslint:enable:object-literal-sort-keys
            return new MDCSelectHelperTextFoundation(adapter);
        };
        return MDCSelectHelperText;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$7 = {
        ICON_EVENT: 'MDCSelect:icon',
        ICON_ROLE: 'button',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var INTERACTION_EVENTS = ['click', 'keydown'];
    var MDCSelectIconFoundation = /** @class */ (function (_super) {
        __extends(MDCSelectIconFoundation, _super);
        function MDCSelectIconFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCSelectIconFoundation.defaultAdapter, adapter)) || this;
            _this.savedTabIndex_ = null;
            _this.interactionHandler_ = function (evt) { return _this.handleInteraction(evt); };
            return _this;
        }
        Object.defineProperty(MDCSelectIconFoundation, "strings", {
            get: function () {
                return strings$7;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelectIconFoundation, "defaultAdapter", {
            /**
             * See {@link MDCSelectIconAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    getAttr: function () { return null; },
                    setAttr: function () { return undefined; },
                    removeAttr: function () { return undefined; },
                    setContent: function () { return undefined; },
                    registerInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                    notifyIconAction: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCSelectIconFoundation.prototype.init = function () {
            var _this = this;
            this.savedTabIndex_ = this.adapter_.getAttr('tabindex');
            INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter_.registerInteractionHandler(evtType, _this.interactionHandler_);
            });
        };
        MDCSelectIconFoundation.prototype.destroy = function () {
            var _this = this;
            INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter_.deregisterInteractionHandler(evtType, _this.interactionHandler_);
            });
        };
        MDCSelectIconFoundation.prototype.setDisabled = function (disabled) {
            if (!this.savedTabIndex_) {
                return;
            }
            if (disabled) {
                this.adapter_.setAttr('tabindex', '-1');
                this.adapter_.removeAttr('role');
            }
            else {
                this.adapter_.setAttr('tabindex', this.savedTabIndex_);
                this.adapter_.setAttr('role', strings$7.ICON_ROLE);
            }
        };
        MDCSelectIconFoundation.prototype.setAriaLabel = function (label) {
            this.adapter_.setAttr('aria-label', label);
        };
        MDCSelectIconFoundation.prototype.setContent = function (content) {
            this.adapter_.setContent(content);
        };
        MDCSelectIconFoundation.prototype.handleInteraction = function (evt) {
            var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
            if (evt.type === 'click' || isEnterKey) {
                this.adapter_.notifyIconAction();
            }
        };
        return MDCSelectIconFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCSelectIcon = /** @class */ (function (_super) {
        __extends(MDCSelectIcon, _super);
        function MDCSelectIcon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCSelectIcon.attachTo = function (root) {
            return new MDCSelectIcon(root);
        };
        Object.defineProperty(MDCSelectIcon.prototype, "foundation", {
            get: function () {
                return this.foundation_;
            },
            enumerable: true,
            configurable: true
        });
        MDCSelectIcon.prototype.getDefaultFoundation = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = {
                getAttr: function (attr) { return _this.root_.getAttribute(attr); },
                setAttr: function (attr, value) { return _this.root_.setAttribute(attr, value); },
                removeAttr: function (attr) { return _this.root_.removeAttribute(attr); },
                setContent: function (content) {
                    _this.root_.textContent = content;
                },
                registerInteractionHandler: function (evtType, handler) { return _this.listen(evtType, handler); },
                deregisterInteractionHandler: function (evtType, handler) { return _this.unlisten(evtType, handler); },
                notifyIconAction: function () { return _this.emit(MDCSelectIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */); },
            };
            // tslint:enable:object-literal-sort-keys
            return new MDCSelectIconFoundation(adapter);
        };
        return MDCSelectIcon;
    }(MDCComponent));

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var VALIDATION_ATTR_WHITELIST = ['required', 'aria-required'];
    var MDCSelect = /** @class */ (function (_super) {
        __extends(MDCSelect, _super);
        function MDCSelect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCSelect.attachTo = function (root) {
            return new MDCSelect(root);
        };
        MDCSelect.prototype.initialize = function (labelFactory, lineRippleFactory, outlineFactory, menuFactory, iconFactory, helperTextFactory) {
            if (labelFactory === void 0) { labelFactory = function (el) { return new MDCFloatingLabel(el); }; }
            if (lineRippleFactory === void 0) { lineRippleFactory = function (el) { return new MDCLineRipple(el); }; }
            if (outlineFactory === void 0) { outlineFactory = function (el) { return new MDCNotchedOutline(el); }; }
            if (menuFactory === void 0) { menuFactory = function (el) { return new MDCMenu(el); }; }
            if (iconFactory === void 0) { iconFactory = function (el) { return new MDCSelectIcon(el); }; }
            if (helperTextFactory === void 0) { helperTextFactory = function (el) { return new MDCSelectHelperText(el); }; }
            this.isMenuOpen_ = false;
            this.nativeControl_ = this.root_.querySelector(strings$5.NATIVE_CONTROL_SELECTOR);
            this.selectedText_ = this.root_.querySelector(strings$5.SELECTED_TEXT_SELECTOR);
            var targetElement = this.nativeControl_ || this.selectedText_;
            if (!targetElement) {
                throw new Error('MDCSelect: Missing required element: Exactly one of the following selectors must be present: ' +
                    ("'" + strings$5.NATIVE_CONTROL_SELECTOR + "' or '" + strings$5.SELECTED_TEXT_SELECTOR + "'"));
            }
            this.targetElement_ = targetElement;
            if (this.targetElement_.hasAttribute(strings$5.ARIA_CONTROLS)) {
                var helperTextElement = document.getElementById(this.targetElement_.getAttribute(strings$5.ARIA_CONTROLS));
                if (helperTextElement) {
                    this.helperText_ = helperTextFactory(helperTextElement);
                }
            }
            if (this.selectedText_) {
                this.enhancedSelectSetup_(menuFactory);
            }
            var labelElement = this.root_.querySelector(strings$5.LABEL_SELECTOR);
            this.label_ = labelElement ? labelFactory(labelElement) : null;
            var lineRippleElement = this.root_.querySelector(strings$5.LINE_RIPPLE_SELECTOR);
            this.lineRipple_ = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
            var outlineElement = this.root_.querySelector(strings$5.OUTLINE_SELECTOR);
            this.outline_ = outlineElement ? outlineFactory(outlineElement) : null;
            var leadingIcon = this.root_.querySelector(strings$5.LEADING_ICON_SELECTOR);
            if (leadingIcon) {
                this.root_.classList.add(cssClasses$7.WITH_LEADING_ICON);
                this.leadingIcon_ = iconFactory(leadingIcon);
                if (this.menuElement_) {
                    this.menuElement_.classList.add(cssClasses$7.WITH_LEADING_ICON);
                }
            }
            if (!this.root_.classList.contains(cssClasses$7.OUTLINED)) {
                this.ripple = this.createRipple_();
            }
            // The required state needs to be sync'd before the mutation observer is added.
            this.initialSyncRequiredState_();
            this.addMutationObserverForRequired_();
        };
        /**
         * Initializes the select's event listeners and internal state based
         * on the environment's state.
         */
        MDCSelect.prototype.initialSyncWithDOM = function () {
            var _this = this;
            this.handleChange_ = function () { return _this.foundation_.handleChange(/* didChange */ true); };
            this.handleFocus_ = function () { return _this.foundation_.handleFocus(); };
            this.handleBlur_ = function () { return _this.foundation_.handleBlur(); };
            this.handleClick_ = function (evt) {
                if (_this.selectedText_) {
                    _this.selectedText_.focus();
                }
                _this.foundation_.handleClick(_this.getNormalizedXCoordinate_(evt));
            };
            this.handleKeydown_ = function (evt) { return _this.foundation_.handleKeydown(evt); };
            this.handleMenuSelected_ = function (evtData) { return _this.selectedIndex = evtData.detail.index; };
            this.handleMenuOpened_ = function () {
                _this.foundation_.handleMenuOpened();
                if (_this.menu_.items.length === 0) {
                    return;
                }
                // Menu should open to the last selected element, should open to first menu item otherwise.
                var focusItemIndex = _this.selectedIndex >= 0 ? _this.selectedIndex : 0;
                var focusItemEl = _this.menu_.items[focusItemIndex];
                focusItemEl.focus();
            };
            this.handleMenuClosed_ = function () {
                _this.foundation_.handleMenuClosed();
                // isMenuOpen_ is used to track the state of the menu opening or closing since the menu.open function
                // will return false if the menu is still closing and this method listens to the closed event which
                // occurs after the menu is already closed.
                _this.isMenuOpen_ = false;
                _this.selectedText_.removeAttribute('aria-expanded');
                if (document.activeElement !== _this.selectedText_) {
                    _this.foundation_.handleBlur();
                }
            };
            this.targetElement_.addEventListener('change', this.handleChange_);
            this.targetElement_.addEventListener('focus', this.handleFocus_);
            this.targetElement_.addEventListener('blur', this.handleBlur_);
            this.targetElement_.addEventListener('click', this.handleClick_);
            if (this.menuElement_) {
                this.selectedText_.addEventListener('keydown', this.handleKeydown_);
                this.menu_.listen(strings$1.CLOSED_EVENT, this.handleMenuClosed_);
                this.menu_.listen(strings$1.OPENED_EVENT, this.handleMenuOpened_);
                this.menu_.listen(strings$3.SELECTED_EVENT, this.handleMenuSelected_);
                if (this.hiddenInput_ && this.hiddenInput_.value) {
                    // If the hidden input already has a value, use it to restore the select's value.
                    // This can happen e.g. if the user goes back or (in some browsers) refreshes the page.
                    var enhancedAdapterMethods = this.getEnhancedSelectAdapterMethods_();
                    enhancedAdapterMethods.setValue(this.hiddenInput_.value);
                }
                else if (this.menuElement_.querySelector(strings$5.SELECTED_ITEM_SELECTOR)) {
                    // If an element is selected, the select should set the initial selected text.
                    var enhancedAdapterMethods = this.getEnhancedSelectAdapterMethods_();
                    enhancedAdapterMethods.setValue(enhancedAdapterMethods.getValue());
                }
            }
            // Initially sync floating label
            this.foundation_.handleChange(/* didChange */ false);
            if (this.root_.classList.contains(cssClasses$7.DISABLED)
                || (this.nativeControl_ && this.nativeControl_.disabled)) {
                this.disabled = true;
            }
        };
        MDCSelect.prototype.destroy = function () {
            this.targetElement_.removeEventListener('change', this.handleChange_);
            this.targetElement_.removeEventListener('focus', this.handleFocus_);
            this.targetElement_.removeEventListener('blur', this.handleBlur_);
            this.targetElement_.removeEventListener('keydown', this.handleKeydown_);
            this.targetElement_.removeEventListener('click', this.handleClick_);
            if (this.menu_) {
                this.menu_.unlisten(strings$1.CLOSED_EVENT, this.handleMenuClosed_);
                this.menu_.unlisten(strings$1.OPENED_EVENT, this.handleMenuOpened_);
                this.menu_.unlisten(strings$3.SELECTED_EVENT, this.handleMenuSelected_);
                this.menu_.destroy();
            }
            if (this.ripple) {
                this.ripple.destroy();
            }
            if (this.outline_) {
                this.outline_.destroy();
            }
            if (this.leadingIcon_) {
                this.leadingIcon_.destroy();
            }
            if (this.helperText_) {
                this.helperText_.destroy();
            }
            if (this.validationObserver_) {
                this.validationObserver_.disconnect();
            }
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(MDCSelect.prototype, "value", {
            get: function () {
                return this.foundation_.getValue();
            },
            set: function (value) {
                this.foundation_.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelect.prototype, "selectedIndex", {
            get: function () {
                var selectedIndex = -1;
                if (this.menuElement_ && this.menu_) {
                    var selectedEl = this.menuElement_.querySelector(strings$5.SELECTED_ITEM_SELECTOR);
                    selectedIndex = this.menu_.items.indexOf(selectedEl);
                }
                else if (this.nativeControl_) {
                    selectedIndex = this.nativeControl_.selectedIndex;
                }
                return selectedIndex;
            },
            set: function (selectedIndex) {
                this.foundation_.setSelectedIndex(selectedIndex);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelect.prototype, "disabled", {
            get: function () {
                return this.root_.classList.contains(cssClasses$7.DISABLED) ||
                    (this.nativeControl_ ? this.nativeControl_.disabled : false);
            },
            set: function (disabled) {
                this.foundation_.setDisabled(disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelect.prototype, "leadingIconAriaLabel", {
            set: function (label) {
                this.foundation_.setLeadingIconAriaLabel(label);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelect.prototype, "leadingIconContent", {
            /**
             * Sets the text content of the leading icon.
             */
            set: function (content) {
                this.foundation_.setLeadingIconContent(content);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelect.prototype, "helperTextContent", {
            /**
             * Sets the text content of the helper text.
             */
            set: function (content) {
                this.foundation_.setHelperTextContent(content);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelect.prototype, "valid", {
            /**
             * Checks if the select is in a valid state.
             */
            get: function () {
                return this.foundation_.isValid();
            },
            /**
             * Sets the current invalid state of the select.
             */
            set: function (isValid) {
                this.foundation_.setValid(isValid);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCSelect.prototype, "required", {
            /**
             * Returns whether the select is required.
             */
            get: function () {
                if (this.nativeControl_) {
                    return this.nativeControl_.required;
                }
                else {
                    return this.selectedText_.getAttribute('aria-required') === 'true';
                }
            },
            /**
             * Sets the control to the required state.
             */
            set: function (isRequired) {
                if (this.nativeControl_) {
                    this.nativeControl_.required = isRequired;
                }
                else {
                    if (isRequired) {
                        this.selectedText_.setAttribute('aria-required', isRequired.toString());
                    }
                    else {
                        this.selectedText_.removeAttribute('aria-required');
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Recomputes the outline SVG path for the outline element.
         */
        MDCSelect.prototype.layout = function () {
            this.foundation_.layout();
        };
        MDCSelect.prototype.getDefaultFoundation = function () {
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            var adapter = __assign({}, (this.nativeControl_ ? this.getNativeSelectAdapterMethods_() : this.getEnhancedSelectAdapterMethods_()), this.getCommonAdapterMethods_(), this.getOutlineAdapterMethods_(), this.getLabelAdapterMethods_());
            return new MDCSelectFoundation(adapter, this.getFoundationMap_());
        };
        /**
         * Handles setup for the enhanced menu.
         */
        MDCSelect.prototype.enhancedSelectSetup_ = function (menuFactory) {
            var isDisabled = this.root_.classList.contains(cssClasses$7.DISABLED);
            this.selectedText_.setAttribute('tabindex', isDisabled ? '-1' : '0');
            this.hiddenInput_ = this.root_.querySelector(strings$5.HIDDEN_INPUT_SELECTOR);
            this.menuElement_ = this.root_.querySelector(strings$5.MENU_SELECTOR);
            this.menu_ = menuFactory(this.menuElement_);
            this.menu_.hoistMenuToBody();
            this.menu_.setAnchorElement(this.root_);
            this.menu_.setAnchorCorner(Corner.BOTTOM_START);
            this.menu_.wrapFocus = false;
        };
        MDCSelect.prototype.createRipple_ = function () {
            var _this = this;
            // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
            // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            var adapter = __assign({}, MDCRipple.createAdapter(this), { registerInteractionHandler: function (evtType, handler) { return _this.targetElement_.addEventListener(evtType, handler); }, deregisterInteractionHandler: function (evtType, handler) { return _this.targetElement_.removeEventListener(evtType, handler); } });
            // tslint:enable:object-literal-sort-keys
            return new MDCRipple(this.root_, new MDCRippleFoundation(adapter));
        };
        MDCSelect.prototype.getNativeSelectAdapterMethods_ = function () {
            var _this = this;
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                getValue: function () { return _this.nativeControl_.value; },
                setValue: function (value) {
                    _this.nativeControl_.value = value;
                },
                openMenu: function () { return undefined; },
                closeMenu: function () { return undefined; },
                isMenuOpen: function () { return false; },
                setSelectedIndex: function (index) {
                    _this.nativeControl_.selectedIndex = index;
                },
                setDisabled: function (isDisabled) {
                    _this.nativeControl_.disabled = isDisabled;
                },
                setValid: function (isValid) {
                    if (isValid) {
                        _this.root_.classList.remove(cssClasses$7.INVALID);
                    }
                    else {
                        _this.root_.classList.add(cssClasses$7.INVALID);
                    }
                },
                checkValidity: function () { return _this.nativeControl_.checkValidity(); },
            };
            // tslint:enable:object-literal-sort-keys
        };
        MDCSelect.prototype.getEnhancedSelectAdapterMethods_ = function () {
            var _this = this;
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                getValue: function () {
                    var listItem = _this.menuElement_.querySelector(strings$5.SELECTED_ITEM_SELECTOR);
                    if (listItem && listItem.hasAttribute(strings$5.ENHANCED_VALUE_ATTR)) {
                        return listItem.getAttribute(strings$5.ENHANCED_VALUE_ATTR) || '';
                    }
                    return '';
                },
                setValue: function (value) {
                    var element = _this.menuElement_.querySelector("[" + strings$5.ENHANCED_VALUE_ATTR + "=\"" + value + "\"]");
                    _this.setEnhancedSelectedIndex_(element ? _this.menu_.items.indexOf(element) : -1);
                },
                openMenu: function () {
                    if (_this.menu_ && !_this.menu_.open) {
                        _this.menu_.open = true;
                        _this.isMenuOpen_ = true;
                        _this.selectedText_.setAttribute('aria-expanded', 'true');
                    }
                },
                closeMenu: function () {
                    if (_this.menu_ && _this.menu_.open) {
                        _this.menu_.open = false;
                    }
                },
                isMenuOpen: function () { return Boolean(_this.menu_) && _this.isMenuOpen_; },
                setSelectedIndex: function (index) { return _this.setEnhancedSelectedIndex_(index); },
                setDisabled: function (isDisabled) {
                    _this.selectedText_.setAttribute('tabindex', isDisabled ? '-1' : '0');
                    _this.selectedText_.setAttribute('aria-disabled', isDisabled.toString());
                    if (_this.hiddenInput_) {
                        _this.hiddenInput_.disabled = isDisabled;
                    }
                },
                checkValidity: function () {
                    var classList = _this.root_.classList;
                    if (classList.contains(cssClasses$7.REQUIRED) && !classList.contains(cssClasses$7.DISABLED)) {
                        // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element
                        // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.
                        return _this.selectedIndex !== -1 && (_this.selectedIndex !== 0 || Boolean(_this.value));
                    }
                    else {
                        return true;
                    }
                },
                setValid: function (isValid) {
                    _this.selectedText_.setAttribute('aria-invalid', (!isValid).toString());
                    if (isValid) {
                        _this.root_.classList.remove(cssClasses$7.INVALID);
                    }
                    else {
                        _this.root_.classList.add(cssClasses$7.INVALID);
                    }
                },
            };
            // tslint:enable:object-literal-sort-keys
        };
        MDCSelect.prototype.getCommonAdapterMethods_ = function () {
            var _this = this;
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function (className) { return _this.root_.classList.add(className); },
                removeClass: function (className) { return _this.root_.classList.remove(className); },
                hasClass: function (className) { return _this.root_.classList.contains(className); },
                setRippleCenter: function (normalizedX) { return _this.lineRipple_ && _this.lineRipple_.setRippleCenter(normalizedX); },
                activateBottomLine: function () { return _this.lineRipple_ && _this.lineRipple_.activate(); },
                deactivateBottomLine: function () { return _this.lineRipple_ && _this.lineRipple_.deactivate(); },
                notifyChange: function (value) {
                    var index = _this.selectedIndex;
                    _this.emit(strings$5.CHANGE_EVENT, { value: value, index: index }, true /* shouldBubble  */);
                },
            };
            // tslint:enable:object-literal-sort-keys
        };
        MDCSelect.prototype.getOutlineAdapterMethods_ = function () {
            var _this = this;
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                hasOutline: function () { return Boolean(_this.outline_); },
                notchOutline: function (labelWidth) { return _this.outline_ && _this.outline_.notch(labelWidth); },
                closeOutline: function () { return _this.outline_ && _this.outline_.closeNotch(); },
            };
            // tslint:enable:object-literal-sort-keys
        };
        MDCSelect.prototype.getLabelAdapterMethods_ = function () {
            var _this = this;
            return {
                floatLabel: function (shouldFloat) { return _this.label_ && _this.label_.float(shouldFloat); },
                getLabelWidth: function () { return _this.label_ ? _this.label_.getWidth() : 0; },
            };
        };
        /**
         * Calculates where the line ripple should start based on the x coordinate within the component.
         */
        MDCSelect.prototype.getNormalizedXCoordinate_ = function (evt) {
            var targetClientRect = evt.target.getBoundingClientRect();
            var xCoordinate = this.isTouchEvent_(evt) ? evt.touches[0].clientX : evt.clientX;
            return xCoordinate - targetClientRect.left;
        };
        MDCSelect.prototype.isTouchEvent_ = function (evt) {
            return Boolean(evt.touches);
        };
        /**
         * Returns a map of all subcomponents to subfoundations.
         */
        MDCSelect.prototype.getFoundationMap_ = function () {
            return {
                helperText: this.helperText_ ? this.helperText_.foundation : undefined,
                leadingIcon: this.leadingIcon_ ? this.leadingIcon_.foundation : undefined,
            };
        };
        MDCSelect.prototype.setEnhancedSelectedIndex_ = function (index) {
            var selectedItem = this.menu_.items[index];
            this.selectedText_.textContent = selectedItem ? selectedItem.textContent.trim() : '';
            var previouslySelected = this.menuElement_.querySelector(strings$5.SELECTED_ITEM_SELECTOR);
            if (previouslySelected) {
                previouslySelected.classList.remove(cssClasses$7.SELECTED_ITEM_CLASS);
                previouslySelected.removeAttribute(strings$5.ARIA_SELECTED_ATTR);
            }
            if (selectedItem) {
                selectedItem.classList.add(cssClasses$7.SELECTED_ITEM_CLASS);
                selectedItem.setAttribute(strings$5.ARIA_SELECTED_ATTR, 'true');
            }
            // Synchronize hidden input's value with data-value attribute of selected item.
            // This code path is also followed when setting value directly, so this covers all cases.
            if (this.hiddenInput_) {
                this.hiddenInput_.value = selectedItem ? selectedItem.getAttribute(strings$5.ENHANCED_VALUE_ATTR) || '' : '';
            }
            this.layout();
        };
        MDCSelect.prototype.initialSyncRequiredState_ = function () {
            var isRequired = this.targetElement_.required
                || this.targetElement_.getAttribute('aria-required') === 'true'
                || this.root_.classList.contains(cssClasses$7.REQUIRED);
            if (isRequired) {
                if (this.nativeControl_) {
                    this.nativeControl_.required = true;
                }
                else {
                    this.selectedText_.setAttribute('aria-required', 'true');
                }
                this.root_.classList.add(cssClasses$7.REQUIRED);
            }
        };
        MDCSelect.prototype.addMutationObserverForRequired_ = function () {
            var _this = this;
            var observerHandler = function (attributesList) {
                attributesList.some(function (attributeName) {
                    if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) === -1) {
                        return false;
                    }
                    if (_this.selectedText_) {
                        if (_this.selectedText_.getAttribute('aria-required') === 'true') {
                            _this.root_.classList.add(cssClasses$7.REQUIRED);
                        }
                        else {
                            _this.root_.classList.remove(cssClasses$7.REQUIRED);
                        }
                    }
                    else {
                        if (_this.nativeControl_.required) {
                            _this.root_.classList.add(cssClasses$7.REQUIRED);
                        }
                        else {
                            _this.root_.classList.remove(cssClasses$7.REQUIRED);
                        }
                    }
                    return true;
                });
            };
            var getAttributesList = function (mutationsList) {
                return mutationsList
                    .map(function (mutation) { return mutation.attributeName; })
                    .filter(function (attributeName) { return attributeName; });
            };
            var observer = new MutationObserver(function (mutationsList) { return observerHandler(getAttributesList(mutationsList)); });
            observer.observe(this.targetElement_, { attributes: true });
            this.validationObserver_ = observer;
        };
        return MDCSelect;
    }(MDCComponent));

    function prefixFilter(obj, prefix) {
      let names = Object.getOwnPropertyNames(obj);
      const newObj = {};

      for (let i = 0; i < names.length; i++) {
        const name = names[i];
        if (name.substring(0, prefix.length) === prefix) {
          newObj[name.substring(prefix.length)] = obj[name];
        }
      }

      return newObj;
    }

    /* node_modules/@smui/menu-surface/MenuSurface.svelte generated by Svelte v3.24.1 */
    const file$8 = "node_modules/@smui/menu-surface/MenuSurface.svelte";

    function create_fragment$a(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[23].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

    	let div_levels = [
    		{
    			class: div_class_value = "\n    mdc-menu-surface\n    " + /*className*/ ctx[3] + "\n    " + (/*fixed*/ ctx[0] ? "mdc-menu-surface--fixed" : "") + "\n    " + (/*isStatic*/ ctx[4] ? "mdc-menu-surface--open" : "") + "\n    " + (/*isStatic*/ ctx[4] ? "smui-menu-surface--static" : "") + "\n  "
    		},
    		exclude(/*$$props*/ ctx[7], [
    			"use",
    			"class",
    			"static",
    			"anchor",
    			"fixed",
    			"open",
    			"quickOpen",
    			"anchorElement",
    			"anchorCorner",
    			"element"
    		])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (default_slot) default_slot.l(div_nodes);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(div, div_data);
    			add_location(div, file$8, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[24](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[2])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[5].call(null, div)),
    					listen_dev(div, "MDCMenuSurface:closed", /*updateOpen*/ ctx[6], false, false, false),
    					listen_dev(div, "MDCMenuSurface:opened", /*updateOpen*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 4194304) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[22], dirty, null, null);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*className, fixed, isStatic*/ 25 && div_class_value !== (div_class_value = "\n    mdc-menu-surface\n    " + /*className*/ ctx[3] + "\n    " + (/*fixed*/ ctx[0] ? "mdc-menu-surface--fixed" : "") + "\n    " + (/*isStatic*/ ctx[4] ? "mdc-menu-surface--open" : "") + "\n    " + (/*isStatic*/ ctx[4] ? "smui-menu-surface--static" : "") + "\n  ")) && { class: div_class_value },
    				dirty & /*$$props*/ 128 && exclude(/*$$props*/ ctx[7], [
    					"use",
    					"class",
    					"static",
    					"anchor",
    					"fixed",
    					"open",
    					"quickOpen",
    					"anchorElement",
    					"anchorCorner",
    					"element"
    				])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[24](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component(), ["MDCMenuSurface:closed", "MDCMenuSurface:opened"]);
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { static: isStatic = false } = $$props;
    	let { anchor = true } = $$props;
    	let { fixed = false } = $$props;
    	let { open = isStatic } = $$props;
    	let { quickOpen = false } = $$props;
    	let { anchorElement = null } = $$props;
    	let { anchorCorner = null } = $$props;
    	let { element = undefined } = $$props; // This is exported because Menu needs it.
    	let menuSurface;
    	let instantiate = getContext("SMUI:menu-surface:instantiate");
    	let getInstance = getContext("SMUI:menu-surface:getInstance");
    	setContext("SMUI:list:role", "menu");
    	setContext("SMUI:list:item:role", "menuitem");
    	let oldFixed = null;

    	onMount(async () => {
    		if (instantiate !== false) {
    			$$invalidate(25, menuSurface = new MDCMenuSurface(element));
    		} else {
    			$$invalidate(25, menuSurface = await getInstance());
    		}
    	});

    	onDestroy(() => {
    		if (anchor) {
    			element && element.parentNode.classList.remove("mdc-menu-surface--anchor");
    		}

    		let isHoisted = false;

    		if (menuSurface) {
    			isHoisted = menuSurface.foundation_.isHoistedElement_;

    			if (instantiate !== false) {
    				menuSurface.destroy();
    			}
    		}

    		if (isHoisted) {
    			element.parentNode.removeChild(element);
    		}
    	});

    	function updateOpen() {
    		if (menuSurface) {
    			if (isStatic) {
    				$$invalidate(8, open = true);
    			} else {
    				$$invalidate(8, open = menuSurface.isOpen());
    			}
    		}
    	}

    	function setOpen(value) {
    		$$invalidate(8, open = value);
    	}

    	function setAnchorCorner(...args) {
    		return menuSurface.setAnchorCorner(...args);
    	}

    	function setAnchorMargin(...args) {
    		return menuSurface.setAnchorMargin(...args);
    	}

    	function setFixedPosition(isFixed, ...args) {
    		$$invalidate(0, fixed = isFixed);
    		return menuSurface.setFixedPosition(isFixed, ...args);
    	}

    	function setAbsolutePosition(...args) {
    		return menuSurface.setAbsolutePosition(...args);
    	}

    	function setMenuSurfaceAnchorElement(...args) {
    		return menuSurface.setMenuSurfaceAnchorElement(...args);
    	}

    	function hoistMenuToBody(...args) {
    		return menuSurface.hoistMenuToBody(...args);
    	}

    	function setIsHoisted(...args) {
    		return menuSurface.setIsHoisted(...args);
    	}

    	function getDefaultFoundation(...args) {
    		return menuSurface.getDefaultFoundation(...args);
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("MenuSurface", $$slots, ['default']);

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(1, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ("static" in $$new_props) $$invalidate(4, isStatic = $$new_props.static);
    		if ("anchor" in $$new_props) $$invalidate(10, anchor = $$new_props.anchor);
    		if ("fixed" in $$new_props) $$invalidate(0, fixed = $$new_props.fixed);
    		if ("open" in $$new_props) $$invalidate(8, open = $$new_props.open);
    		if ("quickOpen" in $$new_props) $$invalidate(11, quickOpen = $$new_props.quickOpen);
    		if ("anchorElement" in $$new_props) $$invalidate(9, anchorElement = $$new_props.anchorElement);
    		if ("anchorCorner" in $$new_props) $$invalidate(12, anchorCorner = $$new_props.anchorCorner);
    		if ("element" in $$new_props) $$invalidate(1, element = $$new_props.element);
    		if ("$$scope" in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Corner,
    		CornerBit,
    		MDCMenuSurface,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		isStatic,
    		anchor,
    		fixed,
    		open,
    		quickOpen,
    		anchorElement,
    		anchorCorner,
    		element,
    		menuSurface,
    		instantiate,
    		getInstance,
    		oldFixed,
    		updateOpen,
    		setOpen,
    		setAnchorCorner,
    		setAnchorMargin,
    		setFixedPosition,
    		setAbsolutePosition,
    		setMenuSurfaceAnchorElement,
    		hoistMenuToBody,
    		setIsHoisted,
    		getDefaultFoundation
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(2, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
    		if ("isStatic" in $$props) $$invalidate(4, isStatic = $$new_props.isStatic);
    		if ("anchor" in $$props) $$invalidate(10, anchor = $$new_props.anchor);
    		if ("fixed" in $$props) $$invalidate(0, fixed = $$new_props.fixed);
    		if ("open" in $$props) $$invalidate(8, open = $$new_props.open);
    		if ("quickOpen" in $$props) $$invalidate(11, quickOpen = $$new_props.quickOpen);
    		if ("anchorElement" in $$props) $$invalidate(9, anchorElement = $$new_props.anchorElement);
    		if ("anchorCorner" in $$props) $$invalidate(12, anchorCorner = $$new_props.anchorCorner);
    		if ("element" in $$props) $$invalidate(1, element = $$new_props.element);
    		if ("menuSurface" in $$props) $$invalidate(25, menuSurface = $$new_props.menuSurface);
    		if ("instantiate" in $$props) instantiate = $$new_props.instantiate;
    		if ("getInstance" in $$props) getInstance = $$new_props.getInstance;
    		if ("oldFixed" in $$props) $$invalidate(26, oldFixed = $$new_props.oldFixed);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*element, anchor*/ 1026) {
    			 if (element && anchor && !element.parentNode.classList.contains("mdc-menu-surface--anchor")) {
    				element.parentNode.classList.add("mdc-menu-surface--anchor");
    				$$invalidate(9, anchorElement = element.parentNode);
    			}
    		}

    		if ($$self.$$.dirty & /*menuSurface, quickOpen*/ 33556480) {
    			 if (menuSurface && menuSurface.quickOpen !== quickOpen) {
    				$$invalidate(25, menuSurface.quickOpen = quickOpen, menuSurface);
    			}
    		}

    		if ($$self.$$.dirty & /*menuSurface, anchorElement*/ 33554944) {
    			 if (menuSurface && menuSurface.anchorElement !== anchorElement) {
    				$$invalidate(25, menuSurface.anchorElement = anchorElement, menuSurface);
    			}
    		}

    		if ($$self.$$.dirty & /*menuSurface, open*/ 33554688) {
    			 if (menuSurface && menuSurface.isOpen() !== open) {
    				if (open) {
    					menuSurface.open();
    				} else {
    					menuSurface.close();
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*menuSurface, oldFixed, fixed*/ 100663297) {
    			 if (menuSurface && oldFixed !== fixed) {
    				menuSurface.setFixedPosition(fixed);
    				$$invalidate(26, oldFixed = fixed);
    			}
    		}

    		if ($$self.$$.dirty & /*menuSurface, anchorCorner*/ 33558528) {
    			 if (menuSurface && anchorCorner != null) {
    				if (Corner.hasOwnProperty(anchorCorner)) {
    					menuSurface.setAnchorCorner(Corner[anchorCorner]);
    				} else if (CornerBit.hasOwnProperty(anchorCorner)) {
    					menuSurface.setAnchorCorner(Corner[anchorCorner]);
    				} else {
    					menuSurface.setAnchorCorner(anchorCorner);
    				}
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		fixed,
    		element,
    		use,
    		className,
    		isStatic,
    		forwardEvents,
    		updateOpen,
    		$$props,
    		open,
    		anchorElement,
    		anchor,
    		quickOpen,
    		anchorCorner,
    		setOpen,
    		setAnchorCorner,
    		setAnchorMargin,
    		setFixedPosition,
    		setAbsolutePosition,
    		setMenuSurfaceAnchorElement,
    		hoistMenuToBody,
    		setIsHoisted,
    		getDefaultFoundation,
    		$$scope,
    		$$slots,
    		div_binding
    	];
    }

    class MenuSurface extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			use: 2,
    			class: 3,
    			static: 4,
    			anchor: 10,
    			fixed: 0,
    			open: 8,
    			quickOpen: 11,
    			anchorElement: 9,
    			anchorCorner: 12,
    			element: 1,
    			setOpen: 13,
    			setAnchorCorner: 14,
    			setAnchorMargin: 15,
    			setFixedPosition: 16,
    			setAbsolutePosition: 17,
    			setMenuSurfaceAnchorElement: 18,
    			hoistMenuToBody: 19,
    			setIsHoisted: 20,
    			getDefaultFoundation: 21
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MenuSurface",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get use() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get static() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set static(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchor() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchor(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixed() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixed(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get quickOpen() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set quickOpen(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorElement() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorElement(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorCorner() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorCorner(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get element() {
    		throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set element(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setOpen() {
    		return this.$$.ctx[13];
    	}

    	set setOpen(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAnchorCorner() {
    		return this.$$.ctx[14];
    	}

    	set setAnchorCorner(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAnchorMargin() {
    		return this.$$.ctx[15];
    	}

    	set setAnchorMargin(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setFixedPosition() {
    		return this.$$.ctx[16];
    	}

    	set setFixedPosition(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAbsolutePosition() {
    		return this.$$.ctx[17];
    	}

    	set setAbsolutePosition(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setMenuSurfaceAnchorElement() {
    		return this.$$.ctx[18];
    	}

    	set setMenuSurfaceAnchorElement(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoistMenuToBody() {
    		return this.$$.ctx[19];
    	}

    	set hoistMenuToBody(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setIsHoisted() {
    		return this.$$.ctx[20];
    	}

    	set setIsHoisted(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getDefaultFoundation() {
    		return this.$$.ctx[21];
    	}

    	set getDefaultFoundation(value) {
    		throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/menu/Menu.svelte generated by Svelte v3.24.1 */

    // (1:0) <MenuSurface   bind:element   use={[forwardEvents, ...use]}   class="mdc-menu {className}"   on:MDCMenu:selected={updateOpen}   on:MDCMenuSurface:closed={updateOpen} on:MDCMenuSurface:opened={updateOpen}   {...exclude($$props, ['use', 'class', 'wrapFocus'])} >
    function create_default_slot$2(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[25].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[27], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty[0] & /*$$scope*/ 134217728) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[27], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(1:0) <MenuSurface   bind:element   use={[forwardEvents, ...use]}   class=\\\"mdc-menu {className}\\\"   on:MDCMenu:selected={updateOpen}   on:MDCMenuSurface:closed={updateOpen} on:MDCMenuSurface:opened={updateOpen}   {...exclude($$props, ['use', 'class', 'wrapFocus'])} >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let menusurface;
    	let updating_element;
    	let current;

    	const menusurface_spread_levels = [
    		{
    			use: [/*forwardEvents*/ ctx[3], .../*use*/ ctx[0]]
    		},
    		{
    			class: "mdc-menu " + /*className*/ ctx[1]
    		},
    		exclude(/*$$props*/ ctx[5], ["use", "class", "wrapFocus"])
    	];

    	function menusurface_element_binding(value) {
    		/*menusurface_element_binding*/ ctx[26].call(null, value);
    	}

    	let menusurface_props = {
    		$$slots: { default: [create_default_slot$2] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < menusurface_spread_levels.length; i += 1) {
    		menusurface_props = assign(menusurface_props, menusurface_spread_levels[i]);
    	}

    	if (/*element*/ ctx[2] !== void 0) {
    		menusurface_props.element = /*element*/ ctx[2];
    	}

    	menusurface = new MenuSurface({ props: menusurface_props, $$inline: true });
    	binding_callbacks.push(() => bind(menusurface, "element", menusurface_element_binding));
    	menusurface.$on("MDCMenu:selected", /*updateOpen*/ ctx[4]);
    	menusurface.$on("MDCMenuSurface:closed", /*updateOpen*/ ctx[4]);
    	menusurface.$on("MDCMenuSurface:opened", /*updateOpen*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(menusurface.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(menusurface.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(menusurface, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const menusurface_changes = (dirty[0] & /*forwardEvents, use, className, $$props*/ 43)
    			? get_spread_update(menusurface_spread_levels, [
    					dirty[0] & /*forwardEvents, use*/ 9 && {
    						use: [/*forwardEvents*/ ctx[3], .../*use*/ ctx[0]]
    					},
    					dirty[0] & /*className*/ 2 && {
    						class: "mdc-menu " + /*className*/ ctx[1]
    					},
    					dirty[0] & /*$$props*/ 32 && get_spread_object(exclude(/*$$props*/ ctx[5], ["use", "class", "wrapFocus"]))
    				])
    			: {};

    			if (dirty[0] & /*$$scope*/ 134217728) {
    				menusurface_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_element && dirty[0] & /*element*/ 4) {
    				updating_element = true;
    				menusurface_changes.element = /*element*/ ctx[2];
    				add_flush_callback(() => updating_element = false);
    			}

    			menusurface.$set(menusurface_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menusurface.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menusurface.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(menusurface, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component(), ["MDCMenu:selected", "MDCMenuSurface:closed", "MDCMenuSurface:opened"]);
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { static: isStatic = false } = $$props;
    	let { open = isStatic } = $$props; // Purposely omitted from the exclude call above.
    	let { quickOpen = false } = $$props; // Purposely omitted from the exclude call above.
    	let { anchorCorner = null } = $$props; // Purposely omitted from the exclude call above.
    	let { wrapFocus = false } = $$props;
    	let element;
    	let menu;
    	let instantiate = getContext("SMUI:menu:instantiate");
    	let getInstance = getContext("SMUI:menu:getInstance");
    	let menuSurfacePromiseResolve;
    	let menuSurfacePromise = new Promise(resolve => menuSurfacePromiseResolve = resolve);
    	let listPromiseResolve;
    	let listPromise = new Promise(resolve => listPromiseResolve = resolve);
    	setContext("SMUI:menu-surface:instantiate", false);
    	setContext("SMUI:menu-surface:getInstance", getMenuSurfaceInstancePromise);
    	setContext("SMUI:list:instantiate", false);
    	setContext("SMUI:list:getInstance", getListInstancePromise);

    	onMount(async () => {
    		if (instantiate !== false) {
    			$$invalidate(28, menu = new MDCMenu(element));
    		} else {
    			$$invalidate(28, menu = await getInstance());
    		}

    		menuSurfacePromiseResolve(menu.menuSurface_);
    		listPromiseResolve(menu.list_);
    	});

    	onDestroy(() => {
    		if (instantiate !== false) {
    			menu && menu.destroy();
    		}
    	});

    	function getMenuSurfaceInstancePromise() {
    		return menuSurfacePromise;
    	}

    	function getListInstancePromise() {
    		return listPromise;
    	}

    	function updateOpen() {
    		$$invalidate(6, open = menu.open);
    	}

    	function setOpen(value) {
    		$$invalidate(6, open = value);
    	}

    	function getItems() {
    		return menu.items;
    	}

    	function setDefaultFocusState(...args) {
    		return menu.setDefaultFocusState(...args);
    	}

    	function setAnchorCorner(...args) {
    		return menu.setAnchorCorner(...args);
    	}

    	function setAnchorMargin(...args) {
    		return menu.setAnchorMargin(...args);
    	}

    	function setSelectedIndex(...args) {
    		return menu.setSelectedIndex(...args);
    	}

    	function setEnabled(...args) {
    		return menu.setEnabled(...args);
    	}

    	function getOptionByIndex(...args) {
    		return menu.getOptionByIndex(...args);
    	}

    	function setFixedPosition(...args) {
    		return menu.setFixedPosition(...args);
    	}

    	function hoistMenuToBody(...args) {
    		return menu.hoistMenuToBody(...args);
    	}

    	function setIsHoisted(...args) {
    		return menu.setIsHoisted(...args);
    	}

    	function setAbsolutePosition(...args) {
    		return menu.setAbsolutePosition(...args);
    	}

    	function setAnchorElement(...args) {
    		return menu.setAnchorElement(...args);
    	}

    	function getDefaultFoundation(...args) {
    		return menu.getDefaultFoundation(...args);
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Menu", $$slots, ['default']);

    	function menusurface_element_binding(value) {
    		element = value;
    		$$invalidate(2, element);
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("static" in $$new_props) $$invalidate(7, isStatic = $$new_props.static);
    		if ("open" in $$new_props) $$invalidate(6, open = $$new_props.open);
    		if ("quickOpen" in $$new_props) $$invalidate(8, quickOpen = $$new_props.quickOpen);
    		if ("anchorCorner" in $$new_props) $$invalidate(9, anchorCorner = $$new_props.anchorCorner);
    		if ("wrapFocus" in $$new_props) $$invalidate(10, wrapFocus = $$new_props.wrapFocus);
    		if ("$$scope" in $$new_props) $$invalidate(27, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCMenu,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		MenuSurface,
    		Corner,
    		CornerBit,
    		forwardEvents,
    		use,
    		className,
    		isStatic,
    		open,
    		quickOpen,
    		anchorCorner,
    		wrapFocus,
    		element,
    		menu,
    		instantiate,
    		getInstance,
    		menuSurfacePromiseResolve,
    		menuSurfacePromise,
    		listPromiseResolve,
    		listPromise,
    		getMenuSurfaceInstancePromise,
    		getListInstancePromise,
    		updateOpen,
    		setOpen,
    		getItems,
    		setDefaultFocusState,
    		setAnchorCorner,
    		setAnchorMargin,
    		setSelectedIndex,
    		setEnabled,
    		getOptionByIndex,
    		setFixedPosition,
    		hoistMenuToBody,
    		setIsHoisted,
    		setAbsolutePosition,
    		setAnchorElement,
    		getDefaultFoundation
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("isStatic" in $$props) $$invalidate(7, isStatic = $$new_props.isStatic);
    		if ("open" in $$props) $$invalidate(6, open = $$new_props.open);
    		if ("quickOpen" in $$props) $$invalidate(8, quickOpen = $$new_props.quickOpen);
    		if ("anchorCorner" in $$props) $$invalidate(9, anchorCorner = $$new_props.anchorCorner);
    		if ("wrapFocus" in $$props) $$invalidate(10, wrapFocus = $$new_props.wrapFocus);
    		if ("element" in $$props) $$invalidate(2, element = $$new_props.element);
    		if ("menu" in $$props) $$invalidate(28, menu = $$new_props.menu);
    		if ("instantiate" in $$props) instantiate = $$new_props.instantiate;
    		if ("getInstance" in $$props) getInstance = $$new_props.getInstance;
    		if ("menuSurfacePromiseResolve" in $$props) menuSurfacePromiseResolve = $$new_props.menuSurfacePromiseResolve;
    		if ("menuSurfacePromise" in $$props) menuSurfacePromise = $$new_props.menuSurfacePromise;
    		if ("listPromiseResolve" in $$props) listPromiseResolve = $$new_props.listPromiseResolve;
    		if ("listPromise" in $$props) listPromise = $$new_props.listPromise;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*menu, open, isStatic*/ 268435648) {
    			 if (menu && menu.open !== open) {
    				if (isStatic) {
    					$$invalidate(6, open = true);
    				}

    				$$invalidate(28, menu.open = open, menu);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*menu, wrapFocus*/ 268436480) {
    			 if (menu && menu.wrapFocus !== wrapFocus) {
    				$$invalidate(28, menu.wrapFocus = wrapFocus, menu);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*menu, quickOpen*/ 268435712) {
    			 if (menu) {
    				$$invalidate(28, menu.quickOpen = quickOpen, menu);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*menu, anchorCorner*/ 268435968) {
    			 if (menu && anchorCorner != null) {
    				if (Corner.hasOwnProperty(anchorCorner)) {
    					menu.setAnchorCorner(Corner[anchorCorner]);
    				} else if (CornerBit.hasOwnProperty(anchorCorner)) {
    					menu.setAnchorCorner(Corner[anchorCorner]);
    				} else {
    					menu.setAnchorCorner(anchorCorner);
    				}
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		element,
    		forwardEvents,
    		updateOpen,
    		$$props,
    		open,
    		isStatic,
    		quickOpen,
    		anchorCorner,
    		wrapFocus,
    		setOpen,
    		getItems,
    		setDefaultFocusState,
    		setAnchorCorner,
    		setAnchorMargin,
    		setSelectedIndex,
    		setEnabled,
    		getOptionByIndex,
    		setFixedPosition,
    		hoistMenuToBody,
    		setIsHoisted,
    		setAbsolutePosition,
    		setAnchorElement,
    		getDefaultFoundation,
    		$$slots,
    		menusurface_element_binding,
    		$$scope
    	];
    }

    class Menu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$b,
    			create_fragment$b,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				static: 7,
    				open: 6,
    				quickOpen: 8,
    				anchorCorner: 9,
    				wrapFocus: 10,
    				setOpen: 11,
    				getItems: 12,
    				setDefaultFocusState: 13,
    				setAnchorCorner: 14,
    				setAnchorMargin: 15,
    				setSelectedIndex: 16,
    				setEnabled: 17,
    				getOptionByIndex: 18,
    				setFixedPosition: 19,
    				hoistMenuToBody: 20,
    				setIsHoisted: 21,
    				setAbsolutePosition: 22,
    				setAnchorElement: 23,
    				getDefaultFoundation: 24
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get use() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get static() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set static(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get open() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set open(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get quickOpen() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set quickOpen(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get anchorCorner() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set anchorCorner(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get wrapFocus() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wrapFocus(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setOpen() {
    		return this.$$.ctx[11];
    	}

    	set setOpen(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getItems() {
    		return this.$$.ctx[12];
    	}

    	set getItems(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setDefaultFocusState() {
    		return this.$$.ctx[13];
    	}

    	set setDefaultFocusState(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAnchorCorner() {
    		return this.$$.ctx[14];
    	}

    	set setAnchorCorner(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAnchorMargin() {
    		return this.$$.ctx[15];
    	}

    	set setAnchorMargin(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setSelectedIndex() {
    		return this.$$.ctx[16];
    	}

    	set setSelectedIndex(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setEnabled() {
    		return this.$$.ctx[17];
    	}

    	set setEnabled(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionByIndex() {
    		return this.$$.ctx[18];
    	}

    	set getOptionByIndex(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setFixedPosition() {
    		return this.$$.ctx[19];
    	}

    	set setFixedPosition(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoistMenuToBody() {
    		return this.$$.ctx[20];
    	}

    	set hoistMenuToBody(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setIsHoisted() {
    		return this.$$.ctx[21];
    	}

    	set setIsHoisted(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAbsolutePosition() {
    		return this.$$.ctx[22];
    	}

    	set setAbsolutePosition(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setAnchorElement() {
    		return this.$$.ctx[23];
    	}

    	set setAnchorElement(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getDefaultFoundation() {
    		return this.$$.ctx[24];
    	}

    	set getDefaultFoundation(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/list/List.svelte generated by Svelte v3.24.1 */
    const file$9 = "node_modules/@smui/list/List.svelte";

    // (18:0) {:else}
    function create_else_block$1(ctx) {
    	let ul;
    	let ul_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[23].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

    	let ul_levels = [
    		{
    			class: ul_class_value = "\n      mdc-list\n      " + /*className*/ ctx[1] + "\n      " + (/*nonInteractive*/ ctx[2]
    			? "mdc-list--non-interactive"
    			: "") + "\n      " + (/*dense*/ ctx[3] ? "mdc-list--dense" : "") + "\n      " + (/*avatarList*/ ctx[4] ? "mdc-list--avatar-list" : "") + "\n      " + (/*twoLine*/ ctx[5] ? "mdc-list--two-line" : "") + "\n      " + (/*threeLine*/ ctx[6] && !/*twoLine*/ ctx[5]
    			? "smui-list--three-line"
    			: "") + "\n    "
    		},
    		{ role: /*role*/ ctx[8] },
    		/*props*/ ctx[9]
    	];

    	let ul_data = {};

    	for (let i = 0; i < ul_levels.length; i += 1) {
    		ul_data = assign(ul_data, ul_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			ul = claim_element(nodes, "UL", { class: true, role: true });
    			var ul_nodes = children(ul);
    			if (default_slot) default_slot.l(ul_nodes);
    			ul_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(ul, ul_data);
    			add_location(ul, file$9, 18, 2, 478);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			if (default_slot) {
    				default_slot.m(ul, null);
    			}

    			/*ul_binding*/ ctx[25](ul);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, ul, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[10].call(null, ul)),
    					listen_dev(ul, "MDCList:action", /*handleAction*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty[0] & /*$$scope*/ 4194304) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[22], dirty, null, null);
    				}
    			}

    			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
    				(!current || dirty[0] & /*className, nonInteractive, dense, avatarList, twoLine, threeLine*/ 126 && ul_class_value !== (ul_class_value = "\n      mdc-list\n      " + /*className*/ ctx[1] + "\n      " + (/*nonInteractive*/ ctx[2]
    				? "mdc-list--non-interactive"
    				: "") + "\n      " + (/*dense*/ ctx[3] ? "mdc-list--dense" : "") + "\n      " + (/*avatarList*/ ctx[4] ? "mdc-list--avatar-list" : "") + "\n      " + (/*twoLine*/ ctx[5] ? "mdc-list--two-line" : "") + "\n      " + (/*threeLine*/ ctx[6] && !/*twoLine*/ ctx[5]
    				? "smui-list--three-line"
    				: "") + "\n    ")) && { class: ul_class_value },
    				(!current || dirty[0] & /*role*/ 256) && { role: /*role*/ ctx[8] },
    				dirty[0] & /*props*/ 512 && /*props*/ ctx[9]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			if (default_slot) default_slot.d(detaching);
    			/*ul_binding*/ ctx[25](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(18:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1:0) {#if nav}
    function create_if_block$2(ctx) {
    	let nav_1;
    	let nav_1_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[23].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

    	let nav_1_levels = [
    		{
    			class: nav_1_class_value = "\n      mdc-list\n      " + /*className*/ ctx[1] + "\n      " + (/*nonInteractive*/ ctx[2]
    			? "mdc-list--non-interactive"
    			: "") + "\n      " + (/*dense*/ ctx[3] ? "mdc-list--dense" : "") + "\n      " + (/*avatarList*/ ctx[4] ? "mdc-list--avatar-list" : "") + "\n      " + (/*twoLine*/ ctx[5] ? "mdc-list--two-line" : "") + "\n      " + (/*threeLine*/ ctx[6] && !/*twoLine*/ ctx[5]
    			? "smui-list--three-line"
    			: "") + "\n    "
    		},
    		/*props*/ ctx[9]
    	];

    	let nav_1_data = {};

    	for (let i = 0; i < nav_1_levels.length; i += 1) {
    		nav_1_data = assign(nav_1_data, nav_1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			nav_1 = element("nav");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			nav_1 = claim_element(nodes, "NAV", { class: true });
    			var nav_1_nodes = children(nav_1);
    			if (default_slot) default_slot.l(nav_1_nodes);
    			nav_1_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(nav_1, nav_1_data);
    			add_location(nav_1, file$9, 1, 2, 12);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav_1, anchor);

    			if (default_slot) {
    				default_slot.m(nav_1, null);
    			}

    			/*nav_1_binding*/ ctx[24](nav_1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, nav_1, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[10].call(null, nav_1)),
    					listen_dev(nav_1, "MDCList:action", /*handleAction*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty[0] & /*$$scope*/ 4194304) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[22], dirty, null, null);
    				}
    			}

    			set_attributes(nav_1, nav_1_data = get_spread_update(nav_1_levels, [
    				(!current || dirty[0] & /*className, nonInteractive, dense, avatarList, twoLine, threeLine*/ 126 && nav_1_class_value !== (nav_1_class_value = "\n      mdc-list\n      " + /*className*/ ctx[1] + "\n      " + (/*nonInteractive*/ ctx[2]
    				? "mdc-list--non-interactive"
    				: "") + "\n      " + (/*dense*/ ctx[3] ? "mdc-list--dense" : "") + "\n      " + (/*avatarList*/ ctx[4] ? "mdc-list--avatar-list" : "") + "\n      " + (/*twoLine*/ ctx[5] ? "mdc-list--two-line" : "") + "\n      " + (/*threeLine*/ ctx[6] && !/*twoLine*/ ctx[5]
    				? "smui-list--three-line"
    				: "") + "\n    ")) && { class: nav_1_class_value },
    				dirty[0] & /*props*/ 512 && /*props*/ ctx[9]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav_1);
    			if (default_slot) default_slot.d(detaching);
    			/*nav_1_binding*/ ctx[24](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(1:0) {#if nav}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$2, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*nav*/ ctx[11]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component(), ["MDCList:action"]);
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { nonInteractive = false } = $$props;
    	let { dense = false } = $$props;
    	let { avatarList = false } = $$props;
    	let { twoLine = false } = $$props;
    	let { threeLine = false } = $$props;
    	let { vertical = true } = $$props;
    	let { wrapFocus = false } = $$props;
    	let { singleSelection = false } = $$props;
    	let { selectedIndex = null } = $$props;
    	let { radiolist = false } = $$props;
    	let { checklist = false } = $$props;
    	let element;
    	let list;
    	let role = getContext("SMUI:list:role");
    	let nav = getContext("SMUI:list:nav");
    	let instantiate = getContext("SMUI:list:instantiate");
    	let getInstance = getContext("SMUI:list:getInstance");
    	let addLayoutListener = getContext("SMUI:addLayoutListener");
    	let removeLayoutListener;
    	setContext("SMUI:list:nonInteractive", nonInteractive);

    	if (!role) {
    		if (singleSelection) {
    			role = "listbox";
    			setContext("SMUI:list:item:role", "option");
    		} else if (radiolist) {
    			role = "radiogroup";
    			setContext("SMUI:list:item:role", "radio");
    		} else if (checklist) {
    			role = "group";
    			setContext("SMUI:list:item:role", "checkbox");
    		} else {
    			role = "list";
    			setContext("SMUI:list:item:role", undefined);
    		}
    	}

    	if (addLayoutListener) {
    		removeLayoutListener = addLayoutListener(layout);
    	}

    	onMount(async () => {
    		if (instantiate !== false) {
    			$$invalidate(26, list = new MDCList(element));
    		} else {
    			$$invalidate(26, list = await getInstance());
    		}

    		if (singleSelection) {
    			list.initializeListType();
    			$$invalidate(13, selectedIndex = list.selectedIndex);
    		}
    	});

    	onDestroy(() => {
    		if (instantiate !== false) {
    			list && list.destroy();
    		}

    		if (removeLayoutListener) {
    			removeLayoutListener();
    		}
    	});

    	function handleAction(e) {
    		if (list && list.listElements[e.detail.index].classList.contains("mdc-list-item--disabled")) {
    			e.preventDefault();
    			$$invalidate(26, list.selectedIndex = selectedIndex, list);
    		} else if (list && list.selectedIndex === e.detail.index) {
    			$$invalidate(13, selectedIndex = e.detail.index);
    		}
    	}

    	function layout(...args) {
    		return list.layout(...args);
    	}

    	function setEnabled(...args) {
    		return list.setEnabled(...args);
    	}

    	function getDefaultFoundation(...args) {
    		return list.getDefaultFoundation(...args);
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("List", $$slots, ['default']);

    	function nav_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	function ul_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(7, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(31, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("nonInteractive" in $$new_props) $$invalidate(2, nonInteractive = $$new_props.nonInteractive);
    		if ("dense" in $$new_props) $$invalidate(3, dense = $$new_props.dense);
    		if ("avatarList" in $$new_props) $$invalidate(4, avatarList = $$new_props.avatarList);
    		if ("twoLine" in $$new_props) $$invalidate(5, twoLine = $$new_props.twoLine);
    		if ("threeLine" in $$new_props) $$invalidate(6, threeLine = $$new_props.threeLine);
    		if ("vertical" in $$new_props) $$invalidate(14, vertical = $$new_props.vertical);
    		if ("wrapFocus" in $$new_props) $$invalidate(15, wrapFocus = $$new_props.wrapFocus);
    		if ("singleSelection" in $$new_props) $$invalidate(16, singleSelection = $$new_props.singleSelection);
    		if ("selectedIndex" in $$new_props) $$invalidate(13, selectedIndex = $$new_props.selectedIndex);
    		if ("radiolist" in $$new_props) $$invalidate(17, radiolist = $$new_props.radiolist);
    		if ("checklist" in $$new_props) $$invalidate(18, checklist = $$new_props.checklist);
    		if ("$$scope" in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCList,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		nonInteractive,
    		dense,
    		avatarList,
    		twoLine,
    		threeLine,
    		vertical,
    		wrapFocus,
    		singleSelection,
    		selectedIndex,
    		radiolist,
    		checklist,
    		element,
    		list,
    		role,
    		nav,
    		instantiate,
    		getInstance,
    		addLayoutListener,
    		removeLayoutListener,
    		handleAction,
    		layout,
    		setEnabled,
    		getDefaultFoundation,
    		props
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(31, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("nonInteractive" in $$props) $$invalidate(2, nonInteractive = $$new_props.nonInteractive);
    		if ("dense" in $$props) $$invalidate(3, dense = $$new_props.dense);
    		if ("avatarList" in $$props) $$invalidate(4, avatarList = $$new_props.avatarList);
    		if ("twoLine" in $$props) $$invalidate(5, twoLine = $$new_props.twoLine);
    		if ("threeLine" in $$props) $$invalidate(6, threeLine = $$new_props.threeLine);
    		if ("vertical" in $$props) $$invalidate(14, vertical = $$new_props.vertical);
    		if ("wrapFocus" in $$props) $$invalidate(15, wrapFocus = $$new_props.wrapFocus);
    		if ("singleSelection" in $$props) $$invalidate(16, singleSelection = $$new_props.singleSelection);
    		if ("selectedIndex" in $$props) $$invalidate(13, selectedIndex = $$new_props.selectedIndex);
    		if ("radiolist" in $$props) $$invalidate(17, radiolist = $$new_props.radiolist);
    		if ("checklist" in $$props) $$invalidate(18, checklist = $$new_props.checklist);
    		if ("element" in $$props) $$invalidate(7, element = $$new_props.element);
    		if ("list" in $$props) $$invalidate(26, list = $$new_props.list);
    		if ("role" in $$props) $$invalidate(8, role = $$new_props.role);
    		if ("nav" in $$props) $$invalidate(11, nav = $$new_props.nav);
    		if ("instantiate" in $$props) instantiate = $$new_props.instantiate;
    		if ("getInstance" in $$props) getInstance = $$new_props.getInstance;
    		if ("addLayoutListener" in $$props) addLayoutListener = $$new_props.addLayoutListener;
    		if ("removeLayoutListener" in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
    		if ("props" in $$props) $$invalidate(9, props = $$new_props.props);
    	};

    	let props;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		 $$invalidate(9, props = exclude($$props, [
    			"use",
    			"class",
    			"nonInteractive",
    			"dense",
    			"avatarList",
    			"twoLine",
    			"threeLine",
    			"vertical",
    			"wrapFocus",
    			"singleSelection",
    			"selectedIndex",
    			"radiolist",
    			"checklist"
    		]));

    		if ($$self.$$.dirty[0] & /*list, vertical*/ 67125248) {
    			 if (list && list.vertical !== vertical) {
    				$$invalidate(26, list.vertical = vertical, list);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*list, wrapFocus*/ 67141632) {
    			 if (list && list.wrapFocus !== wrapFocus) {
    				$$invalidate(26, list.wrapFocus = wrapFocus, list);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*list, singleSelection*/ 67174400) {
    			 if (list && list.singleSelection !== singleSelection) {
    				$$invalidate(26, list.singleSelection = singleSelection, list);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*list, singleSelection, selectedIndex*/ 67182592) {
    			 if (list && singleSelection && list.selectedIndex !== selectedIndex) {
    				$$invalidate(26, list.selectedIndex = selectedIndex, list);
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		nonInteractive,
    		dense,
    		avatarList,
    		twoLine,
    		threeLine,
    		element,
    		role,
    		props,
    		forwardEvents,
    		nav,
    		handleAction,
    		selectedIndex,
    		vertical,
    		wrapFocus,
    		singleSelection,
    		radiolist,
    		checklist,
    		layout,
    		setEnabled,
    		getDefaultFoundation,
    		$$scope,
    		$$slots,
    		nav_1_binding,
    		ul_binding
    	];
    }

    class List extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$c,
    			create_fragment$c,
    			safe_not_equal,
    			{
    				use: 0,
    				class: 1,
    				nonInteractive: 2,
    				dense: 3,
    				avatarList: 4,
    				twoLine: 5,
    				threeLine: 6,
    				vertical: 14,
    				wrapFocus: 15,
    				singleSelection: 16,
    				selectedIndex: 13,
    				radiolist: 17,
    				checklist: 18,
    				layout: 19,
    				setEnabled: 20,
    				getDefaultFoundation: 21
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "List",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get use() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nonInteractive() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nonInteractive(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dense() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dense(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get avatarList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set avatarList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get twoLine() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set twoLine(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get threeLine() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set threeLine(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get wrapFocus() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wrapFocus(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get singleSelection() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set singleSelection(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get radiolist() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radiolist(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get checklist() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checklist(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		return this.$$.ctx[19];
    	}

    	set layout(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setEnabled() {
    		return this.$$.ctx[20];
    	}

    	set setEnabled(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getDefaultFoundation() {
    		return this.$$.ctx[21];
    	}

    	set getDefaultFoundation(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/floating-label/FloatingLabel.svelte generated by Svelte v3.24.1 */
    const file$a = "node_modules/@smui/floating-label/FloatingLabel.svelte";

    // (9:0) {:else}
    function create_else_block$2(ctx) {
    	let label;
    	let label_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	let label_levels = [
    		{
    			class: label_class_value = "mdc-floating-label " + /*className*/ ctx[1]
    		},
    		/*forId*/ ctx[2] || /*inputProps*/ ctx[6] && /*inputProps*/ ctx[6].id
    		? {
    				"for": /*forId*/ ctx[2] || /*inputProps*/ ctx[6] && /*inputProps*/ ctx[6].id
    			}
    		: {},
    		exclude(/*$$props*/ ctx[7], ["use", "class", "for", "wrapped"])
    	];

    	let label_data = {};

    	for (let i = 0; i < label_levels.length; i += 1) {
    		label_data = assign(label_data, label_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			label = claim_element(nodes, "LABEL", { class: true });
    			var label_nodes = children(label);
    			if (default_slot) default_slot.l(label_nodes);
    			label_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(label, label_data);
    			add_location(label, file$a, 9, 2, 225);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			/*label_binding*/ ctx[14](label);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, label, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[5].call(null, label))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2048) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
    				}
    			}

    			set_attributes(label, label_data = get_spread_update(label_levels, [
    				(!current || dirty & /*className*/ 2 && label_class_value !== (label_class_value = "mdc-floating-label " + /*className*/ ctx[1])) && { class: label_class_value },
    				dirty & /*forId*/ 4 && (/*forId*/ ctx[2] || /*inputProps*/ ctx[6] && /*inputProps*/ ctx[6].id
    				? {
    						"for": /*forId*/ ctx[2] || /*inputProps*/ ctx[6] && /*inputProps*/ ctx[6].id
    					}
    				: {}),
    				dirty & /*$$props*/ 128 && exclude(/*$$props*/ ctx[7], ["use", "class", "for", "wrapped"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (default_slot) default_slot.d(detaching);
    			/*label_binding*/ ctx[14](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(9:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1:0) {#if wrapped}
    function create_if_block$3(ctx) {
    	let span;
    	let span_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	let span_levels = [
    		{
    			class: span_class_value = "mdc-floating-label " + /*className*/ ctx[1]
    		},
    		exclude(/*$$props*/ ctx[7], ["use", "class", "wrapped"])
    	];

    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			if (default_slot) default_slot.l(span_nodes);
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(span, span_data);
    			add_location(span, file$a, 1, 2, 16);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			/*span_binding*/ ctx[13](span);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[5].call(null, span))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2048) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
    				}
    			}

    			set_attributes(span, span_data = get_spread_update(span_levels, [
    				(!current || dirty & /*className*/ 2 && span_class_value !== (span_class_value = "mdc-floating-label " + /*className*/ ctx[1])) && { class: span_class_value },
    				dirty & /*$$props*/ 128 && exclude(/*$$props*/ ctx[7], ["use", "class", "wrapped"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			/*span_binding*/ ctx[13](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(1:0) {#if wrapped}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$3, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*wrapped*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { for: forId = "" } = $$props;
    	let { wrapped = false } = $$props;
    	let element;
    	let floatingLabel;
    	let inputProps = getContext("SMUI:generic:input:props") || {};

    	onMount(() => {
    		floatingLabel = new MDCFloatingLabel(element);
    	});

    	onDestroy(() => {
    		floatingLabel && floatingLabel.destroy();
    	});

    	function shake(shouldShake, ...args) {
    		return floatingLabel.shake(shouldShake, ...args);
    	}

    	function float(shouldFloat, ...args) {
    		return floatingLabel.float(shouldFloat, ...args);
    	}

    	function getWidth(...args) {
    		return floatingLabel.getWidth(...args);
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("FloatingLabel", $$slots, ['default']);

    	function span_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(4, element);
    		});
    	}

    	function label_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(4, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("for" in $$new_props) $$invalidate(2, forId = $$new_props.for);
    		if ("wrapped" in $$new_props) $$invalidate(3, wrapped = $$new_props.wrapped);
    		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCFloatingLabel,
    		onMount,
    		onDestroy,
    		getContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		forId,
    		wrapped,
    		element,
    		floatingLabel,
    		inputProps,
    		shake,
    		float,
    		getWidth
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("forId" in $$props) $$invalidate(2, forId = $$new_props.forId);
    		if ("wrapped" in $$props) $$invalidate(3, wrapped = $$new_props.wrapped);
    		if ("element" in $$props) $$invalidate(4, element = $$new_props.element);
    		if ("floatingLabel" in $$props) floatingLabel = $$new_props.floatingLabel;
    		if ("inputProps" in $$props) $$invalidate(6, inputProps = $$new_props.inputProps);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		forId,
    		wrapped,
    		element,
    		forwardEvents,
    		inputProps,
    		$$props,
    		shake,
    		float,
    		getWidth,
    		$$scope,
    		$$slots,
    		span_binding,
    		label_binding
    	];
    }

    class FloatingLabel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			use: 0,
    			class: 1,
    			for: 2,
    			wrapped: 3,
    			shake: 8,
    			float: 9,
    			getWidth: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FloatingLabel",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get use() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get for() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set for(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get wrapped() {
    		throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wrapped(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shake() {
    		return this.$$.ctx[8];
    	}

    	set shake(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get float() {
    		return this.$$.ctx[9];
    	}

    	set float(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getWidth() {
    		return this.$$.ctx[10];
    	}

    	set getWidth(value) {
    		throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/line-ripple/LineRipple.svelte generated by Svelte v3.24.1 */
    const file$b = "node_modules/@smui/line-ripple/LineRipple.svelte";

    function create_fragment$e(ctx) {
    	let div;
    	let div_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let mounted;
    	let dispose;

    	let div_levels = [
    		{
    			class: div_class_value = "\n    mdc-line-ripple\n    " + /*className*/ ctx[1] + "\n    " + (/*active*/ ctx[2] ? "mdc-line-ripple--active" : "") + "\n  "
    		},
    		exclude(/*$$props*/ ctx[5], ["use", "class", "active"])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			children(div).forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(div, div_data);
    			add_location(div, file$b, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[9](div);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[4].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				dirty & /*className, active*/ 6 && div_class_value !== (div_class_value = "\n    mdc-line-ripple\n    " + /*className*/ ctx[1] + "\n    " + (/*active*/ ctx[2] ? "mdc-line-ripple--active" : "") + "\n  ") && { class: div_class_value },
    				dirty & /*$$props*/ 32 && exclude(/*$$props*/ ctx[5], ["use", "class", "active"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[9](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { active = false } = $$props;
    	let element;
    	let lineRipple;

    	onMount(() => {
    		lineRipple = new MDCLineRipple(element);
    	});

    	onDestroy(() => {
    		lineRipple && lineRipple.destroy();
    	});

    	function activate(...args) {
    		return lineRipple.activate(...args);
    	}

    	function deactivate(...args) {
    		return lineRipple.deactivate(...args);
    	}

    	function setRippleCenter(xCoordinate, ...args) {
    		return lineRipple.setRippleCenter(xCoordinate, ...args);
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("LineRipple", $$slots, []);

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(3, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("active" in $$new_props) $$invalidate(2, active = $$new_props.active);
    	};

    	$$self.$capture_state = () => ({
    		MDCLineRipple,
    		onMount,
    		onDestroy,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		active,
    		element,
    		lineRipple,
    		activate,
    		deactivate,
    		setRippleCenter
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("active" in $$props) $$invalidate(2, active = $$new_props.active);
    		if ("element" in $$props) $$invalidate(3, element = $$new_props.element);
    		if ("lineRipple" in $$props) lineRipple = $$new_props.lineRipple;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		active,
    		element,
    		forwardEvents,
    		$$props,
    		activate,
    		deactivate,
    		setRippleCenter,
    		div_binding
    	];
    }

    class LineRipple extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			use: 0,
    			class: 1,
    			active: 2,
    			activate: 6,
    			deactivate: 7,
    			setRippleCenter: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LineRipple",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get use() {
    		throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activate() {
    		return this.$$.ctx[6];
    	}

    	set activate(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deactivate() {
    		return this.$$.ctx[7];
    	}

    	set deactivate(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setRippleCenter() {
    		return this.$$.ctx[8];
    	}

    	set setRippleCenter(value) {
    		throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/notched-outline/NotchedOutline.svelte generated by Svelte v3.24.1 */
    const file$c = "node_modules/@smui/notched-outline/NotchedOutline.svelte";

    // (14:2) {#if !noLabel}
    function create_if_block$4(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (default_slot) default_slot.l(div_nodes);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div, "class", "mdc-notched-outline__notch");
    			add_location(div, file$c, 14, 4, 367);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 512) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(14:2) {#if !noLabel}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let div2_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = !/*noLabel*/ ctx[3] && create_if_block$4(ctx);

    	let div2_levels = [
    		{
    			class: div2_class_value = "\n    mdc-notched-outline\n    " + /*className*/ ctx[1] + "\n    " + (/*notched*/ ctx[2] ? "mdc-notched-outline--notched" : "") + "\n    " + (/*noLabel*/ ctx[3]
    			? "mdc-notched-outline--no-label"
    			: "") + "\n  "
    		},
    		exclude(/*$$props*/ ctx[6], ["use", "class", "notched", "noLabel"])
    	];

    	let div2_data = {};

    	for (let i = 0; i < div2_levels.length; i += 1) {
    		div2_data = assign(div2_data, div2_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div1 = element("div");
    			this.h();
    		},
    		l: function claim(nodes) {
    			div2 = claim_element(nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			div0 = claim_element(div2_nodes, "DIV", { class: true });
    			children(div0).forEach(detach_dev);
    			t0 = claim_space(div2_nodes);
    			if (if_block) if_block.l(div2_nodes);
    			t1 = claim_space(div2_nodes);
    			div1 = claim_element(div2_nodes, "DIV", { class: true });
    			children(div1).forEach(detach_dev);
    			div2_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div0, "class", "mdc-notched-outline__leading");
    			add_location(div0, file$c, 12, 2, 297);
    			attr_dev(div1, "class", "mdc-notched-outline__trailing");
    			add_location(div1, file$c, 16, 2, 437);
    			set_attributes(div2, div2_data);
    			add_location(div2, file$c, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t0);
    			if (if_block) if_block.m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			/*div2_binding*/ ctx[11](div2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div2, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[5].call(null, div2))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*noLabel*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*noLabel*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div2, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
    				(!current || dirty & /*className, notched, noLabel*/ 14 && div2_class_value !== (div2_class_value = "\n    mdc-notched-outline\n    " + /*className*/ ctx[1] + "\n    " + (/*notched*/ ctx[2] ? "mdc-notched-outline--notched" : "") + "\n    " + (/*noLabel*/ ctx[3]
    				? "mdc-notched-outline--no-label"
    				: "") + "\n  ")) && { class: div2_class_value },
    				dirty & /*$$props*/ 64 && exclude(/*$$props*/ ctx[6], ["use", "class", "notched", "noLabel"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    			/*div2_binding*/ ctx[11](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { notched = false } = $$props;
    	let { noLabel = false } = $$props;
    	let element;
    	let notchedOutline;

    	onMount(() => {
    		notchedOutline = new MDCNotchedOutline(element);
    	});

    	onDestroy(() => {
    		notchedOutline && notchedOutline.destroy();
    	});

    	function notch(notchWidth, ...args) {
    		return notchedOutline.notch(notchWidth, ...args);
    	}

    	function closeNotch(...args) {
    		return notchedOutline.closeNotch(...args);
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("NotchedOutline", $$slots, ['default']);

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(4, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("notched" in $$new_props) $$invalidate(2, notched = $$new_props.notched);
    		if ("noLabel" in $$new_props) $$invalidate(3, noLabel = $$new_props.noLabel);
    		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		MDCNotchedOutline,
    		onMount,
    		onDestroy,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		forwardEvents,
    		use,
    		className,
    		notched,
    		noLabel,
    		element,
    		notchedOutline,
    		notch,
    		closeNotch
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("notched" in $$props) $$invalidate(2, notched = $$new_props.notched);
    		if ("noLabel" in $$props) $$invalidate(3, noLabel = $$new_props.noLabel);
    		if ("element" in $$props) $$invalidate(4, element = $$new_props.element);
    		if ("notchedOutline" in $$props) notchedOutline = $$new_props.notchedOutline;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		notched,
    		noLabel,
    		element,
    		forwardEvents,
    		$$props,
    		notch,
    		closeNotch,
    		$$scope,
    		$$slots,
    		div2_binding
    	];
    }

    class NotchedOutline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
    			use: 0,
    			class: 1,
    			notched: 2,
    			noLabel: 3,
    			notch: 7,
    			closeNotch: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotchedOutline",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get use() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get notched() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set notched(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noLabel() {
    		throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noLabel(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get notch() {
    		return this.$$.ctx[7];
    	}

    	set notch(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeNotch() {
    		return this.$$.ctx[8];
    	}

    	set closeNotch(value) {
    		throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/select/Select.svelte generated by Svelte v3.24.1 */
    const file$d = "node_modules/@smui/select/Select.svelte";
    const get_label_slot_changes_1 = dirty => ({});
    const get_label_slot_context_1 = ctx => ({});
    const get_label_slot_changes = dirty => ({});
    const get_label_slot_context = ctx => ({});
    const get_icon_slot_changes = dirty => ({});
    const get_icon_slot_context = ctx => ({});

    // (49:2) {:else}
    function create_else_block$3(ctx) {
    	let select_1;
    	let select_1_class_value;
    	let useActions_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[28].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);

    	let select_1_levels = [
    		{
    			class: select_1_class_value = "mdc-select__native-control " + /*input$class*/ ctx[15]
    		},
    		{ disabled: /*disabled*/ ctx[5] },
    		{ required: /*required*/ ctx[12] },
    		{ id: /*inputId*/ ctx[13] },
    		exclude(prefixFilter(/*$$props*/ ctx[22], "input$"), ["use", "class"])
    	];

    	let select_1_data = {};

    	for (let i = 0; i < select_1_levels.length; i += 1) {
    		select_1_data = assign(select_1_data, select_1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			select_1 = element("select");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			select_1 = claim_element(nodes, "SELECT", {
    				class: true,
    				disabled: true,
    				required: true,
    				id: true
    			});

    			var select_1_nodes = children(select_1);
    			if (default_slot) default_slot.l(select_1_nodes);
    			select_1_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(select_1, select_1_data);
    			add_location(select_1, file$d, 49, 4, 1649);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select_1, anchor);

    			if (default_slot) {
    				default_slot.m(select_1, null);
    			}

    			if (select_1_data.multiple) select_options(select_1, select_1_data.value);
    			/*select_1_binding*/ ctx[35](select_1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, select_1, /*input$use*/ ctx[14])),
    					listen_dev(select_1, "change", /*change_handler_1*/ ctx[31], false, false, false),
    					listen_dev(select_1, "input", /*input_handler_1*/ ctx[32], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty[1] & /*$$scope*/ 64) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[37], dirty, null, null);
    				}
    			}

    			set_attributes(select_1, select_1_data = get_spread_update(select_1_levels, [
    				(!current || dirty[0] & /*input$class*/ 32768 && select_1_class_value !== (select_1_class_value = "mdc-select__native-control " + /*input$class*/ ctx[15])) && { class: select_1_class_value },
    				(!current || dirty[0] & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
    				(!current || dirty[0] & /*required*/ 4096) && { required: /*required*/ ctx[12] },
    				(!current || dirty[0] & /*inputId*/ 8192) && { id: /*inputId*/ ctx[13] },
    				dirty[0] & /*$$props*/ 4194304 && exclude(prefixFilter(/*$$props*/ ctx[22], "input$"), ["use", "class"])
    			]));

    			if (dirty[0] & /*input$class, disabled, required, inputId, $$props*/ 4239392 && select_1_data.multiple) select_options(select_1, select_1_data.value);
    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*input$use*/ 16384) useActions_action.update.call(null, /*input$use*/ ctx[14]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select_1);
    			if (default_slot) default_slot.d(detaching);
    			/*select_1_binding*/ ctx[35](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(49:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (19:2) {#if enhanced}
    function create_if_block_5(ctx) {
    	let input;
    	let useActions_action;
    	let t0;
    	let div;
    	let t1;
    	let div_id_value;
    	let div_aria_labelledby_value;
    	let div_aria_required_value;
    	let t2;
    	let menu;
    	let updating_anchorElement;
    	let current;
    	let mounted;
    	let dispose;

    	let input_levels = [
    		{ type: "hidden" },
    		{ disabled: /*disabled*/ ctx[5] },
    		{ required: /*required*/ ctx[12] },
    		{ id: /*inputId*/ ctx[13] },
    		{ value: /*value*/ ctx[0] },
    		exclude(prefixFilter(/*$$props*/ ctx[22], "input$"), ["use"])
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	const menu_spread_levels = [
    		{
    			class: "mdc-select__menu " + /*menu$class*/ ctx[17]
    		},
    		{ role: "listbox" },
    		{ anchor: false },
    		exclude(prefixFilter(/*$$props*/ ctx[22], "menu$"), ["class"])
    	];

    	function menu_anchorElement_binding(value) {
    		/*menu_anchorElement_binding*/ ctx[34].call(null, value);
    	}

    	let menu_props = {
    		$$slots: { default: [create_default_slot_3$1] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < menu_spread_levels.length; i += 1) {
    		menu_props = assign(menu_props, menu_spread_levels[i]);
    	}

    	if (/*element*/ ctx[18] !== void 0) {
    		menu_props.anchorElement = /*element*/ ctx[18];
    	}

    	menu = new Menu({ props: menu_props, $$inline: true });
    	binding_callbacks.push(() => bind(menu, "anchorElement", menu_anchorElement_binding));

    	const block = {
    		c: function create() {
    			input = element("input");
    			t0 = space();
    			div = element("div");
    			t1 = text(/*selectedText*/ ctx[11]);
    			t2 = space();
    			create_component(menu.$$.fragment);
    			this.h();
    		},
    		l: function claim(nodes) {
    			input = claim_element(nodes, "INPUT", {
    				type: true,
    				disabled: true,
    				required: true,
    				id: true,
    				value: true
    			});

    			t0 = claim_space(nodes);

    			div = claim_element(nodes, "DIV", {
    				id: true,
    				class: true,
    				role: true,
    				"aria-haspopup": true,
    				"aria-labelledby": true,
    				"aria-required": true
    			});

    			var div_nodes = children(div);
    			t1 = claim_text(div_nodes, /*selectedText*/ ctx[11]);
    			div_nodes.forEach(detach_dev);
    			t2 = claim_space(nodes);
    			claim_component(menu.$$.fragment, nodes);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(input, input_data);
    			add_location(input, file$d, 19, 4, 794);
    			attr_dev(div, "id", div_id_value = /*inputId*/ ctx[13] + "-smui-selected-text");
    			attr_dev(div, "class", "mdc-select__selected-text");
    			attr_dev(div, "role", "button");
    			attr_dev(div, "aria-haspopup", "listbox");
    			attr_dev(div, "aria-labelledby", div_aria_labelledby_value = "" + (/*inputId*/ ctx[13] + "-smui-label" + " " + (/*inputId*/ ctx[13] + "-smui-selected-text")));
    			attr_dev(div, "aria-required", div_aria_required_value = /*required*/ ctx[12] ? "true" : "false");
    			add_location(div, file$d, 31, 4, 1061);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			/*input_binding*/ ctx[33](input);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, t1);
    			insert_dev(target, t2, anchor);
    			mount_component(menu, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, input, /*input$use*/ ctx[14])),
    					listen_dev(input, "change", /*change_handler*/ ctx[29], false, false, false),
    					listen_dev(input, "input", /*input_handler*/ ctx[30], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				{ type: "hidden" },
    				(!current || dirty[0] & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
    				(!current || dirty[0] & /*required*/ 4096) && { required: /*required*/ ctx[12] },
    				(!current || dirty[0] & /*inputId*/ 8192) && { id: /*inputId*/ ctx[13] },
    				(!current || dirty[0] & /*value*/ 1) && { value: /*value*/ ctx[0] },
    				dirty[0] & /*$$props*/ 4194304 && exclude(prefixFilter(/*$$props*/ ctx[22], "input$"), ["use"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*input$use*/ 16384) useActions_action.update.call(null, /*input$use*/ ctx[14]);
    			if (!current || dirty[0] & /*selectedText*/ 2048) set_data_dev(t1, /*selectedText*/ ctx[11]);

    			if (!current || dirty[0] & /*inputId*/ 8192 && div_id_value !== (div_id_value = /*inputId*/ ctx[13] + "-smui-selected-text")) {
    				attr_dev(div, "id", div_id_value);
    			}

    			if (!current || dirty[0] & /*inputId*/ 8192 && div_aria_labelledby_value !== (div_aria_labelledby_value = "" + (/*inputId*/ ctx[13] + "-smui-label" + " " + (/*inputId*/ ctx[13] + "-smui-selected-text")))) {
    				attr_dev(div, "aria-labelledby", div_aria_labelledby_value);
    			}

    			if (!current || dirty[0] & /*required*/ 4096 && div_aria_required_value !== (div_aria_required_value = /*required*/ ctx[12] ? "true" : "false")) {
    				attr_dev(div, "aria-required", div_aria_required_value);
    			}

    			const menu_changes = (dirty[0] & /*menu$class, $$props*/ 4325376)
    			? get_spread_update(menu_spread_levels, [
    					dirty[0] & /*menu$class*/ 131072 && {
    						class: "mdc-select__menu " + /*menu$class*/ ctx[17]
    					},
    					menu_spread_levels[1],
    					menu_spread_levels[2],
    					dirty[0] & /*$$props*/ 4194304 && get_spread_object(exclude(prefixFilter(/*$$props*/ ctx[22], "menu$"), ["class"]))
    				])
    			: {};

    			if (dirty[1] & /*$$scope*/ 64) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_anchorElement && dirty[0] & /*element*/ 262144) {
    				updating_anchorElement = true;
    				menu_changes.anchorElement = /*element*/ ctx[18];
    				add_flush_callback(() => updating_anchorElement = false);
    			}

    			menu.$set(menu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			/*input_binding*/ ctx[33](null);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t2);
    			destroy_component(menu, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(19:2) {#if enhanced}",
    		ctx
    	});

    	return block;
    }

    // (47:6) <List {...prefixFilter($$props, 'list$')}>
    function create_default_slot_4$1(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[28].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty[1] & /*$$scope*/ 64) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[37], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(47:6) <List {...prefixFilter($$props, 'list$')}>",
    		ctx
    	});

    	return block;
    }

    // (40:4) <Menu       class="mdc-select__menu {menu$class}"       role="listbox"       anchor={false}       bind:anchorElement={element}       {...exclude(prefixFilter($$props, 'menu$'), ['class'])}     >
    function create_default_slot_3$1(ctx) {
    	let list;
    	let current;
    	const list_spread_levels = [prefixFilter(/*$$props*/ ctx[22], "list$")];

    	let list_props = {
    		$$slots: { default: [create_default_slot_4$1] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < list_spread_levels.length; i += 1) {
    		list_props = assign(list_props, list_spread_levels[i]);
    	}

    	list = new List({ props: list_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(list.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(list.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(list, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const list_changes = (dirty[0] & /*$$props*/ 4194304)
    			? get_spread_update(list_spread_levels, [get_spread_object(prefixFilter(/*$$props*/ ctx[22], "list$"))])
    			: {};

    			if (dirty[1] & /*$$scope*/ 64) {
    				list_changes.$$scope = { dirty, ctx };
    			}

    			list.$set(list_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(list.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(list.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(list, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(40:4) <Menu       class=\\\"mdc-select__menu {menu$class}\\\"       role=\\\"listbox\\\"       anchor={false}       bind:anchorElement={element}       {...exclude(prefixFilter($$props, 'menu$'), ['class'])}     >",
    		ctx
    	});

    	return block;
    }

    // (62:2) {#if variant !== 'outlined'}
    function create_if_block_2(ctx) {
    	let t;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = !/*noLabel*/ ctx[9] && /*label*/ ctx[10] != null && create_if_block_4(ctx);
    	let if_block1 = /*ripple*/ ctx[4] && create_if_block_3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (if_block0) if_block0.l(nodes);
    			t = claim_space(nodes);
    			if (if_block1) if_block1.l(nodes);
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*noLabel*/ ctx[9] && /*label*/ ctx[10] != null) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*noLabel, label*/ 1536) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*ripple*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*ripple*/ 16) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(62:2) {#if variant !== 'outlined'}",
    		ctx
    	});

    	return block;
    }

    // (63:4) {#if !noLabel && label != null}
    function create_if_block_4(ctx) {
    	let floatinglabel;
    	let current;

    	const floatinglabel_spread_levels = [
    		{ for: /*inputId*/ ctx[13] },
    		{ id: /*inputId*/ ctx[13] + "-smui-label" },
    		{
    			class: "" + ((/*value*/ ctx[0] !== ""
    			? "mdc-floating-label--float-above"
    			: "") + " " + /*label$class*/ ctx[16])
    		},
    		exclude(prefixFilter(/*$$props*/ ctx[22], "label$"), ["class"])
    	];

    	let floatinglabel_props = {
    		$$slots: { default: [create_default_slot_2$1] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    		floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
    	}

    	floatinglabel = new FloatingLabel({
    			props: floatinglabel_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(floatinglabel.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(floatinglabel.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatinglabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatinglabel_changes = (dirty[0] & /*inputId, value, label$class, $$props*/ 4268033)
    			? get_spread_update(floatinglabel_spread_levels, [
    					dirty[0] & /*inputId*/ 8192 && { for: /*inputId*/ ctx[13] },
    					dirty[0] & /*inputId*/ 8192 && { id: /*inputId*/ ctx[13] + "-smui-label" },
    					dirty[0] & /*value, label$class*/ 65537 && {
    						class: "" + ((/*value*/ ctx[0] !== ""
    						? "mdc-floating-label--float-above"
    						: "") + " " + /*label$class*/ ctx[16])
    					},
    					dirty[0] & /*$$props*/ 4194304 && get_spread_object(exclude(prefixFilter(/*$$props*/ ctx[22], "label$"), ["class"]))
    				])
    			: {};

    			if (dirty[0] & /*label*/ 1024 | dirty[1] & /*$$scope*/ 64) {
    				floatinglabel_changes.$$scope = { dirty, ctx };
    			}

    			floatinglabel.$set(floatinglabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatinglabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatinglabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(floatinglabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(63:4) {#if !noLabel && label != null}",
    		ctx
    	});

    	return block;
    }

    // (64:6) <FloatingLabel         for={inputId}         id={inputId+'-smui-label'}         class="{value !== '' ? 'mdc-floating-label--float-above' : ''} {label$class}"         {...exclude(prefixFilter($$props, 'label$'), ['class'])}       >
    function create_default_slot_2$1(ctx) {
    	let t;
    	let current;
    	const label_slot_template = /*$$slots*/ ctx[28].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[37], get_label_slot_context);

    	const block = {
    		c: function create() {
    			t = text(/*label*/ ctx[10]);
    			if (label_slot) label_slot.c();
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, /*label*/ ctx[10]);
    			if (label_slot) label_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);

    			if (label_slot) {
    				label_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*label*/ 1024) set_data_dev(t, /*label*/ ctx[10]);

    			if (label_slot) {
    				if (label_slot.p && dirty[1] & /*$$scope*/ 64) {
    					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[37], dirty, get_label_slot_changes, get_label_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (label_slot) label_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(64:6) <FloatingLabel         for={inputId}         id={inputId+'-smui-label'}         class=\\\"{value !== '' ? 'mdc-floating-label--float-above' : ''} {label$class}\\\"         {...exclude(prefixFilter($$props, 'label$'), ['class'])}       >",
    		ctx
    	});

    	return block;
    }

    // (71:4) {#if ripple}
    function create_if_block_3(ctx) {
    	let lineripple;
    	let current;
    	const lineripple_spread_levels = [prefixFilter(/*$$props*/ ctx[22], "ripple$")];
    	let lineripple_props = {};

    	for (let i = 0; i < lineripple_spread_levels.length; i += 1) {
    		lineripple_props = assign(lineripple_props, lineripple_spread_levels[i]);
    	}

    	lineripple = new LineRipple({ props: lineripple_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(lineripple.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(lineripple.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lineripple, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const lineripple_changes = (dirty[0] & /*$$props*/ 4194304)
    			? get_spread_update(lineripple_spread_levels, [get_spread_object(prefixFilter(/*$$props*/ ctx[22], "ripple$"))])
    			: {};

    			lineripple.$set(lineripple_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lineripple.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lineripple.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(lineripple, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(71:4) {#if ripple}",
    		ctx
    	});

    	return block;
    }

    // (75:2) {#if variant === 'outlined'}
    function create_if_block$5(ctx) {
    	let notchedoutline;
    	let current;

    	const notchedoutline_spread_levels = [
    		{
    			noLabel: /*noLabel*/ ctx[9] || /*label*/ ctx[10] == null
    		},
    		prefixFilter(/*$$props*/ ctx[22], "outline$")
    	];

    	let notchedoutline_props = {
    		$$slots: { default: [create_default_slot$3] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < notchedoutline_spread_levels.length; i += 1) {
    		notchedoutline_props = assign(notchedoutline_props, notchedoutline_spread_levels[i]);
    	}

    	notchedoutline = new NotchedOutline({
    			props: notchedoutline_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(notchedoutline.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(notchedoutline.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(notchedoutline, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const notchedoutline_changes = (dirty[0] & /*noLabel, label, $$props*/ 4195840)
    			? get_spread_update(notchedoutline_spread_levels, [
    					dirty[0] & /*noLabel, label*/ 1536 && {
    						noLabel: /*noLabel*/ ctx[9] || /*label*/ ctx[10] == null
    					},
    					dirty[0] & /*$$props*/ 4194304 && get_spread_object(prefixFilter(/*$$props*/ ctx[22], "outline$"))
    				])
    			: {};

    			if (dirty[0] & /*inputId, value, label$class, label, noLabel*/ 75265 | dirty[1] & /*$$scope*/ 64) {
    				notchedoutline_changes.$$scope = { dirty, ctx };
    			}

    			notchedoutline.$set(notchedoutline_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(notchedoutline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(notchedoutline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(notchedoutline, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(75:2) {#if variant === 'outlined'}",
    		ctx
    	});

    	return block;
    }

    // (77:6) {#if !noLabel && label != null}
    function create_if_block_1$1(ctx) {
    	let floatinglabel;
    	let current;

    	const floatinglabel_spread_levels = [
    		{ for: /*inputId*/ ctx[13] },
    		{
    			class: "" + ((/*value*/ ctx[0] !== ""
    			? "mdc-floating-label--float-above"
    			: "") + " " + /*label$class*/ ctx[16])
    		},
    		exclude(prefixFilter(/*$$props*/ ctx[22], "label$"), ["class"])
    	];

    	let floatinglabel_props = {
    		$$slots: { default: [create_default_slot_1$1] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    		floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
    	}

    	floatinglabel = new FloatingLabel({
    			props: floatinglabel_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(floatinglabel.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(floatinglabel.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(floatinglabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const floatinglabel_changes = (dirty[0] & /*inputId, value, label$class, $$props*/ 4268033)
    			? get_spread_update(floatinglabel_spread_levels, [
    					dirty[0] & /*inputId*/ 8192 && { for: /*inputId*/ ctx[13] },
    					dirty[0] & /*value, label$class*/ 65537 && {
    						class: "" + ((/*value*/ ctx[0] !== ""
    						? "mdc-floating-label--float-above"
    						: "") + " " + /*label$class*/ ctx[16])
    					},
    					dirty[0] & /*$$props*/ 4194304 && get_spread_object(exclude(prefixFilter(/*$$props*/ ctx[22], "label$"), ["class"]))
    				])
    			: {};

    			if (dirty[0] & /*label*/ 1024 | dirty[1] & /*$$scope*/ 64) {
    				floatinglabel_changes.$$scope = { dirty, ctx };
    			}

    			floatinglabel.$set(floatinglabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(floatinglabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(floatinglabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(floatinglabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(77:6) {#if !noLabel && label != null}",
    		ctx
    	});

    	return block;
    }

    // (78:8) <FloatingLabel           for={inputId}           class="{value !== '' ? 'mdc-floating-label--float-above' : ''} {label$class}"           {...exclude(prefixFilter($$props, 'label$'), ['class'])}         >
    function create_default_slot_1$1(ctx) {
    	let t;
    	let current;
    	const label_slot_template = /*$$slots*/ ctx[28].label;
    	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[37], get_label_slot_context_1);

    	const block = {
    		c: function create() {
    			t = text(/*label*/ ctx[10]);
    			if (label_slot) label_slot.c();
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, /*label*/ ctx[10]);
    			if (label_slot) label_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);

    			if (label_slot) {
    				label_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*label*/ 1024) set_data_dev(t, /*label*/ ctx[10]);

    			if (label_slot) {
    				if (label_slot.p && dirty[1] & /*$$scope*/ 64) {
    					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[37], dirty, get_label_slot_changes_1, get_label_slot_context_1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(label_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(label_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (label_slot) label_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(78:8) <FloatingLabel           for={inputId}           class=\\\"{value !== '' ? 'mdc-floating-label--float-above' : ''} {label$class}\\\"           {...exclude(prefixFilter($$props, 'label$'), ['class'])}         >",
    		ctx
    	});

    	return block;
    }

    // (76:4) <NotchedOutline noLabel={noLabel || label == null} {...prefixFilter($$props, 'outline$')}>
    function create_default_slot$3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = !/*noLabel*/ ctx[9] && /*label*/ ctx[10] != null && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (if_block) if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*noLabel*/ ctx[9] && /*label*/ ctx[10] != null) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*noLabel, label*/ 1536) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(76:4) <NotchedOutline noLabel={noLabel || label == null} {...prefixFilter($$props, 'outline$')}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div;
    	let t0;
    	let i;
    	let t1;
    	let current_block_type_index;
    	let if_block0;
    	let t2;
    	let t3;
    	let div_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const icon_slot_template = /*$$slots*/ ctx[28].icon;
    	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[37], get_icon_slot_context);
    	const if_block_creators = [create_if_block_5, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*enhanced*/ ctx[6]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*variant*/ ctx[7] !== "outlined" && create_if_block_2(ctx);
    	let if_block2 = /*variant*/ ctx[7] === "outlined" && create_if_block$5(ctx);

    	let div_levels = [
    		{
    			class: div_class_value = "\n    mdc-select\n    " + /*className*/ ctx[3] + "\n    " + (/*disabled*/ ctx[5] ? "mdc-select--disabled" : "") + "\n    " + (/*variant*/ ctx[7] === "outlined"
    			? "mdc-select--outlined"
    			: "") + "\n    " + (/*variant*/ ctx[7] === "standard"
    			? "smui-select--standard"
    			: "") + "\n    " + (/*withLeadingIcon*/ ctx[8]
    			? "mdc-select--with-leading-icon"
    			: "") + "\n    " + (/*invalid*/ ctx[1] ? "mdc-select--invalid" : "") + "\n  "
    		},
    		exclude(/*$$props*/ ctx[22], [
    			"use",
    			"class",
    			"ripple",
    			"disabled",
    			"enhanced",
    			"variant",
    			"noLabel",
    			"withLeadingIcon",
    			"label",
    			"value",
    			"selectedIndex",
    			"selectedText",
    			"dirty",
    			"invalid",
    			"updateInvalid",
    			"required",
    			"input$",
    			"label$",
    			"ripple$",
    			"outline$",
    			"menu$",
    			"list$"
    		])
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (icon_slot) icon_slot.c();
    			t0 = space();
    			i = element("i");
    			t1 = space();
    			if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (icon_slot) icon_slot.l(div_nodes);
    			t0 = claim_space(div_nodes);
    			i = claim_element(div_nodes, "I", { class: true });
    			children(i).forEach(detach_dev);
    			t1 = claim_space(div_nodes);
    			if_block0.l(div_nodes);
    			t2 = claim_space(div_nodes);
    			if (if_block1) if_block1.l(div_nodes);
    			t3 = claim_space(div_nodes);
    			if (if_block2) if_block2.l(div_nodes);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(i, "class", "mdc-select__dropdown-icon");
    			add_location(i, file$d, 17, 2, 731);
    			set_attributes(div, div_data);
    			add_location(div, file$d, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (icon_slot) {
    				icon_slot.m(div, null);
    			}

    			append_dev(div, t0);
    			append_dev(div, i);
    			append_dev(div, t1);
    			if_blocks[current_block_type_index].m(div, null);
    			append_dev(div, t2);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t3);
    			if (if_block2) if_block2.m(div, null);
    			/*div_binding*/ ctx[36](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[2])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[20].call(null, div)),
    					listen_dev(div, "MDCSelect:change", /*changeHandler*/ ctx[21], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (icon_slot) {
    				if (icon_slot.p && dirty[1] & /*$$scope*/ 64) {
    					update_slot(icon_slot, icon_slot_template, ctx, /*$$scope*/ ctx[37], dirty, get_icon_slot_changes, get_icon_slot_context);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div, t2);
    			}

    			if (/*variant*/ ctx[7] !== "outlined") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*variant*/ 128) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*variant*/ ctx[7] === "outlined") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*variant*/ 128) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$5(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty[0] & /*className, disabled, variant, withLeadingIcon, invalid*/ 426 && div_class_value !== (div_class_value = "\n    mdc-select\n    " + /*className*/ ctx[3] + "\n    " + (/*disabled*/ ctx[5] ? "mdc-select--disabled" : "") + "\n    " + (/*variant*/ ctx[7] === "outlined"
    				? "mdc-select--outlined"
    				: "") + "\n    " + (/*variant*/ ctx[7] === "standard"
    				? "smui-select--standard"
    				: "") + "\n    " + (/*withLeadingIcon*/ ctx[8]
    				? "mdc-select--with-leading-icon"
    				: "") + "\n    " + (/*invalid*/ ctx[1] ? "mdc-select--invalid" : "") + "\n  ")) && { class: div_class_value },
    				dirty[0] & /*$$props*/ 4194304 && exclude(/*$$props*/ ctx[22], [
    					"use",
    					"class",
    					"ripple",
    					"disabled",
    					"enhanced",
    					"variant",
    					"noLabel",
    					"withLeadingIcon",
    					"label",
    					"value",
    					"selectedIndex",
    					"selectedText",
    					"dirty",
    					"invalid",
    					"updateInvalid",
    					"required",
    					"input$",
    					"label$",
    					"ripple$",
    					"outline$",
    					"menu$",
    					"list$"
    				])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_slot, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_slot, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (icon_slot) icon_slot.d(detaching);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			/*div_binding*/ ctx[36](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let counter = 0;

    function instance$g($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component(), "MDCSelect:change");

    	const uninitializedValue = () => {
    		
    	};

    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { ripple = true } = $$props;
    	let { disabled = false } = $$props;
    	let { enhanced = false } = $$props;
    	let { variant = "standard" } = $$props;
    	let { withLeadingIcon = false } = $$props;
    	let { noLabel = false } = $$props;
    	let { label = null } = $$props;
    	let { value = "" } = $$props;
    	let { selectedIndex = uninitializedValue } = $$props;
    	let { selectedText = "" } = $$props;
    	let { dirty = false } = $$props;
    	let { invalid = uninitializedValue } = $$props;
    	let { updateInvalid = invalid === uninitializedValue } = $$props;
    	let { required = false } = $$props;
    	let { inputId = "SMUI-select-" + counter++ } = $$props;
    	let { input$use = [] } = $$props;
    	let { input$class = "" } = $$props;
    	let { label$class = "" } = $$props;
    	let { menu$class = "" } = $$props;
    	let element;
    	let select;
    	let inputElement;
    	let menuPromiseResolve;
    	let menuPromise = new Promise(resolve => menuPromiseResolve = resolve);
    	let addLayoutListener = getContext("SMUI:addLayoutListener");
    	let removeLayoutListener;
    	setContext("SMUI:menu:instantiate", false);
    	setContext("SMUI:menu:getInstance", getMenuInstancePromise);
    	setContext("SMUI:list:role", "listbox");
    	setContext("SMUI:select:option:enhanced", enhanced);

    	if (addLayoutListener) {
    		removeLayoutListener = addLayoutListener(layout);
    	}

    	onMount(async () => {
    		$$invalidate(38, select = new MDCSelect(element));
    		menuPromiseResolve(select.menu_);

    		if (!ripple && select.ripple) {
    			select.ripple.destroy();
    		}

    		if (updateInvalid) {
    			$$invalidate(1, invalid = inputElement.matches(":invalid"));
    		}
    	});

    	onDestroy(() => {
    		select && select.destroy();

    		if (removeLayoutListener) {
    			removeLayoutListener();
    		}
    	});

    	function getMenuInstancePromise() {
    		return menuPromise;
    	}

    	function changeHandler(e) {
    		$$invalidate(0, value = e.detail.value);
    		$$invalidate(23, selectedIndex = e.detail.index);
    		$$invalidate(24, dirty = true);

    		if (updateInvalid) {
    			$$invalidate(1, invalid = inputElement.matches(":invalid"));
    		}
    	}

    	function focus(...args) {
    		return inputElement.focus(...args);
    	}

    	function layout(...args) {
    		return select.layout(...args);
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Select", $$slots, ['icon','default','label']);

    	function change_handler(event) {
    		bubble($$self, event);
    	}

    	function input_handler(event) {
    		bubble($$self, event);
    	}

    	function change_handler_1(event) {
    		bubble($$self, event);
    	}

    	function input_handler_1(event) {
    		bubble($$self, event);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			inputElement = $$value;
    			$$invalidate(19, inputElement);
    		});
    	}

    	function menu_anchorElement_binding(value) {
    		element = value;
    		$$invalidate(18, element);
    	}

    	function select_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			inputElement = $$value;
    			$$invalidate(19, inputElement);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(18, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(22, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(2, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ("ripple" in $$new_props) $$invalidate(4, ripple = $$new_props.ripple);
    		if ("disabled" in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ("enhanced" in $$new_props) $$invalidate(6, enhanced = $$new_props.enhanced);
    		if ("variant" in $$new_props) $$invalidate(7, variant = $$new_props.variant);
    		if ("withLeadingIcon" in $$new_props) $$invalidate(8, withLeadingIcon = $$new_props.withLeadingIcon);
    		if ("noLabel" in $$new_props) $$invalidate(9, noLabel = $$new_props.noLabel);
    		if ("label" in $$new_props) $$invalidate(10, label = $$new_props.label);
    		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ("selectedIndex" in $$new_props) $$invalidate(23, selectedIndex = $$new_props.selectedIndex);
    		if ("selectedText" in $$new_props) $$invalidate(11, selectedText = $$new_props.selectedText);
    		if ("dirty" in $$new_props) $$invalidate(24, dirty = $$new_props.dirty);
    		if ("invalid" in $$new_props) $$invalidate(1, invalid = $$new_props.invalid);
    		if ("updateInvalid" in $$new_props) $$invalidate(25, updateInvalid = $$new_props.updateInvalid);
    		if ("required" in $$new_props) $$invalidate(12, required = $$new_props.required);
    		if ("inputId" in $$new_props) $$invalidate(13, inputId = $$new_props.inputId);
    		if ("input$use" in $$new_props) $$invalidate(14, input$use = $$new_props.input$use);
    		if ("input$class" in $$new_props) $$invalidate(15, input$class = $$new_props.input$class);
    		if ("label$class" in $$new_props) $$invalidate(16, label$class = $$new_props.label$class);
    		if ("menu$class" in $$new_props) $$invalidate(17, menu$class = $$new_props.menu$class);
    		if ("$$scope" in $$new_props) $$invalidate(37, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter,
    		MDCSelect,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		prefixFilter,
    		useActions,
    		Menu,
    		List,
    		FloatingLabel,
    		LineRipple,
    		NotchedOutline,
    		forwardEvents,
    		uninitializedValue,
    		use,
    		className,
    		ripple,
    		disabled,
    		enhanced,
    		variant,
    		withLeadingIcon,
    		noLabel,
    		label,
    		value,
    		selectedIndex,
    		selectedText,
    		dirty,
    		invalid,
    		updateInvalid,
    		required,
    		inputId,
    		input$use,
    		input$class,
    		label$class,
    		menu$class,
    		element,
    		select,
    		inputElement,
    		menuPromiseResolve,
    		menuPromise,
    		addLayoutListener,
    		removeLayoutListener,
    		getMenuInstancePromise,
    		changeHandler,
    		focus,
    		layout
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(22, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(2, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
    		if ("ripple" in $$props) $$invalidate(4, ripple = $$new_props.ripple);
    		if ("disabled" in $$props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ("enhanced" in $$props) $$invalidate(6, enhanced = $$new_props.enhanced);
    		if ("variant" in $$props) $$invalidate(7, variant = $$new_props.variant);
    		if ("withLeadingIcon" in $$props) $$invalidate(8, withLeadingIcon = $$new_props.withLeadingIcon);
    		if ("noLabel" in $$props) $$invalidate(9, noLabel = $$new_props.noLabel);
    		if ("label" in $$props) $$invalidate(10, label = $$new_props.label);
    		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
    		if ("selectedIndex" in $$props) $$invalidate(23, selectedIndex = $$new_props.selectedIndex);
    		if ("selectedText" in $$props) $$invalidate(11, selectedText = $$new_props.selectedText);
    		if ("dirty" in $$props) $$invalidate(24, dirty = $$new_props.dirty);
    		if ("invalid" in $$props) $$invalidate(1, invalid = $$new_props.invalid);
    		if ("updateInvalid" in $$props) $$invalidate(25, updateInvalid = $$new_props.updateInvalid);
    		if ("required" in $$props) $$invalidate(12, required = $$new_props.required);
    		if ("inputId" in $$props) $$invalidate(13, inputId = $$new_props.inputId);
    		if ("input$use" in $$props) $$invalidate(14, input$use = $$new_props.input$use);
    		if ("input$class" in $$props) $$invalidate(15, input$class = $$new_props.input$class);
    		if ("label$class" in $$props) $$invalidate(16, label$class = $$new_props.label$class);
    		if ("menu$class" in $$props) $$invalidate(17, menu$class = $$new_props.menu$class);
    		if ("element" in $$props) $$invalidate(18, element = $$new_props.element);
    		if ("select" in $$props) $$invalidate(38, select = $$new_props.select);
    		if ("inputElement" in $$props) $$invalidate(19, inputElement = $$new_props.inputElement);
    		if ("menuPromiseResolve" in $$props) menuPromiseResolve = $$new_props.menuPromiseResolve;
    		if ("menuPromise" in $$props) menuPromise = $$new_props.menuPromise;
    		if ("addLayoutListener" in $$props) addLayoutListener = $$new_props.addLayoutListener;
    		if ("removeLayoutListener" in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*value*/ 1 | $$self.$$.dirty[1] & /*select*/ 128) {
    			 if (select && select.value !== value) {
    				$$invalidate(38, select.value = value, select);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*selectedIndex*/ 8388608 | $$self.$$.dirty[1] & /*select*/ 128) {
    			 if (select && select.selectedIndex !== selectedIndex) {
    				if (selectedIndex === uninitializedValue) {
    					$$invalidate(23, selectedIndex = select.selectedIndex);
    				} else {
    					$$invalidate(38, select.selectedIndex = selectedIndex, select);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*disabled*/ 32 | $$self.$$.dirty[1] & /*select*/ 128) {
    			 if (select && select.disabled !== disabled) {
    				$$invalidate(38, select.disabled = disabled, select);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*invalid, updateInvalid*/ 33554434 | $$self.$$.dirty[1] & /*select*/ 128) {
    			 if (select && select.valid !== !invalid) {
    				if (updateInvalid) {
    					$$invalidate(1, invalid = !select.valid);
    				} else {
    					$$invalidate(38, select.valid = !invalid, select);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*required*/ 4096 | $$self.$$.dirty[1] & /*select*/ 128) {
    			 if (select && select.required !== required) {
    				$$invalidate(38, select.required = required, select);
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		value,
    		invalid,
    		use,
    		className,
    		ripple,
    		disabled,
    		enhanced,
    		variant,
    		withLeadingIcon,
    		noLabel,
    		label,
    		selectedText,
    		required,
    		inputId,
    		input$use,
    		input$class,
    		label$class,
    		menu$class,
    		element,
    		inputElement,
    		forwardEvents,
    		changeHandler,
    		$$props,
    		selectedIndex,
    		dirty,
    		updateInvalid,
    		focus,
    		layout,
    		$$slots,
    		change_handler,
    		input_handler,
    		change_handler_1,
    		input_handler_1,
    		input_binding,
    		menu_anchorElement_binding,
    		select_1_binding,
    		div_binding,
    		$$scope
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$g,
    			create_fragment$g,
    			safe_not_equal,
    			{
    				use: 2,
    				class: 3,
    				ripple: 4,
    				disabled: 5,
    				enhanced: 6,
    				variant: 7,
    				withLeadingIcon: 8,
    				noLabel: 9,
    				label: 10,
    				value: 0,
    				selectedIndex: 23,
    				selectedText: 11,
    				dirty: 24,
    				invalid: 1,
    				updateInvalid: 25,
    				required: 12,
    				inputId: 13,
    				input$use: 14,
    				input$class: 15,
    				label$class: 16,
    				menu$class: 17,
    				focus: 26,
    				layout: 27
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get use() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get enhanced() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set enhanced(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get variant() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set variant(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get withLeadingIcon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set withLeadingIcon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedIndex() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedIndex(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedText() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedText(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dirty() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dirty(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalid() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalid(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateInvalid() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateInvalid(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get required() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set required(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputId() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputId(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input$use() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input$use(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menu$class() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menu$class(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[26];
    	}

    	set focus(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		return this.$$.ctx[27];
    	}

    	set layout(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/list/Item.svelte generated by Svelte v3.24.1 */
    const file$e = "node_modules/@smui/list/Item.svelte";

    // (40:0) {:else}
    function create_else_block$4(ctx) {
    	let li;
    	let li_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

    	let li_levels = [
    		{
    			class: li_class_value = "\n      mdc-list-item\n      " + /*className*/ ctx[2] + "\n      " + (/*activated*/ ctx[5] ? "mdc-list-item--activated" : "") + "\n      " + (/*selected*/ ctx[7] ? "mdc-list-item--selected" : "") + "\n      " + (/*disabled*/ ctx[8] ? "mdc-list-item--disabled" : "") + "\n      " + (/*role*/ ctx[6] === "menuitem" && /*selected*/ ctx[7]
    			? "mdc-menu-item--selected"
    			: "") + "\n    "
    		},
    		{ role: /*role*/ ctx[6] },
    		/*role*/ ctx[6] === "option"
    		? {
    				"aria-selected": /*selected*/ ctx[7] ? "true" : "false"
    			}
    		: {},
    		/*role*/ ctx[6] === "radio" || /*role*/ ctx[6] === "checkbox"
    		? {
    				"aria-checked": /*checked*/ ctx[10] ? "true" : "false"
    			}
    		: {},
    		{ tabindex: /*tabindex*/ ctx[0] },
    		/*props*/ ctx[12]
    	];

    	let li_data = {};

    	for (let i = 0; i < li_levels.length; i += 1) {
    		li_data = assign(li_data, li_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			li = claim_element(nodes, "LI", { class: true, role: true, tabindex: true });
    			var li_nodes = children(li);
    			if (default_slot) default_slot.l(li_nodes);
    			li_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(li, li_data);
    			add_location(li, file$e, 40, 2, 1053);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			/*li_binding*/ ctx[23](li);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, li, /*use*/ ctx[1])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[13].call(null, li)),
    					action_destroyer(Ripple_action = Ripple.call(null, li, {
    						ripple: /*ripple*/ ctx[3],
    						unbounded: false,
    						color: /*color*/ ctx[4]
    					})),
    					listen_dev(li, "click", /*action*/ ctx[15], false, false, false),
    					listen_dev(li, "keydown", /*handleKeydown*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 524288) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
    				}
    			}

    			set_attributes(li, li_data = get_spread_update(li_levels, [
    				(!current || dirty & /*className, activated, selected, disabled, role*/ 484 && li_class_value !== (li_class_value = "\n      mdc-list-item\n      " + /*className*/ ctx[2] + "\n      " + (/*activated*/ ctx[5] ? "mdc-list-item--activated" : "") + "\n      " + (/*selected*/ ctx[7] ? "mdc-list-item--selected" : "") + "\n      " + (/*disabled*/ ctx[8] ? "mdc-list-item--disabled" : "") + "\n      " + (/*role*/ ctx[6] === "menuitem" && /*selected*/ ctx[7]
    				? "mdc-menu-item--selected"
    				: "") + "\n    ")) && { class: li_class_value },
    				(!current || dirty & /*role*/ 64) && { role: /*role*/ ctx[6] },
    				dirty & /*role, selected*/ 192 && (/*role*/ ctx[6] === "option"
    				? {
    						"aria-selected": /*selected*/ ctx[7] ? "true" : "false"
    					}
    				: {}),
    				dirty & /*role, checked*/ 1088 && (/*role*/ ctx[6] === "radio" || /*role*/ ctx[6] === "checkbox"
    				? {
    						"aria-checked": /*checked*/ ctx[10] ? "true" : "false"
    					}
    				: {}),
    				(!current || dirty & /*tabindex*/ 1) && { tabindex: /*tabindex*/ ctx[0] },
    				dirty & /*props*/ 4096 && /*props*/ ctx[12]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);

    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple, color*/ 24) Ripple_action.update.call(null, {
    				ripple: /*ripple*/ ctx[3],
    				unbounded: false,
    				color: /*color*/ ctx[4]
    			});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (default_slot) default_slot.d(detaching);
    			/*li_binding*/ ctx[23](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(40:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (21:23) 
    function create_if_block_1$2(ctx) {
    	let span;
    	let span_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

    	let span_levels = [
    		{
    			class: span_class_value = "\n      mdc-list-item\n      " + /*className*/ ctx[2] + "\n      " + (/*activated*/ ctx[5] ? "mdc-list-item--activated" : "") + "\n      " + (/*selected*/ ctx[7] ? "mdc-list-item--selected" : "") + "\n      " + (/*disabled*/ ctx[8] ? "mdc-list-item--disabled" : "") + "\n    "
    		},
    		/*activated*/ ctx[5] ? { "aria-current": "page" } : {},
    		{ tabindex: /*tabindex*/ ctx[0] },
    		/*props*/ ctx[12]
    	];

    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true, tabindex: true });
    			var span_nodes = children(span);
    			if (default_slot) default_slot.l(span_nodes);
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(span, span_data);
    			add_location(span, file$e, 21, 2, 547);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			/*span_binding*/ ctx[22](span);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[1])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[13].call(null, span)),
    					action_destroyer(Ripple_action = Ripple.call(null, span, {
    						ripple: /*ripple*/ ctx[3],
    						unbounded: false,
    						color: /*color*/ ctx[4]
    					})),
    					listen_dev(span, "click", /*action*/ ctx[15], false, false, false),
    					listen_dev(span, "keydown", /*handleKeydown*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 524288) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
    				}
    			}

    			set_attributes(span, span_data = get_spread_update(span_levels, [
    				(!current || dirty & /*className, activated, selected, disabled*/ 420 && span_class_value !== (span_class_value = "\n      mdc-list-item\n      " + /*className*/ ctx[2] + "\n      " + (/*activated*/ ctx[5] ? "mdc-list-item--activated" : "") + "\n      " + (/*selected*/ ctx[7] ? "mdc-list-item--selected" : "") + "\n      " + (/*disabled*/ ctx[8] ? "mdc-list-item--disabled" : "") + "\n    ")) && { class: span_class_value },
    				dirty & /*activated*/ 32 && (/*activated*/ ctx[5] ? { "aria-current": "page" } : {}),
    				(!current || dirty & /*tabindex*/ 1) && { tabindex: /*tabindex*/ ctx[0] },
    				dirty & /*props*/ 4096 && /*props*/ ctx[12]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);

    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple, color*/ 24) Ripple_action.update.call(null, {
    				ripple: /*ripple*/ ctx[3],
    				unbounded: false,
    				color: /*color*/ ctx[4]
    			});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    			/*span_binding*/ ctx[22](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(21:23) ",
    		ctx
    	});

    	return block;
    }

    // (1:0) {#if nav && href}
    function create_if_block$6(ctx) {
    	let a;
    	let a_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

    	let a_levels = [
    		{
    			class: a_class_value = "\n      mdc-list-item\n      " + /*className*/ ctx[2] + "\n      " + (/*activated*/ ctx[5] ? "mdc-list-item--activated" : "") + "\n      " + (/*selected*/ ctx[7] ? "mdc-list-item--selected" : "") + "\n      " + (/*disabled*/ ctx[8] ? "mdc-list-item--disabled" : "") + "\n    "
    		},
    		{ href: /*href*/ ctx[9] },
    		/*activated*/ ctx[5] ? { "aria-current": "page" } : {},
    		{ tabindex: /*tabindex*/ ctx[0] },
    		/*props*/ ctx[12]
    	];

    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			a = claim_element(nodes, "A", { class: true, href: true, tabindex: true });
    			var a_nodes = children(a);
    			if (default_slot) default_slot.l(a_nodes);
    			a_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(a, a_data);
    			add_location(a, file$e, 1, 2, 20);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			/*a_binding*/ ctx[21](a);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, a, /*use*/ ctx[1])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[13].call(null, a)),
    					action_destroyer(Ripple_action = Ripple.call(null, a, {
    						ripple: /*ripple*/ ctx[3],
    						unbounded: false,
    						color: /*color*/ ctx[4]
    					})),
    					listen_dev(a, "click", /*action*/ ctx[15], false, false, false),
    					listen_dev(a, "keydown", /*handleKeydown*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 524288) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				(!current || dirty & /*className, activated, selected, disabled*/ 420 && a_class_value !== (a_class_value = "\n      mdc-list-item\n      " + /*className*/ ctx[2] + "\n      " + (/*activated*/ ctx[5] ? "mdc-list-item--activated" : "") + "\n      " + (/*selected*/ ctx[7] ? "mdc-list-item--selected" : "") + "\n      " + (/*disabled*/ ctx[8] ? "mdc-list-item--disabled" : "") + "\n    ")) && { class: a_class_value },
    				(!current || dirty & /*href*/ 512) && { href: /*href*/ ctx[9] },
    				dirty & /*activated*/ 32 && (/*activated*/ ctx[5] ? { "aria-current": "page" } : {}),
    				(!current || dirty & /*tabindex*/ 1) && { tabindex: /*tabindex*/ ctx[0] },
    				dirty & /*props*/ 4096 && /*props*/ ctx[12]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);

    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple, color*/ 24) Ripple_action.update.call(null, {
    				ripple: /*ripple*/ ctx[3],
    				unbounded: false,
    				color: /*color*/ ctx[4]
    			});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			/*a_binding*/ ctx[21](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(1:0) {#if nav && href}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$6, create_if_block_1$2, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*nav*/ ctx[14] && /*href*/ ctx[9]) return 0;
    		if (/*nav*/ ctx[14] && !/*href*/ ctx[9]) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let counter$1 = 0;

    function instance$h($$self, $$props, $$invalidate) {
    	const dispatch = createEventDispatcher();
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let checked = false;
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { ripple = true } = $$props;
    	let { color = null } = $$props;
    	let { nonInteractive = getContext("SMUI:list:nonInteractive") } = $$props;
    	let { activated = false } = $$props;
    	let { role = getContext("SMUI:list:item:role") } = $$props;
    	let { selected = false } = $$props;
    	let { disabled = false } = $$props;
    	let { tabindex = !nonInteractive && !disabled && (selected || checked) && "0" || "-1" } = $$props;
    	let { href = false } = $$props;
    	let { inputId = "SMUI-form-field-list-" + counter$1++ } = $$props;
    	let element;
    	let addTabindexIfNoItemsSelectedRaf;
    	let nav = getContext("SMUI:list:item:nav");
    	setContext("SMUI:generic:input:props", { id: inputId });
    	setContext("SMUI:generic:input:setChecked", setChecked);

    	onMount(() => {
    		// Tabindex needs to be '0' if this is the first non-disabled list item, and
    		// no other item is selected.
    		if (!selected && !nonInteractive) {
    			let first = true;
    			let el = element;

    			while (el.previousSibling) {
    				el = el.previousSibling;

    				if (el.nodeType === 1 && el.classList.contains("mdc-list-item") && !el.classList.contains("mdc-list-item--disabled")) {
    					first = false;
    					break;
    				}
    			}

    			if (first) {
    				// This is first, so now set up a check that no other items are
    				// selected.
    				addTabindexIfNoItemsSelectedRaf = window.requestAnimationFrame(addTabindexIfNoItemsSelected);
    			}
    		}
    	});

    	onDestroy(() => {
    		if (addTabindexIfNoItemsSelectedRaf) {
    			window.cancelAnimationFrame(addTabindexIfNoItemsSelectedRaf);
    		}
    	});

    	function addTabindexIfNoItemsSelected() {
    		// Look through next siblings to see if none of them are selected.
    		let noneSelected = true;

    		let el = element;

    		while (el.nextSibling) {
    			el = el.nextSibling;

    			if (el.nodeType === 1 && el.classList.contains("mdc-list-item") && el.attributes["tabindex"] && el.attributes["tabindex"].value === "0") {
    				noneSelected = false;
    				break;
    			}
    		}

    		if (noneSelected) {
    			// This is the first element, and no other element is selected, so the
    			// tabindex should be '0'.
    			$$invalidate(0, tabindex = "0");
    		}
    	}

    	function action(e) {
    		if (disabled) {
    			e.preventDefault();
    		} else {
    			dispatch("SMUI:action", e);
    		}
    	}

    	function handleKeydown(e) {
    		const isEnter = e.key === "Enter" || e.keyCode === 13;
    		const isSpace = e.key === "Space" || e.keyCode === 32;

    		if (isEnter || isSpace) {
    			action(e);
    		}
    	}

    	function setChecked(isChecked) {
    		$$invalidate(10, checked = isChecked);
    		$$invalidate(0, tabindex = !nonInteractive && !disabled && (selected || checked) && "0" || "-1");
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Item", $$slots, ['default']);

    	function a_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(11, element);
    		});
    	}

    	function span_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(11, element);
    		});
    	}

    	function li_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			element = $$value;
    			$$invalidate(11, element);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(28, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(1, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ("ripple" in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ("color" in $$new_props) $$invalidate(4, color = $$new_props.color);
    		if ("nonInteractive" in $$new_props) $$invalidate(17, nonInteractive = $$new_props.nonInteractive);
    		if ("activated" in $$new_props) $$invalidate(5, activated = $$new_props.activated);
    		if ("role" in $$new_props) $$invalidate(6, role = $$new_props.role);
    		if ("selected" in $$new_props) $$invalidate(7, selected = $$new_props.selected);
    		if ("disabled" in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
    		if ("tabindex" in $$new_props) $$invalidate(0, tabindex = $$new_props.tabindex);
    		if ("href" in $$new_props) $$invalidate(9, href = $$new_props.href);
    		if ("inputId" in $$new_props) $$invalidate(18, inputId = $$new_props.inputId);
    		if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		counter: counter$1,
    		onMount,
    		onDestroy,
    		getContext,
    		setContext,
    		createEventDispatcher,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		Ripple,
    		dispatch,
    		forwardEvents,
    		checked,
    		use,
    		className,
    		ripple,
    		color,
    		nonInteractive,
    		activated,
    		role,
    		selected,
    		disabled,
    		tabindex,
    		href,
    		inputId,
    		element,
    		addTabindexIfNoItemsSelectedRaf,
    		nav,
    		addTabindexIfNoItemsSelected,
    		action,
    		handleKeydown,
    		setChecked,
    		props
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(28, $$props = assign(assign({}, $$props), $$new_props));
    		if ("checked" in $$props) $$invalidate(10, checked = $$new_props.checked);
    		if ("use" in $$props) $$invalidate(1, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
    		if ("ripple" in $$props) $$invalidate(3, ripple = $$new_props.ripple);
    		if ("color" in $$props) $$invalidate(4, color = $$new_props.color);
    		if ("nonInteractive" in $$props) $$invalidate(17, nonInteractive = $$new_props.nonInteractive);
    		if ("activated" in $$props) $$invalidate(5, activated = $$new_props.activated);
    		if ("role" in $$props) $$invalidate(6, role = $$new_props.role);
    		if ("selected" in $$props) $$invalidate(7, selected = $$new_props.selected);
    		if ("disabled" in $$props) $$invalidate(8, disabled = $$new_props.disabled);
    		if ("tabindex" in $$props) $$invalidate(0, tabindex = $$new_props.tabindex);
    		if ("href" in $$props) $$invalidate(9, href = $$new_props.href);
    		if ("inputId" in $$props) $$invalidate(18, inputId = $$new_props.inputId);
    		if ("element" in $$props) $$invalidate(11, element = $$new_props.element);
    		if ("addTabindexIfNoItemsSelectedRaf" in $$props) addTabindexIfNoItemsSelectedRaf = $$new_props.addTabindexIfNoItemsSelectedRaf;
    		if ("nav" in $$props) $$invalidate(14, nav = $$new_props.nav);
    		if ("props" in $$props) $$invalidate(12, props = $$new_props.props);
    	};

    	let props;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		 $$invalidate(12, props = exclude($$props, [
    			"use",
    			"class",
    			"ripple",
    			"color",
    			"nonInteractive",
    			"activated",
    			"selected",
    			"disabled",
    			"tabindex",
    			"href",
    			"inputId"
    		]));
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		tabindex,
    		use,
    		className,
    		ripple,
    		color,
    		activated,
    		role,
    		selected,
    		disabled,
    		href,
    		checked,
    		element,
    		props,
    		forwardEvents,
    		nav,
    		action,
    		handleKeydown,
    		nonInteractive,
    		inputId,
    		$$scope,
    		$$slots,
    		a_binding,
    		span_binding,
    		li_binding
    	];
    }

    class Item extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			use: 1,
    			class: 2,
    			ripple: 3,
    			color: 4,
    			nonInteractive: 17,
    			activated: 5,
    			role: 6,
    			selected: 7,
    			disabled: 8,
    			tabindex: 0,
    			href: 9,
    			inputId: 18
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Item",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get use() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nonInteractive() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nonInteractive(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activated() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activated(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get role() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set role(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabindex() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabindex(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputId() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputId(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@smui/select/Option.svelte generated by Svelte v3.24.1 */
    const file$f = "node_modules/@smui/select/Option.svelte";

    // (8:0) {:else}
    function create_else_block$5(ctx) {
    	let option;
    	let useActions_action;
    	let forwardEvents_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
    	let option_levels = [{ __value: /*value*/ ctx[1] }, /*selectedProp*/ ctx[4], /*props*/ ctx[3]];
    	let option_data = {};

    	for (let i = 0; i < option_levels.length; i += 1) {
    		option_data = assign(option_data, option_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			option = claim_element(nodes, "OPTION", { value: true });
    			var option_nodes = children(option);
    			if (default_slot) default_slot.l(option_nodes);
    			option_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(option, option_data);
    			add_location(option, file$f, 8, 2, 144);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);

    			if (default_slot) {
    				default_slot.m(option, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, option, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[5].call(null, option))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 512) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
    				}
    			}

    			set_attributes(option, option_data = get_spread_update(option_levels, [
    				(!current || dirty & /*value*/ 2) && { __value: /*value*/ ctx[1] },
    				dirty & /*selectedProp*/ 16 && /*selectedProp*/ ctx[4],
    				dirty & /*props*/ 8 && /*props*/ ctx[3]
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(8:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1:0) {#if enhanced}
    function create_if_block$7(ctx) {
    	let item;
    	let current;

    	const item_spread_levels = [
    		{
    			use: [/*forwardEvents*/ ctx[5], .../*use*/ ctx[0]]
    		},
    		{ "data-value": /*value*/ ctx[1] },
    		{ selected: /*selected*/ ctx[2] },
    		/*props*/ ctx[3]
    	];

    	let item_props = {
    		$$slots: { default: [create_default_slot$4] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < item_spread_levels.length; i += 1) {
    		item_props = assign(item_props, item_spread_levels[i]);
    	}

    	item = new Item({ props: item_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(item.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(item.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(item, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const item_changes = (dirty & /*forwardEvents, use, value, selected, props*/ 47)
    			? get_spread_update(item_spread_levels, [
    					dirty & /*forwardEvents, use*/ 33 && {
    						use: [/*forwardEvents*/ ctx[5], .../*use*/ ctx[0]]
    					},
    					dirty & /*value*/ 2 && { "data-value": /*value*/ ctx[1] },
    					dirty & /*selected*/ 4 && { selected: /*selected*/ ctx[2] },
    					dirty & /*props*/ 8 && get_spread_object(/*props*/ ctx[3])
    				])
    			: {};

    			if (dirty & /*$$scope*/ 512) {
    				item_changes.$$scope = { dirty, ctx };
    			}

    			item.$set(item_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(item, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(1:0) {#if enhanced}",
    		ctx
    	});

    	return block;
    }

    // (2:2) <Item     use={[forwardEvents, ...use]}     data-value={value}     {selected}     {...props}   >
    function create_default_slot$4(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 512) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(2:2) <Item     use={[forwardEvents, ...use]}     data-value={value}     {selected}     {...props}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$7, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*enhanced*/ ctx[6]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	const className = "";
    	let { value = "" } = $$props;
    	let { selected = false } = $$props;
    	let element;
    	let enhanced = getContext("SMUI:select:option:enhanced");
    	setContext("SMUI:list:item:role", "option");
    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Option", $$slots, ['default']);

    	$$self.$$set = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("value" in $$new_props) $$invalidate(1, value = $$new_props.value);
    		if ("selected" in $$new_props) $$invalidate(2, selected = $$new_props.selected);
    		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		Item,
    		forwardEvents,
    		use,
    		className,
    		value,
    		selected,
    		element,
    		enhanced,
    		props,
    		selectedProp
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("value" in $$props) $$invalidate(1, value = $$new_props.value);
    		if ("selected" in $$props) $$invalidate(2, selected = $$new_props.selected);
    		if ("element" in $$props) element = $$new_props.element;
    		if ("enhanced" in $$props) $$invalidate(6, enhanced = $$new_props.enhanced);
    		if ("props" in $$props) $$invalidate(3, props = $$new_props.props);
    		if ("selectedProp" in $$props) $$invalidate(4, selectedProp = $$new_props.selectedProp);
    	};

    	let props;
    	let selectedProp;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		 $$invalidate(3, props = exclude($$props, ["use", "value", "selected"]));

    		if ($$self.$$.dirty & /*selected*/ 4) {
    			 $$invalidate(4, selectedProp = !enhanced && selected ? { selected: true } : {});
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		value,
    		selected,
    		props,
    		selectedProp,
    		forwardEvents,
    		enhanced,
    		className,
    		$$slots,
    		$$scope
    	];
    }

    class Option extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { use: 0, class: 7, value: 1, selected: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Option",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get use() {
    		throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		return this.$$.ctx[7];
    	}

    	set class(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Do a deep-copy of basic JavaScript Objects or Arrays.
     */
    function deepCopy(value) {
        return deepExtend(undefined, value);
    }
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                var dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (var prop in source) {
            if (!source.hasOwnProperty(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Deferred = /** @class */ (function () {
        function Deferred() {
            var _this = this;
            this.reject = function () { };
            this.resolve = function () { };
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        Deferred.prototype.wrapCallback = function (callback) {
            var _this = this;
            return function (error, value) {
                if (error) {
                    _this.reject(error);
                }
                else {
                    _this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    _this.promise.catch(function () { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        };
        return Deferred;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect Node.js.
     *
     * @return true if Node.js environment is detected.
     */
    // Node detection logic from: https://github.com/iliakan/detect-node/
    function isNode() {
        try {
            return (Object.prototype.toString.call(global.process) === '[object process]');
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Detect Browser Environment
     */
    function isBrowser() {
        return typeof self === 'object' && self.self === self;
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage);
            // Keys with an underscore at the end of their name are not included in
            // error.data for some reason.
            // TODO: Replace with Object.entries when lib is updated to es2017.
            for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
                var key = _b[_a];
                if (key.slice(-1) !== '_') {
                    if (key in error) {
                        console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                    }
                    error[key] = customData[key];
                }
            }
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    var ObserverProxy = /** @class */ (function () {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(function () {
                executor(_this);
            })
                .catch(function (e) {
                _this.error(e);
            });
        }
        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };
        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };
        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop$1;
            }
            if (observer.error === undefined) {
                observer.error = noop$1;
            }
            if (observer.complete === undefined) {
                observer.complete = noop$1;
            }
            var unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        };
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };
        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };
        ObserverProxy.prototype.close = function (err) {
            var _this = this;
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };
        return ObserverProxy;
    }());
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop$1() {
        // do nothing
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    var Provider = /** @class */ (function () {
        function Provider(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
        }
        /**
         * @param identifier A provider can provide mulitple instances of a service
         * if this.component.multipleInstances is true.
         */
        Provider.prototype.get = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                var deferred = new Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                // If the service instance is available, resolve the promise with it immediately
                try {
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    if (instance) {
                        deferred.resolve(instance);
                    }
                }
                catch (e) {
                    // when the instance factory throws an exception during get(), it should not cause
                    // a fatal error. We just return the unresolved promise in this case.
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        };
        Provider.prototype.getImmediate = function (options) {
            var _a = __assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (!instance) {
                    if (optional) {
                        return null;
                    }
                    throw Error("Service " + this.name + " is not available");
                }
                return instance;
            }
            catch (e) {
                if (optional) {
                    return null;
                }
                else {
                    throw e;
                }
            }
        };
        Provider.prototype.getComponent = function () {
            return this.component;
        };
        Provider.prototype.setComponent = function (component) {
            var e_1, _a;
            if (component.name !== this.name) {
                throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
            }
            if (this.component) {
                throw Error("Component for " + this.name + " has already been provided");
            }
            this.component = component;
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService(DEFAULT_ENTRY_NAME);
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            try {
                // Create service instances for the pending promises and resolve them
                // NOTE: if this.multipleInstances is false, only the default instance will be created
                // and all promises with resolve with it regardless of the identifier.
                for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                    var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                    try {
                        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                        var instance = this.getOrInitializeService(normalizedIdentifier);
                        instanceDeferred.resolve(instance);
                    }
                    catch (e) {
                        // when the instance factory throws an exception, it should not cause
                        // a fatal error. We just leave the promise unresolved.
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Provider.prototype.clearInstance = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            this.instancesDeferred.delete(identifier);
            this.instances.delete(identifier);
        };
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        Provider.prototype.delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                var services;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            services = Array.from(this.instances.values());
                            return [4 /*yield*/, Promise.all(services
                                    .filter(function (service) { return 'INTERNAL' in service; })
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    .map(function (service) { return service.INTERNAL.delete(); }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Provider.prototype.isComponentSet = function () {
            return this.component != null;
        };
        Provider.prototype.getOrInitializeService = function (identifier) {
            var instance = this.instances.get(identifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
                this.instances.set(identifier, instance);
            }
            return instance || null;
        };
        Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        };
        return Provider;
    }());
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    var ComponentContainer = /** @class */ (function () {
        function ComponentContainer(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        ComponentContainer.prototype.addComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error("Component " + component.name + " has already been registered with " + this.name);
            }
            provider.setComponent(component);
        };
        ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        };
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        ComponentContainer.prototype.getProvider = function (name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            var provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        };
        ComponentContainer.prototype.getProviders = function () {
            return Array.from(this.providers.values());
        };
        return ComponentContainer;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    /**
     * A container for all of the Logger instances
     */
    var instances = [];
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a$1 = {},
        _a$1[LogLevel.DEBUG] = 'log',
        _a$1[LogLevel.VERBOSE] = 'log',
        _a$1[LogLevel.INFO] = 'info',
        _a$1[LogLevel.WARN] = 'warn',
        _a$1[LogLevel.ERROR] = 'error',
        _a$1);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
            /**
             * Capture the current instance for later use
             */
            instances.push(this);
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());
    function setLogLevel(level) {
        instances.forEach(function (inst) {
            inst.setLogLevel(level);
        });
    }
    function setUserLogHandler(logCallback, options) {
        var _loop_1 = function (instance) {
            var customLogLevel = null;
            if (options && options.level) {
                customLogLevel = levelStringToEnum[options.level];
            }
            if (logCallback === null) {
                instance.userLogHandler = null;
            }
            else {
                instance.userLogHandler = function (instance, level) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    var message = args
                        .map(function (arg) {
                        if (arg == null) {
                            return null;
                        }
                        else if (typeof arg === 'string') {
                            return arg;
                        }
                        else if (typeof arg === 'number' || typeof arg === 'boolean') {
                            return arg.toString();
                        }
                        else if (arg instanceof Error) {
                            return arg.message;
                        }
                        else {
                            try {
                                return JSON.stringify(arg);
                            }
                            catch (ignored) {
                                return null;
                            }
                        }
                    })
                        .filter(function (arg) { return arg; })
                        .join(' ');
                    if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                        logCallback({
                            level: LogLevel[level].toLowerCase(),
                            message: message,
                            args: args,
                            type: instance.name
                        });
                    }
                };
            }
        };
        for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
            var instance = instances_1[_i];
            _loop_1(instance);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$2;
    var ERRORS = (_a$2 = {},
        _a$2["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        _a$2["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
        _a$2["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
        _a$2["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
        _a$2["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        _a$2["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
        _a$2);
    var ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

    var name$1 = "@firebase/app";
    var version$1 = "0.6.10";

    var name$2 = "@firebase/analytics";

    var name$3 = "@firebase/auth";

    var name$4 = "@firebase/database";

    var name$5 = "@firebase/functions";

    var name$6 = "@firebase/installations";

    var name$7 = "@firebase/messaging";

    var name$8 = "@firebase/performance";

    var name$9 = "@firebase/remote-config";

    var name$a = "@firebase/storage";

    var name$b = "@firebase/firestore";

    var name$c = "firebase-wrapper";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1$1;
    var DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';
    var PLATFORM_LOG_STRING = (_a$1$1 = {},
        _a$1$1[name$1] = 'fire-core',
        _a$1$1[name$2] = 'fire-analytics',
        _a$1$1[name$3] = 'fire-auth',
        _a$1$1[name$4] = 'fire-rtdb',
        _a$1$1[name$5] = 'fire-fn',
        _a$1$1[name$6] = 'fire-iid',
        _a$1$1[name$7] = 'fire-fcm',
        _a$1$1[name$8] = 'fire-perf',
        _a$1$1[name$9] = 'fire-rc',
        _a$1$1[name$a] = 'fire-gcs',
        _a$1$1[name$b] = 'fire-fst',
        _a$1$1['fire-js'] = 'fire-js',
        _a$1$1[name$c] = 'fire-js-all',
        _a$1$1);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger = new Logger('@firebase/app');

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Global context object for a collection of services using
     * a shared authentication state.
     */
    var FirebaseAppImpl = /** @class */ (function () {
        function FirebaseAppImpl(options, config, firebase_) {
            var e_1, _a;
            var _this = this;
            this.firebase_ = firebase_;
            this.isDeleted_ = false;
            this.name_ = config.name;
            this.automaticDataCollectionEnabled_ =
                config.automaticDataCollectionEnabled || false;
            this.options_ = deepCopy(options);
            this.container = new ComponentContainer(config.name);
            // add itself to container
            this._addComponent(new Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
            try {
                // populate ComponentContainer with existing components
                for (var _b = __values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var component = _c.value;
                    this._addComponent(component);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
            get: function () {
                this.checkDestroyed_();
                return this.automaticDataCollectionEnabled_;
            },
            set: function (val) {
                this.checkDestroyed_();
                this.automaticDataCollectionEnabled_ = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "name", {
            get: function () {
                this.checkDestroyed_();
                return this.name_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "options", {
            get: function () {
                this.checkDestroyed_();
                return this.options_;
            },
            enumerable: false,
            configurable: true
        });
        FirebaseAppImpl.prototype.delete = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.checkDestroyed_();
                resolve();
            })
                .then(function () {
                _this.firebase_.INTERNAL.removeApp(_this.name_);
                return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
            })
                .then(function () {
                _this.isDeleted_ = true;
            });
        };
        /**
         * Return a service instance associated with this app (creating it
         * on demand), identified by the passed instanceIdentifier.
         *
         * NOTE: Currently storage and functions are the only ones that are leveraging this
         * functionality. They invoke it by calling:
         *
         * ```javascript
         * firebase.app().storage('STORAGE BUCKET ID')
         * ```
         *
         * The service name is passed to this already
         * @internal
         */
        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
            this.checkDestroyed_();
            // getImmediate will always succeed because _getService is only called for registered components.
            return this.container.getProvider(name).getImmediate({
                identifier: instanceIdentifier
            });
        };
        /**
         * Remove a service instance from the cache, so we will create a new instance for this service
         * when people try to get this service again.
         *
         * NOTE: currently only firestore is using this functionality to support firestore shutdown.
         *
         * @param name The service name
         * @param instanceIdentifier instance identifier in case multiple instances are allowed
         * @internal
         */
        FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.container.getProvider(name).clearInstance(instanceIdentifier);
        };
        /**
         * @param component the component being added to this app's container
         */
        FirebaseAppImpl.prototype._addComponent = function (component) {
            try {
                this.container.addComponent(component);
            }
            catch (e) {
                logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
            }
        };
        FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
            this.container.addOrOverwriteComponent(component);
        };
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        FirebaseAppImpl.prototype.checkDestroyed_ = function () {
            if (this.isDeleted_) {
                throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
            }
        };
        return FirebaseAppImpl;
    }());
    // Prevent dead-code elimination of these methods w/o invalid property
    // copying.
    (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
        FirebaseAppImpl.prototype.delete ||
        console.log('dc');

    var version$1$1 = "7.18.0";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Because auth can't share code with other components, we attach the utility functions
     * in an internal namespace to share code.
     * This function return a firebase namespace object without
     * any utility functions, so it can be shared between the regular firebaseNamespace and
     * the lite version.
     */
    function createFirebaseNamespaceCore(firebaseAppImpl) {
        var apps = {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var components = new Map();
        // A namespace is a plain JavaScript Object.
        var namespace = {
            // Hack to prevent Babel from modifying the object returned
            // as the firebase namespace.
            // @ts-ignore
            __esModule: true,
            initializeApp: initializeApp,
            // @ts-ignore
            app: app,
            registerVersion: registerVersion,
            setLogLevel: setLogLevel,
            onLog: onLog,
            // @ts-ignore
            apps: null,
            SDK_VERSION: version$1$1,
            INTERNAL: {
                registerComponent: registerComponent,
                removeApp: removeApp,
                components: components,
                useAsService: useAsService
            }
        };
        // Inject a circular default export to allow Babel users who were previously
        // using:
        //
        //   import firebase from 'firebase';
        //   which becomes: var firebase = require('firebase').default;
        //
        // instead of
        //
        //   import * as firebase from 'firebase';
        //   which becomes: var firebase = require('firebase');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        namespace['default'] = namespace;
        // firebase.apps is a read-only getter.
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });
        /**
         * Called by App.delete() - but before any services associated with the App
         * are deleted.
         */
        function removeApp(name) {
            delete apps[name];
        }
        /**
         * Get the App object for a given name (or DEFAULT).
         */
        function app(name) {
            name = name || DEFAULT_ENTRY_NAME$1;
            if (!contains(apps, name)) {
                throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
            }
            return apps[name];
        }
        // @ts-ignore
        app['App'] = firebaseAppImpl;
        function initializeApp(options, rawConfig) {
            if (rawConfig === void 0) { rawConfig = {}; }
            if (typeof rawConfig !== 'object' || rawConfig === null) {
                var name_1 = rawConfig;
                rawConfig = { name: name_1 };
            }
            var config = rawConfig;
            if (config.name === undefined) {
                config.name = DEFAULT_ENTRY_NAME$1;
            }
            var name = config.name;
            if (typeof name !== 'string' || !name) {
                throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                    appName: String(name)
                });
            }
            if (contains(apps, name)) {
                throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
            }
            var app = new firebaseAppImpl(options, config, namespace);
            apps[name] = app;
            return app;
        }
        /*
         * Return an array of all the non-deleted FirebaseApps.
         */
        function getApps() {
            // Make a copy so caller cannot mutate the apps list.
            return Object.keys(apps).map(function (name) { return apps[name]; });
        }
        function registerComponent(component) {
            var e_1, _a;
            var componentName = component.name;
            if (components.has(componentName)) {
                logger.debug("There were multiple attempts to register component " + componentName + ".");
                return component.type === "PUBLIC" /* PUBLIC */
                    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        namespace[componentName]
                    : null;
            }
            components.set(componentName, component);
            // create service namespace for public components
            if (component.type === "PUBLIC" /* PUBLIC */) {
                // The Service namespace is an accessor function ...
                var serviceNamespace = function (appArg) {
                    if (appArg === void 0) { appArg = app(); }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (typeof appArg[componentName] !== 'function') {
                        // Invalid argument.
                        // This happens in the following case: firebase.storage('gs:/')
                        throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                            appName: componentName
                        });
                    }
                    // Forward service instance lookup to the FirebaseApp.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return appArg[componentName]();
                };
                // ... and a container for service-level properties.
                if (component.serviceProps !== undefined) {
                    deepExtend(serviceNamespace, component.serviceProps);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName] = serviceNamespace;
                // Patch the FirebaseAppImpl prototype
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                firebaseAppImpl.prototype[componentName] =
                    // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                    // option added to the no-explicit-any rule when ESlint releases it.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var serviceFxn = this._getService.bind(this, componentName);
                        return serviceFxn.apply(this, component.multipleInstances ? args : []);
                    };
            }
            try {
                // add the component to existing app instances
                for (var _b = __values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var appName = _c.value;
                    apps[appName]._addComponent(component);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        function registerVersion(libraryKeyOrName, version, variant) {
            var _a;
            // TODO: We can use this check to whitelist strings when/if we set up
            // a good whitelist system.
            var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
            if (variant) {
                library += "-" + variant;
            }
            var libraryMismatch = library.match(/\s|\//);
            var versionMismatch = version.match(/\s|\//);
            if (libraryMismatch || versionMismatch) {
                var warning = [
                    "Unable to register library \"" + library + "\" with version \"" + version + "\":"
                ];
                if (libraryMismatch) {
                    warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
                }
                if (libraryMismatch && versionMismatch) {
                    warning.push('and');
                }
                if (versionMismatch) {
                    warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
                }
                logger.warn(warning.join(' '));
                return;
            }
            registerComponent(new Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
        }
        function onLog(logCallback, options) {
            if (logCallback !== null && typeof logCallback !== 'function') {
                throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
                    appName: name
                });
            }
            setUserLogHandler(logCallback, options);
        }
        // Map the requested service to a registered service name
        // (used to map auth to serverAuth service when needed).
        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }
            var useService = name;
            return useService;
        }
        return namespace;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Return a firebase namespace object.
     *
     * In production, this will be called exactly once and the result
     * assigned to the 'firebase' global.  It may be called multiple times
     * in unit tests.
     */
    function createFirebaseNamespace() {
        var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
        namespace.INTERNAL = __assign(__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: createSubscribe,
            ErrorFactory: ErrorFactory,
            deepExtend: deepExtend });
        /**
         * Patch the top-level firebase namespace with additional properties.
         *
         * firebase.INTERNAL.extendNamespace()
         */
        function extendNamespace(props) {
            deepExtend(namespace, props);
        }
        return namespace;
    }
    var firebase = createFirebaseNamespace();

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PlatformLoggerService = /** @class */ (function () {
        function PlatformLoggerService(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        PlatformLoggerService.prototype.getPlatformInfoString = function () {
            var providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(function (provider) {
                if (isVersionServiceProvider(provider)) {
                    var service = provider.getImmediate();
                    return service.library + "/" + service.version;
                }
                else {
                    return null;
                }
            })
                .filter(function (logString) { return logString; })
                .join(' ');
        };
        return PlatformLoggerService;
    }());
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        var component = provider.getComponent();
        return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(firebase, variant) {
        firebase.INTERNAL.registerComponent(new Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
        // Register `app` package.
        firebase.registerVersion(name$1, version$1, variant);
        // Register platform SDK identifier (no version).
        firebase.registerVersion('fire-js', '');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Firebase Lite detection test
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (isBrowser() && self.firebase !== undefined) {
        logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
        // eslint-disable-next-line
        var sdkVersion = self.firebase.SDK_VERSION;
        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
            logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
        }
    }
    var initializeApp = firebase.initializeApp;
    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
    // the no-explicit-any rule when ESlint releases it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    firebase.initializeApp = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // Environment check before initializing app
        // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
        // in @firebase/logger
        if (isNode()) {
            logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
        }
        return initializeApp.apply(undefined, args);
    };
    var firebase$1 = firebase;
    registerCoreComponents(firebase$1);

    var name$d = "firebase";
    var version$2 = "7.19.0";

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    firebase$1.registerVersion(name$d, version$2, 'app');

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values$1(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var g, goog = goog || {}, k = commonjsGlobal || self;
    function aa() { }
    function ba(a) { var b = typeof a; return "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; }
    function ca(a) { var b = ba(a); return "array" == b || "object" == b && "number" == typeof a.length; }
    function n(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
    function da(a) { return Object.prototype.hasOwnProperty.call(a, ea) && a[ea] || (a[ea] = ++fa); }
    var ea = "closure_uid_" + (1E9 * Math.random() >>> 0), fa = 0;
    function ha(a, b, c) { return a.call.apply(a.bind, arguments); }
    function ja(a, b, c) { if (!a)
        throw Error(); if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
    } return function () { return a.apply(b, arguments); }; }
    function p(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? p = ha : p = ja; return p.apply(null, arguments); }
    function ka(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
    var q = Date.now;
    function r(a, b) { function c() { } c.prototype = b.prototype; a.S = b.prototype; a.prototype = new c; a.prototype.constructor = a; }
    function u() { this.j = this.j; this.i = this.i; }
    var la = 0;
    u.prototype.j = !1;
    u.prototype.ja = function () { if (!this.j && (this.j = !0, this.G(), 0 != la)) {
        var a = da(this);
    } };
    u.prototype.G = function () { if (this.i)
        for (; this.i.length;)
            this.i.shift()(); };
    var na = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
        return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
        if (c in a && a[c] === b)
            return c; return -1; }, oa = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
        f in e && b.call(c, e[f], f, a); };
    function pa(a) { a: {
        var b = qa;
        for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
            if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
        b = -1;
    } return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
    function ra(a) { return Array.prototype.concat.apply([], arguments); }
    function sa(a) { var b = a.length; if (0 < b) {
        for (var c = Array(b), d = 0; d < b; d++)
            c[d] = a[d];
        return c;
    } return []; }
    function ta(a) { return /^[\s\xa0]*$/.test(a); }
    var ua = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
    function v(a, b) { return -1 != a.indexOf(b); }
    function xa(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
    var w;
    a: {
        var ya = k.navigator;
        if (ya) {
            var za = ya.userAgent;
            if (za) {
                w = za;
                break a;
            }
        }
        w = "";
    }
    function Aa(a, b, c) { for (var d in a)
        b.call(c, a[d], d, a); }
    function Ba(a) { var b = {}; for (var c in a)
        b[c] = a[c]; return b; }
    var Ca = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function Da(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
        d = arguments[e];
        for (c in d)
            a[c] = d[c];
        for (var f = 0; f < Ca.length; f++)
            c = Ca[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    } }
    function Ea(a) { Ea[" "](a); return a; }
    Ea[" "] = aa;
    function Fa$1(a, b) { var c = Ga; return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a); }
    var Ha = v(w, "Opera"), x = v(w, "Trident") || v(w, "MSIE"), Ia = v(w, "Edge"), Ja = Ia || x, Ka = v(w, "Gecko") && !(v(w.toLowerCase(), "webkit") && !v(w, "Edge")) && !(v(w, "Trident") || v(w, "MSIE")) && !v(w, "Edge"), La = v(w.toLowerCase(), "webkit") && !v(w, "Edge");
    function Ma() { var a = k.document; return a ? a.documentMode : void 0; }
    var Na;
    a: {
        var Oa = "", Pa = function () { var a = w; if (Ka)
            return /rv:([^\);]+)(\)|;)/.exec(a); if (Ia)
            return /Edge\/([\d\.]+)/.exec(a); if (x)
            return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (La)
            return /WebKit\/(\S+)/.exec(a); if (Ha)
            return /(?:Version)[ \/]?(\S+)/.exec(a); }();
        Pa && (Oa = Pa ? Pa[1] : "");
        if (x) {
            var Qa = Ma();
            if (null != Qa && Qa > parseFloat(Oa)) {
                Na = String(Qa);
                break a;
            }
        }
        Na = Oa;
    }
    var Ga = {};
    function Ra(a) { return Fa$1(a, function () { {
        var b = 0;
        var e = ua(String(Na)).split("."), f = ua(String(a)).split("."), h = Math.max(e.length, f.length);
        for (var m = 0; 0 == b && m < h; m++) {
            var c = e[m] || "", d = f[m] || "";
            do {
                c = /(\d*)(\D*)(.*)/.exec(c) || ["", "", "", ""];
                d = /(\d*)(\D*)(.*)/.exec(d) || ["", "", "", ""];
                if (0 == c[0].length && 0 == d[0].length)
                    break;
                b = xa(0 == c[1].length ? 0 : parseInt(c[1], 10), 0 == d[1].length ? 0 : parseInt(d[1], 10)) || xa(0 == c[2].length, 0 == d[2].length) || xa(c[2], d[2]);
                c = c[3];
                d = d[3];
            } while (0 == b);
        }
    } return 0 <= b; }); }
    var Sa;
    if (k.document && x) {
        var Ta = Ma();
        Sa = Ta ? Ta : parseInt(Na, 10) || void 0;
    }
    else
        Sa = void 0;
    var Ua = Sa;
    var Va = !x || 9 <= Number(Ua), Wa = x && !Ra("9"), Xa = function () { if (!k.addEventListener || !Object.defineProperty)
        return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
        k.addEventListener("test", aa, b), k.removeEventListener("test", aa, b);
    }
    catch (c) { } return a; }();
    function y(a, b) { this.type = a; this.a = this.target = b; this.defaultPrevented = !1; }
    y.prototype.b = function () { this.defaultPrevented = !0; };
    function A$1(a, b) {
        y.call(this, a ? a.type : "");
        this.relatedTarget = this.a = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
        this.pointerId = 0;
        this.pointerType = "";
        this.c = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.a = b;
            if (b = a.relatedTarget) {
                if (Ka) {
                    a: {
                        try {
                            Ea(b.nodeName);
                            var e = !0;
                            break a;
                        }
                        catch (f) { }
                        e = !1;
                    }
                    e || (b = null);
                }
            }
            else
                "mouseover" ==
                    c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey = a.shiftKey;
            this.metaKey =
                a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Ya[a.pointerType] || "";
            this.c = a;
            a.defaultPrevented && this.b();
        }
    }
    r(A$1, y);
    var Ya = { 2: "touch", 3: "pen", 4: "mouse" };
    A$1.prototype.b = function () { A$1.S.b.call(this); var a = this.c; if (a.preventDefault)
        a.preventDefault();
    else if (a.returnValue = !1, Wa)
        try {
            if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
                a.keyCode = -1;
        }
        catch (b) { } };
    var C = "closure_listenable_" + (1E6 * Math.random() | 0), Za = 0;
    function $a(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ca = e; this.key = ++Za; this.Y = this.Z = !1; }
    function ab(a) { a.Y = !0; a.listener = null; a.proxy = null; a.src = null; a.ca = null; }
    function bb(a) { this.src = a; this.a = {}; this.b = 0; }
    bb.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.a[f]; a || (a = this.a[f] = [], this.b++); var h = cb(a, b, d, e); -1 < h ? (b = a[h], c || (b.Z = !1)) : (b = new $a(b, this.src, f, !!d, e), b.Z = c, a.push(b)); return b; };
    function db(a, b) { var c = b.type; if (c in a.a) {
        var d = a.a[c], e = na(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && (ab(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    } }
    function cb(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
        var f = a[e];
        if (!f.Y && f.listener == b && f.capture == !!c && f.ca == d)
            return e;
    } return -1; }
    var eb = "closure_lm_" + (1E6 * Math.random() | 0), fb = {};
    function hb(a, b, c, d, e) { if (d && d.once)
        return ib(a, b, c, d, e); if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            hb(a, b[f], c, d, e);
        return null;
    } c = jb(c); return a && a[C] ? a.va(b, c, n(d) ? !!d.capture : !!d, e) : kb(a, b, c, !1, d, e); }
    function kb(a, b, c, d, e, f) {
        if (!b)
            throw Error("Invalid event type");
        var h = n(e) ? !!e.capture : !!e;
        if (h && !Va)
            return null;
        var m = lb(a);
        m || (a[eb] = m = new bb(a));
        c = m.add(b, c, d, h, f);
        if (c.proxy)
            return c;
        d = mb();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener)
            Xa || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
        else if (a.attachEvent)
            a.attachEvent(nb(b.toString()), d);
        else if (a.addListener && a.removeListener)
            a.addListener(d);
        else
            throw Error("addEventListener and attachEvent are unavailable.");
        return c;
    }
    function mb() { var a = ob, b = Va ? function (c) { return a.call(b.src, b.listener, c); } : function (c) { c = a.call(b.src, b.listener, c); if (!c)
        return c; }; return b; }
    function ib(a, b, c, d, e) { if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            ib(a, b[f], c, d, e);
        return null;
    } c = jb(c); return a && a[C] ? a.wa(b, c, n(d) ? !!d.capture : !!d, e) : kb(a, b, c, !0, d, e); }
    function pb(a, b, c, d, e) { if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
            pb(a, b[f], c, d, e);
    else
        (d = n(d) ? !!d.capture : !!d, c = jb(c), a && a[C]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = cb(f, c, d, e), -1 < c && (ab(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = lb(a)) && (b = a.a[b.toString()], a = -1, b && (a = cb(b, c, d, e)), (c = -1 < a ? b[a] : null) && rb(c)); }
    function rb(a) { if ("number" !== typeof a && a && !a.Y) {
        var b = a.src;
        if (b && b[C])
            db(b.c, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(nb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = lb(b)) ? (db(c, a), 0 == c.b && (c.src = null, b[eb] = null)) : ab(a);
        }
    } }
    function nb(a) { return a in fb ? fb[a] : fb[a] = "on" + a; }
    function sb(a, b) { var c = a.listener, d = a.ca || a.src; a.Z && rb(a); return c.call(d, b); }
    function ob(a, b) { if (a.Y)
        return !0; if (!Va) {
        if (!b)
            a: {
                b = ["window", "event"];
                for (var c = k, d = 0; d < b.length; d++)
                    if (c = c[b[d]], null == c) {
                        b = null;
                        break a;
                    }
                b = c;
            }
        b = new A$1(b, this);
        return sb(a, b);
    } return sb(a, new A$1(b, this)); }
    function lb(a) { a = a[eb]; return a instanceof bb ? a : null; }
    var tb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
    function jb(a) { if ("function" == ba(a))
        return a; a[tb] || (a[tb] = function (b) { return a.handleEvent(b); }); return a[tb]; }
    function D$1() { u.call(this); this.c = new bb(this); this.J = this; this.C = null; }
    r(D$1, u);
    D$1.prototype[C] = !0;
    g = D$1.prototype;
    g.addEventListener = function (a, b, c, d) { hb(this, a, b, c, d); };
    g.removeEventListener = function (a, b, c, d) { pb(this, a, b, c, d); };
    g.dispatchEvent = function (a) { var b, c = this.C; if (c)
        for (b = []; c; c = c.C)
            b.push(c); c = this.J; var d = a.type || a; if ("string" === typeof a)
        a = new y(a, c);
    else if (a instanceof y)
        a.target = a.target || c;
    else {
        var e = a;
        a = new y(d, c);
        Da(a, e);
    } e = !0; if (b)
        for (var f = b.length - 1; 0 <= f; f--) {
            var h = a.a = b[f];
            e = ub(h, d, !0, a) && e;
        } h = a.a = c; e = ub(h, d, !0, a) && e; e = ub(h, d, !1, a) && e; if (b)
        for (f = 0; f < b.length; f++)
            h = a.a = b[f], e = ub(h, d, !1, a) && e; return e; };
    g.G = function () { D$1.S.G.call(this); if (this.c) {
        var a = this.c, c;
        for (c in a.a) {
            for (var d = a.a[c], e = 0; e < d.length; e++)
                ab(d[e]);
            delete a.a[c];
            a.b--;
        }
    } this.C = null; };
    g.va = function (a, b, c, d) { return this.c.add(String(a), b, !1, c, d); };
    g.wa = function (a, b, c, d) { return this.c.add(String(a), b, !0, c, d); };
    function ub(a, b, c, d) { b = a.c.a[String(b)]; if (!b)
        return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
        var h = b[f];
        if (h && !h.Y && h.capture == c) {
            var m = h.listener, l = h.ca || h.src;
            h.Z && db(a.c, h);
            e = !1 !== m.call(l, d) && e;
        }
    } return e && !d.defaultPrevented; }
    var vb = k.JSON.stringify;
    function wb() { this.b = this.a = null; }
    var yb = new /** @class */ (function () {
        function class_1(a, b, c) {
            this.f = c;
            this.c = a;
            this.g = b;
            this.b = 0;
            this.a = null;
        }
        class_1.prototype.get = function () { var a; 0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c(); return a; };
        return class_1;
    }())(function () { return new xb; }, function (a) { a.reset(); }, 100);
    wb.prototype.add = function (a, b) { var c = yb.get(); c.set(a, b); this.b ? this.b.next = c : this.a = c; this.b = c; };
    function zb() { var a = Ab, b = null; a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null); return b; }
    function xb() { this.next = this.b = this.a = null; }
    xb.prototype.set = function (a, b) { this.a = a; this.b = b; this.next = null; };
    xb.prototype.reset = function () { this.next = this.b = this.a = null; };
    function Bb(a) { k.setTimeout(function () { throw a; }, 0); }
    function Cb(a, b) { Db || Eb(); Fb || (Db(), Fb = !0); Ab.add(a, b); }
    var Db;
    function Eb() { var a = k.Promise.resolve(void 0); Db = function () { a.then(Gb); }; }
    var Fb = !1, Ab = new wb;
    function Gb() { for (var a; a = zb();) {
        try {
            a.a.call(a.b);
        }
        catch (c) {
            Bb(c);
        }
        var b = yb;
        b.g(a);
        b.b < b.f && (b.b++, a.next = b.a, b.a = a);
    } Fb = !1; }
    function Hb(a, b) { D$1.call(this); this.b = a || 1; this.a = b || k; this.f = p(this.Ya, this); this.g = q(); }
    r(Hb, D$1);
    g = Hb.prototype;
    g.aa = !1;
    g.M = null;
    g.Ya = function () { if (this.aa) {
        var a = q() - this.g;
        0 < a && a < .8 * this.b ? this.M = this.a.setTimeout(this.f, this.b - a) : (this.M && (this.a.clearTimeout(this.M), this.M = null), this.dispatchEvent("tick"), this.aa && (Ib(this), this.start()));
    } };
    g.start = function () { this.aa = !0; this.M || (this.M = this.a.setTimeout(this.f, this.b), this.g = q()); };
    function Ib(a) { a.aa = !1; a.M && (a.a.clearTimeout(a.M), a.M = null); }
    g.G = function () { Hb.S.G.call(this); Ib(this); delete this.a; };
    function Jb(a, b, c) { if ("function" == ba(a))
        c && (a = p(a, c));
    else if (a && "function" == typeof a.handleEvent)
        a = p(a.handleEvent, a);
    else
        throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0); }
    function Kb(a) { a.a = Jb(function () { a.a = null; a.c && (a.c = !1, Kb(a)); }, a.h); var b = a.b; a.b = null; a.g.apply(null, b); }
    var Lb = /** @class */ (function (_super) {
        __extends$1(Lb, _super);
        function Lb(a, b, c) {
            var _this = _super.call(this) || this;
            _this.g = null != c ? a.bind(c) : a;
            _this.h = b;
            _this.b = null;
            _this.c = !1;
            _this.a = null;
            return _this;
        }
        Lb.prototype.f = function (a) { this.b = arguments; this.a ? this.c = !0 : Kb(this); };
        Lb.prototype.G = function () { _super.prototype.G.call(this); this.a && (k.clearTimeout(this.a), this.a = null, this.c = !1, this.b = null); };
        return Lb;
    }(u));
    function E(a) { u.call(this); this.b = a; this.a = {}; }
    r(E, u);
    var Mb = [];
    function Nb(a, b, c, d) { Array.isArray(c) || (c && (Mb[0] = c.toString()), c = Mb); for (var e = 0; e < c.length; e++) {
        var f = hb(b, c[e], d || a.handleEvent, !1, a.b || a);
        if (!f)
            break;
        a.a[f.key] = f;
    } }
    function Ob(a) { Aa(a.a, function (b, c) { this.a.hasOwnProperty(c) && rb(b); }, a); a.a = {}; }
    E.prototype.G = function () { E.S.G.call(this); Ob(this); };
    E.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
    function Pb() { this.a = !0; }
    function Qb(a, b, c, d, e, f) { a.info(function () { if (a.a)
        if (f) {
            var h = "";
            for (var m = f.split("&"), l = 0; l < m.length; l++) {
                var t = m[l].split("=");
                if (1 < t.length) {
                    var B = t[0];
                    t = t[1];
                    var z = B.split("_");
                    h = 2 <= z.length && "type" == z[1] ? h + (B + "=" + t + "&") : h + (B + "=redacted&");
                }
            }
        }
        else
            h = null;
    else
        h = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h; }); }
    function Rb(a, b, c, d, e, f, h) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h; }); }
    function F(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Sb(a, c) + (d ? " " + d : ""); }); }
    function Tb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
    Pb.prototype.info = function () { };
    function Sb(a, b) { if (!a.a)
        return b; if (!b)
        return null; try {
        var c = JSON.parse(b);
        if (c)
            for (a = 0; a < c.length; a++)
                if (Array.isArray(c[a])) {
                    var d = c[a];
                    if (!(2 > d.length)) {
                        var e = d[1];
                        if (Array.isArray(e) && !(1 > e.length)) {
                            var f = e[0];
                            if ("noop" != f && "stop" != f && "close" != f)
                                for (var h = 1; h < e.length; h++)
                                    e[h] = "";
                        }
                    }
                }
        return vb(c);
    }
    catch (m) {
        return b;
    } }
    var Ub = null;
    function Vb() { return Ub = Ub || new D$1; }
    function Wb(a) { y.call(this, "serverreachability", a); }
    r(Wb, y);
    function G(a) { var b = Vb(); b.dispatchEvent(new Wb(b, a)); }
    function Xb(a) { y.call(this, "statevent", a); }
    r(Xb, y);
    function H(a) { var b = Vb(); b.dispatchEvent(new Xb(b, a)); }
    function Yb(a) { y.call(this, "timingevent", a); }
    r(Yb, y);
    function I(a, b) { if ("function" != ba(a))
        throw Error("Fn must not be null and must be a function"); return k.setTimeout(function () { a(); }, b); }
    var Zb = { NO_ERROR: 0, Za: 1, gb: 2, fb: 3, bb: 4, eb: 5, hb: 6, Da: 7, TIMEOUT: 8, kb: 9 };
    var $b = { ab: "complete", ob: "success", Ea: "error", Da: "abort", mb: "ready", nb: "readystatechange", TIMEOUT: "timeout", ib: "incrementaldata", lb: "progress", cb: "downloadprogress", pb: "uploadprogress" };
    function ac() { }
    ac.prototype.a = null;
    function bc(a) { var b; (b = a.a) || (b = a.a = {}); return b; }
    function cc() { }
    var J = { OPEN: "a", $a: "b", Ea: "c", jb: "d" };
    function dc() { y.call(this, "d"); }
    r(dc, y);
    function ec() { y.call(this, "c"); }
    r(ec, y);
    var fc;
    function gc() { }
    r(gc, ac);
    fc = new gc;
    function K(a, b, c, d) { this.g = a; this.c = b; this.f = c; this.T = d || 1; this.J = new E(this); this.P = hc; a = Ja ? 125 : void 0; this.R = new Hb(a); this.B = null; this.b = !1; this.j = this.l = this.i = this.H = this.u = this.U = this.o = null; this.s = []; this.a = null; this.D = 0; this.h = this.m = null; this.N = -1; this.A = !1; this.O = 0; this.F = null; this.W = this.C = this.V = this.I = !1; }
    var hc = 45E3, ic = {}, jc = {};
    g = K.prototype;
    g.setTimeout = function (a) { this.P = a; };
    function kc(a, b, c) { a.H = 1; a.i = lc(L(b)); a.j = c; a.I = !0; mc(a, null); }
    function mc(a, b) { a.u = q(); M(a); a.l = L(a.i); var c = a.l, d = a.T; Array.isArray(d) || (d = [String(d)]); nc(c.b, "t", d); a.D = 0; a.a = oc(a.g, a.g.C ? b : null); 0 < a.O && (a.F = new Lb(p(a.Ca, a, a.a), a.O)); Nb(a.J, a.a, "readystatechange", a.Wa); b = a.B ? Ba(a.B) : {}; a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ba(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.ba(a.l, a.m, null, b)); G(1); Qb(a.c, a.m, a.l, a.f, a.T, a.j); }
    g.Wa = function (a) { a = a.target; var b = this.F; b && 3 == N(a) ? b.f() : this.Ca(a); };
    g.Ca = function (a) {
        try {
            if (a == this.a)
                a: {
                    var b = N(this.a), c = this.a.ua(), d = this.a.X();
                    if (!(3 > b || 3 == b && !Ja && !this.a.$())) {
                        this.A || 4 != b || 7 == c || (8 == c || 0 >= d ? G(3) : G(2));
                        pc(this);
                        var e = this.a.X();
                        this.N = e;
                        var f = this.a.$();
                        this.b = 200 == e;
                        Rb(this.c, this.m, this.l, this.f, this.T, b, e);
                        if (this.b) {
                            if (this.V && !this.C) {
                                b: {
                                    if (this.a) {
                                        var h, m = this.a;
                                        if ((h = m.a ? m.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !ta(h)) {
                                            var l = h;
                                            break b;
                                        }
                                    }
                                    l = null;
                                }
                                if (l)
                                    F(this.c, this.f, l, "Initial handshake response via X-HTTP-Initial-Response"),
                                        this.C = !0, qc(this, l);
                                else {
                                    this.b = !1;
                                    this.h = 3;
                                    H(12);
                                    O(this);
                                    rc(this);
                                    break a;
                                }
                            }
                            this.I ? (tc(this, b, f), Ja && this.b && 3 == b && (Nb(this.J, this.R, "tick", this.Va), this.R.start())) : (F(this.c, this.f, f, null), qc(this, f));
                            4 == b && O(this);
                            this.b && !this.A && (4 == b ? uc(this.g, this) : (this.b = !1, M(this)));
                        }
                        else
                            400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, H(12)) : (this.h = 0, H(13)), O(this), rc(this);
                    }
                }
        }
        catch (t) { }
        finally { }
    };
    function tc(a, b, c) { for (var d = !0; !a.A && a.D < c.length;) {
        var e = vc(a, c);
        if (e == jc) {
            4 == b && (a.h = 4, H(14), d = !1);
            F(a.c, a.f, null, "[Incomplete Response]");
            break;
        }
        else if (e == ic) {
            a.h = 4;
            H(15);
            F(a.c, a.f, c, "[Invalid Chunk]");
            d = !1;
            break;
        }
        else
            F(a.c, a.f, e, null), qc(a, e);
    } 4 == b && 0 == c.length && (a.h = 1, H(16), d = !1); a.b = a.b && d; d ? 0 < c.length && !a.W && (a.W = !0, b = a.g, b.a == a && b.V && !b.F && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), xc(b), b.F = !0)) : (F(a.c, a.f, c, "[Invalid Chunked Response]"), O(a), rc(a)); }
    g.Va = function () { if (this.a) {
        var a = N(this.a), b = this.a.$();
        this.D < b.length && (pc(this), tc(this, a, b), this.b && 4 != a && M(this));
    } };
    function vc(a, b) { var c = a.D, d = b.indexOf("\n", c); if (-1 == d)
        return jc; c = Number(b.substring(c, d)); if (isNaN(c))
        return ic; d += 1; if (d + c > b.length)
        return jc; b = b.substr(d, c); a.D = d + c; return b; }
    g.cancel = function () { this.A = !0; O(this); };
    function M(a) { a.U = q() + a.P; yc(a, a.P); }
    function yc(a, b) { if (null != a.o)
        throw Error("WatchDog timer not null"); a.o = I(p(a.Ua, a), b); }
    function pc(a) { a.o && (k.clearTimeout(a.o), a.o = null); }
    g.Ua = function () { this.o = null; var a = q(); 0 <= a - this.U ? (Tb(this.c, this.l), 2 != this.H && (G(3), H(17)), O(this), this.h = 2, rc(this)) : yc(this, this.U - a); };
    function rc(a) { 0 == a.g.v || a.A || uc(a.g, a); }
    function O(a) { pc(a); var b = a.F; b && "function" == typeof b.ja && b.ja(); a.F = null; Ib(a.R); Ob(a.J); a.a && (b = a.a, a.a = null, b.abort(), b.ja()); }
    function qc(a, b) {
        try {
            var c = a.g;
            if (0 != c.v && (c.a == a || zc(c.b, a)))
                if (c.I = a.N, !a.C && zc(c.b, a) && 3 == c.v) {
                    try {
                        var d = c.ka.a.parse(b);
                    }
                    catch (sc) {
                        d = null;
                    }
                    if (Array.isArray(d) && 3 == d.length) {
                        var e = d;
                        if (0 == e[0])
                            a: {
                                if (!c.j) {
                                    if (c.a)
                                        if (c.a.u + 3E3 < a.u)
                                            Ac(c), Bc(c);
                                        else
                                            break a;
                                    Cc(c);
                                    H(18);
                                }
                            }
                        else
                            c.oa = e[1], 0 < c.oa - c.P && 37500 > e[2] && c.H && 0 == c.o && !c.m && (c.m = I(p(c.Ra, c), 6E3));
                        if (1 >= Dc$1(c.b) && c.ea) {
                            try {
                                c.ea();
                            }
                            catch (sc) { }
                            c.ea = void 0;
                        }
                    }
                    else
                        P(c, 11);
                }
                else if ((a.C || c.a == a) && Ac(c), !ta(b))
                    for (b = d = c.ka.a.parse(b), d = 0; d < b.length; d++)
                        if (e =
                            b[d], c.P = e[0], e = e[1], 2 == c.v)
                            if ("c" == e[0]) {
                                c.J = e[1];
                                c.ga = e[2];
                                var f = e[3];
                                null != f && (c.ha = f, c.c.info("VER=" + c.ha));
                                var h = e[4];
                                null != h && (c.pa = h, c.c.info("SVER=" + c.pa));
                                var m = e[5];
                                if (null != m && "number" === typeof m && 0 < m) {
                                    var l = 1.5 * m;
                                    c.D = l;
                                    c.c.info("backChannelRequestTimeoutMs_=" + l);
                                }
                                l = c;
                                var t = a.a;
                                if (t) {
                                    var B = t.a ? t.a.getResponseHeader("X-Client-Wire-Protocol") : null;
                                    if (B) {
                                        var z = l.b;
                                        !z.a && (v(B, "spdy") || v(B, "quic") || v(B, "h2")) && (z.f = z.g, z.a = new Set, z.b && (Ec(z, z.b), z.b = null));
                                    }
                                    if (l.A) {
                                        var qb = t.a ? t.a.getResponseHeader("X-HTTP-Session-Id") :
                                            null;
                                        qb && (l.na = qb, Q(l.B, l.A, qb));
                                    }
                                }
                                c.v = 3;
                                c.f && c.f.ta();
                                c.V && (c.N = q() - a.u, c.c.info("Handshake RTT: " + c.N + "ms"));
                                l = c;
                                var va = a;
                                l.la = Fc(l, l.C ? l.ga : null, l.fa);
                                if (va.C) {
                                    Gc(l.b, va);
                                    var wa = va, wc = l.D;
                                    wc && wa.setTimeout(wc);
                                    wa.o && (pc(wa), M(wa));
                                    l.a = va;
                                }
                                else
                                    Hc(l);
                                0 < c.g.length && Ic(c);
                            }
                            else
                                "stop" != e[0] && "close" != e[0] || P(c, 7);
                        else
                            3 == c.v && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? P(c, 7) : Jc(c) : "noop" != e[0] && c.f && c.f.sa(e), c.o = 0);
            G(4);
        }
        catch (sc) { }
    }
    function Kc(a) { if (a.K && "function" == typeof a.K)
        return a.K(); if ("string" === typeof a)
        return a.split(""); if (ca(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++)
            b.push(a[d]);
        return b;
    } b = []; c = 0; for (d in a)
        b[c++] = a[d]; return a = b; }
    function Lc(a, b) { if (a.forEach && "function" == typeof a.forEach)
        a.forEach(b, void 0);
    else if (ca(a) || "string" === typeof a)
        oa(a, b, void 0);
    else {
        if (a.L && "function" == typeof a.L)
            var c = a.L();
        else if (a.K && "function" == typeof a.K)
            c = void 0;
        else if (ca(a) || "string" === typeof a) {
            c = [];
            for (var d = a.length, e = 0; e < d; e++)
                c.push(e);
        }
        else
            for (e in c = [], d = 0, a)
                c[d++] = e;
        d = Kc(a);
        e = d.length;
        for (var f = 0; f < e; f++)
            b.call(void 0, d[f], c && c[f], a);
    } }
    function R(a, b) { this.b = {}; this.a = []; this.c = 0; var c = arguments.length; if (1 < c) {
        if (c % 2)
            throw Error("Uneven number of arguments");
        for (var d = 0; d < c; d += 2)
            this.set(arguments[d], arguments[d + 1]);
    }
    else if (a)
        if (a instanceof R)
            for (c = a.L(), d = 0; d < c.length; d++)
                this.set(c[d], a.get(c[d]));
        else
            for (d in a)
                this.set(d, a[d]); }
    g = R.prototype;
    g.K = function () { Mc(this); for (var a = [], b = 0; b < this.a.length; b++)
        a.push(this.b[this.a[b]]); return a; };
    g.L = function () { Mc(this); return this.a.concat(); };
    function Mc(a) { if (a.c != a.a.length) {
        for (var b = 0, c = 0; b < a.a.length;) {
            var d = a.a[b];
            S$1(a.b, d) && (a.a[c++] = d);
            b++;
        }
        a.a.length = c;
    } if (a.c != a.a.length) {
        var e = {};
        for (c = b = 0; b < a.a.length;)
            d = a.a[b], S$1(e, d) || (a.a[c++] = d, e[d] = 1), b++;
        a.a.length = c;
    } }
    g.get = function (a, b) { return S$1(this.b, a) ? this.b[a] : b; };
    g.set = function (a, b) { S$1(this.b, a) || (this.c++, this.a.push(a)); this.b[a] = b; };
    g.forEach = function (a, b) { for (var c = this.L(), d = 0; d < c.length; d++) {
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    } };
    function S$1(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
    var Nc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function Oc(a, b) { if (a) {
        a = a.split("&");
        for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            }
            else
                f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    } }
    function T$1(a, b) { this.c = this.j = this.f = ""; this.h = null; this.i = this.g = ""; this.a = !1; if (a instanceof T$1) {
        this.a = void 0 !== b ? b : a.a;
        Pc(this, a.f);
        this.j = a.j;
        Qc(this, a.c);
        Rc(this, a.h);
        this.g = a.g;
        b = a.b;
        var c = new U;
        c.c = b.c;
        b.a && (c.a = new R(b.a), c.b = b.b);
        Sc$1(this, c);
        this.i = a.i;
    }
    else
        a && (c = String(a).match(Nc)) ? (this.a = !!b, Pc(this, c[1] || "", !0), this.j = Tc$1(c[2] || ""), Qc(this, c[3] || "", !0), Rc(this, c[4]), this.g = Tc$1(c[5] || "", !0), Sc$1(this, c[6] || "", !0), this.i = Tc$1(c[7] || "")) : (this.a = !!b, this.b = new U(null, this.a)); }
    T$1.prototype.toString = function () { var a = [], b = this.f; b && a.push(Uc(b, Vc, !0), ":"); var c = this.c; if (c || "file" == b)
        a.push("//"), (b = this.j) && a.push(Uc(b, Vc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c)); if (c = this.g)
        this.c && "/" != c.charAt(0) && a.push("/"), a.push(Uc(c, "/" == c.charAt(0) ? Wc : Xc, !0)); (c = this.b.toString()) && a.push("?", c); (c = this.i) && a.push("#", Uc(c, Yc)); return a.join(""); };
    function L(a) { return new T$1(a); }
    function Pc(a, b, c) { a.f = c ? Tc$1(b, !0) : b; a.f && (a.f = a.f.replace(/:$/, "")); }
    function Qc(a, b, c) { a.c = c ? Tc$1(b, !0) : b; }
    function Rc(a, b) { if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b)
            throw Error("Bad port number " + b);
        a.h = b;
    }
    else
        a.h = null; }
    function Sc$1(a, b, c) { b instanceof U ? (a.b = b, Zc(a.b, a.a)) : (c || (b = Uc(b, $c)), a.b = new U(b, a.a)); }
    function Q(a, b, c) { a.b.set(b, c); }
    function lc(a) { Q(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ q()).toString(36)); return a; }
    function ad(a) { return a instanceof T$1 ? L(a) : new T$1(a, void 0); }
    function bd(a, b, c, d) { var e = new T$1(null, void 0); a && Pc(e, a); b && Qc(e, b); c && Rc(e, c); d && (e.g = d); return e; }
    function Tc$1(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
    function Uc(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
    function cd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
    var Vc = /[#\/\?@]/g, Xc = /[#\?:]/g, Wc = /[#\?]/g, $c = /[#\?@]/g, Yc = /#/g;
    function U(a, b) { this.b = this.a = null; this.c = a || null; this.f = !!b; }
    function V(a) { a.a || (a.a = new R, a.b = 0, a.c && Oc(a.c, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
    g = U.prototype;
    g.add = function (a, b) { V(this); this.c = null; a = W(this, a); var c = this.a.get(a); c || this.a.set(a, c = []); c.push(b); this.b += 1; return this; };
    function dd(a, b) { V(a); b = W(a, b); S$1(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, S$1(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc(a))); }
    function ed(a, b) { V(a); b = W(a, b); return S$1(a.a.b, b); }
    g.forEach = function (a, b) { V(this); this.a.forEach(function (c, d) { oa(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
    g.L = function () { V(this); for (var a = this.a.K(), b = this.a.L(), c = [], d = 0; d < b.length; d++)
        for (var e = a[d], f = 0; f < e.length; f++)
            c.push(b[d]); return c; };
    g.K = function (a) { V(this); var b = []; if ("string" === typeof a)
        ed(this, a) && (b = ra(b, this.a.get(W(this, a))));
    else {
        a = this.a.K();
        for (var c = 0; c < a.length; c++)
            b = ra(b, a[c]);
    } return b; };
    g.set = function (a, b) { V(this); this.c = null; a = W(this, a); ed(this, a) && (this.b -= this.a.get(a).length); this.a.set(a, [b]); this.b += 1; return this; };
    g.get = function (a, b) { if (!a)
        return b; a = this.K(a); return 0 < a.length ? String(a[0]) : b; };
    function nc(a, b, c) { dd(a, b); 0 < c.length && (a.c = null, a.a.set(W(a, b), sa(c)), a.b += c.length); }
    g.toString = function () { if (this.c)
        return this.c; if (!this.a)
        return ""; for (var a = [], b = this.a.L(), c = 0; c < b.length; c++) {
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.K(d);
        for (var f = 0; f < d.length; f++) {
            var h = e;
            "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
            a.push(h);
        }
    } return this.c = a.join("&"); };
    function W(a, b) { b = String(b); a.f && (b = b.toLowerCase()); return b; }
    function Zc(a, b) { b && !a.f && (V(a), a.c = null, a.a.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (dd(this, d), nc(this, e, c)); }, a)); a.f = b; }
    function fd(a, b) { this.b = a; this.a = b; }
    function gd(a) { this.g = a || hd; k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ia && k.ia.ya && k.ia.ya() && k.ia.ya().qb); this.f = a ? this.g : 1; this.a = null; 1 < this.f && (this.a = new Set); this.b = null; this.c = []; }
    var hd = 10;
    function id(a) { return a.b ? !0 : a.a ? a.a.size >= a.f : !1; }
    function Dc$1(a) { return a.b ? 1 : a.a ? a.a.size : 0; }
    function zc(a, b) { return a.b ? a.b == b : a.a ? a.a.has(b) : !1; }
    function Ec(a, b) { a.a ? a.a.add(b) : a.b = b; }
    function Gc(a, b) { a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b); }
    gd.prototype.cancel = function () {
        var e_1, _a;
        this.c = jd(this);
        if (this.b)
            this.b.cancel(), this.b = null;
        else if (this.a && 0 !== this.a.size) {
            try {
                for (var _b = __values$1(this.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    a.cancel();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.a.clear();
        }
    };
    function jd(a) {
        var e_2, _a;
        if (null != a.b)
            return a.c.concat(a.b.s);
        if (null != a.a && 0 !== a.a.size) {
            var b = a.c;
            try {
                for (var _b = __values$1(a.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    b = b.concat(c.s);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return b;
        }
        return sa(a.c);
    }
    function kd() { }
    kd.prototype.stringify = function (a) { return k.JSON.stringify(a, void 0); };
    kd.prototype.parse = function (a) { return k.JSON.parse(a, void 0); };
    function ld() { this.a = new kd; }
    function md(a, b, c) { var d = c || ""; try {
        Lc(a, function (e, f) { var h = e; n(e) && (h = vb(e)); b.push(d + f + "=" + encodeURIComponent(h)); });
    }
    catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    } }
    function nd(a, b) { var c = new Pb; if (k.Image) {
        var d = new Image;
        d.onload = ka(od, c, d, "TestLoadImage: loaded", !0, b);
        d.onerror = ka(od, c, d, "TestLoadImage: error", !1, b);
        d.onabort = ka(od, c, d, "TestLoadImage: abort", !1, b);
        d.ontimeout = ka(od, c, d, "TestLoadImage: timeout", !1, b);
        k.setTimeout(function () { if (d.ontimeout)
            d.ontimeout(); }, 1E4);
        d.src = a;
    }
    else
        b(!1); }
    function od(a, b, c, d, e) { try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    }
    catch (f) { } }
    var pd = k.JSON.parse;
    function X(a) { D$1.call(this); this.headers = new R; this.H = a || null; this.b = !1; this.s = this.a = null; this.B = ""; this.h = 0; this.f = ""; this.g = this.A = this.l = this.u = !1; this.o = 0; this.m = null; this.I = qd; this.D = this.F = !1; }
    r(X, D$1);
    var qd = "", rd = /^https?$/i, sd = ["POST", "PUT"];
    g = X.prototype;
    g.ba = function (a, b, c, d) {
        if (this.a)
            throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
        b = b ? b.toUpperCase() : "GET";
        this.B = a;
        this.f = "";
        this.h = 0;
        this.u = !1;
        this.b = !0;
        this.a = new XMLHttpRequest;
        this.s = this.H ? bc(this.H) : bc(fc);
        this.a.onreadystatechange = p(this.za, this);
        try {
            this.A = !0, this.a.open(b, String(a), !0), this.A = !1;
        }
        catch (f) {
            td(this, f);
            return;
        }
        a = c || "";
        var e = new R(this.headers);
        d && Lc(d, function (f, h) { e.set(h, f); });
        d = pa(e.L());
        c = k.FormData && a instanceof k.FormData;
        !(0 <=
            na(sd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        e.forEach(function (f, h) { this.a.setRequestHeader(h, f); }, this);
        this.I && (this.a.responseType = this.I);
        "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
        try {
            ud(this), 0 < this.o && ((this.D = vd(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = p(this.xa, this)) : this.m = Jb(this.xa, this.o, this)), this.l = !0, this.a.send(a), this.l = !1;
        }
        catch (f) {
            td(this, f);
        }
    };
    function vd(a) { return x && Ra(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
    function qa(a) { return "content-type" == a.toLowerCase(); }
    g.xa = function () { "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, this.dispatchEvent("timeout"), this.abort(8)); };
    function td(a, b) { a.b = !1; a.a && (a.g = !0, a.a.abort(), a.g = !1); a.f = b; a.h = 5; wd(a); xd(a); }
    function wd(a) { a.u || (a.u = !0, a.dispatchEvent("complete"), a.dispatchEvent("error")); }
    g.abort = function (a) { this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, this.dispatchEvent("complete"), this.dispatchEvent("abort"), xd(this)); };
    g.G = function () { this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), xd(this, !0)); X.S.G.call(this); };
    g.za = function () { this.j || (this.A || this.l || this.g ? yd(this) : this.Ta()); };
    g.Ta = function () { yd(this); };
    function yd(a) {
        if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != N(a) || 2 != a.X()))
            if (a.l && 4 == N(a))
                Jb(a.za, 0, a);
            else if (a.dispatchEvent("readystatechange"), 4 == N(a)) {
                a.b = !1;
                try {
                    var b = a.X();
                    a: switch (b) {
                        case 200:
                        case 201:
                        case 202:
                        case 204:
                        case 206:
                        case 304:
                        case 1223:
                            var c = !0;
                            break a;
                        default: c = !1;
                    }
                    var d;
                    if (!(d = c)) {
                        var e;
                        if (e = 0 === b) {
                            var f = String(a.B).match(Nc)[1] || null;
                            if (!f && k.self && k.self.location) {
                                var h = k.self.location.protocol;
                                f = h.substr(0, h.length - 1);
                            }
                            e = !rd.test(f ? f.toLowerCase() : "");
                        }
                        d = e;
                    }
                    if (d)
                        a.dispatchEvent("complete"),
                            a.dispatchEvent("success");
                    else {
                        a.h = 6;
                        try {
                            var m = 2 < N(a) ? a.a.statusText : "";
                        }
                        catch (l) {
                            m = "";
                        }
                        a.f = m + " [" + a.X() + "]";
                        wd(a);
                    }
                }
                finally {
                    xd(a);
                }
            }
    }
    function xd(a, b) { if (a.a) {
        ud(a);
        var c = a.a, d = a.s[0] ? aa : null;
        a.a = null;
        a.s = null;
        b || a.dispatchEvent("ready");
        try {
            c.onreadystatechange = d;
        }
        catch (e) { }
    } }
    function ud(a) { a.a && a.D && (a.a.ontimeout = null); a.m && (k.clearTimeout(a.m), a.m = null); }
    function N(a) { return a.a ? a.a.readyState : 0; }
    g.X = function () { try {
        return 2 < N(this) ? this.a.status : -1;
    }
    catch (a) {
        return -1;
    } };
    g.$ = function () { try {
        return this.a ? this.a.responseText : "";
    }
    catch (a) {
        return "";
    } };
    g.Na = function (a) { if (this.a) {
        var b = this.a.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return pd(b);
    } };
    g.ua = function () { return this.h; };
    g.Qa = function () { return "string" === typeof this.f ? this.f : String(this.f); };
    function zd(a) { var b = ""; Aa(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
    function Ad(a, b, c) { a: {
        for (d in c) {
            var d = !1;
            break a;
        }
        d = !0;
    } d || (c = zd(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : Q(a, b, c)); }
    function Bd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
    function Cd(a) {
        this.pa = 0;
        this.g = [];
        this.c = new Pb;
        this.ga = this.la = this.B = this.fa = this.a = this.na = this.A = this.W = this.i = this.O = this.l = null;
        this.La = this.R = 0;
        this.Ia = Bd("failFast", !1, a);
        this.H = this.m = this.j = this.h = this.f = null;
        this.T = !0;
        this.I = this.oa = this.P = -1;
        this.U = this.o = this.u = 0;
        this.Fa = Bd("baseRetryDelayMs", 5E3, a);
        this.Ma = Bd("retryDelaySeedMs", 1E4, a);
        this.Ja = Bd("forwardChannelMaxRetries", 2, a);
        this.ma = Bd("forwardChannelRequestTimeoutMs", 2E4, a);
        this.Ka = a && a.g || void 0;
        this.D = void 0;
        this.C = a && a.supportsCrossDomainXhr ||
            !1;
        this.J = "";
        this.b = new gd(a && a.concurrentRequestLimit);
        this.ka = new ld;
        this.da = a && a.fastHandshake || !1;
        this.Ga = a && a.b || !1;
        a && a.f && (this.c.a = !1);
        a && a.forceLongPolling && (this.T = !1);
        this.V = !this.da && this.T && a && a.c || !1;
        this.ea = void 0;
        this.N = 0;
        this.F = !1;
        this.s = null;
    }
    g = Cd.prototype;
    g.ha = 8;
    g.v = 1;
    function Jc(a) { Dd(a); if (3 == a.v) {
        var b = a.R++, c = L(a.B);
        Q(c, "SID", a.J);
        Q(c, "RID", b);
        Q(c, "TYPE", "terminate");
        Ed(a, c);
        b = new K(a, a.c, b, void 0);
        b.H = 2;
        b.i = lc(L(c));
        c = !1;
        k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.i.toString(), ""));
        !c && k.Image && ((new Image).src = b.i, c = !0);
        c || (b.a = oc(b.g, null), b.a.ba(b.i));
        b.u = q();
        M(b);
    } Fd(a); }
    function Bc(a) { a.a && (xc(a), a.a.cancel(), a.a = null); }
    function Dd(a) { Bc(a); a.j && (k.clearTimeout(a.j), a.j = null); Ac(a); a.b.cancel(); a.h && ("number" === typeof a.h && k.clearTimeout(a.h), a.h = null); }
    function Gd(a, b) { a.g.push(new fd(a.La++, b)); 3 == a.v && Ic(a); }
    function Ic(a) { id(a.b) || a.h || (a.h = !0, Cb(a.Ba, a), a.u = 0); }
    function Hd(a, b) { if (Dc$1(a.b) >= a.b.f - (a.h ? 1 : 0))
        return !1; if (a.h)
        return a.g = b.s.concat(a.g), !0; if (1 == a.v || 2 == a.v || a.u >= (a.Ia ? 0 : a.Ja))
        return !1; a.h = I(p(a.Ba, a, b), Id(a, a.u)); a.u++; return !0; }
    g.Ba = function (a) {
        if (this.h)
            if (this.h = null, 1 == this.v) {
                if (!a) {
                    this.R = Math.floor(1E5 * Math.random());
                    a = this.R++;
                    var b = new K(this, this.c, a, void 0), c = this.l;
                    this.O && (c ? (c = Ba(c), Da(c, this.O)) : c = this.O);
                    null === this.i && (b.B = c);
                    var d;
                    if (this.da)
                        a: {
                            for (var e = d = 0; e < this.g.length; e++) {
                                b: {
                                    var f = this.g[e];
                                    if ("__data__" in f.a && (f = f.a.__data__, "string" === typeof f)) {
                                        f = f.length;
                                        break b;
                                    }
                                    f = void 0;
                                }
                                if (void 0 === f)
                                    break;
                                d += f;
                                if (4096 < d) {
                                    d = e;
                                    break a;
                                }
                                if (4096 === d || e === this.g.length - 1) {
                                    d = e + 1;
                                    break a;
                                }
                            }
                            d = 1E3;
                        }
                    else
                        d = 1E3;
                    d = Jd(this, b, d);
                    e = L(this.B);
                    Q(e, "RID", a);
                    Q(e, "CVER", 22);
                    this.A && Q(e, "X-HTTP-Session-Id", this.A);
                    Ed(this, e);
                    this.i && c && Ad(e, this.i, c);
                    Ec(this.b, b);
                    this.Ga && Q(e, "TYPE", "init");
                    this.da ? (Q(e, "$req", d), Q(e, "SID", "null"), b.V = !0, kc(b, e, null)) : kc(b, e, d);
                    this.v = 2;
                }
            }
            else
                3 == this.v && (a ? Kd(this, a) : 0 == this.g.length || id(this.b) || Kd(this));
    };
    function Kd(a, b) { var c; b ? c = b.f : c = a.R++; var d = L(a.B); Q(d, "SID", a.J); Q(d, "RID", c); Q(d, "AID", a.P); Ed(a, d); a.i && a.l && Ad(d, a.i, a.l); c = new K(a, a.c, c, a.u + 1); null === a.i && (c.B = a.l); b && (a.g = b.s.concat(a.g)); b = Jd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ma) + Math.round(.5 * a.ma * Math.random())); Ec(a.b, c); kc(c, d, b); }
    function Ed(a, b) { a.f && Lc({}, function (c, d) { Q(b, d, c); }); }
    function Jd(a, b, c) { c = Math.min(a.g.length, c); var d = a.f ? p(a.f.Ha, a.f, a) : null; a: for (var e = a.g, f = -1;;) {
        var h = ["count=" + c];
        -1 == f ? 0 < c ? (f = e[0].b, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
        for (var m = !0, l = 0; l < c; l++) {
            var t = e[l].b, B = e[l].a;
            t -= f;
            if (0 > t)
                f = Math.max(0, e[l].b - 100), m = !1;
            else
                try {
                    md(B, h, "req" + t + "_");
                }
                catch (z) {
                    d && d(B);
                }
        }
        if (m) {
            d = h.join("&");
            break a;
        }
    } a = a.g.splice(0, c); b.s = a; return d; }
    function Hc(a) { a.a || a.j || (a.U = 1, Cb(a.Aa, a), a.o = 0); }
    function Cc(a) { if (a.a || a.j || 3 <= a.o)
        return !1; a.U++; a.j = I(p(a.Aa, a), Id(a, a.o)); a.o++; return !0; }
    g.Aa = function () { this.j = null; Ld(this); if (this.V && !(this.F || null == this.a || 0 >= this.N)) {
        var a = 2 * this.N;
        this.c.info("BP detection timer enabled: " + a);
        this.s = I(p(this.Sa, this), a);
    } };
    g.Sa = function () { this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.H = !1, this.F = !0, Bc(this), Ld(this)); };
    function xc(a) { null != a.s && (k.clearTimeout(a.s), a.s = null); }
    function Ld(a) { a.a = new K(a, a.c, "rpc", a.U); null === a.i && (a.a.B = a.l); a.a.O = 0; var b = L(a.la); Q(b, "RID", "rpc"); Q(b, "SID", a.J); Q(b, "CI", a.H ? "0" : "1"); Q(b, "AID", a.P); Ed(a, b); Q(b, "TYPE", "xmlhttp"); a.i && a.l && Ad(b, a.i, a.l); a.D && a.a.setTimeout(a.D); var c = a.a; a = a.ga; c.H = 1; c.i = lc(L(b)); c.j = null; c.I = !0; mc(c, a); }
    g.Ra = function () { null != this.m && (this.m = null, Bc(this), Cc(this), H(19)); };
    function Ac(a) { null != a.m && (k.clearTimeout(a.m), a.m = null); }
    function uc(a, b) { var c = null; if (a.a == b) {
        Ac(a);
        xc(a);
        a.a = null;
        var d = 2;
    }
    else if (zc(a.b, b))
        c = b.s, Gc(a.b, b), d = 1;
    else
        return; a.I = b.N; if (0 != a.v)
        if (b.b)
            if (1 == d) {
                c = b.j ? b.j.length : 0;
                b = q() - b.u;
                var e = a.u;
                d = Vb();
                d.dispatchEvent(new Yb(d, c, b, e));
                Ic(a);
            }
            else
                Hc(a);
        else if (e = b.h, 3 == e || 0 == e && 0 < a.I || !(1 == d && Hd(a, b) || 2 == d && Cc(a)))
            switch (c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e) {
                case 1:
                    P(a, 5);
                    break;
                case 4:
                    P(a, 10);
                    break;
                case 3:
                    P(a, 6);
                    break;
                default: P(a, 2);
            } }
    function Id(a, b) { var c = a.Fa + Math.floor(Math.random() * a.Ma); a.f || (c *= 2); return c * b; }
    function P(a, b) { a.c.info("Error code " + b); if (2 == b) {
        var c = null;
        a.f && (c = null);
        var d = p(a.Xa, a);
        c || (c = new T$1("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || Pc(c, "https"), lc(c));
        nd(c.toString(), d);
    }
    else
        H(2); a.v = 0; a.f && a.f.ra(b); Fd(a); Dd(a); }
    g.Xa = function (a) { a ? (this.c.info("Successfully pinged google.com"), H(2)) : (this.c.info("Failed to ping google.com"), H(1)); };
    function Fd(a) { a.v = 0; a.I = -1; if (a.f) {
        if (0 != jd(a.b).length || 0 != a.g.length)
            a.b.c.length = 0, sa(a.g), a.g.length = 0;
        a.f.qa();
    } }
    function Fc(a, b, c) { var d = ad(c); if ("" != d.c)
        b && Qc(d, b + "." + d.c), Rc(d, d.h);
    else {
        var e = k.location;
        d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    } a.W && Aa(a.W, function (f, h) { Q(d, h, f); }); b = a.A; c = a.na; b && c && Q(d, b, c); Q(d, "VER", a.ha); Ed(a, d); return d; }
    function oc(a, b) { if (b && !a.C)
        throw Error("Can't create secondary domain capable XhrIo object."); b = new X(a.Ka); b.F = a.C; return b; }
    function Md() { }
    g = Md.prototype;
    g.ta = function () { };
    g.sa = function () { };
    g.ra = function () { };
    g.qa = function () { };
    g.Ha = function () { };
    function Nd() { if (x && !(10 <= Number(Ua)))
        throw Error("Environmental error: no available transport."); }
    Nd.prototype.a = function (a, b) { return new Y(a, b); };
    function Y(a, b) {
        D$1.call(this);
        this.a = new Cd(b);
        this.l = a;
        this.b = b && b.messageUrlParams || null;
        a = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
        this.a.l = a;
        a = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
        b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = { "X-WebChannel-Client-Profile": b.a });
        this.a.O =
            a;
        (a = b && b.httpHeadersOverwriteParam) && !ta(a) && (this.a.i = a);
        this.h = b && b.supportsCrossDomainXhr || !1;
        this.g = b && b.sendRawJson || !1;
        (b = b && b.httpSessionIdParam) && !ta(b) && (this.a.A = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
        this.f = new Z(this);
    }
    r(Y, D$1);
    g = Y.prototype;
    g.addEventListener = function (a, b, c, d) { Y.S.addEventListener.call(this, a, b, c, d); };
    g.removeEventListener = function (a, b, c, d) { Y.S.removeEventListener.call(this, a, b, c, d); };
    g.Oa = function () { this.a.f = this.f; this.h && (this.a.C = !0); var a = this.a, b = this.l, c = this.b || void 0; H(0); a.fa = b; a.W = c || {}; a.H = a.T; a.B = Fc(a, null, a.fa); Ic(a); };
    g.close = function () { Jc(this.a); };
    g.Pa = function (a) { if ("string" === typeof a) {
        var b = {};
        b.__data__ = a;
        Gd(this.a, b);
    }
    else
        this.g ? (b = {}, b.__data__ = vb(a), Gd(this.a, b)) : Gd(this.a, a); };
    g.G = function () { this.a.f = null; delete this.f; Jc(this.a); delete this.a; Y.S.G.call(this); };
    function Od(a) { dc.call(this); var b = a.__sm__; if (b) {
        a: {
            for (var c in b) {
                a = c;
                break a;
            }
            a = void 0;
        }
        (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
    }
    else
        this.data = a; }
    r(Od, dc);
    function Pd() { ec.call(this); this.status = 1; }
    r(Pd, ec);
    function Z(a) { this.a = a; }
    r(Z, Md);
    Z.prototype.ta = function () { this.a.dispatchEvent("a"); };
    Z.prototype.sa = function (a) { this.a.dispatchEvent(new Od(a)); };
    Z.prototype.ra = function (a) { this.a.dispatchEvent(new Pd(a)); };
    Z.prototype.qa = function () { this.a.dispatchEvent("b"); }; /*

     Copyright 2017 Google Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Nd.prototype.createWebChannel = Nd.prototype.a;
    Y.prototype.send = Y.prototype.Pa;
    Y.prototype.open = Y.prototype.Oa;
    Y.prototype.close = Y.prototype.close;
    Zb.NO_ERROR = 0;
    Zb.TIMEOUT = 8;
    Zb.HTTP_ERROR = 6;
    $b.COMPLETE = "complete";
    cc.EventType = J;
    J.OPEN = "a";
    J.CLOSE = "b";
    J.ERROR = "c";
    J.MESSAGE = "d";
    D$1.prototype.listen = D$1.prototype.va;
    X.prototype.listenOnce = X.prototype.wa;
    X.prototype.getLastError = X.prototype.Qa;
    X.prototype.getLastErrorCode = X.prototype.ua;
    X.prototype.getStatus = X.prototype.X;
    X.prototype.getResponseJson = X.prototype.Na;
    X.prototype.getResponseText = X.prototype.$;
    X.prototype.send = X.prototype.ba;
    var esm = { createWebChannelTransport: function () { return new Nd; }, ErrorCode: Zb, EventType: $b, WebChannel: cc, XhrIo: X };
    var esm_1 = esm.createWebChannelTransport;
    var esm_2 = esm.ErrorCode;
    var esm_3 = esm.EventType;
    var esm_4 = esm.WebChannel;
    var esm_5 = esm.XhrIo;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var b = new Logger("@firebase/firestore");

    // Helper methods are needed because variables can't be exported as read/write
    function I$1() {
        return b.logLevel;
    }

    function E$1(t) {
        for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
        if (b.logLevel <= LogLevel.DEBUG) {
            var i = e.map(_);
            b.debug.apply(b, __spreadArrays([ "Firestore (7.19.0): " + t ], i));
        }
    }

    function T$2(t) {
        for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
        if (b.logLevel <= LogLevel.ERROR) {
            var i = e.map(_);
            b.error.apply(b, __spreadArrays([ "Firestore (7.19.0): " + t ], i));
        }
    }

    function N$1(t) {
        for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
        if (b.logLevel <= LogLevel.WARN) {
            var i = e.map(_);
            b.warn.apply(b, __spreadArrays([ "Firestore (7.19.0): " + t ], i));
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function _(t) {
        if ("string" == typeof t) return t;
        try {
            return e = t, JSON.stringify(e);
        } catch (e) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */    var e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function A$2(t) {
        void 0 === t && (t = "Unexpected state");
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
            var e = "FIRESTORE (7.19.0) INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
            throw T$2(e), new Error(e)
        /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */;
    }

    function S$2(t, e) {
        t || A$2();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function D$2(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */ function k$1(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        var e = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
        if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
        // Falls back to Math.random
        for (var r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
        return n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var x$1 = /** @class */ function() {
        function t() {}
        return t.t = function() {
            for (
            // Alphanumeric characters
            var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length, n = ""
            // The largest byte value that is a multiple of `char.length`.
            ; n.length < 20; ) for (var r = k$1(40), i = 0; i < r.length; ++i) 
            // Only accept values that are [0, maxMultiple), this ensures they can
            // be evenly mapped to indices of `chars` via a modulo operation.
            n.length < 20 && r[i] < e && (n += t.charAt(r[i] % t.length));
            return n;
        }, t;
    }();

    function L$1(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function P$1(t, e, n) {
        return t.length === e.length && t.every((function(t, r) {
            return n(t, e[r]);
        }));
    }

    /**
     * Returns the immediate lexicographically-following string. This is useful to
     * construct an inclusive range for indexeddb iterators.
     */ function R$1(t) {
        // Return the input string, with an additional NUL byte appended.
        return t + "\0";
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var O$1 = 
    /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId The database to use.
         * @param persistenceKey A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host The Firestore backend host to connect to.
         * @param ssl Whether to use SSL when connecting.
         * @param forceLongPolling Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         */
    function(t, e, n, r, i) {
        this.s = t, this.persistenceKey = e, this.host = n, this.ssl = r, this.forceLongPolling = i;
    }, V$1 = /** @class */ function() {
        function t(t, e) {
            this.projectId = t, this.database = e || "(default)";
        }
        return Object.defineProperty(t.prototype, "i", {
            get: function() {
                return "(default)" === this.database;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(e) {
            return e instanceof t && e.projectId === this.projectId && e.database === this.database;
        }, t.prototype.o = function(t) {
            return L$1(this.projectId, t.projectId) || L$1(this.database, t.database);
        }, t;
    }();

    /** The default database name for a project. */
    /** Represents the database ID a Firestore client is associated with. */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function U$1(t) {
        var e = 0;
        for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
        return e;
    }

    function C$1(t, e) {
        for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }

    function q$1(t) {
        for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A map implementation that uses objects as keys. Objects must have an
     * associated equals function and must be immutable. Entries in the map are
     * stored together with the key being produced from the mapKeyFn. This map
     * automatically handles collisions of keys.
     */ var M$1 = /** @class */ function() {
        function t(t, e) {
            this.h = t, this.u = e, 
            /**
                 * The inner map for a key -> value pair. Due to the possibility of
                 * collisions we keep a list of entries that we do a linear search through
                 * to find an actual match. Note that collisions should be rare, so we still
                 * expect near constant time lookups in practice.
                 */
            this.l = {}
            /** Get a value for this key, or undefined if it does not exist. */;
        }
        return t.prototype.get = function(t) {
            var e = this.h(t), n = this.l[e];
            if (void 0 !== n) for (var r = 0, i = n; r < i.length; r++) {
                var o = i[r], s = o[0], u = o[1];
                if (this.u(s, t)) return u;
            }
        }, t.prototype.has = function(t) {
            return void 0 !== this.get(t);
        }, 
        /** Put this key and value in the map. */ t.prototype.set = function(t, e) {
            var n = this.h(t), r = this.l[n];
            if (void 0 !== r) {
                for (var i = 0; i < r.length; i++) if (this.u(r[i][0], t)) return void (r[i] = [ t, e ]);
                r.push([ t, e ]);
            } else this.l[n] = [ [ t, e ] ];
        }, 
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */
        t.prototype.delete = function(t) {
            var e = this.h(t), n = this.l[e];
            if (void 0 === n) return !1;
            for (var r = 0; r < n.length; r++) if (this.u(n[r][0], t)) return 1 === n.length ? delete this.l[e] : n.splice(r, 1), 
            !0;
            return !1;
        }, t.prototype.forEach = function(t) {
            C$1(this.l, (function(e, n) {
                for (var r = 0, i = n; r < i.length; r++) {
                    var o = i[r], s = o[0], u = o[1];
                    t(s, u);
                }
            }));
        }, t.prototype._ = function() {
            return q$1(this.l);
        }, t;
    }(), F$1 = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    }, G$1 = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, n) || this).code = t, r.message = n, r.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            r.toString = function() {
                return r.name + ": [code=" + r.code + "]: " + r.message;
            }, r;
        }
        return __extends(n, e), n;
    }(Error), j = /** @class */ function() {
        function t(t, e) {
            if (this.seconds = t, this.nanoseconds = e, e < 0) throw new G$1(F$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (e >= 1e9) throw new G$1(F$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (t < -62135596800) throw new G$1(F$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new G$1(F$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        return t.now = function() {
            return t.fromMillis(Date.now());
        }, t.fromDate = function(e) {
            return t.fromMillis(e.getTime());
        }, t.fromMillis = function(e) {
            var n = Math.floor(e / 1e3);
            return new t(n, 1e6 * (e - 1e3 * n));
        }, t.prototype.toDate = function() {
            return new Date(this.toMillis());
        }, t.prototype.toMillis = function() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }, t.prototype.T = function(t) {
            return this.seconds === t.seconds ? L$1(this.nanoseconds, t.nanoseconds) : L$1(this.seconds, t.seconds);
        }, t.prototype.isEqual = function(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }, t.prototype.toString = function() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }, t.prototype.toJSON = function() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }, t.prototype.valueOf = function() {
            // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
            // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
            // with zeroes to be a consistent length. Strings with this format then have a lexiographical
            // ordering that matches the expected ordering. The <seconds> translation is done to avoid
            // having a leading negative sign (i.e. a leading '-' character) in its string representation,
            // which would affect its lexiographical ordering.
            var t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }, t;
    }(), B = /** @class */ function() {
        function t(t) {
            this.timestamp = t;
        }
        return t.m = function(e) {
            return new t(e);
        }, t.min = function() {
            return new t(new j(0, 0));
        }, t.prototype.o = function(t) {
            return this.timestamp.T(t.timestamp);
        }, t.prototype.isEqual = function(t) {
            return this.timestamp.isEqual(t.timestamp);
        }, 
        /** Returns a number representation of the version for use in spec tests. */ t.prototype.I = function() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }, t.prototype.toString = function() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }, t.prototype.A = function() {
            return this.timestamp;
        }, t;
    }(), z = /** @class */ function() {
        function t(t, e, n) {
            void 0 === e ? e = 0 : e > t.length && A$2(), void 0 === n ? n = t.length - e : n > t.length - e && A$2(), 
            this.segments = t, this.offset = e, this.R = n;
        }
        return Object.defineProperty(t.prototype, "length", {
            get: function() {
                return this.R;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(e) {
            return 0 === t.P(this, e);
        }, t.prototype.child = function(e) {
            var n = this.segments.slice(this.offset, this.limit());
            return e instanceof t ? e.forEach((function(t) {
                n.push(t);
            })) : n.push(e), this.g(n);
        }, 
        /** The index of one past the last segment of the path. */ t.prototype.limit = function() {
            return this.offset + this.length;
        }, t.prototype.V = function(t) {
            return t = void 0 === t ? 1 : t, this.g(this.segments, this.offset + t, this.length - t);
        }, t.prototype.p = function() {
            return this.g(this.segments, this.offset, this.length - 1);
        }, t.prototype.v = function() {
            return this.segments[this.offset];
        }, t.prototype.S = function() {
            return this.get(this.length - 1);
        }, t.prototype.get = function(t) {
            return this.segments[this.offset + t];
        }, t.prototype._ = function() {
            return 0 === this.length;
        }, t.prototype.D = function(t) {
            if (t.length < this.length) return !1;
            for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }, t.prototype.C = function(t) {
            if (this.length + 1 !== t.length) return !1;
            for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }, t.prototype.forEach = function(t) {
            for (var e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
        }, t.prototype.N = function() {
            return this.segments.slice(this.offset, this.limit());
        }, t.P = function(t, e) {
            for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
                var i = t.get(r), o = e.get(r);
                if (i < o) return -1;
                if (i > o) return 1;
            }
            return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
        }, t;
    }(), Q$1 = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends(n, e), n.prototype.g = function(t, e, r) {
            return new n(t, e, r);
        }, n.prototype.F = function() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.N().join("/");
        }, n.prototype.toString = function() {
            return this.F();
        }, 
        /**
         * Creates a resource path from the given slash-delimited string.
         */
        n.k = function(t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            if (t.indexOf("//") >= 0) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid path (" + t + "). Paths must not contain // in them.");
            // We may still have an empty segment at the beginning or end if they had a
            // leading or trailing slash (which we allow).
                    return new n(t.split("/").filter((function(t) {
                return t.length > 0;
            })));
        }, n.$ = function() {
            return new n([]);
        }, n;
    }(z), W$1 = /^[_a-zA-Z][_a-zA-Z0-9]*$/, H$1 = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends(n, e), n.prototype.g = function(t, e, r) {
            return new n(t, e, r);
        }, 
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */
        n.O = function(t) {
            return W$1.test(t);
        }, n.prototype.F = function() {
            return this.N().map((function(t) {
                return t = t.replace("\\", "\\\\").replace("`", "\\`"), n.O(t) || (t = "`" + t + "`"), 
                t;
            })).join(".");
        }, n.prototype.toString = function() {
            return this.F();
        }, 
        /**
         * Returns true if this field references the key of a document.
         */
        n.prototype.M = function() {
            return 1 === this.length && "__name__" === this.get(0);
        }, 
        /**
         * The field designating the key of a document.
         */
        n.L = function() {
            return new n([ "__name__" ]);
        }, 
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */
        n.q = function(t) {
            for (var e = [], r = "", i = 0, o = function() {
                if (0 === r.length) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
                e.push(r), r = "";
            }, s = !1; i < t.length; ) {
                var u = t[i];
                if ("\\" === u) {
                    if (i + 1 === t.length) throw new G$1(F$1.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    var a = t[i + 1];
                    if ("\\" !== a && "." !== a && "`" !== a) throw new G$1(F$1.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    r += a, i += 2;
                } else "`" === u ? (s = !s, i++) : "." !== u || s ? (r += u, i++) : (o(), i++);
            }
            if (o(), s) throw new G$1(F$1.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new n(e);
        }, n.$ = function() {
            return new n([]);
        }, n;
    }(z), K$1 = /** @class */ function() {
        function t(t) {
            this.path = t;
        }
        return t.B = function(e) {
            return new t(Q$1.k(e));
        }, t.U = function(e) {
            return new t(Q$1.k(e).V(5));
        }, 
        /** Returns true if the document is in the specified collectionId. */ t.prototype.W = function(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }, t.prototype.isEqual = function(t) {
            return null !== t && 0 === Q$1.P(this.path, t.path);
        }, t.prototype.toString = function() {
            return this.path.toString();
        }, t.P = function(t, e) {
            return Q$1.P(t.path, e.path);
        }, t.j = function(t) {
            return t.length % 2 == 0;
        }, 
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments The segments of the path to the document
         * @return A new instance of DocumentKey
         */
        t.K = function(e) {
            return new t(new Q$1(e.slice()));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns whether a variable is either undefined or null.
     */
    function Y$1(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function Z$1(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return -0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value The value to test for being an integer and in the safe range
     */ function X$1(t) {
        return "number" == typeof t && Number.isInteger(t) && !Z$1(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    var $ = function(t, e, n, r, i, o, s) {
        void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), 
        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = i, 
        this.startAt = o, this.endAt = s, this.G = null;
    };

    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */ function J$1(t, e, n, r, i, o, s) {
        return void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
        void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), 
        new $(t, e, n, r, i, o, s);
    }

    function tt(t) {
        var e = D$2(t);
        if (null === e.G) {
            var n = e.path.F();
            null !== e.collectionGroup && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map((function(t) {
                return function(t) {
                    // TODO(b/29183165): Technically, this won't be unique if two values have
                    // the same description, such as the int 3 and the string "3". So we should
                    // add the types in here somehow, too.
                    return t.field.F() + t.op.toString() + Qt(t.value);
                }(t);
            })).join(","), n += "|ob:", n += e.orderBy.map((function(t) {
                return (e = t).field.F() + e.dir;
                var e;
            })).join(","), Y$1(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", 
            n += jn(e.startAt)), e.endAt && (n += "|ub:", n += jn(e.endAt)), e.G = n;
        }
        return e.G;
    }

    function et(t, e) {
        if (t.limit !== e.limit) return !1;
        if (t.orderBy.length !== e.orderBy.length) return !1;
        for (var n = 0; n < t.orderBy.length; n++) if (!Hn(t.orderBy[n], e.orderBy[n])) return !1;
        if (t.filters.length !== e.filters.length) return !1;
        for (var r = 0; r < t.filters.length; r++) if (i = t.filters[r], o = e.filters[r], 
        i.op !== o.op || !i.field.isEqual(o.field) || !Gt(i.value, o.value)) return !1;
        var i, o;
        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!zn(t.startAt, e.startAt) && zn(t.endAt, e.endAt);
    }

    function nt(t) {
        return K$1.j(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Converts a Base64 encoded string to a binary string. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     */ var rt = /** @class */ function() {
        function t(t) {
            this.H = t;
        }
        return t.fromBase64String = function(e) {
            return new t(atob(e));
        }, t.fromUint8Array = function(e) {
            return new t(
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                for (var e = "", n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
                return e;
            }(e));
        }, t.prototype.toBase64 = function() {
            return t = this.H, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */        var t;
            /** True if and only if the Base64 conversion functions are available. */    }, 
        t.prototype.toUint8Array = function() {
            return function(t) {
                for (var e = new Uint8Array(t.length), n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
                return e;
            }(this.H);
        }, t.prototype.Y = function() {
            return 2 * this.H.length;
        }, t.prototype.o = function(t) {
            return L$1(this.H, t.H);
        }, t.prototype.isEqual = function(t) {
            return this.H === t.H;
        }, t;
    }();

    rt.J = new rt("");

    var it, ot, st = /** @class */ function() {
        function t(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        e, 
        /** The purpose of the target. */
        n, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        r, 
        /** The latest snapshot version seen for this target. */
        i
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */ , o
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */ , s) {
            void 0 === i && (i = B.min()), void 0 === o && (o = B.min()), void 0 === s && (s = rt.J), 
            this.target = t, this.targetId = e, this.X = n, this.sequenceNumber = r, this.Z = i, 
            this.lastLimboFreeSnapshotVersion = o, this.resumeToken = s;
        }
        /** Creates a new target data instance with an updated sequence number. */    return t.prototype.tt = function(e) {
            return new t(this.target, this.targetId, this.X, e, this.Z, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }, 
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */
        t.prototype.et = function(e, n) {
            return new t(this.target, this.targetId, this.X, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e);
        }, 
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */
        t.prototype.nt = function(e) {
            return new t(this.target, this.targetId, this.X, this.sequenceNumber, this.Z, e, this.resumeToken);
        }, t;
    }(), ut = 
    // TODO(b/33078163): just use simplest form of existence filter for now
    function(t) {
        this.count = t;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function at(t) {
        switch (t) {
          case F$1.OK:
            return A$2();

          case F$1.CANCELLED:
          case F$1.UNKNOWN:
          case F$1.DEADLINE_EXCEEDED:
          case F$1.RESOURCE_EXHAUSTED:
          case F$1.INTERNAL:
          case F$1.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case F$1.UNAUTHENTICATED:
            return !1;

          case F$1.INVALID_ARGUMENT:
          case F$1.NOT_FOUND:
          case F$1.ALREADY_EXISTS:
          case F$1.PERMISSION_DENIED:
          case F$1.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case F$1.ABORTED:
          case F$1.OUT_OF_RANGE:
          case F$1.UNIMPLEMENTED:
          case F$1.DATA_LOSS:
            return !0;

          default:
            return A$2();
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */ function ct(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return T$2("GRPC error has no .code"), F$1.UNKNOWN;
        switch (t) {
          case it.OK:
            return F$1.OK;

          case it.CANCELLED:
            return F$1.CANCELLED;

          case it.UNKNOWN:
            return F$1.UNKNOWN;

          case it.DEADLINE_EXCEEDED:
            return F$1.DEADLINE_EXCEEDED;

          case it.RESOURCE_EXHAUSTED:
            return F$1.RESOURCE_EXHAUSTED;

          case it.INTERNAL:
            return F$1.INTERNAL;

          case it.UNAVAILABLE:
            return F$1.UNAVAILABLE;

          case it.UNAUTHENTICATED:
            return F$1.UNAUTHENTICATED;

          case it.INVALID_ARGUMENT:
            return F$1.INVALID_ARGUMENT;

          case it.NOT_FOUND:
            return F$1.NOT_FOUND;

          case it.ALREADY_EXISTS:
            return F$1.ALREADY_EXISTS;

          case it.PERMISSION_DENIED:
            return F$1.PERMISSION_DENIED;

          case it.FAILED_PRECONDITION:
            return F$1.FAILED_PRECONDITION;

          case it.ABORTED:
            return F$1.ABORTED;

          case it.OUT_OF_RANGE:
            return F$1.OUT_OF_RANGE;

          case it.UNIMPLEMENTED:
            return F$1.UNIMPLEMENTED;

          case it.DATA_LOSS:
            return F$1.DATA_LOSS;

          default:
            return A$2();
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (ot = it || (it = {}))[ot.OK = 0] = "OK", ot[ot.CANCELLED = 1] = "CANCELLED", 
    ot[ot.UNKNOWN = 2] = "UNKNOWN", ot[ot.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    ot[ot.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ot[ot.NOT_FOUND = 5] = "NOT_FOUND", 
    ot[ot.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ot[ot.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    ot[ot.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ot[ot.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    ot[ot.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ot[ot.ABORTED = 10] = "ABORTED", 
    ot[ot.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ot[ot.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    ot[ot.INTERNAL = 13] = "INTERNAL", ot[ot.UNAVAILABLE = 14] = "UNAVAILABLE", ot[ot.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // An immutable sorted map implementation, based on a Left-leaning Red-Black
    // tree.
    var ht = /** @class */ function() {
        function t(t, e) {
            this.P = t, this.root = e || lt.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
            return t.prototype.st = function(e, n) {
            return new t(this.P, this.root.st(e, n, this.P).copy(null, null, lt.it, null, null));
        }, 
        // Returns a copy of the map, with the specified key removed.
        t.prototype.remove = function(e) {
            return new t(this.P, this.root.remove(e, this.P).copy(null, null, lt.it, null, null));
        }, 
        // Returns the value of the node with the given key, or null.
        t.prototype.get = function(t) {
            for (var e = this.root; !e._(); ) {
                var n = this.P(t, e.key);
                if (0 === n) return e.value;
                n < 0 ? e = e.left : n > 0 && (e = e.right);
            }
            return null;
        }, 
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        t.prototype.indexOf = function(t) {
            for (
            // Number of nodes that were pruned when descending right
            var e = 0, n = this.root; !n._(); ) {
                var r = this.P(t, n.key);
                if (0 === r) return e + n.left.size;
                r < 0 ? n = n.left : (
                // Count all nodes left of the node plus the node itself
                e += n.left.size + 1, n = n.right);
            }
            // Node not found
                    return -1;
        }, t.prototype._ = function() {
            return this.root._();
        }, Object.defineProperty(t.prototype, "size", {
            // Returns the total number of nodes in the map.
            get: function() {
                return this.root.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Returns the minimum key in the map.
        t.prototype.rt = function() {
            return this.root.rt();
        }, 
        // Returns the maximum key in the map.
        t.prototype.ot = function() {
            return this.root.ot();
        }, 
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.ht = function(t) {
            return this.root.ht(t);
        }, t.prototype.forEach = function(t) {
            this.ht((function(e, n) {
                return t(e, n), !1;
            }));
        }, t.prototype.toString = function() {
            var t = [];
            return this.ht((function(e, n) {
                return t.push(e + ":" + n), !1;
            })), "{" + t.join(", ") + "}";
        }, 
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.at = function(t) {
            return this.root.at(t);
        }, 
        // Returns an iterator over the SortedMap.
        t.prototype.ct = function() {
            return new ft(this.root, null, this.P, !1);
        }, t.prototype.ut = function(t) {
            return new ft(this.root, t, this.P, !1);
        }, t.prototype.lt = function() {
            return new ft(this.root, null, this.P, !0);
        }, t.prototype._t = function(t) {
            return new ft(this.root, t, this.P, !0);
        }, t;
    }(), ft = /** @class */ function() {
        function t(t, e, n, r) {
            this.ft = r, this.dt = [];
            for (var i = 1; !t._(); ) if (i = e ? n(t.key, e) : 1, 
            // flip the comparison if we're going in reverse
            r && (i *= -1), i < 0) 
            // This node is less than our start key. ignore it
            t = this.ft ? t.left : t.right; else {
                if (0 === i) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.dt.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                            this.dt.push(t), t = this.ft ? t.right : t.left;
            }
        }
        return t.prototype.wt = function() {
            var t = this.dt.pop(), e = {
                key: t.key,
                value: t.value
            };
            if (this.ft) for (t = t.left; !t._(); ) this.dt.push(t), t = t.right; else for (t = t.right; !t._(); ) this.dt.push(t), 
            t = t.left;
            return e;
        }, t.prototype.Tt = function() {
            return this.dt.length > 0;
        }, t.prototype.Et = function() {
            if (0 === this.dt.length) return null;
            var t = this.dt[this.dt.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }, t;
    }(), lt = /** @class */ function() {
        function t(e, n, r, i, o) {
            this.key = e, this.value = n, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, 
            this.right = null != o ? o : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
            return t.prototype.copy = function(e, n, r, i, o) {
            return new t(null != e ? e : this.key, null != n ? n : this.value, null != r ? r : this.color, null != i ? i : this.left, null != o ? o : this.right);
        }, t.prototype._ = function() {
            return !1;
        }, 
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.ht = function(t) {
            return this.left.ht(t) || t(this.key, this.value) || this.right.ht(t);
        }, 
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.at = function(t) {
            return this.right.at(t) || t(this.key, this.value) || this.left.at(t);
        }, 
        // Returns the minimum node in the tree.
        t.prototype.min = function() {
            return this.left._() ? this : this.left.min();
        }, 
        // Returns the maximum key in the tree.
        t.prototype.rt = function() {
            return this.min().key;
        }, 
        // Returns the maximum key in the tree.
        t.prototype.ot = function() {
            return this.right._() ? this.key : this.right.ot();
        }, 
        // Returns new tree, with the key/value added.
        t.prototype.st = function(t, e, n) {
            var r = this, i = n(t, r.key);
            return (r = i < 0 ? r.copy(null, null, null, r.left.st(t, e, n), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.st(t, e, n))).It();
        }, t.prototype.At = function() {
            if (this.left._()) return t.EMPTY;
            var e = this;
            return e.left.Rt() || e.left.left.Rt() || (e = e.Pt()), (e = e.copy(null, null, null, e.left.At(), null)).It();
        }, 
        // Returns new tree, with the specified item removed.
        t.prototype.remove = function(e, n) {
            var r, i = this;
            if (n(e, i.key) < 0) i.left._() || i.left.Rt() || i.left.left.Rt() || (i = i.Pt()), 
            i = i.copy(null, null, null, i.left.remove(e, n), null); else {
                if (i.left.Rt() && (i = i.gt()), i.right._() || i.right.Rt() || i.right.left.Rt() || (i = i.Vt()), 
                0 === n(e, i.key)) {
                    if (i.right._()) return t.EMPTY;
                    r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.At());
                }
                i = i.copy(null, null, null, null, i.right.remove(e, n));
            }
            return i.It();
        }, t.prototype.Rt = function() {
            return this.color;
        }, 
        // Returns new tree after performing any needed rotations.
        t.prototype.It = function() {
            var t = this;
            return t.right.Rt() && !t.left.Rt() && (t = t.yt()), t.left.Rt() && t.left.left.Rt() && (t = t.gt()), 
            t.left.Rt() && t.right.Rt() && (t = t.pt()), t;
        }, t.prototype.Pt = function() {
            var t = this.pt();
            return t.right.left.Rt() && (t = (t = (t = t.copy(null, null, null, null, t.right.gt())).yt()).pt()), 
            t;
        }, t.prototype.Vt = function() {
            var t = this.pt();
            return t.left.left.Rt() && (t = (t = t.gt()).pt()), t;
        }, t.prototype.yt = function() {
            var e = this.copy(null, null, t.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, e, null);
        }, t.prototype.gt = function() {
            var e = this.copy(null, null, t.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, e);
        }, t.prototype.pt = function() {
            var t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, e);
        }, 
        // For testing.
        t.prototype.bt = function() {
            var t = this.vt();
            return Math.pow(2, t) <= this.size + 1;
        }, 
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        t.prototype.vt = function() {
            if (this.Rt() && this.left.Rt()) throw A$2();
            if (this.right.Rt()) throw A$2();
            var t = this.left.vt();
            if (t !== this.right.vt()) throw A$2();
            return t + (this.Rt() ? 0 : 1);
        }, t;
    }();

    // end SortedMap
    // An iterator over an LLRBNode.
    // end LLRBNode
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    lt.EMPTY = null, lt.RED = !0, lt.it = !1, 
    // end LLRBEmptyNode
    lt.EMPTY = new (/** @class */ function() {
        function t() {
            this.size = 0;
        }
        return Object.defineProperty(t.prototype, "key", {
            get: function() {
                throw A$2();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "value", {
            get: function() {
                throw A$2();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "color", {
            get: function() {
                throw A$2();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "left", {
            get: function() {
                throw A$2();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "right", {
            get: function() {
                throw A$2();
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Returns a copy of the current node.
        t.prototype.copy = function(t, e, n, r, i) {
            return this;
        }, 
        // Returns a copy of the tree, with the specified key/value added.
        t.prototype.st = function(t, e, n) {
            return new lt(t, e);
        }, 
        // Returns a copy of the tree, with the specified key removed.
        t.prototype.remove = function(t, e) {
            return this;
        }, t.prototype._ = function() {
            return !0;
        }, t.prototype.ht = function(t) {
            return !1;
        }, t.prototype.at = function(t) {
            return !1;
        }, t.prototype.rt = function() {
            return null;
        }, t.prototype.ot = function() {
            return null;
        }, t.prototype.Rt = function() {
            return !1;
        }, 
        // For testing.
        t.prototype.bt = function() {
            return !0;
        }, t.prototype.vt = function() {
            return 0;
        }, t;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    var pt = /** @class */ function() {
        function t(t) {
            this.P = t, this.data = new ht(this.P);
        }
        return t.prototype.has = function(t) {
            return null !== this.data.get(t);
        }, t.prototype.first = function() {
            return this.data.rt();
        }, t.prototype.last = function() {
            return this.data.ot();
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.data.size;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.indexOf = function(t) {
            return this.data.indexOf(t);
        }, 
        /** Iterates elements in order defined by "comparator" */ t.prototype.forEach = function(t) {
            this.data.ht((function(e, n) {
                return t(e), !1;
            }));
        }, 
        /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */ t.prototype.St = function(t, e) {
            for (var n = this.data.ut(t[0]); n.Tt(); ) {
                var r = n.wt();
                if (this.P(r.key, t[1]) >= 0) return;
                e(r.key);
            }
        }, 
        /**
         * Iterates over `elem`s such that: start <= elem until false is returned.
         */
        t.prototype.Dt = function(t, e) {
            var n;
            for (n = void 0 !== e ? this.data.ut(e) : this.data.ct(); n.Tt(); ) if (!t(n.wt().key)) return;
        }, 
        /** Finds the least element greater than or equal to `elem`. */ t.prototype.Ct = function(t) {
            var e = this.data.ut(t);
            return e.Tt() ? e.wt().key : null;
        }, t.prototype.ct = function() {
            return new dt(this.data.ct());
        }, t.prototype.ut = function(t) {
            return new dt(this.data.ut(t));
        }, 
        /** Inserts or updates an element */ t.prototype.add = function(t) {
            return this.copy(this.data.remove(t).st(t, !0));
        }, 
        /** Deletes an element */ t.prototype.delete = function(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }, t.prototype._ = function() {
            return this.data._();
        }, t.prototype.Nt = function(t) {
            var e = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return e.size < t.size && (e = t, t = this), t.forEach((function(t) {
                e = e.add(t);
            })), e;
        }, t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) return !1;
            if (this.size !== e.size) return !1;
            for (var n = this.data.ct(), r = e.data.ct(); n.Tt(); ) {
                var i = n.wt().key, o = r.wt().key;
                if (0 !== this.P(i, o)) return !1;
            }
            return !0;
        }, t.prototype.N = function() {
            var t = [];
            return this.forEach((function(e) {
                t.push(e);
            })), t;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(e) {
                return t.push(e);
            })), "SortedSet(" + t.toString() + ")";
        }, t.prototype.copy = function(e) {
            var n = new t(this.P);
            return n.data = e, n;
        }, t;
    }(), dt = /** @class */ function() {
        function t(t) {
            this.Ft = t;
        }
        return t.prototype.wt = function() {
            return this.Ft.wt().key;
        }, t.prototype.Tt = function() {
            return this.Ft.Tt();
        }, t;
    }(), yt = new ht(K$1.P);

    function vt() {
        return yt;
    }

    function gt() {
        return vt();
    }

    var mt = new ht(K$1.P);

    function wt() {
        return mt;
    }

    var bt = new ht(K$1.P), It = new pt(K$1.P);

    function Et() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        for (var n = It, r = 0, i = t; r < i.length; r++) {
            var o = i[r];
            n = n.add(o);
        }
        return n;
    }

    var Tt = new pt(L$1);

    function Nt() {
        return Tt;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ var _t = /** @class */ function() {
        /** The default ordering is by key if the comparator is omitted */
        function t(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.P = t ? function(e, n) {
                return t(e, n) || K$1.P(e.key, n.key);
            } : function(t, e) {
                return K$1.P(t.key, e.key);
            }, this.kt = wt(), this.$t = new ht(this.P)
            /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */;
        }
        return t.xt = function(e) {
            return new t(e.P);
        }, t.prototype.has = function(t) {
            return null != this.kt.get(t);
        }, t.prototype.get = function(t) {
            return this.kt.get(t);
        }, t.prototype.first = function() {
            return this.$t.rt();
        }, t.prototype.last = function() {
            return this.$t.ot();
        }, t.prototype._ = function() {
            return this.$t._();
        }, 
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */
        t.prototype.indexOf = function(t) {
            var e = this.kt.get(t);
            return e ? this.$t.indexOf(e) : -1;
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.$t.size;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /** Iterates documents in order defined by "comparator" */ t.prototype.forEach = function(t) {
            this.$t.ht((function(e, n) {
                return t(e), !1;
            }));
        }, 
        /** Inserts or updates a document with the same key */ t.prototype.add = function(t) {
            // First remove the element if we have it.
            var e = this.delete(t.key);
            return e.copy(e.kt.st(t.key, t), e.$t.st(t, null));
        }, 
        /** Deletes a document with a given key */ t.prototype.delete = function(t) {
            var e = this.get(t);
            return e ? this.copy(this.kt.remove(t), this.$t.remove(e)) : this;
        }, t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) return !1;
            if (this.size !== e.size) return !1;
            for (var n = this.$t.ct(), r = e.$t.ct(); n.Tt(); ) {
                var i = n.wt().key, o = r.wt().key;
                if (!i.isEqual(o)) return !1;
            }
            return !0;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(e) {
                t.push(e.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }, t.prototype.copy = function(e, n) {
            var r = new t;
            return r.P = this.P, r.kt = e, r.$t = n, r;
        }, t;
    }(), At = /** @class */ function() {
        function t() {
            this.Ot = new ht(K$1.P);
        }
        return t.prototype.track = function(t) {
            var e = t.doc.key, n = this.Ot.get(e);
            n ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.Ot = this.Ot.st(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.Ot = this.Ot.st(e, {
                type: n.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.Ot = this.Ot.st(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.Ot = this.Ot.st(e, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.Ot = this.Ot.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.Ot = this.Ot.st(e, {
                type: 1 /* Removed */ ,
                doc: n.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.Ot = this.Ot.st(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            A$2() : this.Ot = this.Ot.st(e, t);
        }, t.prototype.Mt = function() {
            var t = [];
            return this.Ot.ht((function(e, n) {
                t.push(n);
            })), t;
        }, t;
    }(), St = /** @class */ function() {
        function t(t, e, n, r, i, o, s, u) {
            this.query = t, this.docs = e, this.Lt = n, this.docChanges = r, this.qt = i, this.fromCache = o, 
            this.Bt = s, this.Ut = u
            /** Returns a view snapshot as if all documents in the snapshot were added. */;
        }
        return t.Qt = function(e, n, r, i) {
            var o = [];
            return n.forEach((function(t) {
                o.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new t(e, n, _t.xt(n), o, r, i, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }, Object.defineProperty(t.prototype, "hasPendingWrites", {
            get: function() {
                return !this.qt._();
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            if (!(this.fromCache === t.fromCache && this.Bt === t.Bt && this.qt.isEqual(t.qt) && Sn(this.query, t.query) && this.docs.isEqual(t.docs) && this.Lt.isEqual(t.Lt))) return !1;
            var e = this.docChanges, n = t.docChanges;
            if (e.length !== n.length) return !1;
            for (var r = 0; r < e.length; r++) if (e[r].type !== n[r].type || !e[r].doc.isEqual(n[r].doc)) return !1;
            return !0;
        }, t;
    }(), Dt = /** @class */ function() {
        function t(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        e, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        n, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        r, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        i) {
            this.Z = t, this.Wt = e, this.jt = n, this.Kt = r, this.Gt = i;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
            return t.zt = function(e, n) {
            var r = new Map;
            return r.set(e, kt.Ht(e, n)), new t(B.min(), r, Nt(), vt(), Et());
        }, t;
    }(), kt = /** @class */ function() {
        function t(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        e, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        n, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        r, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        i) {
            this.resumeToken = t, this.Yt = e, this.Jt = n, this.Xt = r, this.Zt = i
            /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */;
        }
        return t.Ht = function(e, n) {
            return new t(rt.J, n, Et(), Et(), Et());
        }, t;
    }(), xt = function(
    /** The new document applies to all of these targets. */
    t, 
    /** The new document is removed from all of these targets. */
    e, 
    /** The key of the document for this change. */
    n, 
    /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
    r) {
        this.te = t, this.removedTargetIds = e, this.key = n, this.ee = r;
    }, Lt = function(t, e) {
        this.targetId = t, this.ne = e;
    }, Pt = function(
    /** What kind of change occurred to the watch target. */
    t, 
    /** The target IDs that were added/removed/set. */
    e, 
    /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
    n
    /** An RPC error indicating why the watch failed. */ , r) {
        void 0 === n && (n = rt.J), void 0 === r && (r = null), this.state = t, this.targetIds = e, 
        this.resumeToken = n, this.cause = r;
    }, Rt = /** @class */ function() {
        function t() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.se = 0, 
            /**
                 * Keeps track of the document changes since the last raised snapshot.
                 *
                 * These changes are continuously updated as we receive document updates and
                 * always reflect the current set of changes against the last issued snapshot.
                 */
            this.ie = Ut(), 
            /** See public getters for explanations of these fields. */
            this.re = rt.J, this.oe = !1, 
            /**
                 * Whether this target state should be included in the next snapshot. We
                 * initialize to true so that newly-added targets are included in the next
                 * RemoteEvent.
                 */
            this.he = !0;
        }
        return Object.defineProperty(t.prototype, "Yt", {
            /**
             * Whether this target has been marked 'current'.
             *
             * 'Current' has special meaning in the RPC protocol: It implies that the
             * Watch backend has sent us all changes up to the point at which the target
             * was added and that the target is consistent with the rest of the watch
             * stream.
             */
            get: function() {
                return this.oe;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "resumeToken", {
            /** The last resume token sent to us for this target. */ get: function() {
                return this.re;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ae", {
            /** Whether this target has pending target adds or target removes. */ get: function() {
                return 0 !== this.se;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ce", {
            /** Whether we have modified any state that should trigger a snapshot. */ get: function() {
                return this.he;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */
        t.prototype.ue = function(t) {
            t.Y() > 0 && (this.he = !0, this.re = t);
        }, 
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */
        t.prototype.le = function() {
            var t = Et(), e = Et(), n = Et();
            return this.ie.forEach((function(r, i) {
                switch (i) {
                  case 0 /* Added */ :
                    t = t.add(r);
                    break;

                  case 2 /* Modified */ :
                    e = e.add(r);
                    break;

                  case 1 /* Removed */ :
                    n = n.add(r);
                    break;

                  default:
                    A$2();
                }
            })), new kt(this.re, this.oe, t, e, n);
        }, 
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */
        t.prototype._e = function() {
            this.he = !1, this.ie = Ut();
        }, t.prototype.fe = function(t, e) {
            this.he = !0, this.ie = this.ie.st(t, e);
        }, t.prototype.de = function(t) {
            this.he = !0, this.ie = this.ie.remove(t);
        }, t.prototype.we = function() {
            this.se += 1;
        }, t.prototype.Te = function() {
            this.se -= 1;
        }, t.prototype.Ee = function() {
            this.he = !0, this.oe = !0;
        }, t;
    }(), Ot = /** @class */ function() {
        function t(t) {
            this.me = t, 
            /** The internal state of all tracked targets. */
            this.Ie = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.Ae = vt(), 
            /** A mapping of document keys to their set of target IDs. */
            this.Re = Vt(), 
            /**
                 * A list of targets with existence filter mismatches. These targets are
                 * known to be inconsistent and their listens needs to be re-established by
                 * RemoteStore.
                 */
            this.Pe = new pt(L$1)
            /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */;
        }
        return t.prototype.ge = function(t) {
            for (var e = 0, n = t.te; e < n.length; e++) {
                var r = n[e];
                t.ee instanceof dn ? this.Ve(r, t.ee) : t.ee instanceof yn && this.ye(r, t.key, t.ee);
            }
            for (var i = 0, o = t.removedTargetIds; i < o.length; i++) {
                var s = o[i];
                this.ye(s, t.key, t.ee);
            }
        }, 
        /** Processes and adds the WatchTargetChange to the current set of changes. */ t.prototype.pe = function(t) {
            var e = this;
            this.be(t, (function(n) {
                var r = e.ve(n);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    e.Se(n) && r.ue(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.Te(), r.ae || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    r._e(), r.ue(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    r.Te(), r.ae || e.removeTarget(n);
                    break;

                  case 3 /* Current */ :
                    e.Se(n) && (r.Ee(), r.ue(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    e.Se(n) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    e.De(n), r.ue(t.resumeToken));
                    break;

                  default:
                    A$2();
                }
            }));
        }, 
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */
        t.prototype.be = function(t, e) {
            var n = this;
            t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.Ie.forEach((function(t, r) {
                n.Se(r) && e(r);
            }));
        }, 
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */
        t.prototype.Ce = function(t) {
            var e = t.targetId, n = t.ne.count, r = this.Ne(e);
            if (r) {
                var i = r.target;
                if (nt(i)) if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    var o = new K$1(i.path);
                    this.ye(e, o, new yn(o, B.min()));
                } else S$2(1 === n); else this.Fe(e) !== n && (
                // Existence filter mismatch: We reset the mapping and raise a new
                // snapshot with `isFromCache:true`.
                this.De(e), this.Pe = this.Pe.add(e));
            }
        }, 
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */
        t.prototype.ke = function(t) {
            var e = this, n = new Map;
            this.Ie.forEach((function(r, i) {
                var o = e.Ne(i);
                if (o) {
                    if (r.Yt && nt(o.target)) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        var s = new K$1(o.target.path);
                        null !== e.Ae.get(s) || e.$e(i, s) || e.ye(i, s, new yn(s, t));
                    }
                    r.ce && (n.set(i, r.le()), r._e());
                }
            }));
            var r = Et();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this.Re.forEach((function(t, n) {
                var i = !0;
                n.Dt((function(t) {
                    var n = e.Ne(t);
                    return !n || 2 /* LimboResolution */ === n.X || (i = !1, !1);
                })), i && (r = r.add(t));
            }));
            var i = new Dt(t, n, this.Pe, this.Ae, r);
            return this.Ae = vt(), this.Re = Vt(), this.Pe = new pt(L$1), i;
        }, 
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        t.prototype.Ve = function(t, e) {
            if (this.Se(t)) {
                var n = this.$e(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
                this.ve(t).fe(e.key, n), this.Ae = this.Ae.st(e.key, e), this.Re = this.Re.st(e.key, this.xe(e.key).add(t));
            }
        }, 
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        t.prototype.ye = function(t, e, n) {
            if (this.Se(t)) {
                var r = this.ve(t);
                this.$e(t, e) ? r.fe(e, 1 /* Removed */) : 
                // The document may have entered and left the target before we raised a
                // snapshot, so we can just ignore the change.
                r.de(e), this.Re = this.Re.st(e, this.xe(e).delete(t)), n && (this.Ae = this.Ae.st(e, n));
            }
        }, t.prototype.removeTarget = function(t) {
            this.Ie.delete(t);
        }, 
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */
        t.prototype.Fe = function(t) {
            var e = this.ve(t).le();
            return this.me.Oe(t).size + e.Jt.size - e.Zt.size;
        }, 
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */
        t.prototype.we = function(t) {
            this.ve(t).we();
        }, t.prototype.ve = function(t) {
            var e = this.Ie.get(t);
            return e || (e = new Rt, this.Ie.set(t, e)), e;
        }, t.prototype.xe = function(t) {
            var e = this.Re.get(t);
            return e || (e = new pt(L$1), this.Re = this.Re.st(t, e)), e;
        }, 
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */
        t.prototype.Se = function(t) {
            var e = null !== this.Ne(t);
            return e || E$1("WatchChangeAggregator", "Detected inactive target", t), e;
        }, 
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */
        t.prototype.Ne = function(t) {
            var e = this.Ie.get(t);
            return e && e.ae ? null : this.me.Me(t);
        }, 
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */
        t.prototype.De = function(t) {
            var e = this;
            this.Ie.set(t, new Rt), this.me.Oe(t).forEach((function(n) {
                e.ye(t, n, /*updatedDocument=*/ null);
            }));
        }, 
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */
        t.prototype.$e = function(t, e) {
            return this.me.Oe(t).has(e);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ function Vt() {
        return new ht(K$1.P);
    }

    function Ut() {
        return new ht(K$1.P);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
     *   the local view of a document. Therefore they do not need to be parsed or
     *   serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function Ct(t) {
        var e, n;
        return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the local time at which this timestamp was first set.
     */ function qt(t) {
        var e = Wt(t.mapValue.fields.__local_write_time__.timestampValue);
        return new j(e.seconds, e.nanos);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
    var Mt = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /** Extracts the backend's type order for the provided value. */ function Ft(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? Ct(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : A$2();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function Gt(t, e) {
        var n = Ft(t);
        if (n !== Ft(e)) return !1;
        switch (n) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === e.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return qt(t).isEqual(qt(e));

          case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                var n = Wt(t.timestampValue), r = Wt(e.timestampValue);
                return n.seconds === r.seconds && n.nanos === r.nanos;
            }(t, e);

          case 5 /* StringValue */ :
            return t.stringValue === e.stringValue;

          case 6 /* BlobValue */ :
            return function(t, e) {
                return Kt(t.bytesValue).isEqual(Kt(e.bytesValue));
            }(t, e);

          case 7 /* RefValue */ :
            return t.referenceValue === e.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                return Ht(t.geoPointValue.latitude) === Ht(e.geoPointValue.latitude) && Ht(t.geoPointValue.longitude) === Ht(e.geoPointValue.longitude);
            }(t, e);

          case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return Ht(t.integerValue) === Ht(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    var n = Ht(t.doubleValue), r = Ht(e.doubleValue);
                    return n === r ? Z$1(n) === Z$1(r) : isNaN(n) && isNaN(r);
                }
                return !1;
            }(t, e);

          case 9 /* ArrayValue */ :
            return P$1(t.arrayValue.values || [], e.arrayValue.values || [], Gt);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                var n = t.mapValue.fields || {}, r = e.mapValue.fields || {};
                if (U$1(n) !== U$1(r)) return !1;
                for (var i in n) if (n.hasOwnProperty(i) && (void 0 === r[i] || !Gt(n[i], r[i]))) return !1;
                return !0;
            }(t, e);

          default:
            return A$2();
        }
    }

    function jt(t, e) {
        return void 0 !== (t.values || []).find((function(t) {
            return Gt(t, e);
        }));
    }

    function Bt(t, e) {
        var n = Ft(t), r = Ft(e);
        if (n !== r) return L$1(n, r);
        switch (n) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return L$1(t.booleanValue, e.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, e) {
                var n = Ht(t.integerValue || t.doubleValue), r = Ht(e.integerValue || e.doubleValue);
                return n < r ? -1 : n > r ? 1 : n === r ? 0 : 
                // one or both are NaN.
                isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
            }(t, e);

          case 3 /* TimestampValue */ :
            return zt(t.timestampValue, e.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return zt(qt(t), qt(e));

          case 5 /* StringValue */ :
            return L$1(t.stringValue, e.stringValue);

          case 6 /* BlobValue */ :
            return function(t, e) {
                var n = Kt(t), r = Kt(e);
                return n.o(r);
            }(t.bytesValue, e.bytesValue);

          case 7 /* RefValue */ :
            return function(t, e) {
                for (var n = t.split("/"), r = e.split("/"), i = 0; i < n.length && i < r.length; i++) {
                    var o = L$1(n[i], r[i]);
                    if (0 !== o) return o;
                }
                return L$1(n.length, r.length);
            }(t.referenceValue, e.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                var n = L$1(Ht(t.latitude), Ht(e.latitude));
                return 0 !== n ? n : L$1(Ht(t.longitude), Ht(e.longitude));
            }(t.geoPointValue, e.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, e) {
                for (var n = t.values || [], r = e.values || [], i = 0; i < n.length && i < r.length; ++i) {
                    var o = Bt(n[i], r[i]);
                    if (o) return o;
                }
                return L$1(n.length, r.length);
            }(t.arrayValue, e.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                var n = t.fields || {}, r = Object.keys(n), i = e.fields || {}, o = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                            r.sort(), o.sort();
                for (var s = 0; s < r.length && s < o.length; ++s) {
                    var u = L$1(r[s], o[s]);
                    if (0 !== u) return u;
                    var a = Bt(n[r[s]], i[o[s]]);
                    if (0 !== a) return a;
                }
                return L$1(r.length, o.length);
            }(t.mapValue, e.mapValue);

          default:
            throw A$2();
        }
    }

    function zt(t, e) {
        if ("string" == typeof t && "string" == typeof e && t.length === e.length) return L$1(t, e);
        var n = Wt(t), r = Wt(e), i = L$1(n.seconds, r.seconds);
        return 0 !== i ? i : L$1(n.nanos, r.nanos);
    }

    function Qt(t) {
        return function t(e) {
            return "nullValue" in e ? "null" : "booleanValue" in e ? "" + e.booleanValue : "integerValue" in e ? "" + e.integerValue : "doubleValue" in e ? "" + e.doubleValue : "timestampValue" in e ? function(t) {
                var e = Wt(t);
                return "time(" + e.seconds + "," + e.nanos + ")";
            }(e.timestampValue) : "stringValue" in e ? e.stringValue : "bytesValue" in e ? Kt(e.bytesValue).toBase64() : "referenceValue" in e ? (r = e.referenceValue, 
            K$1.U(r).toString()) : "geoPointValue" in e ? "geo(" + (n = e.geoPointValue).latitude + "," + n.longitude + ")" : "arrayValue" in e ? function(e) {
                for (var n = "[", r = !0, i = 0, o = e.values || []; i < o.length; i++) {
                    var s = o[i];
                    r ? r = !1 : n += ",", n += t(s);
                }
                return n + "]";
            }(e.arrayValue) : "mapValue" in e ? function(e) {
                for (
                // Iteration order in JavaScript is not guaranteed. To ensure that we generate
                // matching canonical IDs for identical maps, we need to sort the keys.
                var n = "{", r = !0, i = 0, o = Object.keys(e.fields || {}).sort(); i < o.length; i++) {
                    var s = o[i];
                    r ? r = !1 : n += ",", n += s + ":" + t(e.fields[s]);
                }
                return n + "}";
            }(e.mapValue) : A$2();
            var n, r;
        }(t);
    }

    function Wt(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (S$2(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            var e = 0, n = Mt.exec(t);
            if (S$2(!!n), n[1]) {
                // Pad the fraction out to 9 digits (nanos).
                var r = n[1];
                r = (r + "000000000").substr(0, 9), e = Number(r);
            }
            // Parse the date to get the seconds.
                    var i = new Date(t);
            return {
                seconds: Math.floor(i.getTime() / 1e3),
                nanos: e
            };
        }
        return {
            seconds: Ht(t.seconds),
            nanos: Ht(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function Ht(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function Kt(t) {
        return "string" == typeof t ? rt.fromBase64String(t) : rt.fromUint8Array(t);
    }

    /** Returns a reference value for the provided database and key. */ function Yt(t, e) {
        return {
            referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + e.path.F()
        };
    }

    /** Returns true if `value` is an IntegerValue . */ function Zt(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is an ArrayValue. */ function Xt(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function $t(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function Jt(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function te(t) {
        return !!t && "mapValue" in t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var ee = {
        asc: "ASCENDING",
        desc: "DESCENDING"
    }, ne = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
    }, re = function(t, e) {
        this.s = t, this.Le = e;
    };

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    /**
     * Returns an IntegerValue for `value`.
     */
    function ie(t) {
        return {
            integerValue: "" + t
        };
    }

    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ function oe(t, e) {
        if (t.Le) {
            if (isNaN(e)) return {
                doubleValue: "NaN"
            };
            if (e === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (e === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: Z$1(e) ? "-0" : e
        };
    }

    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */ function se(t, e) {
        return X$1(e) ? ie(e) : oe(t, e);
    }

    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */ function ue(t, e) {
        return t.Le ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
            seconds: "" + e.seconds,
            nanos: e.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */ function ae(t, e) {
        return t.Le ? e.toBase64() : e.toUint8Array();
    }

    /**
     * Returns a ByteString based on the proto string value.
     */ function ce(t, e) {
        return ue(t, e.A());
    }

    function he(t) {
        return S$2(!!t), B.m(function(t) {
            var e = Wt(t);
            return new j(e.seconds, e.nanos);
        }(t));
    }

    function fe(t, e) {
        return function(t) {
            return new Q$1([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(e).F();
    }

    function le(t) {
        var e = Q$1.k(t);
        return S$2(Le(e)), e;
    }

    function pe(t, e) {
        return fe(t.s, e.path);
    }

    function de(t, e) {
        var n = le(e);
        return S$2(n.get(1) === t.s.projectId), S$2(!n.get(3) && !t.s.database || n.get(3) === t.s.database), 
        new K$1(me(n));
    }

    function ye(t, e) {
        return fe(t.s, e);
    }

    function ve(t) {
        var e = le(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
            return 4 === e.length ? Q$1.$() : me(e);
    }

    function ge(t) {
        return new Q$1([ "projects", t.s.projectId, "databases", t.s.database ]).F();
    }

    function me(t) {
        return S$2(t.length > 4 && "documents" === t.get(4)), t.V(5)
        /** Creates an api.Document from key and fields (but no create/update time) */;
    }

    function we(t, e, n) {
        return {
            name: pe(t, e),
            fields: n.proto.mapValue.fields
        };
    }

    function be(t, e) {
        var n;
        if (e instanceof en) n = {
            update: we(t, e.key, e.value)
        }; else if (e instanceof an) n = {
            delete: pe(t, e.key)
        }; else if (e instanceof nn) n = {
            update: we(t, e.key, e.data),
            updateMask: xe(e.qe)
        }; else if (e instanceof on$1) n = {
            transform: {
                document: pe(t, e.key),
                fieldTransforms: e.fieldTransforms.map((function(t) {
                    return function(t, e) {
                        var n = e.transform;
                        if (n instanceof Ue) return {
                            fieldPath: e.field.F(),
                            setToServerValue: "REQUEST_TIME"
                        };
                        if (n instanceof Ce) return {
                            fieldPath: e.field.F(),
                            appendMissingElements: {
                                values: n.elements
                            }
                        };
                        if (n instanceof Me) return {
                            fieldPath: e.field.F(),
                            removeAllFromArray: {
                                values: n.elements
                            }
                        };
                        if (n instanceof Ge) return {
                            fieldPath: e.field.F(),
                            increment: n.Be
                        };
                        throw A$2();
                    }(0, t);
                }))
            }
        }; else {
            if (!(e instanceof cn)) return A$2();
            n = {
                verify: pe(t, e.key)
            };
        }
        return e.Qe.Ue || (n.currentDocument = function(t, e) {
            return void 0 !== e.updateTime ? {
                updateTime: ce(t, e.updateTime)
            } : void 0 !== e.exists ? {
                exists: e.exists
            } : A$2();
        }(t, e.Qe)), n;
    }

    function Ie(t, e) {
        var n = e.currentDocument ? function(t) {
            return void 0 !== t.updateTime ? He.updateTime(he(t.updateTime)) : void 0 !== t.exists ? He.exists(t.exists) : He.We();
        }(e.currentDocument) : He.We();
        if (e.update) {
            e.update.name;
            var r = de(t, e.update.name), i = new hn({
                mapValue: {
                    fields: e.update.fields
                }
            });
            if (e.updateMask) {
                var o = function(t) {
                    var e = t.fieldPaths || [];
                    return new ze(e.map((function(t) {
                        return H$1.q(t);
                    })));
                }(e.updateMask);
                return new nn(r, i, o, n);
            }
            return new en(r, i, n);
        }
        if (e.delete) {
            var s = de(t, e.delete);
            return new an(s, n);
        }
        if (e.transform) {
            var u = de(t, e.transform.document), a = e.transform.fieldTransforms.map((function(e) {
                return function(t, e) {
                    var n = null;
                    if ("setToServerValue" in e) S$2("REQUEST_TIME" === e.setToServerValue), n = new Ue; else if ("appendMissingElements" in e) {
                        var r = e.appendMissingElements.values || [];
                        n = new Ce(r);
                    } else if ("removeAllFromArray" in e) {
                        var i = e.removeAllFromArray.values || [];
                        n = new Me(i);
                    } else "increment" in e ? n = new Ge(t, e.increment) : A$2();
                    var o = H$1.q(e.fieldPath);
                    return new Qe(o, n);
                }(t, e);
            }));
            return S$2(!0 === n.exists), new on$1(u, a);
        }
        if (e.verify) {
            var c = de(t, e.verify);
            return new cn(c, n);
        }
        return A$2();
    }

    function Ee(t, e) {
        return {
            documents: [ ye(t, e.path) ]
        };
    }

    function Te(t, e) {
        // Dissect the path into parent, collectionId, and optional key filter.
        var n = {
            structuredQuery: {}
        }, r = e.path;
        null !== e.collectionGroup ? (n.parent = ye(t, r), n.structuredQuery.from = [ {
            collectionId: e.collectionGroup,
            allDescendants: !0
        } ]) : (n.parent = ye(t, r.p()), n.structuredQuery.from = [ {
            collectionId: r.S()
        } ]);
        var i = function(t) {
            if (0 !== t.length) {
                var e = t.map((function(t) {
                    // visible for testing
                    return function(t) {
                        if ("==" /* EQUAL */ === t.op) {
                            if (Jt(t.value)) return {
                                unaryFilter: {
                                    field: Ae(t.field),
                                    op: "IS_NAN"
                                }
                            };
                            if ($t(t.value)) return {
                                unaryFilter: {
                                    field: Ae(t.field),
                                    op: "IS_NULL"
                                }
                            };
                        } else if ("!=" /* NOT_EQUAL */ === t.op) {
                            if (Jt(t.value)) return {
                                unaryFilter: {
                                    field: Ae(t.field),
                                    op: "IS_NOT_NAN"
                                }
                            };
                            if ($t(t.value)) return {
                                unaryFilter: {
                                    field: Ae(t.field),
                                    op: "IS_NOT_NULL"
                                }
                            };
                        }
                        return {
                            fieldFilter: {
                                field: Ae(t.field),
                                op: (e = t.op, ne[e]),
                                value: t.value
                            }
                        };
                        // visible for testing
                                            var e;
                    }(t);
                }));
                return 1 === e.length ? e[0] : {
                    compositeFilter: {
                        op: "AND",
                        filters: e
                    }
                };
            }
        }(e.filters);
        i && (n.structuredQuery.where = i);
        var o = function(t) {
            if (0 !== t.length) return t.map((function(t) {
                return {
                    field: Ae((e = t).field),
                    direction: (n = e.dir, ee[n])
                };
                // visible for testing
                            var e, n;
            }));
        }(e.orderBy);
        o && (n.structuredQuery.orderBy = o);
        var s = function(t, e) {
            return t.Le || Y$1(e) ? e : {
                value: e
            };
        }(t, e.limit);
        return null !== s && (n.structuredQuery.limit = s), e.startAt && (n.structuredQuery.startAt = Ne(e.startAt)), 
        e.endAt && (n.structuredQuery.endAt = Ne(e.endAt)), n;
    }

    function Ne(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    function _e(t) {
        var e = !!t.before, n = t.values || [];
        return new Gn(n, e);
    }

    // visible for testing
    function Ae(t) {
        return {
            fieldPath: t.F()
        };
    }

    function Se(t) {
        return H$1.q(t.fieldPath);
    }

    function De(t) {
        return Pn.create(Se(t.fieldFilter.field), function(t) {
            switch (t) {
              case "EQUAL":
                return "==" /* EQUAL */;

              case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */;

              case "GREATER_THAN":
                return ">" /* GREATER_THAN */;

              case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */;

              case "LESS_THAN":
                return "<" /* LESS_THAN */;

              case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */;

              case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */;

              case "IN":
                return "in" /* IN */;

              case "NOT_IN":
                return "not-in" /* NOT_IN */;

              case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

              case "OPERATOR_UNSPECIFIED":
              default:
                return A$2();
            }
        }(t.fieldFilter.op), t.fieldFilter.value);
    }

    function ke(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            var e = Se(t.unaryFilter.field);
            return Pn.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NULL":
            var n = Se(t.unaryFilter.field);
            return Pn.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "IS_NOT_NAN":
            var r = Se(t.unaryFilter.field);
            return Pn.create(r, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NOT_NULL":
            var i = Se(t.unaryFilter.field);
            return Pn.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "OPERATOR_UNSPECIFIED":
          default:
            return A$2();
        }
    }

    function xe(t) {
        var e = [];
        return t.fields.forEach((function(t) {
            return e.push(t.F());
        })), {
            fieldPaths: e
        };
    }

    function Le(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Represents a transform within a TransformMutation. */ var Pe = function() {
        // Make sure that the structural type of `TransformOperation` is unique.
        // See https://github.com/microsoft/TypeScript/issues/5451
        this.je = void 0;
    };

    /**
     * Computes the local transform result against the provided `previousValue`,
     * optionally using the provided localWriteTime.
     */ function Re(t, e, n) {
        return t instanceof Ue ? function(t, e) {
            var n = {
                fields: {
                    __type__: {
                        stringValue: "server_timestamp"
                    },
                    __local_write_time__: {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }
                }
            };
            return e && (n.fields.__previous_value__ = e), {
                mapValue: n
            };
        }(n, e) : t instanceof Ce ? qe(t, e) : t instanceof Me ? Fe(t, e) : function(t, e) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            var n = Ve(t, e), r = je(n) + je(t.Be);
            return Zt(n) && Zt(t.Be) ? ie(r) : oe(t.serializer, r);
        }(t, e);
    }

    /**
     * Computes a final transform result after the transform has been acknowledged
     * by the server, potentially using the server-provided transformResult.
     */ function Oe(t, e, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return t instanceof Ce ? qe(t, e) : t instanceof Me ? Fe(t, e) : n;
    }

    /**
     * If this transform operation is not idempotent, returns the base value to
     * persist for this transform. If a base value is returned, the transform
     * operation is always applied to this base value, even if document has
     * already been updated.
     *
     * Base values provide consistent behavior for non-idempotent transforms and
     * allow us to return the same latency-compensated value even if the backend
     * has already applied the transform operation. The base value is null for
     * idempotent transforms, as they can be re-played even if the backend has
     * already applied them.
     *
     * @return a base value to store along with the mutation, or null for
     * idempotent transforms.
     */ function Ve(t, e) {
        return t instanceof Ge ? Zt(n = e) || function(t) {
            return !!t && "doubleValue" in t;
        }(n) ? e : {
            integerValue: 0
        } : null;
        var n;
    }

    /** Transforms a value into a server-generated timestamp. */ var Ue = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends(n, e), n;
    }(Pe), Ce = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).elements = t, n;
        }
        return __extends(n, e), n;
    }(Pe);

    /** Transforms an array value via a union operation. */ function qe(t, e) {
        for (var n = Be(e), r = function(t) {
            n.some((function(e) {
                return Gt(e, t);
            })) || n.push(t);
        }, i = 0, o = t.elements; i < o.length; i++) {
            r(o[i]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /** Transforms an array value via a remove operation. */ var Me = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).elements = t, n;
        }
        return __extends(n, e), n;
    }(Pe);

    function Fe(t, e) {
        for (var n = Be(e), r = function(t) {
            n = n.filter((function(e) {
                return !Gt(e, t);
            }));
        }, i = 0, o = t.elements; i < o.length; i++) {
            r(o[i]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ var Ge = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).serializer = t, r.Be = n, r;
        }
        return __extends(n, e), n;
    }(Pe);

    function je(t) {
        return Ht(t.integerValue || t.doubleValue);
    }

    function Be(t) {
        return Xt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ var ze = /** @class */ function() {
        function t(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(H$1.P)
            /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */;
        }
        return t.prototype.Ke = function(t) {
            for (var e = 0, n = this.fields; e < n.length; e++) {
                if (n[e].D(t)) return !0;
            }
            return !1;
        }, t.prototype.isEqual = function(t) {
            return P$1(this.fields, t.fields, (function(t, e) {
                return t.isEqual(e);
            }));
        }, t;
    }(), Qe = function(t, e) {
        this.field = t, this.transform = e;
    };

    /** A field path and the TransformOperation to perform upon it. */
    /** The result of successfully applying a mutation to the backend. */ var We = function(
    /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
    t, 
    /**
         * The resulting fields returned from the backend after a
         * TransformMutation has been committed. Contains one FieldValue for each
         * FieldTransform that was in the mutation.
         *
         * Will be null if the mutation was not a TransformMutation.
         */
    e) {
        this.version = t, this.transformResults = e;
    }, He = /** @class */ function() {
        function t(t, e) {
            this.updateTime = t, this.exists = e
            /** Creates a new empty Precondition. */;
        }
        return t.We = function() {
            return new t;
        }, 
        /** Creates a new Precondition with an exists flag. */ t.exists = function(e) {
            return new t(void 0, e);
        }, 
        /** Creates a new Precondition based on a version a document exists at. */ t.updateTime = function(e) {
            return new t(e);
        }, Object.defineProperty(t.prototype, "Ue", {
            /** Returns whether this Precondition is empty. */ get: function() {
                return void 0 === this.updateTime && void 0 === this.exists;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }, t;
    }();

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */
    /**
     * Returns true if the preconditions is valid for the given document
     * (or null if no document is available).
     */
    function Ke(t, e) {
        return void 0 !== t.updateTime ? e instanceof dn && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e instanceof dn;
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set, Patch, and Transform mutations. For Delete
     * mutations, we reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        null                  Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      null                  null
     * TransformMutation  Document(v3)          Document(v3)
     * TransformMutation  NoDocument(v3)        NoDocument(v3)
     * TransformMutation  null                  null
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     null                  NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set, Patch, and Transform mutations. As deletes
     * have no explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we return an `UnknownDocument` and rely on Watch to send us the
     * updated version.
     *
     * Note that TransformMutations don't create Documents (in the case of being
     * applied to a NoDocument), even though they would on the backend. This is
     * because the client always combines the TransformMutation with a SetMutation
     * or PatchMutation and we only want to apply the transform if the prior
     * mutation resulted in a Document (always true for a SetMutation, but not
     * necessarily for a PatchMutation).
     *
     * ## Subclassing Notes
     *
     * Subclasses of Mutation need to implement applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document.
     */ var Ye = function() {};

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing a new remote document. If the input document doesn't match the
     * expected state (e.g. it is null or outdated), an `UnknownDocument` can be
     * returned.
     *
     * @param mutation The mutation to apply.
     * @param maybeDoc The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param mutationResult The result of applying the mutation from the backend.
     * @return The mutated document. The returned document may be an
     *     UnknownDocument if the mutation could not be applied to the locally
     *     cached base document.
     */ function Ze(t, e, n) {
        return t instanceof en ? function(t, e, n) {
            // Unlike applySetMutationToLocalView, if we're applying a mutation to a
            // remote document the server has accepted the mutation so the precondition
            // must have held.
            return new dn(t.key, n.version, t.value, {
                hasCommittedMutations: !0
            });
        }(t, 0, n) : t instanceof nn ? function(t, e, n) {
            if (!Ke(t.Qe, e)) 
            // Since the mutation was not rejected, we know that the  precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new vn(t.key, n.version);
            var r = rn(t, e);
            return new dn(t.key, n.version, r, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : t instanceof on$1 ? function(t, e, n) {
            if (S$2(null != n.transformResults), !Ke(t.Qe, e)) 
            // Since the mutation was not rejected, we know that the  precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new vn(t.key, n.version);
            var r = sn(t, e), i = 
            /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use after a
     * TransformMutation has been acknowledged by the server.
     *
     * @param fieldTransforms The field transforms to apply the result to.
     * @param baseDoc The document prior to applying this mutation batch.
     * @param serverTransformResults The transform results received by the server.
     * @return The transform results list.
     */
            function(t, e, n) {
                var r = [];
                S$2(t.length === n.length);
                for (var i = 0; i < n.length; i++) {
                    var o = t[i], s = o.transform, u = null;
                    e instanceof dn && (u = e.field(o.field)), r.push(Oe(s, u, n[i]));
                }
                return r;
            }(t.fieldTransforms, e, n.transformResults), o = n.version, s = un(t, r.data(), i);
            return new dn(t.key, o, s, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : function(t, e, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            return new yn(t.key, n.version, {
                hasCommittedMutations: !0
            });
        }(t, 0, n);
    }

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing the new local view of a document. Both the input and returned
     * documents can be null.
     *
     * @param mutation The mutation to apply.
     * @param maybeDoc The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param baseDoc The state of the document prior to this mutation batch. The
     *     input document can be null if the client has no knowledge of the
     *     pre-mutation state of the document.
     * @param localWriteTime A timestamp indicating the local write time of the
     *     batch this mutation is a part of.
     * @return The mutated document. The returned document may be null, but only
     *     if maybeDoc was null and the mutation would not create a new document.
     */ function Xe(t, e, n, r) {
        return t instanceof en ? function(t, e) {
            if (!Ke(t.Qe, e)) return e;
            var n = tn(e);
            return new dn(t.key, n, t.value, {
                Ge: !0
            });
        }(t, e) : t instanceof nn ? function(t, e) {
            if (!Ke(t.Qe, e)) return e;
            var n = tn(e), r = rn(t, e);
            return new dn(t.key, n, r, {
                Ge: !0
            });
        }(t, e) : t instanceof on$1 ? function(t, e, n, r) {
            if (!Ke(t.Qe, e)) return e;
            var i = sn(t, e), o = function(t, e, n, r) {
                for (var i = [], o = 0, s = t; o < s.length; o++) {
                    var u = s[o], a = u.transform, c = null;
                    n instanceof dn && (c = n.field(u.field)), null === c && r instanceof dn && (
                    // If the current document does not contain a value for the mutated
                    // field, use the value that existed before applying this mutation
                    // batch. This solves an edge case where a PatchMutation clears the
                    // values in a nested map before the TransformMutation is applied.
                    c = r.field(u.field)), i.push(Re(a, c, e));
                }
                return i;
            }(t.fieldTransforms, n, e, r), s = un(t, i.data(), o);
            return new dn(t.key, i.version, s, {
                Ge: !0
            });
        }(t, e, r, n) : function(t, e) {
            return Ke(t.Qe, e) ? new yn(t.key, B.min()) : e;
        }(t, e);
    }

    /**
     * If this mutation is not idempotent, returns the base value to persist with
     * this mutation. If a base value is returned, the mutation is always applied
     * to this base value, even if document has already been updated.
     *
     * The base value is a sparse object that consists of only the document
     * fields for which this mutation contains a non-idempotent transformation
     * (e.g. a numeric increment). The provided value guarantees consistent
     * behavior for non-idempotent transforms and allow us to return the same
     * latency-compensated value even if the backend has already applied the
     * mutation. The base value is null for idempotent mutations, as they can be
     * re-played even if the backend has already applied them.
     *
     * @return a base value to store along with the mutation, or null for
     * idempotent mutations.
     */ function $e(t, e) {
        return t instanceof on$1 ? function(t, e) {
            for (var n = null, r = 0, i = t.fieldTransforms; r < i.length; r++) {
                var o = i[r], s = e instanceof dn ? e.field(o.field) : void 0, u = Ve(o.transform, s || null);
                null != u && (n = null == n ? (new fn).set(o.field, u) : n.set(o.field, u));
            }
            return n ? n.ze() : null;
        }(t, e) : null;
    }

    function Je(t, e) {
        return t.type === e.type && !!t.key.isEqual(e.key) && !!t.Qe.isEqual(e.Qe) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ === t.type ? t.data.isEqual(e.data) && t.qe.isEqual(e.qe) : 2 /* Transform */ !== t.type || P$1(t.fieldTransforms, t.fieldTransforms, (function(t, e) {
            return function(t, e) {
                return t.field.isEqual(e.field) && function(t, e) {
                    return t instanceof Ce && e instanceof Ce || t instanceof Me && e instanceof Me ? P$1(t.elements, e.elements, Gt) : t instanceof Ge && e instanceof Ge ? Gt(t.Be, e.Be) : t instanceof Ue && e instanceof Ue;
                }(t.transform, e.transform);
            }(t, e);
        })));
    }

    /**
     * Returns the version from the given document for use as the result of a
     * mutation. Mutations are defined to return the version of the base document
     * only if it is an existing document. Deleted and unknown documents have a
     * post-mutation version of SnapshotVersion.min().
     */ function tn(t) {
        return t instanceof dn ? t.version : B.min();
    }

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ var en = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).key = t, i.value = n, i.Qe = r, i.type = 0 /* Set */ , 
            i;
        }
        return __extends(n, e), n;
    }(Ye), nn = /** @class */ function(e) {
        function n(t, n, r, i) {
            var o = this;
            return (o = e.call(this) || this).key = t, o.data = n, o.qe = r, o.Qe = i, o.type = 1 /* Patch */ , 
            o;
        }
        return __extends(n, e), n;
    }(Ye);

    function rn(t, e) {
        return function(t, e) {
            var n = new fn(e);
            return t.qe.fields.forEach((function(e) {
                if (!e._()) {
                    var r = t.data.field(e);
                    null !== r ? n.set(e, r) : n.delete(e);
                }
            })), n.ze();
        }(t, e instanceof dn ? e.data() : hn.empty());
    }

    var on$1 = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).key = t, r.fieldTransforms = n, r.type = 2 /* Transform */ , 
            // NOTE: We set a precondition of exists: true as a safety-check, since we
            // always combine TransformMutations with a SetMutation or PatchMutation which
            // (if successful) should end up with an existing document.
            r.Qe = He.exists(!0), r;
        }
        return __extends(n, e), n;
    }(Ye);

    function sn(t, e) {
        return e;
    }

    function un(t, e, n) {
        for (var r = new fn(e), i = 0; i < t.fieldTransforms.length; i++) {
            var o = t.fieldTransforms[i];
            r.set(o.field, n[i]);
        }
        return r.ze();
    }

    /** A mutation that deletes the document at the given key. */ var an = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).key = t, r.Qe = n, r.type = 3 /* Delete */ , r;
        }
        return __extends(n, e), n;
    }(Ye), cn = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).key = t, r.Qe = n, r.type = 4 /* Verify */ , r;
        }
        return __extends(n, e), n;
    }(Ye), hn = /** @class */ function() {
        function t(t) {
            this.proto = t;
        }
        return t.empty = function() {
            return new t({
                mapValue: {}
            });
        }, 
        /**
         * Returns the value at the given path or null.
         *
         * @param path the path to search
         * @return The value at the path or if there it doesn't exist.
         */
        t.prototype.field = function(t) {
            if (t._()) return this.proto;
            for (var e = this.proto, n = 0; n < t.length - 1; ++n) {
                if (!e.mapValue.fields) return null;
                if (!te(e = e.mapValue.fields[t.get(n)])) return null;
            }
            return (e = (e.mapValue.fields || {})[t.S()]) || null;
        }, t.prototype.isEqual = function(t) {
            return Gt(this.proto, t.proto);
        }, t;
    }(), fn = /** @class */ function() {
        /**
         * @param baseObject The object to mutate.
         */
        function t(t) {
            void 0 === t && (t = hn.empty()), this.He = t, 
            /** A map that contains the accumulated changes in this builder. */
            this.Ye = new Map;
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path The field path to set.
         * @param value The value to set.
         * @return The current Builder instance.
         */    return t.prototype.set = function(t, e) {
            return this.Je(t, e), this;
        }, 
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path The field path to remove.
         * @return The current Builder instance.
         */
        t.prototype.delete = function(t) {
            return this.Je(t, null), this;
        }, 
        /**
         * Adds `value` to the overlay map at `path`. Creates nested map entries if
         * needed.
         */
        t.prototype.Je = function(t, e) {
            for (var n = this.Ye, r = 0; r < t.length - 1; ++r) {
                var i = t.get(r), o = n.get(i);
                o instanceof Map ? 
                // Re-use a previously created map
                n = o : o && 10 /* ObjectValue */ === Ft(o) ? (
                // Convert the existing Protobuf MapValue into a map
                o = new Map(Object.entries(o.mapValue.fields || {})), n.set(i, o), n = o) : (
                // Create an empty map to represent the current nesting level
                o = new Map, n.set(i, o), n = o);
            }
            n.set(t.S(), e);
        }, 
        /** Returns an ObjectValue with all mutations applied. */ t.prototype.ze = function() {
            var t = this.Xe(H$1.$(), this.Ye);
            return null != t ? new hn(t) : this.He;
        }, 
        /**
         * Applies any overlays from `currentOverlays` that exist at `currentPath`
         * and returns the merged data at `currentPath` (or null if there were no
         * changes).
         *
         * @param currentPath The path at the current nesting level. Can be set to
         * FieldValue.emptyPath() to represent the root.
         * @param currentOverlays The overlays at the current nesting level in the
         * same format as `overlayMap`.
         * @return The merged data at `currentPath` or null if no modifications
         * were applied.
         */
        t.prototype.Xe = function(t, e) {
            var n = this, r = !1, i = this.He.field(t), o = te(i) ? // If there is already data at the current path, base our
            Object.assign({}, i.mapValue.fields) : {};
            return e.forEach((function(e, i) {
                if (e instanceof Map) {
                    var s = n.Xe(t.child(i), e);
                    null != s && (o[i] = s, r = !0);
                } else null !== e ? (o[i] = e, r = !0) : o.hasOwnProperty(i) && (delete o[i], r = !0);
            })), r ? {
                mapValue: {
                    fields: o
                }
            } : null;
        }, t;
    }();

    /**
     * Returns a FieldMask built from all fields in a MapValue.
     */
    function ln(t) {
        var e = [];
        return C$1(t.fields || {}, (function(t, n) {
            var r = new H$1([ t ]);
            if (te(n)) {
                var i = ln(n.mapValue).fields;
                if (0 === i.length) 
                // Preserve the empty map by adding it to the FieldMask.
                e.push(r); else 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                for (var o = 0, s = i; o < s.length; o++) {
                    var u = s[o];
                    e.push(r.child(u));
                }
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            e.push(r);
        })), new ze(e)
        /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * The result of a lookup for a given path may be an existing document or a
     * marker that this document does not exist at a given version.
     */;
    }

    var pn = function(t, e) {
        this.key = t, this.version = e;
    }, dn = /** @class */ function(e) {
        function n(t, n, r, i) {
            var o = this;
            return (o = e.call(this, t, n) || this).Ze = r, o.Ge = !!i.Ge, o.hasCommittedMutations = !!i.hasCommittedMutations, 
            o;
        }
        return __extends(n, e), n.prototype.field = function(t) {
            return this.Ze.field(t);
        }, n.prototype.data = function() {
            return this.Ze;
        }, n.prototype.tn = function() {
            return this.Ze.proto;
        }, n.prototype.isEqual = function(t) {
            return t instanceof n && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.Ge === t.Ge && this.hasCommittedMutations === t.hasCommittedMutations && this.Ze.isEqual(t.Ze);
        }, n.prototype.toString = function() {
            return "Document(" + this.key + ", " + this.version + ", " + this.Ze.toString() + ", {hasLocalMutations: " + this.Ge + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
        }, Object.defineProperty(n.prototype, "hasPendingWrites", {
            get: function() {
                return this.Ge || this.hasCommittedMutations;
            },
            enumerable: !1,
            configurable: !0
        }), n;
    }(pn), yn = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this, t, n) || this).hasCommittedMutations = !(!r || !r.hasCommittedMutations), 
            i;
        }
        return __extends(n, e), n.prototype.toString = function() {
            return "NoDocument(" + this.key + ", " + this.version + ")";
        }, Object.defineProperty(n.prototype, "hasPendingWrites", {
            get: function() {
                return this.hasCommittedMutations;
            },
            enumerable: !1,
            configurable: !0
        }), n.prototype.isEqual = function(t) {
            return t instanceof n && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }, n;
    }(pn), vn = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends(n, e), n.prototype.toString = function() {
            return "UnknownDocument(" + this.key + ", " + this.version + ")";
        }, Object.defineProperty(n.prototype, "hasPendingWrites", {
            get: function() {
                return !0;
            },
            enumerable: !1,
            configurable: !0
        }), n.prototype.isEqual = function(t) {
            return t instanceof n && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }, n;
    }(pn);

    /**
     * Represents a document in Firestore with a key, version, data and whether the
     * data has local mutations applied to it.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Casts `obj` to `T`. Throws if  `obj` is not an instance of `T`.
     *
     * This cast is used in the Lite and Full SDK to verify instance types for
     * arguments passed to the public API.
     */
    function gn(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        if (!(t instanceof e)) throw e.name === t.constructor.name ? new G$1(F$1.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass '" + e.name + "' from a different Firestore SDK?") : new G$1(F$1.INVALID_ARGUMENT, "Expected type '" + e.name + "', but was '" + t.constructor.name + "'");
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ var mn = /** @class */ function() {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        function t(t, e, n, r, i, o /* First */ , s, u) {
            void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
            void 0 === i && (i = null), void 0 === o && (o = "F"), void 0 === s && (s = null), 
            void 0 === u && (u = null), this.path = t, this.collectionGroup = e, this.en = n, 
            this.filters = r, this.limit = i, this.nn = o, this.startAt = s, this.endAt = u, 
            this.sn = null, 
            // The corresponding `Target` of this `Query` instance.
            this.rn = null, this.startAt, this.endAt;
        }
        /**
         * Helper to convert a collection group query into a collection query at a
         * specific path. This is used when executing collection group queries, since
         * we have to split the query into a set of collection queries at multiple
         * paths.
         */    return t.prototype.on = function(e) {
            return new t(e, 
            /*collectionGroup=*/ null, this.en.slice(), this.filters.slice(), this.limit, this.nn, this.startAt, this.endAt);
        }, t.prototype.hn = function() {
            return 0 === this.filters.length && null === this.limit && null == this.startAt && null == this.endAt && (0 === this.en.length || 1 === this.en.length && this.en[0].field.M());
        }, t.prototype.an = function() {
            return !Y$1(this.limit) && "F" /* First */ === this.nn;
        }, t.prototype.cn = function() {
            return !Y$1(this.limit) && "L" /* Last */ === this.nn;
        }, t.prototype.un = function() {
            return this.en.length > 0 ? this.en[0].field : null;
        }, t.prototype.ln = function() {
            for (var t = 0, e = this.filters; t < e.length; t++) {
                var n = e[t];
                if (n._n()) return n.field;
            }
            return null;
        }, t.prototype.fn = function(t) {
            for (var e = 0, n = this.filters; e < n.length; e++) {
                var r = n[e];
                if (t.indexOf(r.op) >= 0) return r.op;
            }
            return null;
        }, t;
    }();

    /** Creates a new Query instance with the options provided. */ function wn(t, e, n, r, i, o, s, u) {
        return new mn(t, e, n, r, i, o, s, u);
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function bn(t) {
        return new mn(t);
    }

    /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */ function In(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function En(t) {
        var e = gn(t, mn);
        if (null === e.sn) {
            e.sn = [];
            var n = e.ln(), r = e.un();
            if (null !== n && null === r) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            n.M() || e.sn.push(new Qn(n)), e.sn.push(new Qn(H$1.L(), "asc" /* ASCENDING */)); else {
                for (var i = !1, o = 0, s = e.en; o < s.length; o++) {
                    var u = s[o];
                    e.sn.push(u), u.field.M() && (i = !0);
                }
                if (!i) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    var a = e.en.length > 0 ? e.en[e.en.length - 1].dir : "asc" /* ASCENDING */;
                    e.sn.push(new Qn(H$1.L(), a));
                }
            }
        }
        return e.sn;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function Tn(t) {
        var e = gn(t, mn);
        if (!e.rn) if ("F" /* First */ === e.nn) e.rn = J$1(e.path, e.collectionGroup, En(e), e.filters, e.limit, e.startAt, e.endAt); else {
            for (
            // Flip the orderBy directions since we want the last results
            var n = [], r = 0, i = En(e); r < i.length; r++) {
                var o = i[r], s = "desc" /* DESCENDING */ === o.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                n.push(new Qn(o.field, s));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    var u = e.endAt ? new Gn(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Gn(e.startAt.position, !e.startAt.before) : null;
            // Now return as a LimitType.First query.
                    e.rn = J$1(e.path, e.collectionGroup, n, e.filters, e.limit, u, a);
        }
        return e.rn;
    }

    function Nn(t, e, n) {
        return new mn(t.path, t.collectionGroup, t.en.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }

    function _n(t, e) {
        return new mn(t.path, t.collectionGroup, t.en.slice(), t.filters.slice(), t.limit, t.nn, e, t.endAt);
    }

    function An(t, e) {
        return new mn(t.path, t.collectionGroup, t.en.slice(), t.filters.slice(), t.limit, t.nn, t.startAt, e);
    }

    function Sn(t, e) {
        return et(Tn(t), Tn(e)) && t.nn === e.nn;
    }

    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    function Dn(t) {
        return tt(Tn(t)) + "|lt:" + t.nn;
    }

    function kn(t) {
        return "Query(target=" + function(t) {
            var e = t.path.F();
            return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
            t.filters.length > 0 && (e += ", filters: [" + t.filters.map((function(t) {
                return (e = t).field.F() + " " + e.op + " " + Qt(e.value);
                /** Returns a debug description for `filter`. */            var e;
                /** Filter that matches on key fields (i.e. '__name__'). */        })).join(", ") + "]"), 
            Y$1(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [" + t.orderBy.map((function(t) {
                return (e = t).field.F() + " (" + e.dir + ")";
                var e;
            })).join(", ") + "]"), t.startAt && (e += ", startAt: " + jn(t.startAt)), t.endAt && (e += ", endAt: " + jn(t.endAt)), 
            "Target(" + e + ")";
        }(Tn(t)) + "; limitType=" + t.nn + ")";
    }

    /** Returns whether `doc` matches the constraints of `query`. */ function xn(t, e) {
        return function(t, e) {
            var n = e.key.path;
            return null !== t.collectionGroup ? e.key.W(t.collectionGroup) && t.path.D(n) : K$1.j(t.path) ? t.path.isEqual(n) : t.path.C(n);
        }(t, e) && function(t, e) {
            for (var n = 0, r = t.en; n < r.length; n++) {
                var i = r[n];
                // order by key always matches
                            if (!i.field.M() && null === e.field(i.field)) return !1;
            }
            return !0;
        }(t, e) && function(t, e) {
            for (var n = 0, r = t.filters; n < r.length; n++) {
                if (!r[n].matches(e)) return !1;
            }
            return !0;
        }(t, e) && function(t, e) {
            return !(t.startAt && !Bn(t.startAt, En(t), e)) && (!t.endAt || !Bn(t.endAt, En(t), e));
        }(t, e);
    }

    function Ln(t) {
        return function(e, n) {
            for (var r = !1, i = 0, o = En(t); i < o.length; i++) {
                var s = o[i], u = Wn(s, e, n);
                if (0 !== u) return u;
                r = r || s.field.M();
            }
            return 0;
        };
    }

    var Pn = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).field = t, i.op = n, i.value = r, i;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    return __extends(n, e), n.create = function(t, e, r) {
            if (t.M()) return "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.dn(t, e, r) : new Rn(t, e, r);
            if ($t(r)) {
                if ("==" /* EQUAL */ !== e && "!=" /* NOT_EQUAL */ !== e) 
                // TODO(ne-queries): Update error message to include != comparison.
                throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. Null supports only equality comparisons.");
                return new n(t, e, r);
            }
            if (Jt(r)) {
                if ("==" /* EQUAL */ !== e && "!=" /* NOT_EQUAL */ !== e) 
                // TODO(ne-queries): Update error message to include != comparison.
                throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. NaN supports only equality comparisons.");
                return new n(t, e, r);
            }
            return "array-contains" /* ARRAY_CONTAINS */ === e ? new Cn(t, r) : "in" /* IN */ === e ? new qn(t, r) : "not-in" /* NOT_IN */ === e ? new Mn(t, r) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new Fn(t, r) : new n(t, e, r);
        }, n.dn = function(t, e, n) {
            return "in" /* IN */ === e ? new On(t, n) : new Vn(t, n);
        }, n.prototype.matches = function(t) {
            var e = t.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.wn(Bt(e, this.value)) : null !== e && Ft(this.value) === Ft(e) && this.wn(Bt(e, this.value));
            // Only compare types with matching backend order (such as double and int).
            }, n.prototype.wn = function(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return A$2();
            }
        }, n.prototype._n = function() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ ].indexOf(this.op) >= 0;
        }, n;
    }((function() {}));

    var Rn = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this, t, n, r) || this).key = K$1.U(r.referenceValue), i;
        }
        return __extends(n, e), n.prototype.matches = function(t) {
            var e = K$1.P(t.key, this.key);
            return this.wn(e);
        }, n;
    }(Pn), On = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t, "in" /* IN */ , n) || this).keys = Un("in" /* IN */ , n), 
            r;
        }
        return __extends(n, e), n.prototype.matches = function(t) {
            return this.keys.some((function(e) {
                return e.isEqual(t.key);
            }));
        }, n;
    }(Pn), Vn = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this, t, "not-in" /* NOT_IN */ , n) || this).keys = Un("not-in" /* NOT_IN */ , n), 
            r;
        }
        return __extends(n, e), n.prototype.matches = function(t) {
            return !this.keys.some((function(e) {
                return e.isEqual(t.key);
            }));
        }, n;
    }(Pn);

    /** Filter that matches on key fields within an array. */ function Un(t, e) {
        var n;
        return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((function(t) {
            return K$1.U(t.referenceValue);
        }));
    }

    /** A Filter that implements the array-contains operator. */ var Cn = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "array-contains" /* ARRAY_CONTAINS */ , n) || this;
        }
        return __extends(n, e), n.prototype.matches = function(t) {
            var e = t.field(this.field);
            return Xt(e) && jt(e.arrayValue, this.value);
        }, n;
    }(Pn), qn = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "in" /* IN */ , n) || this;
        }
        return __extends(n, e), n.prototype.matches = function(t) {
            var e = t.field(this.field);
            return null !== e && jt(this.value.arrayValue, e);
        }, n;
    }(Pn), Mn = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "not-in" /* NOT_IN */ , n) || this;
        }
        return __extends(n, e), n.prototype.matches = function(t) {
            var e = t.field(this.field);
            return null !== e && !jt(this.value.arrayValue, e);
        }, n;
    }(Pn), Fn = /** @class */ function(e) {
        function n(t, n) {
            return e.call(this, t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n) || this;
        }
        return __extends(n, e), n.prototype.matches = function(t) {
            var e = this, n = t.field(this.field);
            return !(!Xt(n) || !n.arrayValue.values) && n.arrayValue.values.some((function(t) {
                return jt(e.value.arrayValue, t);
            }));
        }, n;
    }(Pn), Gn = function(t, e) {
        this.position = t, this.before = e;
    };

    /** A Filter that implements the IN operator. */ function jn(t) {
        // TODO(b/29183165): Make this collision robust.
        return (t.before ? "b" : "a") + ":" + t.position.map((function(t) {
            return Qt(t);
        })).join(",");
    }

    /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */ function Bn(t, e, n) {
        for (var r = 0, i = 0; i < t.position.length; i++) {
            var o = e[i], s = t.position[i];
            if (r = o.field.M() ? K$1.P(K$1.U(s.referenceValue), n.key) : Bt(s, n.field(o.field)), 
            "desc" /* DESCENDING */ === o.dir && (r *= -1), 0 !== r) break;
        }
        return t.before ? r <= 0 : r < 0;
    }

    function zn(t, e) {
        if (null === t) return null === e;
        if (null === e) return !1;
        if (t.before !== e.before || t.position.length !== e.position.length) return !1;
        for (var n = 0; n < t.position.length; n++) if (!Gt(t.position[n], e.position[n])) return !1;
        return !0;
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ var Qn = function(t, e /* ASCENDING */) {
        void 0 === e && (e = "asc"), this.field = t, this.dir = e;
    };

    function Wn(t, e, n) {
        var r = t.field.M() ? K$1.P(e.key, n.key) : function(t, e, n) {
            var r = e.field(t), i = n.field(t);
            return null !== r && null !== i ? Bt(r, i) : A$2();
        }(t.field, e, n);
        switch (t.dir) {
          case "asc" /* ASCENDING */ :
            return r;

          case "desc" /* DESCENDING */ :
            return -1 * r;

          default:
            return A$2();
        }
    }

    function Hn(t, e) {
        return t.dir === e.dir && t.field.isEqual(e.field);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A batch of mutations that will be sent as one unit to the backend.
     */ var Kn = /** @class */ function() {
        /**
         * @param batchId The unique ID of this mutation batch.
         * @param localWriteTime The original write time of this mutation.
         * @param baseMutations Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        function t(t, e, n, r) {
            this.batchId = t, this.Tn = e, this.baseMutations = n, this.mutations = r
            /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to create a new remote document
         *
         * @param docKey The key of the document to apply mutations to.
         * @param maybeDoc The document to apply mutations to.
         * @param batchResult The result of applying the MutationBatch to the
         * backend.
         */;
        }
        return t.prototype.En = function(t, e, n) {
            for (var r = n.mn, i = 0; i < this.mutations.length; i++) {
                var o = this.mutations[i];
                o.key.isEqual(t) && (e = Ze(o, e, r[i]));
            }
            return e;
        }, 
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param docKey The key of the document to apply mutations to.
         * @param maybeDoc The document to apply mutations to.
         */
        t.prototype.In = function(t, e) {
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
            for (var n = 0, r = this.baseMutations; n < r.length; n++) {
                var i = r[n];
                i.key.isEqual(t) && (e = Xe(i, e, e, this.Tn));
            }
            // Second, apply all user-provided mutations.
            for (var o = e, s = 0, u = this.mutations; s < u.length; s++) {
                var a = u[s];
                a.key.isEqual(t) && (e = Xe(a, e, o, this.Tn));
            }
            return e;
        }, 
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch.
         */
        t.prototype.An = function(t) {
            var e = this, n = t;
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
                    return this.mutations.forEach((function(r) {
                var i = e.In(r.key, t.get(r.key));
                i && (n = n.st(r.key, i));
            })), n;
        }, t.prototype.keys = function() {
            return this.mutations.reduce((function(t, e) {
                return t.add(e.key);
            }), Et());
        }, t.prototype.isEqual = function(t) {
            return this.batchId === t.batchId && P$1(this.mutations, t.mutations, (function(t, e) {
                return Je(t, e);
            })) && P$1(this.baseMutations, t.baseMutations, (function(t, e) {
                return Je(t, e);
            }));
        }, t;
    }(), Yn = /** @class */ function() {
        function t(t, e, n, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        r) {
            this.batch = t, this.Rn = e, this.mn = n, this.Pn = r
            /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=>version mapping (docVersions).
         */;
        }
        return t.from = function(e, n, r) {
            S$2(e.mutations.length === r.length);
            for (var i = bt, o = e.mutations, s = 0; s < o.length; s++) i = i.st(o[s].key, r[s].version);
            return new t(e, n, r, i);
        }, t;
    }(), Zn = /** @class */ function() {
        function t(t) {
            var e = this;
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
                    this.gn = null, this.Vn = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.yn = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.pn = !1, t((function(t) {
                e.yn = !0, e.result = t, e.gn && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                e.gn(t);
            }), (function(t) {
                e.yn = !0, e.error = t, e.Vn && e.Vn(t);
            }));
        }
        return t.prototype.catch = function(t) {
            return this.next(void 0, t);
        }, t.prototype.next = function(e, n) {
            var r = this;
            return this.pn && A$2(), this.pn = !0, this.yn ? this.error ? this.bn(n, this.error) : this.vn(e, this.result) : new t((function(t, i) {
                r.gn = function(n) {
                    r.vn(e, n).next(t, i);
                }, r.Vn = function(e) {
                    r.bn(n, e).next(t, i);
                };
            }));
        }, t.prototype.Sn = function() {
            var t = this;
            return new Promise((function(e, n) {
                t.next(e, n);
            }));
        }, t.prototype.Dn = function(e) {
            try {
                var n = e();
                return n instanceof t ? n : t.resolve(n);
            } catch (e) {
                return t.reject(e);
            }
        }, t.prototype.vn = function(e, n) {
            return e ? this.Dn((function() {
                return e(n);
            })) : t.resolve(n);
        }, t.prototype.bn = function(e, n) {
            return e ? this.Dn((function() {
                return e(n);
            })) : t.reject(n);
        }, t.resolve = function(e) {
            return new t((function(t, n) {
                t(e);
            }));
        }, t.reject = function(e) {
            return new t((function(t, n) {
                n(e);
            }));
        }, t.Cn = function(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        e) {
            return new t((function(t, n) {
                var r = 0, i = 0, o = !1;
                e.forEach((function(e) {
                    ++r, e.next((function() {
                        ++i, o && i === r && t();
                    }), (function(t) {
                        return n(t);
                    }));
                })), o = !0, i === r && t();
            }));
        }, 
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */
        t.Nn = function(e) {
            for (var n = t.resolve(!1), r = function(e) {
                n = n.next((function(n) {
                    return n ? t.resolve(n) : e();
                }));
            }, i = 0, o = e; i < o.length; i++) {
                r(o[i]);
            }
            return n;
        }, t.forEach = function(t, e) {
            var n = this, r = [];
            return t.forEach((function(t, i) {
                r.push(e.call(n, t, i));
            })), this.Cn(r);
        }, t;
    }(), Xn = /** @class */ function() {
        function t() {
            // A mapping of document key to the new cache entry that should be written (or null if any
            // existing cache entry should be removed).
            this.Fn = new M$1((function(t) {
                return t.toString();
            }), (function(t, e) {
                return t.isEqual(e);
            })), this.kn = !1;
        }
        return Object.defineProperty(t.prototype, "readTime", {
            get: function() {
                return this.$n;
            },
            set: function(t) {
                this.$n = t;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.xn = function(t, e) {
            this.On(), this.readTime = e, this.Fn.set(t.key, t);
        }, 
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.Mn = function(t, e) {
            this.On(), e && (this.readTime = e), this.Fn.set(t, null);
        }, 
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction The transaction in which to perform any persistence
         *     operations.
         * @param documentKey The key of the entry to look up.
         * @return The cached Document or NoDocument entry, or null if we have nothing
         * cached.
         */
        t.prototype.Ln = function(t, e) {
            this.On();
            var n = this.Fn.get(e);
            return void 0 !== n ? Zn.resolve(n) : this.qn(t, e);
        }, 
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys The keys of the entries to look up.
         * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
         *     entry cannot be found, the corresponding key will be mapped to a null
         *     value.
         */
        t.prototype.getEntries = function(t, e) {
            return this.Bn(t, e);
        }, 
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */
        t.prototype.apply = function(t) {
            return this.On(), this.kn = !0, this.Un(t);
        }, 
        /** Helper to assert this.changes is not null  */ t.prototype.On = function() {}, 
        t;
    }(), $n = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", Jn = /** @class */ function() {
        function t() {
            this.Qn = [];
        }
        return t.prototype.Wn = function(t) {
            this.Qn.push(t);
        }, t.prototype.jn = function() {
            this.Qn.forEach((function(t) {
                return t();
            }));
        }, t;
    }(), tr = /** @class */ function() {
        function t(t, e, n) {
            this.Kn = t, this.Gn = e, this.zn = n
            /**
         * Get the local view of the document identified by `key`.
         *
         * @return Local view of the document or null if we don't have any cached
         * state for it.
         */;
        }
        return t.prototype.Hn = function(t, e) {
            var n = this;
            return this.Gn.Yn(t, e).next((function(r) {
                return n.Jn(t, e, r);
            }));
        }, 
        /** Internal version of `getDocument` that allows reusing batches. */ t.prototype.Jn = function(t, e, n) {
            return this.Kn.Ln(t, e).next((function(t) {
                for (var r = 0, i = n; r < i.length; r++) {
                    t = i[r].In(e, t);
                }
                return t;
            }));
        }, 
        // Returns the view of the given `docs` as they would appear after applying
        // all mutations in the given `batches`.
        t.prototype.Xn = function(t, e, n) {
            var r = gt();
            return e.forEach((function(t, e) {
                for (var i = 0, o = n; i < o.length; i++) {
                    e = o[i].In(t, e);
                }
                r = r.st(t, e);
            })), r;
        }, 
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */
        t.prototype.Zn = function(t, e) {
            var n = this;
            return this.Kn.getEntries(t, e).next((function(e) {
                return n.ts(t, e);
            }));
        }, 
        /**
         * Similar to `getDocuments`, but creates the local view from the given
         * `baseDocs` without retrieving documents from the local store.
         */
        t.prototype.ts = function(t, e) {
            var n = this;
            return this.Gn.es(t, e).next((function(r) {
                var i = n.Xn(t, e, r), o = vt();
                return i.forEach((function(t, e) {
                    // TODO(http://b/32275378): Don't conflate missing / deleted.
                    e || (e = new yn(t, B.min())), o = o.st(t, e);
                })), o;
            }));
        }, 
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction The persistence transaction.
         * @param query The query to match documents against.
         * @param sinceReadTime If not set to SnapshotVersion.min(), return only
         *     documents that have been read since this snapshot version (exclusive).
         */
        t.prototype.ns = function(t, e, n) {
            /**
     * Returns whether the query matches a single document by path (rather than a
     * collection).
     */
            return function(t) {
                return K$1.j(t.path) && null === t.collectionGroup && 0 === t.filters.length;
            }(e) ? this.ss(t, e.path) : In(e) ? this.rs(t, e, n) : this.os(t, e, n);
        }, t.prototype.ss = function(t, e) {
            // Just do a simple document lookup.
            return this.Hn(t, new K$1(e)).next((function(t) {
                var e = wt();
                return t instanceof dn && (e = e.st(t.key, t)), e;
            }));
        }, t.prototype.rs = function(t, e, n) {
            var r = this, i = e.collectionGroup, o = wt();
            return this.zn.hs(t, i).next((function(s) {
                return Zn.forEach(s, (function(s) {
                    var u = e.on(s.child(i));
                    return r.os(t, u, n).next((function(t) {
                        t.forEach((function(t, e) {
                            o = o.st(t, e);
                        }));
                    }));
                })).next((function() {
                    return o;
                }));
            }));
        }, t.prototype.os = function(t, e, n) {
            var r, i, o = this;
            // Query the remote documents and overlay mutations.
                    return this.Kn.ns(t, e, n).next((function(n) {
                return r = n, o.Gn.as(t, e);
            })).next((function(e) {
                return i = e, o.cs(t, i, r).next((function(t) {
                    r = t;
                    for (var e = 0, n = i; e < n.length; e++) for (var o = n[e], s = 0, u = o.mutations; s < u.length; s++) {
                        var a = u[s], c = a.key, h = r.get(c), f = Xe(a, h, h, o.Tn);
                        r = f instanceof dn ? r.st(c, f) : r.remove(c);
                    }
                }));
            })).next((function() {
                // Finally, filter out any documents that don't actually match
                // the query.
                return r.forEach((function(t, n) {
                    xn(e, n) || (r = r.remove(t));
                })), r;
            }));
        }, t.prototype.cs = function(t, e, n) {
            for (var r = Et(), i = 0, o = e; i < o.length; i++) for (var s = 0, u = o[i].mutations; s < u.length; s++) {
                var a = u[s];
                a instanceof nn && null === n.get(a.key) && (r = r.add(a.key));
            }
            var c = n;
            return this.Kn.getEntries(t, r).next((function(t) {
                return t.forEach((function(t, e) {
                    null !== e && e instanceof dn && (c = c.st(t, e));
                })), c;
            }));
        }, t;
    }(), er = /** @class */ function() {
        function t(t, e, n, r) {
            this.targetId = t, this.fromCache = e, this.us = n, this.ls = r;
        }
        return t._s = function(e, n) {
            for (var r = Et(), i = Et(), o = 0, s = n.docChanges; o < s.length; o++) {
                var u = s[o];
                switch (u.type) {
                  case 0 /* Added */ :
                    r = r.add(u.doc.key);
                    break;

                  case 1 /* Removed */ :
                    i = i.add(u.doc.key);
                    // do nothing
                            }
            }
            return new t(e, n.fromCache, r, i);
        }, t;
    }(), nr = /** @class */ function() {
        function t(t, e) {
            var n = this;
            this.previousValue = t, e && (e.fs = function(t) {
                return n.ds(t);
            }, this.ws = function(t) {
                return e.Ts(t);
            });
        }
        return t.prototype.ds = function(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }, t.prototype.next = function() {
            var t = ++this.previousValue;
            return this.ws && this.ws(t), t;
        }, t;
    }();

    /** The result of applying a mutation batch to the backend. */ nr.Es = -1;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var rr = function() {
        var t = this;
        this.promise = new Promise((function(e, n) {
            t.resolve = e, t.reject = n;
        }));
    }, ir = /** @class */ function() {
        function t(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        e, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        n
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , r
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , i) {
            void 0 === n && (n = 1e3), void 0 === r && (r = 1.5), void 0 === i && (i = 6e4), 
            this.ms = t, this.Is = e, this.As = n, this.Rs = r, this.Ps = i, this.gs = 0, this.Vs = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.ys = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    return t.prototype.reset = function() {
            this.gs = 0;
        }, 
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */
        t.prototype.ps = function() {
            this.gs = this.Ps;
        }, 
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */
        t.prototype.bs = function(t) {
            var e = this;
            // Cancel any pending backoff operation.
                    this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            var n = Math.floor(this.gs + this.vs()), r = Math.max(0, Date.now() - this.ys), i = Math.max(0, n - r);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    i > 0 && E$1("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.gs + " ms, delay with jitter: " + n + " ms, last attempt: " + r + " ms ago)"), 
            this.Vs = this.ms.Ss(this.Is, i, (function() {
                return e.ys = Date.now(), t();
            })), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.gs *= this.Rs, this.gs < this.As && (this.gs = this.As), this.gs > this.Ps && (this.gs = this.Ps);
        }, t.prototype.Ds = function() {
            null !== this.Vs && (this.Vs.Cs(), this.Vs = null);
        }, t.prototype.cancel = function() {
            null !== this.Vs && (this.Vs.cancel(), this.Vs = null);
        }, 
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ t.prototype.vs = function() {
            return (Math.random() - .5) * this.gs;
        }, t;
    }(), or = /** @class */ function() {
        /*
         * Creates a new SimpleDb wrapper for IndexedDb database `name`.
         *
         * Note that `version` must not be a downgrade. IndexedDB does not support
         * downgrading the schema version. We currently do not support any way to do
         * versioning outside of IndexedDB's versioning mechanism, as only
         * version-upgrade transactions are allowed to do things like create
         * objectstores.
         */
        function t(e, n, r) {
            this.name = e, this.version = n, this.Ns = r, 
            // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
            // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
            // whatever reason it's much harder to hit after 12.2 so we only proactively
            // log on 12.2.
            12.2 === t.Fs(getUA()) && T$2("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
        /** Deletes the specified database. */    return t.delete = function(t) {
            return E$1("SimpleDb", "Removing database:", t), fr(window.indexedDB.deleteDatabase(t)).Sn();
        }, 
        /** Returns true if IndexedDB is available in the current environment. */ t.ks = function() {
            if ("undefined" == typeof indexedDB) return !1;
            if (t.$s()) return !0;
            // We extensively use indexed array values and compound keys,
            // which IE and Edge do not support. However, they still have indexedDB
            // defined on the window, so we need to check for them here and make sure
            // to return that persistence is not enabled for those browsers.
            // For tracking support of this feature, see here:
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
            // Check the UA string to find out the browser.
                    var e = getUA(), n = t.Fs(e), r = 0 < n && n < 10, i = t.xs(e), o = 0 < i && i < 4.5;
            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
            // Edge
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
            // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
            // iOS Safari: Disable for users running iOS version < 10.
                    return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || r || o);
        }, 
        /**
         * Returns true if the backing IndexedDB store is the Node IndexedDBShim
         * (see https://github.com/axemclion/IndexedDBShim).
         */
        t.$s = function() {
            var t;
            return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Os);
        }, 
        /** Helper to get a typed SimpleDbStore from a transaction. */ t.Ms = function(t, e) {
            return t.store(e);
        }, 
        // visible for testing
        /** Parse User Agent to determine iOS version. Returns -1 if not found. */
        t.Fs = function(t) {
            var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
            return Number(n);
        }, 
        // visible for testing
        /** Parse User Agent to determine Android version. Returns -1 if not found. */
        t.xs = function(t) {
            var e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
            return Number(n);
        }, 
        /**
         * Opens the specified database, creating or upgrading it if necessary.
         */
        t.prototype.Ls = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.db ? [ 3 /*break*/ , 2 ] : (E$1("SimpleDb", "Opening database:", this.name), 
                        t = this, [ 4 /*yield*/ , new Promise((function(t, n) {
                            // TODO(mikelehen): Investigate browser compatibility.
                            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                            // suggests IE9 and older WebKit browsers handle upgrade
                            // differently. They expect setVersion, as described here:
                            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                            var r = indexedDB.open(e.name, e.version);
                            r.onsuccess = function(e) {
                                var n = e.target.result;
                                t(n);
                            }, r.onblocked = function() {
                                n(new ur("Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                            }, r.onerror = function(t) {
                                var e = t.target.error;
                                "VersionError" === e.name ? n(new G$1(F$1.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : n(new ur(e));
                            }, r.onupgradeneeded = function(t) {
                                E$1("SimpleDb", 'Database "' + e.name + '" requires upgrade from version:', t.oldVersion);
                                var n = t.target.result;
                                e.Ns.createOrUpgrade(n, r.transaction, t.oldVersion, e.version).next((function() {
                                    E$1("SimpleDb", "Database upgrade to version " + e.version + " complete");
                                }));
                            };
                        })) ]);

                      case 1:
                        t.db = n.sent(), n.label = 2;

                      case 2:
                        return [ 2 /*return*/ , (this.qs && (this.db.onversionchange = function(t) {
                            return e.qs(t);
                        }), this.db) ];
                    }
                }));
            }));
        }, t.prototype.Bs = function(t) {
            this.qs = t, this.db && (this.db.onversionchange = function(e) {
                return t(e);
            });
        }, t.prototype.runTransaction = function(t, r, i) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, o, s, u, a;
                return __generator(this, (function(c) {
                    switch (c.label) {
                      case 0:
                        e = "readonly" === t, o = 0, s = function() {
                            var t, s, a, c, h;
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    ++o, n.label = 1;

                                  case 1:
                                    return n.trys.push([ 1, 4, , 5 ]), [ 4 /*yield*/ , u.Ls() ];

                                  case 2:
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    return u.db = n.sent(), t = cr.open(u.db, e ? "readonly" : "readwrite", r), s = i(t).catch((function(e) {
                                        // Abort the transaction if there was an error.
                                        return t.abort(e), Zn.reject(e);
                                    })).Sn(), a = {}, s.catch((function() {})), [ 4 /*yield*/ , t.Us ];

                                  case 3:
                                    return [ 2 /*return*/ , (a.value = (
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    n.sent(), s), a) ];

                                  case 4:
                                    return c = n.sent(), h = "FirebaseError" !== c.name && o < 3, E$1("SimpleDb", "Transaction failed with error: %s. Retrying: %s.", c.message, h), 
                                    u.close(), h ? [ 3 /*break*/ , 5 ] : [ 2 /*return*/ , {
                                        value: Promise.reject(c)
                                    } ];

                                  case 5:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }, u = this, c.label = 1;

                      case 1:
                        return [ 5 /*yield**/ , s() ];

                      case 2:
                        if ("object" == typeof (a = c.sent())) return [ 2 /*return*/ , a.value ];
                        c.label = 3;

                      case 3:
                        return [ 3 /*break*/ , 1 ];

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.close = function() {
            this.db && this.db.close(), this.db = void 0;
        }, t;
    }(), sr = /** @class */ function() {
        function t(t) {
            this.Qs = t, this.Ws = !1, this.js = null;
        }
        return Object.defineProperty(t.prototype, "yn", {
            get: function() {
                return this.Ws;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "Ks", {
            get: function() {
                return this.js;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "cursor", {
            set: function(t) {
                this.Qs = t;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * This function can be called to stop iteration at any point.
         */
        t.prototype.done = function() {
            this.Ws = !0;
        }, 
        /**
         * This function can be called to skip to that next key, which could be
         * an index or a primary key.
         */
        t.prototype.Gs = function(t) {
            this.js = t;
        }, 
        /**
         * Delete the current cursor value from the object store.
         *
         * NOTE: You CANNOT do this with a keysOnly query.
         */
        t.prototype.delete = function() {
            return fr(this.Qs.delete());
        }, t;
    }(), ur = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this, F$1.UNAVAILABLE, "IndexedDB transaction failed: " + t) || this).name = "IndexedDbTransactionError", 
            n;
        }
        return __extends(n, e), n;
    }(G$1);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */
    /** Verifies whether `e` is an IndexedDbTransactionError. */ function ar(t) {
        // Use name equality, as instanceof checks on errors don't work with errors
        // that wrap other errors.
        return "IndexedDbTransactionError" === t.name;
    }

    /**
     * Wraps an IDBTransaction and exposes a store() method to get a handle to a
     * specific object store.
     */ var cr = /** @class */ function() {
        function t(t) {
            var e = this;
            this.transaction = t, this.aborted = !1, 
            /**
                 * A promise that resolves with the result of the IndexedDb transaction.
                 */
            this.zs = new rr, this.transaction.oncomplete = function() {
                e.zs.resolve();
            }, this.transaction.onabort = function() {
                t.error ? e.zs.reject(new ur(t.error)) : e.zs.resolve();
            }, this.transaction.onerror = function(t) {
                var n = pr(t.target.error);
                e.zs.reject(new ur(n));
            };
        }
        return t.open = function(e, n, r) {
            try {
                return new t(e.transaction(r, n));
            } catch (e) {
                throw new ur(e);
            }
        }, Object.defineProperty(t.prototype, "Us", {
            get: function() {
                return this.zs.promise;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.abort = function(t) {
            t && this.zs.reject(t), this.aborted || (E$1("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
            this.aborted = !0, this.transaction.abort());
        }, 
        /**
         * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
         * operations performed on the SimpleDbStore happen within the context of this
         * transaction and it cannot be used anymore once the transaction is
         * completed.
         *
         * Note that we can't actually enforce that the KeyType and ValueType are
         * correct, but they allow type safety through the rest of the consuming code.
         */
        t.prototype.store = function(t) {
            var e = this.transaction.objectStore(t);
            return new hr(e);
        }, t;
    }(), hr = /** @class */ function() {
        function t(t) {
            this.store = t;
        }
        return t.prototype.put = function(t, e) {
            var n;
            return void 0 !== e ? (E$1("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (E$1("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
            n = this.store.put(t)), fr(n);
        }, 
        /**
         * Adds a new value into an Object Store and returns the new key. Similar to
         * IndexedDb's `add()`, this method will fail on primary key collisions.
         *
         * @param value The object to write.
         * @return The key of the value to add.
         */
        t.prototype.add = function(t) {
            return E$1("SimpleDb", "ADD", this.store.name, t, t), fr(this.store.add(t));
        }, 
        /**
         * Gets the object with the specified key from the specified store, or null
         * if no object exists with the specified key.
         *
         * @key The key of the object to get.
         * @return The object with the specified key or null if no object exists.
         */
        t.prototype.get = function(t) {
            var e = this;
            // We're doing an unsafe cast to ValueType.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return fr(this.store.get(t)).next((function(n) {
                // Normalize nonexistence to null.
                return void 0 === n && (n = null), E$1("SimpleDb", "GET", e.store.name, t, n), n;
            }));
        }, t.prototype.delete = function(t) {
            return E$1("SimpleDb", "DELETE", this.store.name, t), fr(this.store.delete(t));
        }, 
        /**
         * If we ever need more of the count variants, we can add overloads. For now,
         * all we need is to count everything in a store.
         *
         * Returns the number of rows in the store.
         */
        t.prototype.count = function() {
            return E$1("SimpleDb", "COUNT", this.store.name), fr(this.store.count());
        }, t.prototype.Hs = function(t, e) {
            var n = this.cursor(this.options(t, e)), r = [];
            return this.Ys(n, (function(t, e) {
                r.push(e);
            })).next((function() {
                return r;
            }));
        }, t.prototype.Js = function(t, e) {
            E$1("SimpleDb", "DELETE ALL", this.store.name);
            var n = this.options(t, e);
            n.Xs = !1;
            var r = this.cursor(n);
            return this.Ys(r, (function(t, e, n) {
                return n.delete();
            }));
        }, t.prototype.Zs = function(t, e) {
            var n;
            e ? n = t : (n = {}, e = t);
            var r = this.cursor(n);
            return this.Ys(r, e);
        }, 
        /**
         * Iterates over a store, but waits for the given callback to complete for
         * each entry before iterating the next entry. This allows the callback to do
         * asynchronous work to determine if this iteration should continue.
         *
         * The provided callback should return `true` to continue iteration, and
         * `false` otherwise.
         */
        t.prototype.ti = function(t) {
            var e = this.cursor({});
            return new Zn((function(n, r) {
                e.onerror = function(t) {
                    var e = pr(t.target.error);
                    r(e);
                }, e.onsuccess = function(e) {
                    var r = e.target.result;
                    r ? t(r.primaryKey, r.value).next((function(t) {
                        t ? r.continue() : n();
                    })) : n();
                };
            }));
        }, t.prototype.Ys = function(t, e) {
            var n = [];
            return new Zn((function(r, i) {
                t.onerror = function(t) {
                    i(t.target.error);
                }, t.onsuccess = function(t) {
                    var i = t.target.result;
                    if (i) {
                        var o = new sr(i), s = e(i.primaryKey, i.value, o);
                        if (s instanceof Zn) {
                            var u = s.catch((function(t) {
                                return o.done(), Zn.reject(t);
                            }));
                            n.push(u);
                        }
                        o.yn ? r() : null === o.Ks ? i.continue() : i.continue(o.Ks);
                    } else r();
                };
            })).next((function() {
                return Zn.Cn(n);
            }));
        }, t.prototype.options = function(t, e) {
            var n = void 0;
            return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
                index: n,
                range: e
            };
        }, t.prototype.cursor = function(t) {
            var e = "next";
            if (t.reverse && (e = "prev"), t.index) {
                var n = this.store.index(t.index);
                return t.Xs ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
            }
            return this.store.openCursor(t.range, e);
        }, t;
    }();

    /**
     * A wrapper around an IDBObjectStore providing an API that:
     *
     * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
     * methods for acting against the object store.
     * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
     * method return a PersistencePromise instead.
     * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
     * intermediate IndexedDB types (IDBCursorWithValue, etc.)
     */
    /**
     * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
     * handlers to resolve / reject the PersistencePromise as appropriate.
     */
    function fr(t) {
        return new Zn((function(e, n) {
            t.onsuccess = function(t) {
                var n = t.target.result;
                e(n);
            }, t.onerror = function(t) {
                var e = pr(t.target.error);
                n(e);
            };
        }));
    }

    // Guard so we only report the error once.
    var lr = !1;

    function pr(t) {
        var e = or.Fs(getUA());
        if (e >= 12.2 && e < 13) {
            var n = "An internal error was encountered in the Indexed Database server";
            if (t.message.indexOf(n) >= 0) {
                // Wrap error in a more descriptive one.
                var r = new G$1("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + n + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
                return lr || (lr = !0, 
                // Throw a global exception outside of this promise chain, for the user to
                // potentially catch.
                setTimeout((function() {
                    throw r;
                }), 0)), r;
            }
        }
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'window' implementation or null if not available. */ function dr() {
        // `window` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof window ? window : null;
    }

    /** The Platform's 'document' implementation or null if not available. */ function yr() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */ var vr = /** @class */ function() {
        function t(t, e, n, r, i) {
            this.ei = t, this.Is = e, this.ni = n, this.op = r, this.si = i, this.ii = new rr, 
            this.then = this.ii.promise.then.bind(this.ii.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.ii.promise.catch((function(t) {}))
            /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue The queue to schedule the operation on.
         * @param id A Timer ID identifying the type of operation this is.
         * @param delayMs The delay (ms) before the operation should be scheduled.
         * @param op The operation to run.
         * @param removalCallback A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */;
        }
        return t.ri = function(e, n, r, i, o) {
            var s = new t(e, n, Date.now() + r, i, o);
            return s.start(r), s;
        }, 
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */
        t.prototype.start = function(t) {
            var e = this;
            this.oi = setTimeout((function() {
                return e.hi();
            }), t);
        }, 
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */
        t.prototype.Cs = function() {
            return this.hi();
        }, 
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */
        t.prototype.cancel = function(t) {
            null !== this.oi && (this.clearTimeout(), this.ii.reject(new G$1(F$1.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }, t.prototype.hi = function() {
            var t = this;
            this.ei.ai((function() {
                return null !== t.oi ? (t.clearTimeout(), t.op().then((function(e) {
                    return t.ii.resolve(e);
                }))) : Promise.resolve();
            }));
        }, t.prototype.clearTimeout = function() {
            null !== this.oi && (this.si(this), clearTimeout(this.oi), this.oi = null);
        }, t;
    }(), gr = /** @class */ function() {
        function t() {
            var t = this;
            // The last promise in the queue.
                    this.ci = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.ui = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.li = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this._i = [], 
            // visible for testing
            this.fi = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.di = !1, 
            // List of TimerIds to fast-forward delays for.
            this.wi = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.Ti = new ir(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.Ei = function() {
                var e = yr();
                e && E$1("AsyncQueue", "Visibility state changed to  ", e.visibilityState), t.Ti.Ds();
            };
            var e = yr();
            e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.Ei);
        }
        return Object.defineProperty(t.prototype, "mi", {
            // Is this AsyncQueue being shut down? If true, this instance will not enqueue
            // any new operations, Promises from enqueue requests will not resolve.
            get: function() {
                return this.li;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */
        t.prototype.ai = function(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }, 
        /**
         * Regardless if the queue has initialized shutdown, adds a new operation to the
         * queue without waiting for it to complete (i.e. we ignore the Promise result).
         */
        t.prototype.Ii = function(t) {
            this.Ai(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.Ri(t);
        }, 
        /**
         * Initialize the shutdown of this queue. Once this method is called, the
         * only possible way to request running an operation is through
         * `enqueueEvenWhileRestricted()`.
         */
        t.prototype.Pi = function() {
            if (!this.li) {
                this.li = !0;
                var t = yr();
                t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.Ei);
            }
        }, 
        /**
         * Adds a new operation to the queue. Returns a promise that will be resolved
         * when the promise returned by the new operation is (with its value).
         */
        t.prototype.enqueue = function(t) {
            return this.Ai(), this.li ? new Promise((function(t) {})) : this.Ri(t);
        }, 
        /**
         * Enqueue a retryable operation.
         *
         * A retryable operation is rescheduled with backoff if it fails with a
         * IndexedDbTransactionError (the error type used by SimpleDb). All
         * retryable operations are executed in order and only run if all prior
         * operations were retried successfully.
         */
        t.prototype.gi = function(t) {
            var e = this;
            this.ui.push(t), this.ai((function() {
                return e.Vi();
            }));
        }, 
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */
        t.prototype.Vi = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        if (0 === this.ui.length) return [ 3 /*break*/ , 5 ];
                        n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , this.ui[0]() ];

                      case 2:
                        return n.sent(), this.ui.shift(), this.Ti.reset(), [ 3 /*break*/ , 4 ];

                      case 3:
                        if (!ar(t = n.sent())) throw t;
                        // Failure will be handled by AsyncQueue
                                            return E$1("AsyncQueue", "Operation failed with retryable error: " + t), 
                        [ 3 /*break*/ , 4 ];

                      case 4:
                        this.ui.length > 0 && 
                        // If there are additional operations, we re-schedule `retryNextOp()`.
                        // This is necessary to run retryable operations that failed during
                        // their initial attempt since we don't know whether they are already
                        // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                        // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                        // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                        // call scheduled here.
                        // Since `backoffAndRun()` cancels an existing backoff and schedules a
                        // new backoff on every call, there is only ever a single additional
                        // operation in the queue.
                        this.Ti.bs((function() {
                            return e.Vi();
                        })), n.label = 5;

                      case 5:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Ri = function(t) {
            var e = this, n = this.ci.then((function() {
                return e.di = !0, t().catch((function(t) {
                    // Re-throw the error so that this.tail becomes a rejected Promise and
                    // all further attempts to chain (via .then) will just short-circuit
                    // and return the rejected Promise.
                    throw e.fi = t, e.di = !1, T$2("INTERNAL UNHANDLED ERROR: ", 
                    /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error Error or FirestoreError
     */
                    function(t) {
                        var e = t.message || "";
                        return t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack), 
                        e;
                    }(t)), t;
                })).then((function(t) {
                    return e.di = !1, t;
                }));
            }));
            return this.ci = n, n;
        }, 
        /**
         * Schedules an operation to be queued on the AsyncQueue once the specified
         * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel
         * or fast-forward the operation prior to its running.
         */
        t.prototype.Ss = function(t, e, n) {
            var r = this;
            this.Ai(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.wi.indexOf(t) > -1 && (e = 0);
            var i = vr.ri(this, t, e, n, (function(t) {
                return r.yi(t);
            }));
            return this._i.push(i), i;
        }, t.prototype.Ai = function() {
            this.fi && A$2();
        }, 
        /**
         * Verifies there's an operation currently in-progress on the AsyncQueue.
         * Unfortunately we can't verify that the running code is in the promise chain
         * of that operation, so this isn't a foolproof check, but it should be enough
         * to catch some bugs.
         */
        t.prototype.pi = function() {}, 
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */
        t.prototype.bi = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t;
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return [ 4 /*yield*/ , t = this.ci ];

                      case 1:
                        e.sent(), e.label = 2;

                      case 2:
                        if (t !== this.ci) return [ 3 /*break*/ , 0 ];
                        e.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */
        t.prototype.vi = function(t) {
            for (var e = 0, n = this._i; e < n.length; e++) {
                if (n[e].Is === t) return !0;
            }
            return !1;
        }, 
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId Delayed operations up to and including this TimerId will
         *  be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */
        t.prototype.Si = function(t) {
            var e = this;
            // Note that draining may generate more delayed ops, so we do that first.
                    return this.bi().then((function() {
                // Run ops in the same order they'd run if they ran naturally.
                e._i.sort((function(t, e) {
                    return t.ni - e.ni;
                }));
                for (var n = 0, r = e._i; n < r.length; n++) {
                    var i = r[n];
                    if (i.Cs(), "all" /* All */ !== t && i.Is === t) break;
                }
                return e.bi();
            }));
        }, 
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */
        t.prototype.Di = function(t) {
            this.wi.push(t);
        }, 
        /** Called once a DelayedOperation is run or canceled. */ t.prototype.yi = function(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            var e = this._i.indexOf(t);
            this._i.splice(e, 1);
        }, t;
    }();

    /**
     * Returns a FirestoreError that can be surfaced to the user if the provided
     * error is an IndexedDbTransactionError. Re-throws the error otherwise.
     */
    function mr(t, e) {
        if (T$2("AsyncQueue", e + ": " + t), ar(t)) return new G$1(F$1.UNAVAILABLE, e + ": " + t);
        throw t;
    }

    function wr(t, e) {
        var n = t[0], r = t[1], i = e[0], o = e[1], s = L$1(n, i);
        return 0 === s ? L$1(r, o) : s;
    }

    /**
     * Used to calculate the nth sequence number. Keeps a rolling buffer of the
     * lowest n values passed to `addElement`, and finally reports the largest of
     * them in `maxValue`.
     */ var br = /** @class */ function() {
        function t(t) {
            this.Ci = t, this.buffer = new pt(wr), this.Ni = 0;
        }
        return t.prototype.Fi = function() {
            return ++this.Ni;
        }, t.prototype.ki = function(t) {
            var e = [ t, this.Fi() ];
            if (this.buffer.size < this.Ci) this.buffer = this.buffer.add(e); else {
                var n = this.buffer.last();
                wr(e, n) < 0 && (this.buffer = this.buffer.delete(n).add(e));
            }
        }, Object.defineProperty(t.prototype, "maxValue", {
            get: function() {
                // Guaranteed to be non-empty. If we decide we are not collecting any
                // sequence numbers, nthSequenceNumber below short-circuits. If we have
                // decided that we are collecting n sequence numbers, it's because n is some
                // percentage of the existing sequence numbers. That means we should never
                // be in a situation where we are collecting sequence numbers but don't
                // actually have any.
                return this.buffer.last()[0];
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }(), Ir = {
        $i: !1,
        xi: 0,
        Oi: 0,
        Mi: 0
    }, Er = /** @class */ function() {
        function t(
        // When we attempt to collect, we will only do so if the cache size is greater than this
        // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
        t, 
        // The percentage of sequence numbers that we will attempt to collect
        e, 
        // A cap on the total number of sequence numbers that will be collected. This prevents
        // us from collecting a huge number of sequence numbers if the cache has grown very large.
        n) {
            this.Li = t, this.qi = e, this.Bi = n;
        }
        return t.Ui = function(e) {
            return new t(e, t.Qi, t.Wi);
        }, t;
    }();

    Er.ji = -1, Er.Ki = 1048576, Er.Gi = 41943040, Er.Qi = 10, Er.Wi = 1e3, Er.zi = new Er(Er.Gi, Er.Qi, Er.Wi), 
    Er.Hi = new Er(Er.ji, 0, 0);

    /**
     * This class is responsible for the scheduling of LRU garbage collection. It handles checking
     * whether or not GC is enabled, as well as which delay to use before the next run.
     */
    var Tr = /** @class */ function() {
        function t(t, e) {
            this.Yi = t, this.ei = e, this.Ji = !1, this.Xi = null;
        }
        return t.prototype.start = function(t) {
            this.Yi.params.Li !== Er.ji && this.Zi(t);
        }, t.prototype.stop = function() {
            this.Xi && (this.Xi.cancel(), this.Xi = null);
        }, Object.defineProperty(t.prototype, "tr", {
            get: function() {
                return null !== this.Xi;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.Zi = function(t) {
            var r = this, i = this.Ji ? 3e5 : 6e4;
            E$1("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.Xi = this.ei.Ss("lru_garbage_collection" /* LruGarbageCollection */ , i, (function() {
                return __awaiter(r, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            this.Xi = null, this.Ji = !0, n.label = 1;

                          case 1:
                            return n.trys.push([ 1, 3, , 7 ]), [ 4 /*yield*/ , t.er(this.Yi) ];

                          case 2:
                            return n.sent(), [ 3 /*break*/ , 7 ];

                          case 3:
                            return ar(e = n.sent()) ? (E$1("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e), 
                            [ 3 /*break*/ , 6 ]) : [ 3 /*break*/ , 4 ];

                          case 4:
                            return [ 4 /*yield*/ , Mi(e) ];

                          case 5:
                            n.sent(), n.label = 6;

                          case 6:
                            return [ 3 /*break*/ , 7 ];

                          case 7:
                            return [ 4 /*yield*/ , this.Zi(t) ];

                          case 8:
                            return n.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, t;
    }(), Nr = /** @class */ function() {
        function t(t, e) {
            this.nr = t, this.params = e
            /** Given a percentile of target to collect, returns the number of targets to collect. */;
        }
        return t.prototype.sr = function(t, e) {
            return this.nr.ir(t).next((function(t) {
                return Math.floor(e / 100 * t);
            }));
        }, 
        /** Returns the nth sequence number, counting in order from the smallest. */ t.prototype.rr = function(t, e) {
            var n = this;
            if (0 === e) return Zn.resolve(nr.Es);
            var r = new br(e);
            return this.nr.be(t, (function(t) {
                return r.ki(t.sequenceNumber);
            })).next((function() {
                return n.nr.or(t, (function(t) {
                    return r.ki(t);
                }));
            })).next((function() {
                return r.maxValue;
            }));
        }, 
        /**
         * Removes targets with a sequence number equal to or less than the given upper bound, and removes
         * document associations with those targets.
         */
        t.prototype.hr = function(t, e, n) {
            return this.nr.hr(t, e, n);
        }, 
        /**
         * Removes documents that have a sequence number equal to or less than the upper bound and are not
         * otherwise pinned.
         */
        t.prototype.ar = function(t, e) {
            return this.nr.ar(t, e);
        }, t.prototype.cr = function(t, e) {
            var n = this;
            return this.params.Li === Er.ji ? (E$1("LruGarbageCollector", "Garbage collection skipped; disabled"), 
            Zn.resolve(Ir)) : this.ur(t).next((function(r) {
                return r < n.params.Li ? (E$1("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.Li), 
                Ir) : n.lr(t, e);
            }));
        }, t.prototype.ur = function(t) {
            return this.nr.ur(t);
        }, t.prototype.lr = function(t, e) {
            var n, r, i, o, u, a, c, h = this, f = Date.now();
            return this.sr(t, this.params.qi).next((function(e) {
                // Cap at the configured max
                return e > h.params.Bi ? (E$1("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + h.params.Bi + " from " + e), 
                r = h.params.Bi) : r = e, o = Date.now(), h.rr(t, r);
            })).next((function(r) {
                return n = r, u = Date.now(), h.hr(t, n, e);
            })).next((function(e) {
                return i = e, a = Date.now(), h.ar(t, n);
            })).next((function(t) {
                return c = Date.now(), I$1() <= LogLevel.DEBUG && E$1("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (o - f) + "ms\n\tDetermined least recently used " + r + " in " + (u - o) + "ms\n\tRemoved " + i + " targets in " + (a - u) + "ms\n\tRemoved " + t + " documents in " + (c - a) + "ms\nTotal Duration: " + (c - f) + "ms"), 
                Zn.resolve({
                    $i: !0,
                    xi: r,
                    Oi: i,
                    Mi: t
                });
            }));
        }, t;
    }();

    /** Implements the steps for LRU garbage collection. */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encodes a resource path into a IndexedDb-compatible string form.
     */
    function _r(t) {
        for (var e = "", n = 0; n < t.length; n++) e.length > 0 && (e = Sr(e)), e = Ar(t.get(n), e);
        return Sr(e);
    }

    /** Encodes a single segment of a resource path into the given result */ function Ar(t, e) {
        for (var n = e, r = t.length, i = 0; i < r; i++) {
            var o = t.charAt(i);
            switch (o) {
              case "\0":
                n += "";
                break;

              case "":
                n += "";
                break;

              default:
                n += o;
            }
        }
        return n;
    }

    /** Encodes a path separator into the given result */ function Sr(t) {
        return t + "";
    }

    /**
     * Decodes the given IndexedDb-compatible string form of a resource path into
     * a ResourcePath instance. Note that this method is not suitable for use with
     * decoding resource names from the server; those are One Platform format
     * strings.
     */ function Dr(t) {
        // Event the empty path must encode as a path of at least length 2. A path
        // with exactly 2 must be the empty path.
        var e = t.length;
        if (S$2(e >= 2), 2 === e) return S$2("" === t.charAt(0) && "" === t.charAt(1)), Q$1.$();
        // Escape characters cannot exist past the second-to-last position in the
        // source value.
            for (var n = e - 2, r = [], i = "", o = 0; o < e; ) {
            // The last two characters of a valid encoded path must be a separator, so
            // there must be an end to this segment.
            var s = t.indexOf("", o);
            switch ((s < 0 || s > n) && A$2(), t.charAt(s + 1)) {
              case "":
                var u = t.substring(o, s), a = void 0;
                0 === i.length ? 
                // Avoid copying for the common case of a segment that excludes \0
                // and \001
                a = u : (a = i += u, i = ""), r.push(a);
                break;

              case "":
                i += t.substring(o, s), i += "\0";
                break;

              case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(o, s + 1);
                break;

              default:
                A$2();
            }
            o = s + 2;
        }
        return new Q$1(r);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Serializer for values stored in the LocalStore. */ var kr = function(t) {
        this._r = t;
    };

    /** Decodes a remote document from storage locally to a Document. */ function xr(t, e) {
        if (e.document) return function(t, e, n) {
            var r = de(t, e.name), i = he(e.updateTime), o = new hn({
                mapValue: {
                    fields: e.fields
                }
            });
            return new dn(r, i, o, {
                hasCommittedMutations: !!n
            });
        }(t._r, e.document, !!e.hasCommittedMutations);
        if (e.noDocument) {
            var n = K$1.K(e.noDocument.path), r = Vr(e.noDocument.readTime);
            return new yn(n, r, {
                hasCommittedMutations: !!e.hasCommittedMutations
            });
        }
        if (e.unknownDocument) {
            var i = K$1.K(e.unknownDocument.path), o = Vr(e.unknownDocument.version);
            return new vn(i, o);
        }
        return A$2();
    }

    /** Encodes a document for storage locally. */ function Lr(t, e, n) {
        var r = Pr(n), i = e.key.path.p().N();
        if (e instanceof dn) {
            var o = function(t, e) {
                return {
                    name: pe(t, e.key),
                    fields: e.tn().mapValue.fields,
                    updateTime: ue(t, e.version.A())
                };
            }(t._r, e), s = e.hasCommittedMutations;
            return new si(
            /* unknownDocument= */ null, 
            /* noDocument= */ null, o, s, r, i);
        }
        if (e instanceof yn) {
            var u = e.key.path.N(), a = Or(e.version), c = e.hasCommittedMutations;
            return new si(
            /* unknownDocument= */ null, new ii(u, a), 
            /* document= */ null, c, r, i);
        }
        if (e instanceof vn) {
            var h = e.key.path.N(), f = Or(e.version);
            return new si(new oi(h, f), 
            /* noDocument= */ null, 
            /* document= */ null, 
            /* hasCommittedMutations= */ !0, r, i);
        }
        return A$2();
    }

    function Pr(t) {
        var e = t.A();
        return [ e.seconds, e.nanoseconds ];
    }

    function Rr(t) {
        var e = new j(t[0], t[1]);
        return B.m(e);
    }

    function Or(t) {
        var e = t.A();
        return new Jr(e.seconds, e.nanoseconds);
    }

    function Vr(t) {
        var e = new j(t.seconds, t.nanoseconds);
        return B.m(e);
    }

    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
    /** Decodes a DbMutationBatch into a MutationBatch */ function Ur(t, e) {
        var n = (e.baseMutations || []).map((function(e) {
            return Ie(t._r, e);
        })), r = e.mutations.map((function(e) {
            return Ie(t._r, e);
        })), i = j.fromMillis(e.localWriteTimeMs);
        return new Kn(e.batchId, i, n, r);
    }

    /** Decodes a DbTarget into TargetData */ function Cr(t) {
        var e, n, r = Vr(t.readTime), i = void 0 !== t.lastLimboFreeSnapshotVersion ? Vr(t.lastLimboFreeSnapshotVersion) : B.min();
        return void 0 !== t.query.documents ? (S$2(1 === (n = t.query).documents.length), 
        e = Tn(bn(ve(n.documents[0])))) : e = function(t) {
            var e = ve(t.parent), n = t.structuredQuery, r = n.from ? n.from.length : 0, i = null;
            if (r > 0) {
                S$2(1 === r);
                var o = n.from[0];
                o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
            }
            var s = [];
            n.where && (s = function t(e) {
                return e ? void 0 !== e.unaryFilter ? [ ke(e) ] : void 0 !== e.fieldFilter ? [ De(e) ] : void 0 !== e.compositeFilter ? e.compositeFilter.filters.map((function(e) {
                    return t(e);
                })).reduce((function(t, e) {
                    return t.concat(e);
                })) : A$2() : [];
            }(n.where));
            var u = [];
            n.orderBy && (u = n.orderBy.map((function(t) {
                return new Qn(Se((e = t).field), 
                // visible for testing
                function(t) {
                    switch (t) {
                      case "ASCENDING":
                        return "asc" /* ASCENDING */;

                      case "DESCENDING":
                        return "desc" /* DESCENDING */;

                      default:
                        return;
                    }
                }(e.direction));
                var e;
            })));
            var a = null;
            n.limit && (a = function(t) {
                var e;
                return Y$1(e = "object" == typeof t ? t.value : t) ? null : e;
            }(n.limit));
            var c = null;
            n.startAt && (c = _e(n.startAt));
            var h = null;
            return n.endAt && (h = _e(n.endAt)), Tn(wn(e, i, u, s, a, "F" /* First */ , c, h));
        }(t.query), new st(e, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, r, i, rt.fromBase64String(t.resumeToken))
        /** Encodes TargetData into a DbTarget for storage locally. */;
    }

    function qr(t, e) {
        var n, r = Or(e.Z), i = Or(e.lastLimboFreeSnapshotVersion);
        n = nt(e.target) ? Ee(t._r, e.target) : Te(t._r, e.target);
        // We can't store the resumeToken as a ByteString in IndexedDb, so we
        // convert it to a base64 string for storage.
        var o = e.resumeToken.toBase64();
        // lastListenSequenceNumber is always 0 until we do real GC.
            return new ai(e.targetId, tt(e.target), r, o, e.sequenceNumber, i, n);
    }

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A mutation queue for a specific user, backed by IndexedDB. */ var Mr = /** @class */ function() {
        function t(
        /**
         * The normalized userId (e.g. null UID => "" userId) used to store /
         * retrieve mutations.
         */
        t, e, n, r) {
            this.userId = t, this.serializer = e, this.zn = n, this.dr = r, 
            /**
                 * Caches the document keys for pending mutation batches. If the mutation
                 * has been removed from IndexedDb, the cached value may continue to
                 * be used to retrieve the batch's document keys. To remove a cached value
                 * locally, `removeCachedMutationKeys()` should be invoked either directly
                 * or through `removeMutationBatches()`.
                 *
                 * With multi-tab, when the primary client acknowledges or rejects a mutation,
                 * this cache is used by secondary clients to invalidate the local
                 * view of the documents that were previously affected by the mutation.
                 */
            // PORTING NOTE: Multi-tab only.
            this.wr = {}
            /**
         * Creates a new mutation queue for the given user.
         * @param user The user for which to create a mutation queue.
         * @param serializer The serializer to use when persisting to IndexedDb.
         */;
        }
        return t.Tr = function(e, n, r, i) {
            // TODO(mcg): Figure out what constraints there are on userIDs
            // In particular, are there any reserved characters? are empty ids allowed?
            // For the moment store these together in the same mutations table assuming
            // that empty userIDs aren't allowed.
            return S$2("" !== e.uid), new t(e.Er() ? e.uid : "", n, r, i);
        }, t.prototype.mr = function(t) {
            var e = !0, n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return jr(t).Zs({
                index: ni.userMutationsIndex,
                range: n
            }, (function(t, n, r) {
                e = !1, r.done();
            })).next((function() {
                return e;
            }));
        }, t.prototype.Ir = function(t, e, n, r) {
            var i = this, o = Br(t), s = jr(t);
            // The IndexedDb implementation in Chrome (and Firefox) does not handle
            // compound indices that include auto-generated keys correctly. To ensure
            // that the index entry is added correctly in all browsers, we perform two
            // writes: The first write is used to retrieve the next auto-generated Batch
            // ID, and the second write populates the index and stores the actual
            // mutation batch.
            // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
            // We write an empty object to obtain key
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return s.add({}).next((function(u) {
                S$2("number" == typeof u);
                for (var a = new Kn(u, e, n, r), c = function(t, e, n) {
                    var r = n.baseMutations.map((function(e) {
                        return be(t._r, e);
                    })), i = n.mutations.map((function(e) {
                        return be(t._r, e);
                    }));
                    return new ni(e, n.batchId, n.Tn.toMillis(), r, i);
                }(i.serializer, i.userId, a), h = [], f = new pt((function(t, e) {
                    return L$1(t.F(), e.F());
                })), l = 0, p = r; l < p.length; l++) {
                    var d = p[l], y = ri.key(i.userId, d.key.path, u);
                    f = f.add(d.key.path.p()), h.push(s.put(c)), h.push(o.put(y, ri.PLACEHOLDER));
                }
                return f.forEach((function(e) {
                    h.push(i.zn.Ar(t, e));
                })), t.Wn((function() {
                    i.wr[u] = a.keys();
                })), Zn.Cn(h).next((function() {
                    return a;
                }));
            }));
        }, t.prototype.Rr = function(t, e) {
            var n = this;
            return jr(t).get(e).next((function(t) {
                return t ? (S$2(t.userId === n.userId), Ur(n.serializer, t)) : null;
            }));
        }, 
        /**
         * Returns the document keys for the mutation batch with the given batchId.
         * For primary clients, this method returns `null` after
         * `removeMutationBatches()` has been called. Secondary clients return a
         * cached result until `removeCachedMutationKeys()` is invoked.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Pr = function(t, e) {
            var n = this;
            return this.wr[e] ? Zn.resolve(this.wr[e]) : this.Rr(t, e).next((function(t) {
                if (t) {
                    var r = t.keys();
                    return n.wr[e] = r, r;
                }
                return null;
            }));
        }, t.prototype.gr = function(t, e) {
            var n = this, r = e + 1, i = IDBKeyRange.lowerBound([ this.userId, r ]), o = null;
            return jr(t).Zs({
                index: ni.userMutationsIndex,
                range: i
            }, (function(t, e, i) {
                e.userId === n.userId && (S$2(e.batchId >= r), o = Ur(n.serializer, e)), i.done();
            })).next((function() {
                return o;
            }));
        }, t.prototype.Vr = function(t) {
            var e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]), n = -1;
            return jr(t).Zs({
                index: ni.userMutationsIndex,
                range: e,
                reverse: !0
            }, (function(t, e, r) {
                n = e.batchId, r.done();
            })).next((function() {
                return n;
            }));
        }, t.prototype.yr = function(t) {
            var e = this, n = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return jr(t).Hs(ni.userMutationsIndex, n).next((function(t) {
                return t.map((function(t) {
                    return Ur(e.serializer, t);
                }));
            }));
        }, t.prototype.Yn = function(t, e) {
            var n = this, r = ri.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r), o = [];
            // Scan the document-mutation index starting with a prefix starting with
            // the given documentKey.
                    return Br(t).Zs({
                range: i
            }, (function(r, i, s) {
                var u = r[0], a = r[1], c = r[2], h = Dr(a);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                            if (u === n.userId && e.path.isEqual(h)) 
                // Look up the mutation batch in the store.
                return jr(t).get(c).next((function(t) {
                    if (!t) throw A$2();
                    S$2(t.userId === n.userId), o.push(Ur(n.serializer, t));
                }));
                s.done();
            })).next((function() {
                return o;
            }));
        }, t.prototype.es = function(t, e) {
            var n = this, r = new pt(L$1), i = [];
            return e.forEach((function(e) {
                var o = ri.prefixForPath(n.userId, e.path), s = IDBKeyRange.lowerBound(o), u = Br(t).Zs({
                    range: s
                }, (function(t, i, o) {
                    var s = t[0], u = t[1], a = t[2], c = Dr(u);
                    // Only consider rows matching exactly the specific key of
                    // interest. Note that because we order by path first, and we
                    // order terminators before path separators, we'll encounter all
                    // the index rows for documentKey contiguously. In particular, all
                    // the rows for documentKey will occur before any rows for
                    // documents nested in a subcollection beneath documentKey so we
                    // can stop as soon as we hit any such row.
                                    s === n.userId && e.path.isEqual(c) ? r = r.add(a) : o.done();
                }));
                i.push(u);
            })), Zn.Cn(i).next((function() {
                return n.pr(t, r);
            }));
        }, t.prototype.as = function(t, e) {
            var n = this, r = e.path, i = r.length + 1, o = ri.prefixForPath(this.userId, r), s = IDBKeyRange.lowerBound(o), u = new pt(L$1);
            return Br(t).Zs({
                range: s
            }, (function(t, e, o) {
                var s = t[0], a = t[1], c = t[2], h = Dr(a);
                s === n.userId && r.D(h) ? 
                // Rows with document keys more than one segment longer than the
                // query path can't be matches. For example, a query on 'rooms'
                // can't match the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                h.length === i && (u = u.add(c)) : o.done();
            })).next((function() {
                return n.pr(t, u);
            }));
        }, t.prototype.pr = function(t, e) {
            var n = this, r = [], i = [];
            // TODO(rockwood): Implement this using iterate.
            return e.forEach((function(e) {
                i.push(jr(t).get(e).next((function(t) {
                    if (null === t) throw A$2();
                    S$2(t.userId === n.userId), r.push(Ur(n.serializer, t));
                })));
            })), Zn.Cn(i).next((function() {
                return r;
            }));
        }, t.prototype.br = function(t, e) {
            var n = this;
            return Gr(t.vr, this.userId, e).next((function(r) {
                return t.Wn((function() {
                    n.Sr(e.batchId);
                })), Zn.forEach(r, (function(e) {
                    return n.dr.Dr(t, e);
                }));
            }));
        }, 
        /**
         * Clears the cached keys for a mutation batch. This method should be
         * called by secondary clients after they process mutation updates.
         *
         * Note that this method does not have to be called from primary clients as
         * the corresponding cache entries are cleared when an acknowledged or
         * rejected batch is removed from the mutation queue.
         */
        // PORTING NOTE: Multi-tab only
        t.prototype.Sr = function(t) {
            delete this.wr[t];
        }, t.prototype.Cr = function(t) {
            var e = this;
            return this.mr(t).next((function(n) {
                if (!n) return Zn.resolve();
                // Verify that there are no entries in the documentMutations index if
                // the queue is empty.
                            var r = IDBKeyRange.lowerBound(ri.prefixForUser(e.userId)), i = [];
                return Br(t).Zs({
                    range: r
                }, (function(t, n, r) {
                    if (t[0] === e.userId) {
                        var o = Dr(t[1]);
                        i.push(o);
                    } else r.done();
                })).next((function() {
                    S$2(0 === i.length);
                }));
            }));
        }, t.prototype.Nr = function(t, e) {
            return Fr(t, this.userId, e);
        }, 
        // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
        /** Returns the mutation queue's metadata from IndexedDb. */
        t.prototype.Fr = function(t) {
            var e = this;
            return zr(t).get(this.userId).next((function(t) {
                return t || new ei(e.userId, -1, 
                /*lastStreamToken=*/ "");
            }));
        }, t;
    }();

    /**
     * @return true if the mutation queue for the given user contains a pending
     *         mutation for the given key.
     */ function Fr(t, e, n) {
        var r = ri.prefixForPath(e, n.path), i = r[1], o = IDBKeyRange.lowerBound(r), s = !1;
        return Br(t).Zs({
            range: o,
            Xs: !0
        }, (function(t, n, r) {
            var o = t[0], u = t[1];
            t[2];
            o === e && u === i && (s = !0), r.done();
        })).next((function() {
            return s;
        }));
    }

    /** Returns true if any mutation queue contains the given document. */
    /**
     * Delete a mutation batch and the associated document mutations.
     * @return A PersistencePromise of the document mutations that were removed.
     */ function Gr(t, e, n) {
        var r = t.store(ni.store), i = t.store(ri.store), o = [], s = IDBKeyRange.only(n.batchId), u = 0, a = r.Zs({
            range: s
        }, (function(t, e, n) {
            return u++, n.delete();
        }));
        o.push(a.next((function() {
            S$2(1 === u);
        })));
        for (var c = [], h = 0, f = n.mutations; h < f.length; h++) {
            var l = f[h], p = ri.key(e, l.key.path, n.batchId);
            o.push(i.delete(p)), c.push(l.key);
        }
        return Zn.Cn(o).next((function() {
            return c;
        }));
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutations object store.
     */ function jr(t) {
        return Ni.Ms(t, ni.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Br(t) {
        return Ni.Ms(t, ri.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function zr(t) {
        return Ni.Ms(t, ei.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Qr = /** @class */ function() {
        /**
         * @param {LocalSerializer} serializer The document serializer.
         * @param {IndexManager} indexManager The query indexes that need to be maintained.
         */
        function t(t, e) {
            this.serializer = t, this.zn = e
            /**
         * Adds the supplied entries to the cache.
         *
         * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */;
        }
        return t.prototype.xn = function(t, e, n) {
            return Hr(t).put(Kr(e), n);
        }, 
        /**
         * Removes a document from the cache.
         *
         * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */
        t.prototype.Mn = function(t, e) {
            var n = Hr(t), r = Kr(e);
            return n.delete(r);
        }, 
        /**
         * Updates the current cache size.
         *
         * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
         * cache's metadata.
         */
        t.prototype.updateMetadata = function(t, e) {
            var n = this;
            return this.getMetadata(t).next((function(r) {
                return r.byteSize += e, n.kr(t, r);
            }));
        }, t.prototype.Ln = function(t, e) {
            var n = this;
            return Hr(t).get(Kr(e)).next((function(t) {
                return n.$r(t);
            }));
        }, 
        /**
         * Looks up an entry in the cache.
         *
         * @param documentKey The key of the entry to look up.
         * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
         */
        t.prototype.xr = function(t, e) {
            var n = this;
            return Hr(t).get(Kr(e)).next((function(t) {
                var e = n.$r(t);
                return e ? {
                    Or: e,
                    size: Yr(t)
                } : null;
            }));
        }, t.prototype.getEntries = function(t, e) {
            var n = this, r = gt();
            return this.Mr(t, e, (function(t, e) {
                var i = n.$r(e);
                r = r.st(t, i);
            })).next((function() {
                return r;
            }));
        }, 
        /**
         * Looks up several entries in the cache.
         *
         * @param documentKeys The set of keys entries to look up.
         * @return A map of MaybeDocuments indexed by key (if a document cannot be
         *     found, the key will be mapped to null) and a map of sizes indexed by
         *     key (zero if the key cannot be found).
         */
        t.prototype.Lr = function(t, e) {
            var n = this, r = gt(), i = new ht(K$1.P);
            return this.Mr(t, e, (function(t, e) {
                var o = n.$r(e);
                o ? (r = r.st(t, o), i = i.st(t, Yr(e))) : (r = r.st(t, null), i = i.st(t, 0));
            })).next((function() {
                return {
                    qr: r,
                    Br: i
                };
            }));
        }, t.prototype.Mr = function(t, e, n) {
            if (e._()) return Zn.resolve();
            var r = IDBKeyRange.bound(e.first().path.N(), e.last().path.N()), i = e.ct(), o = i.wt();
            return Hr(t).Zs({
                range: r
            }, (function(t, e, r) {
                // Go through keys not found in cache.
                for (var s = K$1.K(t); o && K$1.P(o, s) < 0; ) n(o, null), o = i.wt();
                o && o.isEqual(s) && (
                // Key found in cache.
                n(o, e), o = i.Tt() ? i.wt() : null), 
                // Skip to the next key (if there is one).
                o ? r.Gs(o.path.N()) : r.done();
            })).next((function() {
                // The rest of the keys are not in the cache. One case where `iterate`
                // above won't go through them is when the cache is empty.
                for (;o; ) n(o, null), o = i.Tt() ? i.wt() : null;
            }));
        }, t.prototype.ns = function(t, e, n) {
            var r = this, i = wt(), o = e.path.length + 1, s = {};
            if (n.isEqual(B.min())) {
                // Documents are ordered by key, so we can use a prefix scan to narrow
                // down the documents we need to match the query against.
                var u = e.path.N();
                s.range = IDBKeyRange.lowerBound(u);
            } else {
                // Execute an index-free query and filter by read time. This is safe
                // since all document changes to queries that have a
                // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
                var a = e.path.N(), c = Pr(n);
                s.range = IDBKeyRange.lowerBound([ a, c ], 
                /* open= */ !0), s.index = si.collectionReadTimeIndex;
            }
            return Hr(t).Zs(s, (function(t, n, s) {
                // The query is actually returning any path that starts with the query
                // path prefix which may include documents in subcollections. For
                // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
                // shouldn't match it. Fix this by discarding rows with document keys
                // more than one segment longer than the query path.
                if (t.length === o) {
                    var u = xr(r.serializer, n);
                    e.path.D(u.key.path) ? u instanceof dn && xn(e, u) && (i = i.st(u.key, u)) : s.done();
                }
            })).next((function() {
                return i;
            }));
        }, 
        /**
         * Returns the set of documents that have changed since the specified read
         * time.
         */
        // PORTING NOTE: This is only used for multi-tab synchronization.
        t.prototype.Ur = function(t, e) {
            var n = this, r = vt(), i = Pr(e), o = Hr(t), s = IDBKeyRange.lowerBound(i, !0);
            return o.Zs({
                index: si.readTimeIndex,
                range: s
            }, (function(t, e) {
                // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                // the documents directly since we want to keep sentinel deletes.
                var o = xr(n.serializer, e);
                r = r.st(o.key, o), i = e.readTime;
            })).next((function() {
                return {
                    Qr: r,
                    readTime: Rr(i)
                };
            }));
        }, 
        /**
         * Returns the read time of the most recently read document in the cache, or
         * SnapshotVersion.min() if not available.
         */
        // PORTING NOTE: This is only used for multi-tab synchronization.
        t.prototype.Wr = function(t) {
            var e = Hr(t), n = B.min();
            // If there are no existing entries, we return SnapshotVersion.min().
                    return e.Zs({
                index: si.readTimeIndex,
                reverse: !0
            }, (function(t, e, r) {
                e.readTime && (n = Rr(e.readTime)), r.done();
            })).next((function() {
                return n;
            }));
        }, t.prototype.jr = function(e) {
            return new t.Kr(this, !!e && e.Gr);
        }, t.prototype.zr = function(t) {
            return this.getMetadata(t).next((function(t) {
                return t.byteSize;
            }));
        }, t.prototype.getMetadata = function(t) {
            return Wr(t).get(ui.key).next((function(t) {
                return S$2(!!t), t;
            }));
        }, t.prototype.kr = function(t, e) {
            return Wr(t).put(ui.key, e);
        }, 
        /**
         * Decodes `remoteDoc` and returns the document (or null, if the document
         * corresponds to the format used for sentinel deletes).
         */
        t.prototype.$r = function(t) {
            if (t) {
                var e = xr(this.serializer, t);
                return e instanceof yn && e.version.isEqual(B.min()) ? null : e;
            }
            return null;
        }, t;
    }();

    /**
     * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
     *
     * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
     * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
     * when we apply the changes.
     */ function Wr(t) {
        return Ni.Ms(t, ui.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
     */ function Hr(t) {
        return Ni.Ms(t, si.store);
    }

    function Kr(t) {
        return t.path.N();
    }

    /**
     * Retrusn an approximate size for the given document.
     */ function Yr(t) {
        var e;
        if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
            if (!t.noDocument) throw A$2();
            e = t.noDocument;
        }
        return JSON.stringify(e).length;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ Qr.Kr = /** @class */ function(e) {
        /**
         * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.
         * @param trackRemovals Whether to create sentinel deletes that can be tracked by
         * `getNewDocumentChanges()`.
         */
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).Hr = t, r.Gr = n, 
            // A map of document sizes prior to applying the changes in this buffer.
            r.Yr = new M$1((function(t) {
                return t.toString();
            }), (function(t, e) {
                return t.isEqual(e);
            })), r;
        }
        return __extends(n, e), n.prototype.Un = function(t) {
            var e = this, n = [], r = 0, i = new pt((function(t, e) {
                return L$1(t.F(), e.F());
            }));
            return this.Fn.forEach((function(o, s) {
                var u = e.Yr.get(o);
                if (s) {
                    var a = Lr(e.Hr.serializer, s, e.readTime);
                    i = i.add(o.path.p());
                    var c = Yr(a);
                    r += c - u, n.push(e.Hr.xn(t, o, a));
                } else if (r -= u, e.Gr) {
                    // In order to track removals, we store a "sentinel delete" in the
                    // RemoteDocumentCache. This entry is represented by a NoDocument
                    // with a version of 0 and ignored by `maybeDecodeDocument()` but
                    // preserved in `getNewDocumentChanges()`.
                    var h = Lr(e.Hr.serializer, new yn(o, B.min()), e.readTime);
                    n.push(e.Hr.xn(t, o, h));
                } else n.push(e.Hr.Mn(t, o));
            })), i.forEach((function(r) {
                n.push(e.Hr.zn.Ar(t, r));
            })), n.push(this.Hr.updateMetadata(t, r)), Zn.Cn(n);
        }, n.prototype.qn = function(t, e) {
            var n = this;
            // Record the size of everything we load from the cache so we can compute a delta later.
                    return this.Hr.xr(t, e).next((function(t) {
                return null === t ? (n.Yr.set(e, 0), null) : (n.Yr.set(e, t.size), t.Or);
            }));
        }, n.prototype.Bn = function(t, e) {
            var n = this;
            // Record the size of everything we load from the cache so we can compute
            // a delta later.
                    return this.Hr.Lr(t, e).next((function(t) {
                var e = t.qr;
                // Note: `getAllFromCache` returns two maps instead of a single map from
                // keys to `DocumentSizeEntry`s. This is to allow returning the
                // `NullableMaybeDocumentMap` directly, without a conversion.
                return t.Br.forEach((function(t, e) {
                    n.Yr.set(t, e);
                })), e;
            }));
        }, n;
    }(Xn);

    var Zr = /** @class */ function() {
        function t() {
            this.Jr = new Xr;
        }
        return t.prototype.Ar = function(t, e) {
            return this.Jr.add(e), Zn.resolve();
        }, t.prototype.hs = function(t, e) {
            return Zn.resolve(this.Jr.getEntries(e));
        }, t;
    }(), Xr = /** @class */ function() {
        function t() {
            this.index = {};
        }
        // Returns false if the entry already existed.
            return t.prototype.add = function(t) {
            var e = t.S(), n = t.p(), r = this.index[e] || new pt(Q$1.P), i = !r.has(n);
            return this.index[e] = r.add(n), i;
        }, t.prototype.has = function(t) {
            var e = t.S(), n = t.p(), r = this.index[e];
            return r && r.has(n);
        }, t.prototype.getEntries = function(t) {
            return (this.index[t] || new pt(Q$1.P)).N();
        }, t;
    }(), $r = /** @class */ function() {
        function t(t) {
            this.serializer = t;
        }
        /**
         * Performs database creation and schema upgrades.
         *
         * Note that in production, this method is only ever used to upgrade the schema
         * to SCHEMA_VERSION. Different values of toVersion are only used for testing
         * and local feature development.
         */    return t.prototype.createOrUpgrade = function(t, e, n, r) {
            var i = this;
            S$2(n < r && n >= 0 && r <= 10);
            var o = new cr(e);
            n < 1 && r >= 1 && (function(t) {
                t.createObjectStore(ti.store);
            }(t), function(t) {
                t.createObjectStore(ei.store, {
                    keyPath: ei.keyPath
                }), t.createObjectStore(ni.store, {
                    keyPath: ni.keyPath,
                    autoIncrement: !0
                }).createIndex(ni.userMutationsIndex, ni.userMutationsKeyPath, {
                    unique: !0
                }), t.createObjectStore(ri.store);
            }(t), li(t), function(t) {
                t.createObjectStore(si.store);
            }(t));
            // Migration 2 to populate the targetGlobal object no longer needed since
            // migration 3 unconditionally clears it.
            var s = Zn.resolve();
            return n < 3 && r >= 3 && (
            // Brand new clients don't need to drop and recreate--only clients that
            // potentially have corrupt data.
            0 !== n && (function(t) {
                t.deleteObjectStore(ci.store), t.deleteObjectStore(ai.store), t.deleteObjectStore(hi.store);
            }(t), li(t)), s = s.next((function() {
                /**
         * Creates the target global singleton row.
         *
         * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
         */
                return function(t) {
                    var e = t.store(hi.store), n = new hi(
                    /*highestTargetId=*/ 0, 
                    /*lastListenSequenceNumber=*/ 0, B.min().A(), 
                    /*targetCount=*/ 0);
                    return e.put(hi.key, n);
                }(o);
            }))), n < 4 && r >= 4 && (0 !== n && (
            // Schema version 3 uses auto-generated keys to generate globally unique
            // mutation batch IDs (this was previously ensured internally by the
            // client). To migrate to the new schema, we have to read all mutations
            // and write them back out. We preserve the existing batch IDs to guarantee
            // consistency with other object stores. Any further mutation batch IDs will
            // be auto-generated.
            s = s.next((function() {
                return function(t, e) {
                    return e.store(ni.store).Hs().next((function(n) {
                        t.deleteObjectStore(ni.store), t.createObjectStore(ni.store, {
                            keyPath: ni.keyPath,
                            autoIncrement: !0
                        }).createIndex(ni.userMutationsIndex, ni.userMutationsKeyPath, {
                            unique: !0
                        });
                        var r = e.store(ni.store), i = n.map((function(t) {
                            return r.put(t);
                        }));
                        return Zn.Cn(i);
                    }));
                }(t, o);
            }))), s = s.next((function() {
                !function(t) {
                    t.createObjectStore(pi.store, {
                        keyPath: pi.keyPath
                    });
                }(t);
            }))), n < 5 && r >= 5 && (s = s.next((function() {
                return i.removeAcknowledgedMutations(o);
            }))), n < 6 && r >= 6 && (s = s.next((function() {
                return function(t) {
                    t.createObjectStore(ui.store);
                }(t), i.addDocumentGlobal(o);
            }))), n < 7 && r >= 7 && (s = s.next((function() {
                return i.ensureSequenceNumbers(o);
            }))), n < 8 && r >= 8 && (s = s.next((function() {
                return i.createCollectionParentIndex(t, o);
            }))), n < 9 && r >= 9 && (s = s.next((function() {
                // Multi-Tab used to manage its own changelog, but this has been moved
                // to the DbRemoteDocument object store itself. Since the previous change
                // log only contained transient data, we can drop its object store.
                !function(t) {
                    t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
                }(t), function(t) {
                    var e = t.objectStore(si.store);
                    e.createIndex(si.readTimeIndex, si.readTimeIndexPath, {
                        unique: !1
                    }), e.createIndex(si.collectionReadTimeIndex, si.collectionReadTimeIndexPath, {
                        unique: !1
                    });
                }(e);
            }))), n < 10 && r >= 10 && (s = s.next((function() {
                return i.rewriteCanonicalIds(o);
            }))), s;
        }, t.prototype.addDocumentGlobal = function(t) {
            var e = 0;
            return t.store(si.store).Zs((function(t, n) {
                e += Yr(n);
            })).next((function() {
                var n = new ui(e);
                return t.store(ui.store).put(ui.key, n);
            }));
        }, t.prototype.removeAcknowledgedMutations = function(t) {
            var e = this, n = t.store(ei.store), r = t.store(ni.store);
            return n.Hs().next((function(n) {
                return Zn.forEach(n, (function(n) {
                    var i = IDBKeyRange.bound([ n.userId, -1 ], [ n.userId, n.lastAcknowledgedBatchId ]);
                    return r.Hs(ni.userMutationsIndex, i).next((function(r) {
                        return Zn.forEach(r, (function(r) {
                            S$2(r.userId === n.userId);
                            var i = Ur(e.serializer, r);
                            return Gr(t, n.userId, i).next((function() {}));
                        }));
                    }));
                }));
            }));
        }, 
        /**
         * Ensures that every document in the remote document cache has a corresponding sentinel row
         * with a sequence number. Missing rows are given the most recently used sequence number.
         */
        t.prototype.ensureSequenceNumbers = function(t) {
            var e = t.store(ci.store), n = t.store(si.store);
            return t.store(hi.store).get(hi.key).next((function(t) {
                var r = [];
                return n.Zs((function(n, i) {
                    var o = new Q$1(n), s = function(t) {
                        return [ 0, _r(t) ];
                    }(o);
                    r.push(e.get(s).next((function(n) {
                        return n ? Zn.resolve() : function(n) {
                            return e.put(new ci(0, _r(n), t.highestListenSequenceNumber));
                        }(o);
                    })));
                })).next((function() {
                    return Zn.Cn(r);
                }));
            }));
        }, t.prototype.createCollectionParentIndex = function(t, e) {
            // Create the index.
            t.createObjectStore(fi.store, {
                keyPath: fi.keyPath
            });
            var n = e.store(fi.store), r = new Xr, i = function(t) {
                if (r.add(t)) {
                    var e = t.S(), i = t.p();
                    return n.put({
                        collectionId: e,
                        parent: _r(i)
                    });
                }
            };
            // Helper to add an index entry iff we haven't already written it.
            // Index existing remote documents.
                    return e.store(si.store).Zs({
                Xs: !0
            }, (function(t, e) {
                var n = new Q$1(t);
                return i(n.p());
            })).next((function() {
                return e.store(ri.store).Zs({
                    Xs: !0
                }, (function(t, e) {
                    t[0];
                    var n = t[1], r = (t[2], Dr(n));
                    return i(r.p());
                }));
            }));
        }, t.prototype.rewriteCanonicalIds = function(t) {
            var e = this, n = t.store(ai.store);
            return n.Zs((function(t, r) {
                var i = Cr(r), o = qr(e.serializer, i);
                return n.put(o);
            }));
        }, t;
    }(), Jr = function(t, e) {
        this.seconds = t, this.nanoseconds = e;
    }, ti = function(t, 
    /** Whether to allow shared access from multiple tabs. */
    e, n) {
        this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
    };

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */
    /**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */
    ti.store = "owner", 
    /**
         * The key string used for the single object that exists in the
         * DbPrimaryClient store.
         */
    ti.key = "owner";

    var ei = function(
    /**
         * The normalized user ID to which this queue belongs.
         */
    t, 
    /**
         * An identifier for the highest numbered batch that has been acknowledged
         * by the server. All MutationBatches in this queue with batchIds less
         * than or equal to this value are considered to have been acknowledged by
         * the server.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
    e, 
    /**
         * A stream token that was previously sent by the server.
         *
         * See StreamingWriteRequest in datastore.proto for more details about
         * usage.
         *
         * After sending this token, earlier tokens may not be used anymore so
         * only a single stream token is retained.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
    n) {
        this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
    };

    /** Name of the IndexedDb object store.  */ ei.store = "mutationQueues", 
    /** Keys are automatically assigned via the userId property. */
    ei.keyPath = "userId";

    /**
     * An object to be stored in the 'mutations' store in IndexedDb.
     *
     * Represents a batch of user-level mutations intended to be sent to the server
     * in a single write. Each user-level batch gets a separate DbMutationBatch
     * with a new batchId.
     */
    var ni = function(
    /**
         * The normalized user ID to which this batch belongs.
         */
    t, 
    /**
         * An identifier for this batch, allocated using an auto-generated key.
         */
    e, 
    /**
         * The local write time of the batch, stored as milliseconds since the
         * epoch.
         */
    n, 
    /**
         * A list of "mutations" that represent a partial base state from when this
         * write batch was initially created. During local application of the write
         * batch, these baseMutations are applied prior to the real writes in order
         * to override certain document fields from the remote document cache. This
         * is necessary in the case of non-idempotent writes (e.g. `increment()`
         * transforms) to make sure that the local view of the modified documents
         * doesn't flicker if the remote document cache receives the result of the
         * non-idempotent write before the write is removed from the queue.
         *
         * These mutations are never sent to the backend.
         */
    r, 
    /**
         * A list of mutations to apply. All mutations will be applied atomically.
         *
         * Mutations are serialized via toMutation().
         */
    i) {
        this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = r, 
        this.mutations = i;
    };

    /** Name of the IndexedDb object store.  */ ni.store = "mutations", 
    /** Keys are automatically assigned via the userId, batchId properties. */
    ni.keyPath = "batchId", 
    /** The index name for lookup of mutations by user. */
    ni.userMutationsIndex = "userMutationsIndex", 
    /** The user mutations index is keyed by [userId, batchId] pairs. */
    ni.userMutationsKeyPath = [ "userId", "batchId" ];

    var ri = /** @class */ function() {
        function t() {}
        /**
         * Creates a [userId] key for use in the DbDocumentMutations index to iterate
         * over all of a user's document mutations.
         */    return t.prefixForUser = function(t) {
            return [ t ];
        }, 
        /**
         * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
         * index to iterate over all at document mutations for a given path or lower.
         */
        t.prefixForPath = function(t, e) {
            return [ t, _r(e) ];
        }, 
        /**
         * Creates a full index key of [userId, encodedPath, batchId] for inserting
         * and deleting into the DbDocumentMutations index.
         */
        t.key = function(t, e, n) {
            return [ t, _r(e), n ];
        }, t;
    }();

    ri.store = "documentMutations", 
    /**
         * Because we store all the useful information for this store in the key,
         * there is no useful information to store as the value. The raw (unencoded)
         * path cannot be stored because IndexedDb doesn't store prototype
         * information.
         */
    ri.PLACEHOLDER = new ri;

    var ii = function(t, e) {
        this.path = t, this.readTime = e;
    }, oi = function(t, e) {
        this.path = t, this.version = e;
    }, si = 
    // TODO: We are currently storing full document keys almost three times
    // (once as part of the primary key, once - partly - as `parentPath` and once
    // inside the encoded documents). During our next migration, we should
    // rewrite the primary key as parentPath + document ID which would allow us
    // to drop one value.
    function(
    /**
         * Set to an instance of DbUnknownDocument if the data for a document is
         * not known, but it is known that a document exists at the specified
         * version (e.g. it had a successful update applied to it)
         */
    t, 
    /**
         * Set to an instance of a DbNoDocument if it is known that no document
         * exists.
         */
    e, 
    /**
         * Set to an instance of a Document if there's a cached version of the
         * document.
         */
    n, 
    /**
         * Documents that were written to the remote document store based on
         * a write acknowledgment are marked with `hasCommittedMutations`. These
         * documents are potentially inconsistent with the backend's copy and use
         * the write's commit version as their document version.
         */
    r, 
    /**
         * When the document was read from the backend. Undefined for data written
         * prior to schema version 9.
         */
    i, 
    /**
         * The path of the collection this document is part of. Undefined for data
         * written prior to schema version 9.
         */
    o) {
        this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = r, 
        this.readTime = i, this.parentPath = o;
    };

    /**
     * Represents a document that is known to exist but whose data is unknown.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ si.store = "remoteDocuments", 
    /**
         * An index that provides access to all entries sorted by read time (which
         * corresponds to the last modification time of each row).
         *
         * This index is used to provide a changelog for Multi-Tab.
         */
    si.readTimeIndex = "readTimeIndex", si.readTimeIndexPath = "readTime", 
    /**
         * An index that provides access to documents in a collection sorted by read
         * time.
         *
         * This index is used to allow the RemoteDocumentCache to fetch newly changed
         * documents in a collection.
         */
    si.collectionReadTimeIndex = "collectionReadTimeIndex", si.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

    /**
     * Contains a single entry that has metadata about the remote document cache.
     */
    var ui = 
    /**
         * @param byteSize Approximately the total size in bytes of all the documents in the document
         * cache.
         */
    function(t) {
        this.byteSize = t;
    };

    ui.store = "remoteDocumentGlobal", ui.key = "remoteDocumentGlobalKey";

    var ai = function(
    /**
         * An auto-generated sequential numeric identifier for the query.
         *
         * Queries are stored using their canonicalId as the key, but these
         * canonicalIds can be quite long so we additionally assign a unique
         * queryId which can be used by referenced data structures (e.g.
         * indexes) to minimize the on-disk cost.
         */
    t, 
    /**
         * The canonical string representing this query. This is not unique.
         */
    e, 
    /**
         * The last readTime received from the Watch Service for this query.
         *
         * This is the same value as TargetChange.read_time in the protos.
         */
    n, 
    /**
         * An opaque, server-assigned token that allows watching a query to be
         * resumed after disconnecting without retransmitting all the data
         * that matches the query. The resume token essentially identifies a
         * point in time from which the server should resume sending results.
         *
         * This is related to the snapshotVersion in that the resumeToken
         * effectively also encodes that value, but the resumeToken is opaque
         * and sometimes encodes additional information.
         *
         * A consequence of this is that the resumeToken should be used when
         * asking the server to reason about where this client is in the watch
         * stream, but the client should use the snapshotVersion for its own
         * purposes.
         *
         * This is the same value as TargetChange.resume_token in the protos.
         */
    r, 
    /**
         * A sequence number representing the last time this query was
         * listened to, used for garbage collection purposes.
         *
         * Conventionally this would be a timestamp value, but device-local
         * clocks are unreliable and they must be able to create new listens
         * even while disconnected. Instead this should be a monotonically
         * increasing number that's incremented on each listen call.
         *
         * This is different from the queryId since the queryId is an
         * immutable identifier assigned to the Query on first use while
         * lastListenSequenceNumber is updated every time the query is
         * listened to.
         */
    i, 
    /**
         * Denotes the maximum snapshot version at which the associated query view
         * contained no limbo documents.  Undefined for data written prior to
         * schema version 9.
         */
    o, 
    /**
         * The query for this target.
         *
         * Because canonical ids are not unique we must store the actual query. We
         * use the proto to have an object we can persist without having to
         * duplicate translation logic to and from a `Query` object.
         */
    s) {
        this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = r, 
        this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = s;
    };

    ai.store = "targets", 
    /** Keys are automatically assigned via the targetId property. */
    ai.keyPath = "targetId", 
    /** The name of the queryTargets index. */
    ai.queryTargetsIndexName = "queryTargetsIndex", 
    /**
         * The index of all canonicalIds to the targets that they match. This is not
         * a unique mapping because canonicalId does not promise a unique name for all
         * possible queries, so we append the targetId to make the mapping unique.
         */
    ai.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

    /**
     * An object representing an association between a target and a document, or a
     * sentinel row marking the last sequence number at which a document was used.
     * Each document cached must have a corresponding sentinel row before lru
     * garbage collection is enabled.
     *
     * The target associations and sentinel rows are co-located so that orphaned
     * documents and their sequence numbers can be identified efficiently via a scan
     * of this store.
     */
    var ci = function(
    /**
         * The targetId identifying a target or 0 for a sentinel row.
         */
    t, 
    /**
         * The path to the document, as encoded in the key.
         */
    e, 
    /**
         * If this is a sentinel row, this should be the sequence number of the last
         * time the document specified by `path` was used. Otherwise, it should be
         * `undefined`.
         */
    n) {
        this.targetId = t, this.path = e, this.sequenceNumber = n;
    };

    /** Name of the IndexedDb object store.  */ ci.store = "targetDocuments", 
    /** Keys are automatically assigned via the targetId, path properties. */
    ci.keyPath = [ "targetId", "path" ], 
    /** The index name for the reverse index. */
    ci.documentTargetsIndex = "documentTargetsIndex", 
    /** We also need to create the reverse index for these properties. */
    ci.documentTargetsKeyPath = [ "path", "targetId" ];

    /**
     * A record of global state tracked across all Targets, tracked separately
     * to avoid the need for extra indexes.
     *
     * This should be kept in-sync with the proto used in the iOS client.
     */
    var hi = function(
    /**
         * The highest numbered target id across all targets.
         *
         * See DbTarget.targetId.
         */
    t, 
    /**
         * The highest numbered lastListenSequenceNumber across all targets.
         *
         * See DbTarget.lastListenSequenceNumber.
         */
    e, 
    /**
         * A global snapshot version representing the last consistent snapshot we
         * received from the backend. This is monotonically increasing and any
         * snapshots received from the backend prior to this version (e.g. for
         * targets resumed with a resumeToken) should be suppressed (buffered)
         * until the backend has caught up to this snapshot version again. This
         * prevents our cache from ever going backwards in time.
         */
    n, 
    /**
         * The number of targets persisted.
         */
    r) {
        this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
        this.targetCount = r;
    };

    /**
     * The key string used for the single object that exists in the
     * DbTargetGlobal store.
     */ hi.key = "targetGlobalKey", hi.store = "targetGlobal";

    /**
     * An object representing an association between a Collection id (e.g. 'messages')
     * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
     * This is used to efficiently find all collections to query when performing
     * a Collection Group query.
     */
    var fi = function(
    /**
         * The collectionId (e.g. 'messages')
         */
    t, 
    /**
         * The path to the parent (either a document location or an empty path for
         * a root-level collection).
         */
    e) {
        this.collectionId = t, this.parent = e;
    };

    /** Name of the IndexedDb object store. */ function li(t) {
        t.createObjectStore(ci.store, {
            keyPath: ci.keyPath
        }).createIndex(ci.documentTargetsIndex, ci.documentTargetsKeyPath, {
            unique: !0
        }), 
        // NOTE: This is unique only because the TargetId is the suffix.
        t.createObjectStore(ai.store, {
            keyPath: ai.keyPath
        }).createIndex(ai.queryTargetsIndexName, ai.queryTargetsKeyPath, {
            unique: !0
        }), t.createObjectStore(hi.store);
    }

    fi.store = "collectionParents", 
    /** Keys are automatically assigned via the collectionId, parent properties. */
    fi.keyPath = [ "collectionId", "parent" ];

    var pi = function(
    // Note: Previous schema versions included a field
    // "lastProcessedDocumentChangeId". Don't use anymore.
    /** The auto-generated client id assigned at client startup. */
    t, 
    /** The last time this state was updated. */
    e, 
    /** Whether the client's network connection is enabled. */
    n, 
    /** Whether this client is running in a foreground tab. */
    r) {
        this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = r;
    };

    /** Name of the IndexedDb object store. */ pi.store = "clientMetadata", 
    /** Keys are automatically assigned via the clientId properties. */
    pi.keyPath = "clientId";

    var di = __spreadArrays(__spreadArrays(__spreadArrays([ ei.store, ni.store, ri.store, si.store, ai.store, ti.store, hi.store, ci.store ], [ pi.store ]), [ ui.store ]), [ fi.store ]), yi = /** @class */ function() {
        function t() {
            /**
             * An in-memory copy of the index entries we've already written since the SDK
             * launched. Used to avoid re-writing the same entry repeatedly.
             *
             * This is *NOT* a complete cache of what's in persistence and so can never be used to
             * satisfy reads.
             */
            this.Xr = new Xr;
        }
        /**
         * Adds a new entry to the collection parent index.
         *
         * Repeated calls for the same collectionPath should be avoided within a
         * transaction as IndexedDbIndexManager only caches writes once a transaction
         * has been committed.
         */    return t.prototype.Ar = function(t, e) {
            var n = this;
            if (!this.Xr.has(e)) {
                var r = e.S(), i = e.p();
                t.Wn((function() {
                    // Add the collection to the in memory cache only if the transaction was
                    // successfully committed.
                    n.Xr.add(e);
                }));
                var o = {
                    collectionId: r,
                    parent: _r(i)
                };
                return vi(t).put(o);
            }
            return Zn.resolve();
        }, t.prototype.hs = function(t, e) {
            var n = [], r = IDBKeyRange.bound([ e, "" ], [ R$1(e), "" ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return vi(t).Hs(r).next((function(t) {
                for (var r = 0, i = t; r < i.length; r++) {
                    var o = i[r];
                    // This collectionId guard shouldn't be necessary (and isn't as long
                    // as we're running in a real browser), but there's a bug in
                    // indexeddbshim that breaks our range in our tests running in node:
                    // https://github.com/axemclion/IndexedDBShim/issues/334
                                    if (o.collectionId !== e) break;
                    n.push(Dr(o.parent));
                }
                return n;
            }));
        }, t;
    }();

    // V2 is no longer usable (see comment at top of file)
    // Visible for testing
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A persisted implementation of IndexManager.
     */
    /**
     * Helper to get a typed SimpleDbStore for the collectionParents
     * document store.
     */
    function vi(t) {
        return Ni.Ms(t, fi.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Offset to ensure non-overlapping target ids. */
    /**
     * Generates monotonically increasing target IDs for sending targets to the
     * watch stream.
     *
     * The client constructs two generators, one for the target cache, and one for
     * for the sync engine (to generate limbo documents targets). These
     * generators produce non-overlapping IDs (by using even and odd IDs
     * respectively).
     *
     * By separating the target ID space, the query cache can generate target IDs
     * that persist across client restarts, while sync engine can independently
     * generate in-memory target IDs that are transient and can be reused after a
     * restart.
     */ var gi = /** @class */ function() {
        function t(t) {
            this.Zr = t;
        }
        return t.prototype.next = function() {
            return this.Zr += 2, this.Zr;
        }, t.to = function() {
            // The target cache generator must return '2' in its first call to `next()`
            // as there is no differentiation in the protocol layer between an unset
            // number and the number '0'. If we were to sent a target with target ID
            // '0', the backend would consider it unset and replace it with its own ID.
            return new t(0);
        }, t.eo = function() {
            // Sync engine assigns target IDs for limbo document detection.
            return new t(-1);
        }, t;
    }(), mi = /** @class */ function() {
        function t(t, e) {
            this.dr = t, this.serializer = e;
        }
        // PORTING NOTE: We don't cache global metadata for the target cache, since
        // some of it (in particular `highestTargetId`) can be modified by secondary
        // tabs. We could perhaps be more granular (and e.g. still cache
        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
        // out to have a meaningful performance impact.
            return t.prototype.no = function(t) {
            var e = this;
            return this.so(t).next((function(n) {
                var r = new gi(n.highestTargetId);
                return n.highestTargetId = r.next(), e.io(t, n).next((function() {
                    return n.highestTargetId;
                }));
            }));
        }, t.prototype.ro = function(t) {
            return this.so(t).next((function(t) {
                return B.m(new j(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
            }));
        }, t.prototype.oo = function(t) {
            return this.so(t).next((function(t) {
                return t.highestListenSequenceNumber;
            }));
        }, t.prototype.ho = function(t, e, n) {
            var r = this;
            return this.so(t).next((function(i) {
                return i.highestListenSequenceNumber = e, n && (i.lastRemoteSnapshotVersion = n.A()), 
                e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r.io(t, i);
            }));
        }, t.prototype.ao = function(t, e) {
            var n = this;
            return this.co(t, e).next((function() {
                return n.so(t).next((function(r) {
                    return r.targetCount += 1, n.uo(e, r), n.io(t, r);
                }));
            }));
        }, t.prototype.lo = function(t, e) {
            return this.co(t, e);
        }, t.prototype._o = function(t, e) {
            var n = this;
            return this.fo(t, e.targetId).next((function() {
                return wi(t).delete(e.targetId);
            })).next((function() {
                return n.so(t);
            })).next((function(e) {
                return S$2(e.targetCount > 0), e.targetCount -= 1, n.io(t, e);
            }));
        }, 
        /**
         * Drops any targets with sequence number less than or equal to the upper bound, excepting those
         * present in `activeTargetIds`. Document associations for the removed targets are also removed.
         * Returns the number of targets removed.
         */
        t.prototype.hr = function(t, e, n) {
            var r = this, i = 0, o = [];
            return wi(t).Zs((function(s, u) {
                var a = Cr(u);
                a.sequenceNumber <= e && null === n.get(a.targetId) && (i++, o.push(r._o(t, a)));
            })).next((function() {
                return Zn.Cn(o);
            })).next((function() {
                return i;
            }));
        }, 
        /**
         * Call provided function with each `TargetData` that we have cached.
         */
        t.prototype.be = function(t, e) {
            return wi(t).Zs((function(t, n) {
                var r = Cr(n);
                e(r);
            }));
        }, t.prototype.so = function(t) {
            return bi(t).get(hi.key).next((function(t) {
                return S$2(null !== t), t;
            }));
        }, t.prototype.io = function(t, e) {
            return bi(t).put(hi.key, e);
        }, t.prototype.co = function(t, e) {
            return wi(t).put(qr(this.serializer, e));
        }, 
        /**
         * In-place updates the provided metadata to account for values in the given
         * TargetData. Saving is done separately. Returns true if there were any
         * changes to the metadata.
         */
        t.prototype.uo = function(t, e) {
            var n = !1;
            return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
            t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
            n = !0), n;
        }, t.prototype.do = function(t) {
            return this.so(t).next((function(t) {
                return t.targetCount;
            }));
        }, t.prototype.wo = function(t, e) {
            // Iterating by the canonicalId may yield more than one result because
            // canonicalId values are not required to be unique per target. This query
            // depends on the queryTargets index to be efficient.
            var n = tt(e), r = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]), i = null;
            return wi(t).Zs({
                range: r,
                index: ai.queryTargetsIndexName
            }, (function(t, n, r) {
                var o = Cr(n);
                // After finding a potential match, check that the target is
                // actually equal to the requested target.
                            et(e, o.target) && (i = o, r.done());
            })).next((function() {
                return i;
            }));
        }, t.prototype.To = function(t, e, n) {
            var r = this, i = [], o = Ii(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return e.forEach((function(e) {
                var s = _r(e.path);
                i.push(o.put(new ci(n, s))), i.push(r.dr.Eo(t, n, e));
            })), Zn.Cn(i);
        }, t.prototype.mo = function(t, e, n) {
            var r = this, i = Ii(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return Zn.forEach(e, (function(e) {
                var o = _r(e.path);
                return Zn.Cn([ i.delete([ n, o ]), r.dr.Io(t, n, e) ]);
            }));
        }, t.prototype.fo = function(t, e) {
            var n = Ii(t), r = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return n.delete(r);
        }, t.prototype.Ao = function(t, e) {
            var n = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), r = Ii(t), i = Et();
            return r.Zs({
                range: n,
                Xs: !0
            }, (function(t, e, n) {
                var r = Dr(t[1]), o = new K$1(r);
                i = i.add(o);
            })).next((function() {
                return i;
            }));
        }, t.prototype.Nr = function(t, e) {
            var n = _r(e.path), r = IDBKeyRange.bound([ n ], [ R$1(n) ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), i = 0;
            return Ii(t).Zs({
                index: ci.documentTargetsIndex,
                Xs: !0,
                range: r
            }, (function(t, e, n) {
                var r = t[0];
                // Having a sentinel row for a document does not count as containing that document;
                // For the target cache, containing the document means the document is part of some
                // target.
                            t[1];
                0 !== r && (i++, n.done());
            })).next((function() {
                return i > 0;
            }));
        }, 
        /**
         * Looks up a TargetData entry by target ID.
         *
         * @param targetId The target ID of the TargetData entry to look up.
         * @return The cached TargetData entry, or null if the cache has no entry for
         * the target.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Me = function(t, e) {
            return wi(t).get(e).next((function(t) {
                return t ? Cr(t) : null;
            }));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to get a typed SimpleDbStore for the queries object store.
     */
    function wi(t) {
        return Ni.Ms(t, ai.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the target globals object store.
     */ function bi(t) {
        return Ni.Ms(t, hi.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the document target object store.
     */ function Ii(t) {
        return Ni.Ms(t, ci.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Ei = "Failed to obtain exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `synchronizeTabs:true` in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", Ti = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).vr = t, r.Ro = n, r;
        }
        return __extends(n, e), n;
    }(Jn), Ni = /** @class */ function() {
        function t(
        /**
         * Whether to synchronize the in-memory state of multiple tabs and share
         * access to local persistence.
         */
        e, n, r, i, o, s, u, a, c, 
        /**
         * If set to true, forcefully obtains database access. Existing tabs will
         * no longer be able to access IndexedDB.
         */
        h) {
            if (this.allowTabSynchronization = e, this.persistenceKey = n, this.clientId = r, 
            this.ms = o, this.window = s, this.document = u, this.Po = c, this.Vo = h, this.yo = null, 
            this.po = !1, this.isPrimary = !1, this.networkEnabled = !0, 
            /** Our window.unload handler, if registered. */
            this.bo = null, this.inForeground = !1, 
            /** Our 'visibilitychange' listener if registered. */
            this.vo = null, 
            /** The client metadata refresh task. */
            this.So = null, 
            /** The last time we garbage collected the client metadata object store. */
            this.Do = Number.NEGATIVE_INFINITY, 
            /** A listener to notify on primary state changes. */
            this.Co = function(t) {
                return Promise.resolve();
            }, !t.ks()) throw new G$1(F$1.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
            this.dr = new Si(this, i), this.No = n + "main", this.serializer = new kr(a), this.Fo = new or(this.No, 10, new $r(this.serializer)), 
            this.ko = new mi(this.dr, this.serializer), this.zn = new yi, this.Kn = new Qr(this.serializer, this.zn), 
            this.window && this.window.localStorage ? this.$o = this.window.localStorage : (this.$o = null, 
            !1 === h && T$2("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
        }
        return t.Ms = function(t, e) {
            if (t instanceof Ti) return or.Ms(t.vr, e);
            throw A$2();
        }, 
        /**
         * Attempt to start IndexedDb persistence.
         *
         * @return {Promise<void>} Whether persistence was enabled.
         */
        t.prototype.start = function() {
            var t = this;
            // NOTE: This is expected to fail sometimes (in the case of another tab
            // already having the persistence lock), so it's the first thing we should
            // do.
                    return this.xo().then((function() {
                if (!t.isPrimary && !t.allowTabSynchronization) 
                // Fail `start()` if `synchronizeTabs` is disabled and we cannot
                // obtain the primary lease.
                throw new G$1(F$1.FAILED_PRECONDITION, Ei);
                return t.Oo(), t.Mo(), t.Lo(), t.runTransaction("getHighestListenSequenceNumber", "readonly", (function(e) {
                    return t.ko.oo(e);
                }));
            })).then((function(e) {
                t.yo = new nr(e, t.Po);
            })).then((function() {
                t.po = !0;
            })).catch((function(e) {
                return t.Fo && t.Fo.close(), Promise.reject(e);
            }));
        }, 
        /**
         * Registers a listener that gets called when the primary state of the
         * instance changes. Upon registering, this listener is invoked immediately
         * with the current primary state.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.qo = function(t) {
            var r = this;
            return this.Co = function(i) {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        return this.tr ? [ 2 /*return*/ , t(i) ] : [ 2 /*return*/ ];
                    }));
                }));
            }, t(this.isPrimary);
        }, 
        /**
         * Registers a listener that gets called when the database receives a
         * version change event indicating that it has deleted.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.Bo = function(t) {
            var r = this;
            this.Fo.Bs((function(i) {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return null === i.newVersion ? [ 4 /*yield*/ , t() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            e.sent(), e.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, 
        /**
         * Adjusts the current network state in the client's metadata, potentially
         * affecting the primary lease.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.Uo = function(t) {
            var r = this;
            this.networkEnabled !== t && (this.networkEnabled = t, 
            // Schedule a primary lease refresh for immediate execution. The eventual
            // lease update will be propagated via `primaryStateListener`.
            this.ms.ai((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return this.tr ? [ 4 /*yield*/ , this.xo() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            t.sent(), t.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })));
        }, 
        /**
         * Updates the client metadata in IndexedDb and attempts to either obtain or
         * extend the primary lease for the local client. Asynchronously notifies the
         * primary state listener if the client either newly obtained or released its
         * primary lease.
         */
        t.prototype.xo = function() {
            var t = this;
            return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (function(e) {
                return Ai(e).put(new pi(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next((function() {
                    if (t.isPrimary) return t.Qo(e).next((function(e) {
                        e || (t.isPrimary = !1, t.ms.gi((function() {
                            return t.Co(!1);
                        })));
                    }));
                })).next((function() {
                    return t.Wo(e);
                })).next((function(n) {
                    return t.isPrimary && !n ? t.jo(e).next((function() {
                        return !1;
                    })) : !!n && t.Ko(e).next((function() {
                        return !0;
                    }));
                }));
            })).catch((function(e) {
                if (ar(e)) 
                // Proceed with the existing state. Any subsequent access to
                // IndexedDB will verify the lease.
                return E$1("IndexedDbPersistence", "Failed to extend owner lease: ", e), t.isPrimary;
                if (!t.allowTabSynchronization) throw e;
                return E$1("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), 
                /* isPrimary= */ !1;
            })).then((function(e) {
                t.isPrimary !== e && t.ms.gi((function() {
                    return t.Co(e);
                })), t.isPrimary = e;
            }));
        }, t.prototype.Qo = function(t) {
            var e = this;
            return _i(t).get(ti.key).next((function(t) {
                return Zn.resolve(e.Go(t));
            }));
        }, t.prototype.zo = function(t) {
            return Ai(t).delete(this.clientId);
        }, 
        /**
         * If the garbage collection threshold has passed, prunes the
         * RemoteDocumentChanges and the ClientMetadata store based on the last update
         * time of all clients.
         */
        t.prototype.Ho = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i, o, s = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return !this.isPrimary || this.Yo(this.Do, 18e5) ? [ 3 /*break*/ , 2 ] : (this.Do = Date.now(), 
                        [ 4 /*yield*/ , this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (function(e) {
                            var n = t.Ms(e, pi.store);
                            return n.Hs().next((function(t) {
                                var e = s.Jo(t, 18e5), r = t.filter((function(t) {
                                    return -1 === e.indexOf(t);
                                }));
                                // Delete metadata for clients that are no longer considered active.
                                                            return Zn.forEach(r, (function(t) {
                                    return n.delete(t.clientId);
                                })).next((function() {
                                    return r;
                                }));
                            }));
                        })).catch((function() {
                            return [];
                        })) ]);

                      case 1:
                        // Delete potential leftover entries that may continue to mark the
                        // inactive clients as zombied in LocalStorage.
                        // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                        // the client atomically, but we can't. So we opt to delete the IndexedDb
                        // entries first to avoid potentially reviving a zombied client.
                        if (e = n.sent(), this.$o) for (r = 0, i = e; r < i.length; r++) o = i[r], this.$o.removeItem(this.Xo(o.clientId));
                        n.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Schedules a recurring timer to update the client metadata and to either
         * extend or acquire the primary lease if the client is eligible.
         */
        t.prototype.Lo = function() {
            var t = this;
            this.So = this.ms.Ss("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (function() {
                return t.xo().then((function() {
                    return t.Ho();
                })).then((function() {
                    return t.Lo();
                }));
            }));
        }, 
        /** Checks whether `client` is the local client. */ t.prototype.Go = function(t) {
            return !!t && t.ownerId === this.clientId;
        }, 
        /**
         * Evaluate the state of all active clients and determine whether the local
         * client is or can act as the holder of the primary lease. Returns whether
         * the client is eligible for the lease, but does not actually acquire it.
         * May return 'false' even if there is no active leaseholder and another
         * (foreground) client should become leaseholder instead.
         */
        t.prototype.Wo = function(t) {
            var e = this;
            return this.Vo ? Zn.resolve(!0) : _i(t).get(ti.key).next((function(n) {
                // A client is eligible for the primary lease if:
                // - its network is enabled and the client's tab is in the foreground.
                // - its network is enabled and no other client's tab is in the
                //   foreground.
                // - every clients network is disabled and the client's tab is in the
                //   foreground.
                // - every clients network is disabled and no other client's tab is in
                //   the foreground.
                // - the `forceOwningTab` setting was passed in.
                if (null !== n && e.Yo(n.leaseTimestampMs, 5e3) && !e.Zo(n.ownerId)) {
                    if (e.Go(n) && e.networkEnabled) return !0;
                    if (!e.Go(n)) {
                        if (!n.allowTabSynchronization) 
                        // Fail the `canActAsPrimary` check if the current leaseholder has
                        // not opted into multi-tab synchronization. If this happens at
                        // client startup, we reject the Promise returned by
                        // `enablePersistence()` and the user can continue to use Firestore
                        // with in-memory persistence.
                        // If this fails during a lease refresh, we will instead block the
                        // AsyncQueue from executing further operations. Note that this is
                        // acceptable since mixing & matching different `synchronizeTabs`
                        // settings is not supported.
                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                        // no longer be turned off.
                        throw new G$1(F$1.FAILED_PRECONDITION, Ei);
                        return !1;
                    }
                }
                return !(!e.networkEnabled || !e.inForeground) || Ai(t).Hs().next((function(t) {
                    return void 0 === e.Jo(t, 5e3).find((function(t) {
                        if (e.clientId !== t.clientId) {
                            var n = !e.networkEnabled && t.networkEnabled, r = !e.inForeground && t.inForeground, i = e.networkEnabled === t.networkEnabled;
                            if (n || r && i) return !0;
                        }
                        return !1;
                    }));
                }));
            })).next((function(t) {
                return e.isPrimary !== t && E$1("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), 
                t;
            }));
        }, t.prototype.th = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t = this;
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        return this.po = !1, this.eh(), this.So && (this.So.cancel(), this.So = null), this.nh(), 
                        this.sh(), [ 4 /*yield*/ , this.Fo.runTransaction("readwrite", [ ti.store, pi.store ], (function(e) {
                            var n = new Ti(e, nr.Es);
                            return t.jo(n).next((function() {
                                return t.zo(n);
                            }));
                        })) ];

                      case 1:
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                        // has obtained the primary lease.
                        return e.sent(), this.Fo.close(), 
                        // Remove the entry marking the client as zombied from LocalStorage since
                        // we successfully deleted its metadata from IndexedDb.
                        this.ih(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Returns clients that are not zombied and have an updateTime within the
         * provided threshold.
         */
        t.prototype.Jo = function(t, e) {
            var n = this;
            return t.filter((function(t) {
                return n.Yo(t.updateTimeMs, e) && !n.Zo(t.clientId);
            }));
        }, 
        /**
         * Returns the IDs of the clients that are currently active. If multi-tab
         * is not supported, returns an array that only contains the local client's
         * ID.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */
        t.prototype.rh = function() {
            var t = this;
            return this.runTransaction("getActiveClients", "readonly", (function(e) {
                return Ai(e).Hs().next((function(e) {
                    return t.Jo(e, 18e5).map((function(t) {
                        return t.clientId;
                    }));
                }));
            }));
        }, Object.defineProperty(t.prototype, "tr", {
            get: function() {
                return this.po;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.oh = function(t) {
            return Mr.Tr(t, this.serializer, this.zn, this.dr);
        }, t.prototype.hh = function() {
            return this.ko;
        }, t.prototype.ah = function() {
            return this.Kn;
        }, t.prototype.uh = function() {
            return this.zn;
        }, t.prototype.runTransaction = function(t, e, n) {
            var r = this;
            E$1("IndexedDbPersistence", "Starting transaction:", t);
            var i, o = "readonly" === e ? "readonly" : "readwrite";
            // Do all transactions as readwrite against all object stores, since we
            // are the only reader/writer.
            return this.Fo.runTransaction(o, di, (function(o) {
                return i = new Ti(o, r.yo ? r.yo.next() : nr.Es), "readwrite-primary" === e ? r.Qo(i).next((function(t) {
                    return !!t || r.Wo(i);
                })).next((function(e) {
                    if (!e) throw T$2("Failed to obtain primary lease for action '" + t + "'."), r.isPrimary = !1, 
                    r.ms.gi((function() {
                        return r.Co(!1);
                    })), new G$1(F$1.FAILED_PRECONDITION, $n);
                    return n(i);
                })).next((function(t) {
                    return r.Ko(i).next((function() {
                        return t;
                    }));
                })) : r.lh(i).next((function() {
                    return n(i);
                }));
            })).then((function(t) {
                return i.jn(), t;
            }));
        }, 
        /**
         * Verifies that the current tab is the primary leaseholder or alternatively
         * that the leaseholder has opted into multi-tab synchronization.
         */
        // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
        // be turned off.
        t.prototype.lh = function(t) {
            var e = this;
            return _i(t).get(ti.key).next((function(t) {
                if (null !== t && e.Yo(t.leaseTimestampMs, 5e3) && !e.Zo(t.ownerId) && !e.Go(t) && !(e.Vo || e.allowTabSynchronization && t.allowTabSynchronization)) throw new G$1(F$1.FAILED_PRECONDITION, Ei);
            }));
        }, 
        /**
         * Obtains or extends the new primary lease for the local client. This
         * method does not verify that the client is eligible for this lease.
         */
        t.prototype.Ko = function(t) {
            var e = new ti(this.clientId, this.allowTabSynchronization, Date.now());
            return _i(t).put(ti.key, e);
        }, t.ks = function() {
            return or.ks();
        }, 
        /** Checks the primary lease and removes it if we are the current primary. */ t.prototype.jo = function(t) {
            var e = this, n = _i(t);
            return n.get(ti.key).next((function(t) {
                return e.Go(t) ? (E$1("IndexedDbPersistence", "Releasing primary lease."), n.delete(ti.key)) : Zn.resolve();
            }));
        }, 
        /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ t.prototype.Yo = function(t, e) {
            var n = Date.now();
            return !(t < n - e || t > n && (T$2("Detected an update time that is in the future: " + t + " > " + n), 
            1));
        }, t.prototype.Oo = function() {
            var t = this;
            null !== this.document && "function" == typeof this.document.addEventListener && (this.vo = function() {
                t.ms.ai((function() {
                    return t.inForeground = "visible" === t.document.visibilityState, t.xo();
                }));
            }, this.document.addEventListener("visibilitychange", this.vo), this.inForeground = "visible" === this.document.visibilityState);
        }, t.prototype.nh = function() {
            this.vo && (this.document.removeEventListener("visibilitychange", this.vo), this.vo = null);
        }, 
        /**
         * Attaches a window.unload handler that will synchronously write our
         * clientId to a "zombie client id" location in LocalStorage. This can be used
         * by tabs trying to acquire the primary lease to determine that the lease
         * is no longer valid even if the timestamp is recent. This is particularly
         * important for the refresh case (so the tab correctly re-acquires the
         * primary lease). LocalStorage is used for this rather than IndexedDb because
         * it is a synchronous API and so can be used reliably from  an unload
         * handler.
         */
        t.prototype.Mo = function() {
            var t, e = this;
            "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.bo = function() {
                // Note: In theory, this should be scheduled on the AsyncQueue since it
                // accesses internal state. We execute this code directly during shutdown
                // to make sure it gets a chance to run.
                e.eh(), e.ms.ai((function() {
                    return e.th();
                }));
            }, this.window.addEventListener("unload", this.bo));
        }, t.prototype.sh = function() {
            this.bo && (this.window.removeEventListener("unload", this.bo), this.bo = null);
        }, 
        /**
         * Returns whether a client is "zombied" based on its LocalStorage entry.
         * Clients become zombied when their tab closes without running all of the
         * cleanup logic in `shutdown()`.
         */
        t.prototype.Zo = function(t) {
            var e;
            try {
                var n = null !== (null === (e = this.$o) || void 0 === e ? void 0 : e.getItem(this.Xo(t)));
                return E$1("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), 
                n;
            } catch (t) {
                // Gracefully handle if LocalStorage isn't working.
                return T$2("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
            }
        }, 
        /**
         * Record client as zombied (a client that had its tab closed). Zombied
         * clients are ignored during primary tab selection.
         */
        t.prototype.eh = function() {
            if (this.$o) try {
                this.$o.setItem(this.Xo(this.clientId), String(Date.now()));
            } catch (t) {
                // Gracefully handle if LocalStorage isn't available / working.
                T$2("Failed to set zombie client id.", t);
            }
        }, 
        /** Removes the zombied client entry if it exists. */ t.prototype.ih = function() {
            if (this.$o) try {
                this.$o.removeItem(this.Xo(this.clientId));
            } catch (t) {
                // Ignore
            }
        }, t.prototype.Xo = function(t) {
            return "firestore_zombie_" + this.persistenceKey + "_" + t;
        }, t;
    }();

    /**
     * Oldest acceptable age in milliseconds for client metadata before the client
     * is considered inactive and its associated data is garbage collected.
     */
    /**
     * Helper to get a typed SimpleDbStore for the primary client object store.
     */
    function _i(t) {
        return Ni.Ms(t, ti.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the client metadata object store.
     */ function Ai(t) {
        return Ni.Ms(t, pi.store);
    }

    /** Provides LRU functionality for IndexedDB persistence. */ var Si = /** @class */ function() {
        function t(t, e) {
            this.db = t, this.Yi = new Nr(this, e);
        }
        return t.prototype.ir = function(t) {
            var e = this._h(t);
            return this.db.hh().do(t).next((function(t) {
                return e.next((function(e) {
                    return t + e;
                }));
            }));
        }, t.prototype._h = function(t) {
            var e = 0;
            return this.or(t, (function(t) {
                e++;
            })).next((function() {
                return e;
            }));
        }, t.prototype.be = function(t, e) {
            return this.db.hh().be(t, e);
        }, t.prototype.or = function(t, e) {
            return this.fh(t, (function(t, n) {
                return e(n);
            }));
        }, t.prototype.Eo = function(t, e, n) {
            return Di(t, n);
        }, t.prototype.Io = function(t, e, n) {
            return Di(t, n);
        }, t.prototype.hr = function(t, e, n) {
            return this.db.hh().hr(t, e, n);
        }, t.prototype.Dr = function(t, e) {
            return Di(t, e);
        }, 
        /**
         * Returns true if anything would prevent this document from being garbage
         * collected, given that the document in question is not present in any
         * targets and has a sequence number less than or equal to the upper bound for
         * the collection run.
         */
        t.prototype.dh = function(t, e) {
            return function(t, e) {
                var n = !1;
                return zr(t).ti((function(r) {
                    return Fr(t, r, e).next((function(t) {
                        return t && (n = !0), Zn.resolve(!t);
                    }));
                })).next((function() {
                    return n;
                }));
            }(t, e);
        }, t.prototype.ar = function(t, e) {
            var n = this, r = this.db.ah().jr(), i = [], o = 0;
            return this.fh(t, (function(s, u) {
                if (u <= e) {
                    var a = n.dh(t, s).next((function(e) {
                        if (!e) 
                        // Our size accounting requires us to read all documents before
                        // removing them.
                        return o++, r.Ln(t, s).next((function() {
                            return r.Mn(s), Ii(t).delete([ 0, _r(s.path) ]);
                        }));
                    }));
                    i.push(a);
                }
            })).next((function() {
                return Zn.Cn(i);
            })).next((function() {
                return r.apply(t);
            })).next((function() {
                return o;
            }));
        }, t.prototype.removeTarget = function(t, e) {
            var n = e.tt(t.Ro);
            return this.db.hh().lo(t, n);
        }, t.prototype.wh = function(t, e) {
            return Di(t, e);
        }, 
        /**
         * Call provided function for each document in the cache that is 'orphaned'. Orphaned
         * means not a part of any target, so the only entry in the target-document index for
         * that document will be the sentinel row (targetId 0), which will also have the sequence
         * number for the last time the document was accessed.
         */
        t.prototype.fh = function(t, e) {
            var n, r = Ii(t), i = nr.Es;
            return r.Zs({
                index: ci.documentTargetsIndex
            }, (function(t, r) {
                var o = t[0], s = (t[1], r.path), u = r.sequenceNumber;
                0 === o ? (
                // if nextToReport is valid, report it, this is a new key so the
                // last one must not be a member of any targets.
                i !== nr.Es && e(new K$1(Dr(n)), i), 
                // set nextToReport to be this sequence number. It's the next one we
                // might report, if we don't find any targets for this document.
                // Note that the sequence number must be defined when the targetId
                // is 0.
                i = u, n = s) : 
                // set nextToReport to be invalid, we know we don't need to report
                // this one since we found a target for it.
                i = nr.Es;
            })).next((function() {
                // Since we report sequence numbers after getting to the next key, we
                // need to check if the last key we iterated over was an orphaned
                // document and report it.
                i !== nr.Es && e(new K$1(Dr(n)), i);
            }));
        }, t.prototype.ur = function(t) {
            return this.db.ah().zr(t);
        }, t;
    }();

    function Di(t, e) {
        return Ii(t).put(
        /**
     * @return A value suitable for writing a sentinel row in the target-document
     * store.
     */
        function(t, e) {
            return new ci(0, _r(t.path), e);
        }(e, t.Ro));
    }

    /**
     * Generates a string used as a prefix when storing data in IndexedDB and
     * LocalStorage.
     */ function ki(t, e) {
        // Use two different prefix formats:
        //   * firestore / persistenceKey / projectID . databaseID / ...
        //   * firestore / persistenceKey / projectID / ...
        // projectIDs are DNS-compatible names and cannot contain dots
        // so there's no danger of collisions.
        var n = t.projectId;
        return t.i || (n += "." + t.database), "firestore/" + e + "/" + n + "/"
        /**
     * Implements `LocalStore` interface.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */;
    }

    var xi = /** @class */ function() {
        function t(
        /** Manages our in-memory or durable persistence. */
        t, e, n) {
            this.persistence = t, this.Th = e, 
            /**
                 * Maps a targetID to data about its target.
                 *
                 * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
                 * of `applyRemoteEvent()` idempotent.
                 */
            this.Eh = new ht(L$1), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.mh = new M$1((function(t) {
                return tt(t);
            }), et), 
            /**
                 * The read time of the last entry processed by `getNewDocumentChanges()`.
                 *
                 * PORTING NOTE: This is only used for multi-tab synchronization.
                 */
            this.Ih = B.min(), this.Gn = t.oh(n), this.Ah = t.ah(), this.ko = t.hh(), this.Rh = new tr(this.Ah, this.Gn, this.persistence.uh()), 
            this.Th.Ph(this.Rh);
        }
        return t.prototype.er = function(t) {
            var e = this;
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (function(n) {
                return t.cr(n, e.Eh);
            }));
        }, t;
    }();

    /**
     * Acknowledges the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */ function Li(t, e) {
        var n = D$2(t);
        return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (function(t) {
            var r = e.batch.keys(), i = n.Ah.jr({
                Gr: !0
            });
            return function(t, e, n, r) {
                var i = n.batch, o = i.keys(), s = Zn.resolve();
                return o.forEach((function(t) {
                    s = s.next((function() {
                        return r.Ln(e, t);
                    })).next((function(e) {
                        var o = e, s = n.Pn.get(t);
                        S$2(null !== s), (!o || o.version.o(s) < 0) && ((o = i.En(t, o, n)) && 
                        // We use the commitVersion as the readTime rather than the
                        // document's updateTime since the updateTime is not advanced
                        // for updates that do not modify the underlying document.
                        r.xn(o, n.Rn));
                    }));
                })), s.next((function() {
                    return t.Gn.br(e, i);
                }));
            }(n, t, e, i).next((function() {
                return i.apply(t);
            })).next((function() {
                return n.Gn.Cr(t);
            })).next((function() {
                return n.Rh.Zn(t, r);
            }));
        }));
    }

    /**
     * Removes mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */
    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */ function Pi(t) {
        var e = D$2(t);
        return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (function(t) {
            return e.ko.ro(t);
        }));
    }

    /**
     * Updates the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function Ri(t, e) {
        var n = D$2(t), r = e.Z, i = n.Eh;
        return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (function(t) {
            var o = n.Ah.jr({
                Gr: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                    i = n.Eh;
            var s = [];
            e.Wt.forEach((function(e, o) {
                var u = i.get(o);
                if (u) {
                    // Only update the remote keys if the target is still active. This
                    // ensures that we can persist the updated target data along with
                    // the updated assignment.
                    s.push(n.ko.mo(t, e.Zt, o).next((function() {
                        return n.ko.To(t, e.Jt, o);
                    })));
                    var a = e.resumeToken;
                    // Update the resume token if the change includes one.
                                    if (a.Y() > 0) {
                        var c = u.et(a, r).tt(t.Ro);
                        i = i.st(o, c), 
                        // Update the target data if there are target changes (or if
                        // sufficient time has passed since the last update).
                        /**
         * Returns true if the newTargetData should be persisted during an update of
         * an active target. TargetData should always be persisted when a target is
         * being released and should not call this function.
         *
         * While the target is active, TargetData updates can be omitted when nothing
         * about the target has changed except metadata like the resume token or
         * snapshot version. Occasionally it's worth the extra write to prevent these
         * values from getting too stale after a crash, but this doesn't have to be
         * too frequent.
         */
                        function(t, e, n) {
                            // Always persist target data if we don't already have a resume token.
                            return S$2(e.resumeToken.Y() > 0), 0 === t.resumeToken.Y() || (
                            // Don't allow resume token changes to be buffered indefinitely. This
                            // allows us to be reasonably up-to-date after a crash and avoids needing
                            // to loop over all active queries on shutdown. Especially in the browser
                            // we may not get time to do anything interesting while the current tab is
                            // closing.
                            e.Z.I() - t.Z.I() >= 3e8 || n.Jt.size + n.Xt.size + n.Zt.size > 0);
                        }(u, c, e) && s.push(n.ko.lo(t, c));
                    }
                }
            }));
            var u = vt(), a = Et();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
                    if (e.Kt.forEach((function(t, e) {
                a = a.add(t);
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
            // documents in advance in a single call.
            s.push(o.getEntries(t, a).next((function(i) {
                e.Kt.forEach((function(a, c) {
                    var h = i.get(a);
                    // Note: The order of the steps below is important, since we want
                    // to ensure that rejected limbo resolutions (which fabricate
                    // NoDocuments with SnapshotVersion.min()) never add documents to
                    // cache.
                                    c instanceof yn && c.version.isEqual(B.min()) ? (
                    // NoDocuments with SnapshotVersion.min() are used in manufactured
                    // events. We remove these documents from cache since we lost
                    // access.
                    o.Mn(a, r), u = u.st(a, c)) : null == h || c.version.o(h.version) > 0 || 0 === c.version.o(h.version) && h.hasPendingWrites ? (o.xn(c, r), 
                    u = u.st(a, c)) : E$1("LocalStore", "Ignoring outdated watch update for ", a, ". Current version:", h.version, " Watch version:", c.version), 
                    e.Gt.has(a) && s.push(n.persistence.dr.wh(t, a));
                }));
            }))), !r.isEqual(B.min())) {
                var c = n.ko.ro(t).next((function(e) {
                    return n.ko.ho(t, t.Ro, r);
                }));
                s.push(c);
            }
            return Zn.Cn(s).next((function() {
                return o.apply(t);
            })).next((function() {
                return n.Rh.ts(t, u);
            }));
        })).then((function(t) {
            return n.Eh = i, t;
        }));
    }

    /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */ function Oi(t, e) {
        var n = D$2(t);
        return n.persistence.runTransaction("Get next mutation batch", "readonly", (function(t) {
            return void 0 === e && (e = -1), n.Gn.gr(t, e);
        }));
    }

    /**
     * Reads the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */ function Vi(t, e) {
        var n = D$2(t);
        return n.persistence.runTransaction("Allocate target", "readwrite", (function(t) {
            var r;
            return n.ko.wo(t, e).next((function(i) {
                return i ? (
                // This target has been listened to previously, so reuse the
                // previous targetID.
                // TODO(mcg): freshen last accessed date?
                r = i, Zn.resolve(r)) : n.ko.no(t).next((function(i) {
                    return r = new st(e, i, 0 /* Listen */ , t.Ro), n.ko.ao(t, r).next((function() {
                        return r;
                    }));
                }));
            }));
        })).then((function(t) {
            // If Multi-Tab is enabled, the existing target data may be newer than
            // the in-memory data
            var r = n.Eh.get(t.targetId);
            return (null === r || t.Z.o(r.Z) > 0) && (n.Eh = n.Eh.st(t.targetId, t), n.mh.set(e, t.targetId)), 
            t;
        }));
    }

    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    /**
     * Unpins all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    function Ui(t, r, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, o, s, u;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    e = D$2(t), o = e.Eh.get(r), s = i ? "readwrite" : "readwrite-primary", n.label = 1;

                  case 1:
                    return n.trys.push([ 1, 4, , 5 ]), i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , e.persistence.runTransaction("Release target", s, (function(t) {
                        return e.persistence.dr.removeTarget(t, o);
                    })) ];

                  case 2:
                    n.sent(), n.label = 3;

                  case 3:
                    return [ 3 /*break*/ , 5 ];

                  case 4:
                    if (!ar(u = n.sent())) throw u;
                    // All `releaseTarget` does is record the final metadata state for the
                    // target, but we've been recording this periodically during target
                    // activity. If we lose this write this could cause a very slight
                    // difference in the order of target deletion during GC, but we
                    // don't define exact LRU semantics so this is acceptable.
                                    return E$1("LocalStore", "Failed to update sequence numbers for target " + r + ": " + u), 
                    [ 3 /*break*/ , 5 ];

                  case 5:
                    return e.Eh = e.Eh.remove(r), e.mh.delete(o.target), [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults Whether results from previous executions can
     * be used to optimize this query execution.
     */ function Ci(t, e, n) {
        var r = D$2(t), i = B.min(), o = Et();
        return r.persistence.runTransaction("Execute query", "readonly", (function(t) {
            return function(t, e, n) {
                var r = D$2(t), i = r.mh.get(n);
                return void 0 !== i ? Zn.resolve(r.Eh.get(i)) : r.ko.wo(e, n);
            }(r, t, Tn(e)).next((function(e) {
                if (e) return i = e.lastLimboFreeSnapshotVersion, r.ko.Ao(t, e.targetId).next((function(t) {
                    o = t;
                }));
            })).next((function() {
                return r.Th.ns(t, e, n ? i : B.min(), n ? o : Et());
            })).next((function(t) {
                return {
                    documents: t,
                    gh: o
                };
            }));
        }));
    }

    // PORTING NOTE: Multi-Tab only.
    function qi(t, e) {
        var n = D$2(t), r = D$2(n.ko), i = n.Eh.get(e);
        return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (function(t) {
            return r.Me(t, e).next((function(t) {
                return t ? t.target : null;
            }));
        }));
    }

    /**
     * Returns the set of documents that have been updated since the last call.
     * If this is the first call, returns the set of changes since client
     * initialization. Further invocations will return document that have changed
     * since the prior call.
     */
    // PORTING NOTE: Multi-Tab only.
    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err An error returned by a LocalStore operation.
     * @return A Promise that resolves after we recovered, or the original error.
     */ function Mi(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                if (t.code !== F$1.FAILED_PRECONDITION || t.message !== $n) throw t;
                return E$1("LocalStore", "Unexpectedly lost primary lease"), [ 2 /*return*/ ];
            }));
        }));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A collection of references to a document from some kind of numbered entity
     * (either a target ID or batch ID). As references are added to or removed from
     * the set corresponding events are emitted to a registered garbage collector.
     *
     * Each reference is represented by a DocumentReference object. Each of them
     * contains enough information to uniquely identify the reference. They are all
     * stored primarily in a set sorted by key. A document is considered garbage if
     * there's no references in that set (this can be efficiently checked thanks to
     * sorting by key).
     *
     * ReferenceSet also keeps a secondary set that contains references sorted by
     * IDs. This one is used to efficiently implement removal of all references by
     * some target ID.
     */ var Fi = /** @class */ function() {
        function t() {
            // A set of outstanding references to a document sorted by key.
            this.Vh = new pt(Gi.yh), 
            // A set of outstanding references to a document sorted by target id.
            this.ph = new pt(Gi.bh)
            /** Returns true if the reference set contains no references. */;
        }
        return t.prototype._ = function() {
            return this.Vh._();
        }, 
        /** Adds a reference to the given document key for the given ID. */ t.prototype.Eo = function(t, e) {
            var n = new Gi(t, e);
            this.Vh = this.Vh.add(n), this.ph = this.ph.add(n);
        }, 
        /** Add references to the given document keys for the given ID. */ t.prototype.vh = function(t, e) {
            var n = this;
            t.forEach((function(t) {
                return n.Eo(t, e);
            }));
        }, 
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */
        t.prototype.Io = function(t, e) {
            this.Sh(new Gi(t, e));
        }, t.prototype.Dh = function(t, e) {
            var n = this;
            t.forEach((function(t) {
                return n.Io(t, e);
            }));
        }, 
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */
        t.prototype.Ch = function(t) {
            var e = this, n = new K$1(new Q$1([])), r = new Gi(n, t), i = new Gi(n, t + 1), o = [];
            return this.ph.St([ r, i ], (function(t) {
                e.Sh(t), o.push(t.key);
            })), o;
        }, t.prototype.Nh = function() {
            var t = this;
            this.Vh.forEach((function(e) {
                return t.Sh(e);
            }));
        }, t.prototype.Sh = function(t) {
            this.Vh = this.Vh.delete(t), this.ph = this.ph.delete(t);
        }, t.prototype.Fh = function(t) {
            var e = new K$1(new Q$1([])), n = new Gi(e, t), r = new Gi(e, t + 1), i = Et();
            return this.ph.St([ n, r ], (function(t) {
                i = i.add(t.key);
            })), i;
        }, t.prototype.Nr = function(t) {
            var e = new Gi(t, 0), n = this.Vh.Ct(e);
            return null !== n && t.isEqual(n.key);
        }, t;
    }(), Gi = /** @class */ function() {
        function t(t, e) {
            this.key = t, this.kh = e
            /** Compare by key then by ID */;
        }
        return t.yh = function(t, e) {
            return K$1.P(t.key, e.key) || L$1(t.kh, e.kh);
        }, 
        /** Compare by ID then by key */ t.bh = function(t, e) {
            return L$1(t.kh, e.kh) || K$1.P(t.key, e.key);
        }, t;
    }(), ji = /** @class */ function() {
        function t(t) {
            this.uid = t;
        }
        return t.prototype.Er = function() {
            return null != this.uid;
        }, 
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */
        t.prototype.$h = function() {
            return this.Er() ? "uid:" + this.uid : "anonymous-user";
        }, t.prototype.isEqual = function(t) {
            return t.uid === this.uid;
        }, t;
    }();

    /** A user with a null UID. */ ji.UNAUTHENTICATED = new ji(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    ji.xh = new ji("google-credentials-uid"), ji.Oh = new ji("first-party-uid");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Bi = function(t, e) {
        this.user = e, this.type = "OAuth", this.Mh = {}, 
        // Set the headers using Object Literal notation to avoid minification
        this.Mh.Authorization = "Bearer " + t;
    }, zi = /** @class */ function() {
        function t() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.Lh = null;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(null);
        }, t.prototype.qh = function() {}, t.prototype.Bh = function(t) {
            this.Lh = t, 
            // Fire with initial user.
            t(ji.UNAUTHENTICATED);
        }, t.prototype.Uh = function() {
            this.Lh = null;
        }, t;
    }(), Qi = /** @class */ function() {
        function t(t) {
            var e = this;
            /**
             * The auth token listener registered with FirebaseApp, retained here so we
             * can unregister it.
             */        this.Qh = null, 
            /** Tracks the current User. */
            this.currentUser = ji.UNAUTHENTICATED, this.Wh = !1, 
            /**
                 * Counter used to detect if the token changed while a getToken request was
                 * outstanding.
                 */
            this.jh = 0, 
            /** The listener registered with setChangeListener(). */
            this.Lh = null, this.forceRefresh = !1, this.Qh = function() {
                e.jh++, e.currentUser = e.Kh(), e.Wh = !0, e.Lh && e.Lh(e.currentUser);
            }, this.jh = 0, this.auth = t.getImmediate({
                optional: !0
            }), this.auth ? this.auth.addAuthTokenListener(this.Qh) : (
            // if auth is not available, invoke tokenListener once with null token
            this.Qh(null), t.get().then((function(t) {
                e.auth = t, e.Qh && 
                // tokenListener can be removed by removeChangeListener()
                e.auth.addAuthTokenListener(e.Qh);
            }), (function() {})));
        }
        return t.prototype.getToken = function() {
            var t = this, e = this.jh, n = this.forceRefresh;
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
                    return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((function(n) {
                // Cancel the request since the token changed while the request was
                // outstanding so the response is potentially for a previous user (which
                // user, we can't be sure).
                return t.jh !== e ? (E$1("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
                t.getToken()) : n ? (S$2("string" == typeof n.accessToken), new Bi(n.accessToken, t.currentUser)) : null;
            })) : Promise.resolve(null);
        }, t.prototype.qh = function() {
            this.forceRefresh = !0;
        }, t.prototype.Bh = function(t) {
            this.Lh = t, 
            // Fire the initial event
            this.Wh && t(this.currentUser);
        }, t.prototype.Uh = function() {
            this.auth && this.auth.removeAuthTokenListener(this.Qh), this.Qh = null, this.Lh = null;
        }, 
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        t.prototype.Kh = function() {
            var t = this.auth && this.auth.getUid();
            return S$2(null === t || "string" == typeof t), new ji(t);
        }, t;
    }(), Wi = /** @class */ function() {
        function t(t, e) {
            this.Gh = t, this.zh = e, this.type = "FirstParty", this.user = ji.Oh;
        }
        return Object.defineProperty(t.prototype, "Mh", {
            get: function() {
                var t = {
                    "X-Goog-AuthUser": this.zh
                }, e = this.Gh.auth.Hh([]);
                return e && (t.Authorization = e), t;
            },
            enumerable: !1,
            configurable: !0
        }), t;
    }(), Hi = /** @class */ function() {
        function t(t, e) {
            this.Gh = t, this.zh = e;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(new Wi(this.Gh, this.zh));
        }, t.prototype.Bh = function(t) {
            // Fire with initial uid.
            t(ji.Oh);
        }, t.prototype.Uh = function() {}, t.prototype.qh = function() {}, t;
    }(), Ki = /** @class */ function() {
        function t(t, e, n, r, i, o) {
            this.ms = t, this.Yh = n, this.Jh = r, this.Xh = i, this.listener = o, this.state = 0 /* Initial */ , 
            /**
                 * A close count that's incremented every time the stream is closed; used by
                 * getCloseGuardedDispatcher() to invalidate callbacks that happen after
                 * close.
                 */
            this.Zh = 0, this.ta = null, this.stream = null, this.Ti = new ir(t, e)
            /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */;
        }
        return t.prototype.ea = function() {
            return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
        }, 
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */
        t.prototype.na = function() {
            return 2 /* Open */ === this.state;
        }, 
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */
        t.prototype.start = function() {
            3 /* Error */ !== this.state ? this.auth() : this.sa();
        }, 
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */
        t.prototype.stop = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.ea() ? [ 4 /*yield*/ , this.close(0 /* Initial */) ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */
        t.prototype.ia = function() {
            this.state = 0 /* Initial */ , this.Ti.reset();
        }, 
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */
        t.prototype.ra = function() {
            var t = this;
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
                    this.na() && null === this.ta && (this.ta = this.ms.Ss(this.Yh, 6e4, (function() {
                return t.oa();
            })));
        }, 
        /** Sends a message to the underlying stream. */ t.prototype.ha = function(t) {
            this.aa(), this.stream.send(t);
        }, 
        /** Called by the idle timer when the stream should close due to inactivity. */ t.prototype.oa = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    return this.na() ? [ 2 /*return*/ , this.close(0 /* Initial */) ] : [ 2 /*return*/ ];
                }));
            }));
        }, 
        /** Marks the stream as active again. */ t.prototype.aa = function() {
            this.ta && (this.ta.cancel(), this.ta = null);
        }, 
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState the intended state of the stream after closing.
         * @param error the error the connection was closed with.
         */
        t.prototype.close = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        // Notify the listener that the stream closed.
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        return this.aa(), this.Ti.cancel(), 
                        // Invalidates any stream-related callbacks (e.g. from auth or the
                        // underlying stream), guaranteeing they won't execute.
                        this.Zh++, 3 /* Error */ !== t ? 
                        // If this is an intentional close ensure we don't delay our next connection attempt.
                        this.Ti.reset() : r && r.code === F$1.RESOURCE_EXHAUSTED ? (
                        // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                        T$2(r.toString()), T$2("Using maximum backoff delay to prevent overloading the backend."), 
                        this.Ti.ps()) : r && r.code === F$1.UNAUTHENTICATED && 
                        // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                        // just expired.
                        this.Xh.qh(), 
                        // Clean up the underlying stream because we are no longer interested in events.
                        null !== this.stream && (this.ca(), this.stream.close(), this.stream = null), 
                        // This state must be assigned before calling onClose() to allow the callback to
                        // inhibit backoff or otherwise manipulate the state in its non-started state.
                        this.state = t, [ 4 /*yield*/ , this.listener.ua(r) ];

                      case 1:
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        // Notify the listener that the stream closed.
                        return e.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */
        t.prototype.ca = function() {}, t.prototype.auth = function() {
            var t = this;
            this.state = 1 /* Starting */;
            var e = this.la(this.Zh), n = this.Zh;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    this.Xh.getToken().then((function(e) {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                t.Zh === n && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                t._a(e);
            }), (function(n) {
                e((function() {
                    var e = new G$1(F$1.UNKNOWN, "Fetching auth token failed: " + n.message);
                    return t.fa(e);
                }));
            }));
        }, t.prototype._a = function(t) {
            var e = this, n = this.la(this.Zh);
            this.stream = this.da(t), this.stream.wa((function() {
                n((function() {
                    return e.state = 2 /* Open */ , e.listener.wa();
                }));
            })), this.stream.ua((function(t) {
                n((function() {
                    return e.fa(t);
                }));
            })), this.stream.onMessage((function(t) {
                n((function() {
                    return e.onMessage(t);
                }));
            }));
        }, t.prototype.sa = function() {
            var t = this;
            this.state = 4 /* Backoff */ , this.Ti.bs((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        return this.state = 0 /* Initial */ , this.start(), [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, 
        // Visible for tests
        t.prototype.fa = function(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return E$1("PersistentStream", "close with error: " + t), this.stream = null, this.close(3 /* Error */ , t);
        }, 
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */
        t.prototype.la = function(t) {
            var e = this;
            return function(n) {
                e.ms.ai((function() {
                    return e.Zh === t ? n() : (E$1("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                    Promise.resolve());
                }));
            };
        }, t;
    }(), Yi = /** @class */ function(e) {
        function n(t, n, r, i, o) {
            var s = this;
            return (s = e.call(this, t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , n, r, o) || this).serializer = i, 
            s;
        }
        return __extends(n, e), n.prototype.da = function(t) {
            return this.Jh.Ta("Listen", t);
        }, n.prototype.onMessage = function(t) {
            // A successful response means the stream is healthy
            this.Ti.reset();
            var e = function(t, e) {
                var n;
                if ("targetChange" in e) {
                    e.targetChange;
                    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
                    // if unset
                    var r = function(t) {
                        return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : A$2();
                    }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], o = function(t, e) {
                        return t.Le ? (S$2(void 0 === e || "string" == typeof e), rt.fromBase64String(e || "")) : (S$2(void 0 === e || e instanceof Uint8Array), 
                        rt.fromUint8Array(e || new Uint8Array));
                    }(t, e.targetChange.resumeToken), s = e.targetChange.cause, u = s && function(t) {
                        var e = void 0 === t.code ? F$1.UNKNOWN : ct(t.code);
                        return new G$1(e, t.message || "");
                    }(s);
                    n = new Pt(r, i, o, u || null);
                } else if ("documentChange" in e) {
                    e.documentChange;
                    var a = e.documentChange;
                    a.document, a.document.name, a.document.updateTime;
                    var c = de(t, a.document.name), h = he(a.document.updateTime), f = new hn({
                        mapValue: {
                            fields: a.document.fields
                        }
                    }), l = new dn(c, h, f, {}), p = a.targetIds || [], d = a.removedTargetIds || [];
                    n = new xt(p, d, l.key, l);
                } else if ("documentDelete" in e) {
                    e.documentDelete;
                    var y = e.documentDelete;
                    y.document;
                    var v = de(t, y.document), g = y.readTime ? he(y.readTime) : B.min(), m = new yn(v, g), w = y.removedTargetIds || [];
                    n = new xt([], w, m.key, m);
                } else if ("documentRemove" in e) {
                    e.documentRemove;
                    var b = e.documentRemove;
                    b.document;
                    var I = de(t, b.document), E = b.removedTargetIds || [];
                    n = new xt([], E, I, null);
                } else {
                    if (!("filter" in e)) return A$2();
                    e.filter;
                    var T = e.filter;
                    T.targetId;
                    var N = T.count || 0, _ = new ut(N), D = T.targetId;
                    n = new Lt(D, _);
                }
                return n;
            }(this.serializer, t), n = function(t) {
                // We have only reached a consistent snapshot for the entire stream if there
                // is a read_time set and it applies to all targets (i.e. the list of
                // targets is empty). The backend is guaranteed to send such responses.
                if (!("targetChange" in t)) return B.min();
                var e = t.targetChange;
                return e.targetIds && e.targetIds.length ? B.min() : e.readTime ? he(e.readTime) : B.min();
            }(t);
            return this.listener.Ea(e, n);
        }, 
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */
        n.prototype.ma = function(t) {
            var e = {};
            e.database = ge(this.serializer), e.addTarget = function(t, e) {
                var n, r = e.target;
                return (n = nt(r) ? {
                    documents: Ee(t, r)
                } : {
                    query: Te(t, r)
                }).targetId = e.targetId, e.resumeToken.Y() > 0 && (n.resumeToken = ae(t, e.resumeToken)), 
                n;
            }(this.serializer, t);
            var n = function(t, e) {
                var n = function(t, e) {
                    switch (e) {
                      case 0 /* Listen */ :
                        return null;

                      case 1 /* ExistenceFilterMismatch */ :
                        return "existence-filter-mismatch";

                      case 2 /* LimboResolution */ :
                        return "limbo-document";

                      default:
                        return A$2();
                    }
                }(0, e.X);
                return null == n ? null : {
                    "goog-listen-tags": n
                };
            }(this.serializer, t);
            n && (e.labels = n), this.ha(e);
        }, 
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */
        n.prototype.Ia = function(t) {
            var e = {};
            e.database = ge(this.serializer), e.removeTarget = t, this.ha(e);
        }, n;
    }(Ki), Zi = /** @class */ function(e) {
        function n(t, n, r, i, o) {
            var s = this;
            return (s = e.call(this, t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , n, r, o) || this).serializer = i, 
            s.Aa = !1, s;
        }
        return __extends(n, e), Object.defineProperty(n.prototype, "Ra", {
            /**
             * Tracks whether or not a handshake has been successfully exchanged and
             * the stream is ready to accept mutations.
             */
            get: function() {
                return this.Aa;
            },
            enumerable: !1,
            configurable: !0
        }), 
        // Override of PersistentStream.start
        n.prototype.start = function() {
            this.Aa = !1, this.lastStreamToken = void 0, e.prototype.start.call(this);
        }, n.prototype.ca = function() {
            this.Aa && this.Pa([]);
        }, n.prototype.da = function(t) {
            return this.Jh.Ta("Write", t);
        }, n.prototype.onMessage = function(t) {
            if (
            // Always capture the last stream token.
            S$2(!!t.streamToken), this.lastStreamToken = t.streamToken, this.Aa) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.Ti.reset();
                var e = function(t, e) {
                    return t && t.length > 0 ? (S$2(void 0 !== e), t.map((function(t) {
                        return function(t, e) {
                            // NOTE: Deletes don't have an updateTime.
                            var n = t.updateTime ? he(t.updateTime) : he(e);
                            n.isEqual(B.min()) && (
                            // The Firestore Emulator currently returns an update time of 0 for
                            // deletes of non-existing documents (rather than null). This breaks the
                            // test "get deleted doc while offline with source=cache" as NoDocuments
                            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
                            // TODO(#2149): Remove this when Emulator is fixed
                            n = he(e));
                            var r = null;
                            return t.transformResults && t.transformResults.length > 0 && (r = t.transformResults), 
                            new We(n, r);
                        }(t, e);
                    }))) : [];
                }(t.writeResults, t.commitTime), n = he(t.commitTime);
                return this.listener.ga(n, e);
            }
            // The first response is always the handshake response
                    return S$2(!t.writeResults || 0 === t.writeResults.length), this.Aa = !0, 
            this.listener.Va();
        }, 
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */
        n.prototype.ya = function() {
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            var t = {};
            t.database = ge(this.serializer), this.ha(t);
        }, 
        /** Sends a group of mutations to the Firestore backend to apply. */ n.prototype.Pa = function(t) {
            var e = this, n = {
                streamToken: this.lastStreamToken,
                writes: t.map((function(t) {
                    return be(e.serializer, t);
                }))
            };
            this.ha(n);
        }, n;
    }(Ki), Xi = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this) || this).credentials = t, i.Jh = n, i.serializer = r, i.pa = !1, 
            i;
        }
        return __extends(n, e), n.prototype.ba = function() {
            if (this.pa) throw new G$1(F$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }, 
        /** Gets an auth token and invokes the provided RPC. */ n.prototype.va = function(t, e, n) {
            var r = this;
            return this.ba(), this.credentials.getToken().then((function(i) {
                return r.Jh.va(t, e, n, i);
            })).catch((function(t) {
                throw t.code === F$1.UNAUTHENTICATED && r.credentials.qh(), t;
            }));
        }, 
        /** Gets an auth token and invokes the provided RPC with streamed results. */ n.prototype.Sa = function(t, e, n) {
            var r = this;
            return this.ba(), this.credentials.getToken().then((function(i) {
                return r.Jh.Sa(t, e, n, i);
            })).catch((function(t) {
                throw t.code === F$1.UNAUTHENTICATED && r.credentials.qh(), t;
            }));
        }, n.prototype.terminate = function() {
            this.pa = !1;
        }, n;
    }((function() {})), $i = /** @class */ function() {
        function t(t, e) {
            this.ei = t, this.Da = e, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
                 * A count of consecutive failures to open the stream. If it reaches the
                 * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
                 * Offline.
                 */
            this.Ca = 0, 
            /**
                 * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
                 * transition from OnlineState.Unknown to OnlineState.Offline without waiting
                 * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
                 */
            this.Na = null, 
            /**
                 * Whether the client should log a warning message if it fails to connect to
                 * the backend (initially true, cleared after a successful stream, or if we've
                 * logged the message already).
                 */
            this.Fa = !0
            /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */;
        }
        return t.prototype.ka = function() {
            var t = this;
            0 === this.Ca && (this.$a("Unknown" /* Unknown */), this.Na = this.ei.Ss("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (function() {
                return t.Na = null, t.xa("Backend didn't respond within 10 seconds."), t.$a("Offline" /* Offline */), 
                Promise.resolve();
            })));
        }, 
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */
        t.prototype.Oa = function(t) {
            "Online" /* Online */ === this.state ? this.$a("Unknown" /* Unknown */) : (this.Ca++, 
            this.Ca >= 1 && (this.Ma(), this.xa("Connection failed 1 times. Most recent error: " + t.toString()), 
            this.$a("Offline" /* Offline */)));
        }, 
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */
        t.prototype.set = function(t) {
            this.Ma(), this.Ca = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.Fa = !1), this.$a(t);
        }, t.prototype.$a = function(t) {
            t !== this.state && (this.state = t, this.Da(t));
        }, t.prototype.xa = function(t) {
            var e = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
            this.Fa ? (T$2(e), this.Fa = !1) : E$1("OnlineStateTracker", e);
        }, t.prototype.Ma = function() {
            null !== this.Na && (this.Na.cancel(), this.Na = null);
        }, t;
    }(), Ji = /** @class */ function() {
        function t(
        /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
        t, 
        /** The client-side proxy for interacting with the backend. */
        r, i, o, s) {
            var u = this;
            this.La = t, this.qa = r, this.ei = i, 
            /**
                 * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
                 * LocalStore via fillWritePipeline() and have or will send to the write
                 * stream.
                 *
                 * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
                 * restart the write stream. When the stream is established the writes in the
                 * pipeline will be sent in order.
                 *
                 * Writes remain in writePipeline until they are acknowledged by the backend
                 * and thus will automatically be re-sent if the stream is interrupted /
                 * restarted before they're acknowledged.
                 *
                 * Write responses from the backend are linked to their originating request
                 * purely based on order, and so we can just shift() writes from the front of
                 * the writePipeline as we receive responses.
                 */
            this.Ba = [], 
            /**
                 * A mapping of watched targets that the client cares about tracking and the
                 * user has explicitly called a 'listen' for this target.
                 *
                 * These targets may or may not have been sent to or acknowledged by the
                 * server. On re-establishing the listen stream, these targets should be sent
                 * to the server. The targets removed with unlistens are removed eagerly
                 * without waiting for confirmation from the listen stream.
                 */
            this.Ua = new Map, this.Qa = null, 
            /**
                 * A set of reasons for why the RemoteStore may be offline. If empty, the
                 * RemoteStore may start its network connections.
                 */
            this.Wa = new Set, this.ja = s, this.ja.Ka((function(t) {
                i.ai((function() {
                    return __awaiter(u, void 0, void 0, (function() {
                        return __generator(this, (function(t) {
                            switch (t.label) {
                              case 0:
                                return this.Ga() ? (E$1("RemoteStore", "Restarting streams for network reachability change."), 
                                [ 4 /*yield*/ , this.za() ]) : [ 3 /*break*/ , 2 ];

                              case 1:
                                t.sent(), t.label = 2;

                              case 2:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }));
            })), this.Ha = new $i(i, o), 
            // Create streams (but note they're not started yet).
            this.Ya = function(t, e, n) {
                var r = D$2(t);
                return r.ba(), new Yi(e, r.Jh, r.credentials, r.serializer, n);
            }(this.qa, i, {
                wa: this.Ja.bind(this),
                ua: this.Xa.bind(this),
                Ea: this.Za.bind(this)
            }), this.tc = function(t, e, n) {
                var r = D$2(t);
                return r.ba(), new Zi(e, r.Jh, r.credentials, r.serializer, n);
            }(this.qa, i, {
                wa: this.ec.bind(this),
                ua: this.nc.bind(this),
                Va: this.sc.bind(this),
                ga: this.ga.bind(this)
            });
        }
        /**
         * Starts up the remote store, creating streams, restoring state from
         * LocalStore, etc.
         */    return t.prototype.start = function() {
            return this.enableNetwork();
        }, 
        /** Re-enables the network. Idempotent. */ t.prototype.enableNetwork = function() {
            return this.Wa.delete(0 /* UserDisabled */), this.ic();
        }, t.prototype.ic = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.Ga() ? (this.rc() ? this.oc() : this.Ha.set("Unknown" /* Unknown */), 
                        [ 4 /*yield*/ , this.hc() ]) : [ 3 /*break*/ , 2 ];

                      case 1:
                        // This will start the write stream if necessary.
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Temporarily disables the network. The network can be re-enabled using
         * enableNetwork().
         */
        t.prototype.disableNetwork = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.Wa.add(0 /* UserDisabled */), [ 4 /*yield*/ , this.ac() ];

                      case 1:
                        return t.sent(), 
                        // Set the OnlineState to Offline so get()s return from cache, etc.
                        this.Ha.set("Offline" /* Offline */), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.ac = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.tc.stop() ];

                      case 1:
                        return t.sent(), [ 4 /*yield*/ , this.Ya.stop() ];

                      case 2:
                        return t.sent(), this.Ba.length > 0 && (E$1("RemoteStore", "Stopping write stream with " + this.Ba.length + " pending writes"), 
                        this.Ba = []), this.cc(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.th = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return E$1("RemoteStore", "RemoteStore shutting down."), this.Wa.add(5 /* Shutdown */), 
                        [ 4 /*yield*/ , this.ac() ];

                      case 1:
                        return t.sent(), this.ja.th(), 
                        // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                        // triggering spurious listener events with cached data, etc.
                        this.Ha.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Starts new listen for the given target. Uses resume token if provided. It
         * is a no-op if the target of given `TargetData` is already being listened to.
         */
        t.prototype.listen = function(t) {
            this.Ua.has(t.targetId) || (
            // Mark this as something the client is currently listening for.
            this.Ua.set(t.targetId, t), this.rc() ? 
            // The listen will be sent in onWatchStreamOpen
            this.oc() : this.Ya.na() && this.uc(t));
        }, 
        /**
         * Removes the listen from server. It is a no-op if the given target id is
         * not being listened to.
         */
        t.prototype.lc = function(t) {
            this.Ua.delete(t), this.Ya.na() && this._c(t), 0 === this.Ua.size && (this.Ya.na() ? this.Ya.ra() : this.Ga() && 
            // Revert to OnlineState.Unknown if the watch stream is not open and we
            // have no listeners, since without any listens to send we cannot
            // confirm if the stream is healthy and upgrade to OnlineState.Online.
            this.Ha.set("Unknown" /* Unknown */));
        }, 
        /** {@link TargetMetadataProvider.getTargetDataForTarget} */ t.prototype.Me = function(t) {
            return this.Ua.get(t) || null;
        }, 
        /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */ t.prototype.Oe = function(t) {
            return this.fc.Oe(t);
        }, 
        /**
         * We need to increment the the expected number of pending responses we're due
         * from watch so we wait for the ack to process any messages from this target.
         */
        t.prototype.uc = function(t) {
            this.Qa.we(t.targetId), this.Ya.ma(t);
        }, 
        /**
         * We need to increment the expected number of pending responses we're due
         * from watch so we wait for the removal on the server before we process any
         * messages from this target.
         */
        t.prototype._c = function(t) {
            this.Qa.we(t), this.Ya.Ia(t);
        }, t.prototype.oc = function() {
            this.Qa = new Ot(this), this.Ya.start(), this.Ha.ka();
        }, 
        /**
         * Returns whether the watch stream should be started because it's necessary
         * and has not yet been started.
         */
        t.prototype.rc = function() {
            return this.Ga() && !this.Ya.ea() && this.Ua.size > 0;
        }, t.prototype.Ga = function() {
            return 0 === this.Wa.size;
        }, t.prototype.cc = function() {
            this.Qa = null;
        }, t.prototype.Ja = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t = this;
                return __generator(this, (function(e) {
                    return this.Ua.forEach((function(e, n) {
                        t.uc(e);
                    })), [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.Xa = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    return this.cc(), 
                    // If we still need the watch stream, retry the connection.
                    this.rc() ? (this.Ha.Oa(t), this.oc()) : 
                    // No need to restart watch stream because there are no active targets.
                    // The online state is set to unknown because there is no active attempt
                    // at establishing a connection
                    this.Ha.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.Za = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, i, o;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        if (this.Ha.set("Online" /* Online */), !(t instanceof Pt && 2 /* Removed */ === t.state && t.cause)) 
                        // Mark the client as online since we got a message from the server
                        return [ 3 /*break*/ , 6 ];
                        n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 3, , 5 ]), [ 4 /*yield*/ , this.dc(t) ];

                      case 2:
                        return n.sent(), [ 3 /*break*/ , 5 ];

                      case 3:
                        return e = n.sent(), E$1("RemoteStore", "Failed to remove targets %s: %s ", t.targetIds.join(","), e), 
                        [ 4 /*yield*/ , this.wc(e) ];

                      case 4:
                        return n.sent(), [ 3 /*break*/ , 5 ];

                      case 5:
                        return [ 3 /*break*/ , 13 ];

                      case 6:
                        if (t instanceof xt ? this.Qa.ge(t) : t instanceof Lt ? this.Qa.Ce(t) : this.Qa.pe(t), 
                        r.isEqual(B.min())) return [ 3 /*break*/ , 13 ];
                        n.label = 7;

                      case 7:
                        return n.trys.push([ 7, 11, , 13 ]), [ 4 /*yield*/ , Pi(this.La) ];

                      case 8:
                        return i = n.sent(), r.o(i) >= 0 ? [ 4 /*yield*/ , this.Tc(r) ] : [ 3 /*break*/ , 10 ];

                        // We have received a target change with a global snapshot if the snapshot
                        // version is not equal to SnapshotVersion.min().
                                          case 9:
                        // We have received a target change with a global snapshot if the snapshot
                        // version is not equal to SnapshotVersion.min().
                        n.sent(), n.label = 10;

                      case 10:
                        return [ 3 /*break*/ , 13 ];

                      case 11:
                        return E$1("RemoteStore", "Failed to raise snapshot:", o = n.sent()), [ 4 /*yield*/ , this.wc(o) ];

                      case 12:
                        return n.sent(), [ 3 /*break*/ , 13 ];

                      case 13:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Recovery logic for IndexedDB errors that takes the network offline until
         * `op` succeeds. Retries are scheduled with backoff using
         * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
         * validated via a generic operation.
         *
         * The returned Promise is resolved once the network is disabled and before
         * any retry attempt.
         */
        t.prototype.wc = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var i = this;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        if (!ar(t)) throw t;
                        // Disable network and raise offline snapshots
                        return this.Wa.add(1 /* IndexedDbFailed */), [ 4 /*yield*/ , this.ac() ];

                      case 1:
                        // Disable network and raise offline snapshots
                        return o.sent(), this.Ha.set("Offline" /* Offline */), r || (
                        // Use a simple read operation to determine if IndexedDB recovered.
                        // Ideally, we would expose a health check directly on SimpleDb, but
                        // RemoteStore only has access to persistence through LocalStore.
                        r = function() {
                            return Pi(i.La);
                        }), 
                        // Probe IndexedDB periodically and re-enable network
                        this.ei.gi((function() {
                            return __awaiter(i, void 0, void 0, (function() {
                                return __generator(this, (function(t) {
                                    switch (t.label) {
                                      case 0:
                                        return E$1("RemoteStore", "Retrying IndexedDB access"), [ 4 /*yield*/ , r() ];

                                      case 1:
                                        return t.sent(), this.Wa.delete(1 /* IndexedDbFailed */), [ 4 /*yield*/ , this.ic() ];

                                      case 2:
                                        return t.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Executes `op`. If `op` fails, takes the network offline until `op`
         * succeeds. Returns after the first attempt.
         */
        t.prototype.Ec = function(t) {
            var e = this;
            return t().catch((function(n) {
                return e.wc(n, t);
            }));
        }, 
        /**
         * Takes a batch of changes from the Datastore, repackages them as a
         * RemoteEvent, and passes that on to the listener, which is typically the
         * SyncEngine.
         */
        t.prototype.Tc = function(t) {
            var e = this, n = this.Qa.ke(t);
            // Update in-memory resume tokens. LocalStore will update the
            // persistent view of these when applying the completed RemoteEvent.
            // Finally raise remote event
            return n.Wt.forEach((function(n, r) {
                if (n.resumeToken.Y() > 0) {
                    var i = e.Ua.get(r);
                    // A watched target might have been removed already.
                                    i && e.Ua.set(r, i.et(n.resumeToken, t));
                }
            })), 
            // Re-establish listens for the targets that have been invalidated by
            // existence filter mismatches.
            n.jt.forEach((function(t) {
                var n = e.Ua.get(t);
                if (n) {
                    // Clear the resume token for the target, since we're in a known mismatch
                    // state.
                    e.Ua.set(t, n.et(rt.J, n.Z)), 
                    // Cause a hard reset by unwatching and rewatching immediately, but
                    // deliberately don't send a resume token so that we get a full update.
                    e._c(t);
                    // Mark the target we send as being on behalf of an existence filter
                    // mismatch, but don't actually retain that in listenTargets. This ensures
                    // that we flag the first re-listen this way without impacting future
                    // listens of this target (that might happen e.g. on reconnect).
                    var r = new st(n.target, t, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                    e.uc(r);
                }
            })), this.fc.mc(n);
        }, 
        /** Handles an error on a target */ t.prototype.dc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i, o;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        e = t.cause, r = 0, i = t.targetIds, n.label = 1;

                      case 1:
                        return r < i.length ? (o = i[r], this.Ua.has(o) ? [ 4 /*yield*/ , this.fc.Ic(o, e) ] : [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 5 ];

                      case 2:
                        n.sent(), this.Ua.delete(o), this.Qa.removeTarget(o), n.label = 3;

                      case 3:
                        n.label = 4;

                      case 4:
                        return r++, [ 3 /*break*/ , 1 ];

                      case 5:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Attempts to fill our write pipeline with writes from the LocalStore.
         *
         * Called internally to bootstrap or refill the write pipeline and by
         * SyncEngine whenever there are new mutations to process.
         *
         * Starts the write stream if necessary.
         */
        t.prototype.hc = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, r;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        t = this.Ba.length > 0 ? this.Ba[this.Ba.length - 1].batchId : -1, n.label = 1;

                      case 1:
                        if (!this.Ac()) return [ 3 /*break*/ , 7 ];
                        n.label = 2;

                      case 2:
                        return n.trys.push([ 2, 4, , 6 ]), [ 4 /*yield*/ , Oi(this.La, t) ];

                      case 3:
                        return null === (e = n.sent()) ? (0 === this.Ba.length && this.tc.ra(), [ 3 /*break*/ , 7 ]) : (t = e.batchId, 
                        this.Rc(e), [ 3 /*break*/ , 6 ]);

                      case 4:
                        return r = n.sent(), [ 4 /*yield*/ , this.wc(r) ];

                      case 5:
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 3 /*break*/ , 1 ];

                      case 7:
                        return this.Pc() && this.gc(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Returns true if we can add to the write pipeline (i.e. the network is
         * enabled and the write pipeline is not full).
         */
        t.prototype.Ac = function() {
            return this.Ga() && this.Ba.length < 10;
        }, 
        // For testing
        t.prototype.Vc = function() {
            return this.Ba.length;
        }, 
        /**
         * Queues additional writes to be sent to the write stream, sending them
         * immediately if the write stream is established.
         */
        t.prototype.Rc = function(t) {
            this.Ba.push(t), this.tc.na() && this.tc.Ra && this.tc.Pa(t.mutations);
        }, t.prototype.Pc = function() {
            return this.Ga() && !this.tc.ea() && this.Ba.length > 0;
        }, t.prototype.gc = function() {
            this.tc.start();
        }, t.prototype.ec = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    return this.tc.ya(), [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.sc = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, r;
                return __generator(this, (function(n) {
                    // Send the write pipeline now that the stream is established.
                    for (t = 0, e = this.Ba; t < e.length; t++) r = e[t], this.tc.Pa(r.mutations);
                    return [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.ga = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, i, o = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return e = this.Ba.shift(), i = Yn.from(e, t, r), [ 4 /*yield*/ , this.Ec((function() {
                            return o.fc.yc(i);
                        })) ];

                      case 1:
                        // It's possible that with the completion of this mutation another
                        // slot has freed up.
                        return n.sent(), [ 4 /*yield*/ , this.hc() ];

                      case 2:
                        // It's possible that with the completion of this mutation another
                        // slot has freed up.
                        return n.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.nc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return t && this.tc.Ra ? [ 4 /*yield*/ , this.pc(t) ] : [ 3 /*break*/ , 2 ];

                        // This error affects the actual write.
                                          case 1:
                        // This error affects the actual write.
                        e.sent(), e.label = 2;

                      case 2:
                        // If the write stream closed after the write handshake completes, a write
                        // operation failed and we fail the pending operation.
                        // The write stream might have been started by refilling the write
                        // pipeline for failed writes
                        return this.Pc() && this.gc(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.pc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return at(r = t.code) && r !== F$1.ABORTED ? (e = this.Ba.shift(), 
                        // In this case it's also unlikely that the server itself is melting
                        // down -- this was just a bad request so inhibit backoff on the next
                        // restart.
                        this.tc.ia(), [ 4 /*yield*/ , this.Ec((function() {
                            return i.fc.bc(e.batchId, t);
                        })) ]) : [ 3 /*break*/ , 3 ];

                      case 1:
                        // It's possible that with the completion of this mutation
                        // another slot has freed up.
                        return n.sent(), [ 4 /*yield*/ , this.hc() ];

                      case 2:
                        // In this case it's also unlikely that the server itself is melting
                        // down -- this was just a bad request so inhibit backoff on the next
                        // restart.
                        // It's possible that with the completion of this mutation
                        // another slot has freed up.
                        n.sent(), n.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.za = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.Wa.add(4 /* ConnectivityChange */), [ 4 /*yield*/ , this.ac() ];

                      case 1:
                        return t.sent(), this.Ha.set("Unknown" /* Unknown */), this.tc.ia(), this.Ya.ia(), 
                        this.Wa.delete(4 /* ConnectivityChange */), [ 4 /*yield*/ , this.ic() ];

                      case 2:
                        return t.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.vc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.ei.pi(), 
                        // Tear down and re-create our network streams. This will ensure we get a
                        // fresh auth token for the new user and re-fill the write pipeline with
                        // new mutations from the LocalStore (since mutations are per-user).
                        E$1("RemoteStore", "RemoteStore received new credentials"), this.Wa.add(3 /* CredentialChange */), 
                        [ 4 /*yield*/ , this.ac() ];

                      case 1:
                        return e.sent(), this.Ha.set("Unknown" /* Unknown */), [ 4 /*yield*/ , this.fc.vc(t) ];

                      case 2:
                        return e.sent(), this.Wa.delete(3 /* CredentialChange */), [ 4 /*yield*/ , this.ic() ];

                      case 3:
                        return e.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Toggles the network state when the client gains or loses its primary lease.
         */
        t.prototype.Sc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return t ? (this.Wa.delete(2 /* IsSecondary */), [ 4 /*yield*/ , this.ic() ]) : [ 3 /*break*/ , 2 ];

                      case 1:
                        return n.sent(), [ 3 /*break*/ , 5 ];

                      case 2:
                        return (e = t) ? [ 3 /*break*/ , 4 ] : (this.Wa.add(2 /* IsSecondary */), [ 4 /*yield*/ , this.ac() ]);

                      case 3:
                        n.sent(), e = this.Ha.set("Unknown" /* Unknown */), n.label = 4;

                      case 4:
                        n.label = 5;

                      case 5:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t;
    }();

    /** A CredentialsProvider that always yields an empty token. */
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The format of the LocalStorage key that stores the client state is:
    //     firestore_clients_<persistence_prefix>_<instance_key>
    /** Assembles the key for a client state in WebStorage */
    function to(t, e) {
        return "firestore_clients_" + t + "_" + e;
    }

    // The format of the WebStorage key that stores the mutation state is:
    //     firestore_mutations_<persistence_prefix>_<batch_id>
    //     (for unauthenticated users)
    // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
    // 'user_uid' is last to avoid needing to escape '_' characters that it might
    // contain.
    /** Assembles the key for a mutation batch in WebStorage */ function eo(t, e, n) {
        var r = "firestore_mutations_" + t + "_" + n;
        return e.Er() && (r += "_" + e.uid), r;
    }

    // The format of the WebStorage key that stores a query target's metadata is:
    //     firestore_targets_<persistence_prefix>_<target_id>
    /** Assembles the key for a query state in WebStorage */ function no(t, e) {
        return "firestore_targets_" + t + "_" + e;
    }

    // The WebStorage prefix that stores the primary tab's online state. The
    // format of the key is:
    //     firestore_online_state_<persistence_prefix>
    /**
     * Holds the state of a mutation batch, including its user ID, batch ID and
     * whether the batch is 'pending', 'acknowledged' or 'rejected'.
     */
    // Visible for testing
    var ro = /** @class */ function() {
        function t(t, e, n, r) {
            this.user = t, this.batchId = e, this.state = n, this.error = r
            /**
         * Parses a MutationMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Dc = function(e, n, r) {
            var i = JSON.parse(r), o = "object" == typeof i && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(i.state) && (void 0 === i.error || "object" == typeof i.error), s = void 0;
            return o && i.error && ((o = "string" == typeof i.error.message && "string" == typeof i.error.code) && (s = new G$1(i.error.code, i.error.message))), 
            o ? new t(e, n, i.state, s) : (T$2("SharedClientState", "Failed to parse mutation state for ID '" + n + "': " + r), 
            null);
        }, t.prototype.Cc = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), io = /** @class */ function() {
        function t(t, e, n) {
            this.targetId = t, this.state = e, this.error = n
            /**
         * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Dc = function(e, n) {
            var r = JSON.parse(n), i = "object" == typeof r && -1 !== [ "not-current", "current", "rejected" ].indexOf(r.state) && (void 0 === r.error || "object" == typeof r.error), o = void 0;
            return i && r.error && ((i = "string" == typeof r.error.message && "string" == typeof r.error.code) && (o = new G$1(r.error.code, r.error.message))), 
            i ? new t(e, r.state, o) : (T$2("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n), 
            null);
        }, t.prototype.Cc = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), oo = /** @class */ function() {
        function t(t, e) {
            this.clientId = t, this.activeTargetIds = e
            /**
         * Parses a RemoteClientState from the JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Dc = function(e, n) {
            for (var r = JSON.parse(n), i = "object" == typeof r && r.activeTargetIds instanceof Array, o = Nt(), s = 0; i && s < r.activeTargetIds.length; ++s) i = X$1(r.activeTargetIds[s]), 
            o = o.add(r.activeTargetIds[s]);
            return i ? new t(e, o) : (T$2("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n), 
            null);
        }, t;
    }(), so = /** @class */ function() {
        function t(t, e) {
            this.clientId = t, this.onlineState = e
            /**
         * Parses a SharedOnlineState from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */;
        }
        return t.Dc = function(e) {
            var n = JSON.parse(e);
            return "object" == typeof n && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(n.onlineState) && "string" == typeof n.clientId ? new t(n.clientId, n.onlineState) : (T$2("SharedClientState", "Failed to parse online state: " + e), 
            null);
        }, t;
    }(), uo = /** @class */ function() {
        function t() {
            this.activeTargetIds = Nt();
        }
        return t.prototype.Nc = function(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }, t.prototype.Fc = function(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }, 
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */
        t.prototype.Cc = function() {
            var t = {
                activeTargetIds: this.activeTargetIds.N(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }, t;
    }(), ao = /** @class */ function() {
        function t(t, e, n, r, i) {
            this.window = t, this.ms = e, this.persistenceKey = n, this.kc = r, this.fc = null, 
            this.Da = null, this.fs = null, this.$c = this.xc.bind(this), this.Oc = new ht(L$1), 
            this.tr = !1, 
            /**
                 * Captures WebStorage events that occur before `start()` is called. These
                 * events are replayed once `WebStorageSharedClientState` is started.
                 */
            this.Mc = [];
            // Escape the special characters mentioned here:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
            var o = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            this.storage = this.window.localStorage, this.currentUser = i, this.Lc = to(this.persistenceKey, this.kc), 
            this.qc = 
            /** Assembles the key for the current sequence number. */
            function(t) {
                return "firestore_sequence_number_" + t;
            }(this.persistenceKey), this.Oc = this.Oc.st(this.kc, new uo), this.Bc = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), 
            this.Uc = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.Qc = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), 
            this.Wc = 
            /** Assembles the key for the online state of the primary tab. */
            function(t) {
                return "firestore_online_state_" + t;
            }(this.persistenceKey), 
            // Rather than adding the storage observer during start(), we add the
            // storage observer during initialization. This ensures that we collect
            // events before other components populate their initial state (during their
            // respective start() calls). Otherwise, we might for example miss a
            // mutation that is added after LocalStore's start() processed the existing
            // mutations but before we observe WebStorage events.
            this.window.addEventListener("storage", this.$c);
        }
        /** Returns 'true' if WebStorage is available in the current environment. */    return t.ks = function(t) {
            return !(!t || !t.localStorage);
        }, t.prototype.start = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, e, r, i, o, s, u, a, c, h, f, l = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.fc.rh() ];

                      case 1:
                        for (t = n.sent(), e = 0, r = t; e < r.length; e++) (i = r[e]) !== this.kc && (o = this.getItem(to(this.persistenceKey, i))) && (s = oo.Dc(i, o)) && (this.Oc = this.Oc.st(s.clientId, s));
                        for (this.jc(), (u = this.storage.getItem(this.Wc)) && (a = this.Kc(u)) && this.Gc(a), 
                        c = 0, h = this.Mc; c < h.length; c++) f = h[c], this.xc(f);
                        return this.Mc = [], 
                        // Register a window unload hook to remove the client metadata entry from
                        // WebStorage even if `shutdown()` was not called.
                        this.window.addEventListener("unload", (function() {
                            return l.th();
                        })), this.tr = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Ts = function(t) {
            this.setItem(this.qc, JSON.stringify(t));
        }, t.prototype.zc = function() {
            return this.Hc(this.Oc);
        }, t.prototype.Yc = function(t) {
            var e = !1;
            return this.Oc.forEach((function(n, r) {
                r.activeTargetIds.has(t) && (e = !0);
            })), e;
        }, t.prototype.Jc = function(t) {
            this.Xc(t, "pending");
        }, t.prototype.Zc = function(t, e, n) {
            this.Xc(t, e, n), 
            // Once a final mutation result is observed by other clients, they no longer
            // access the mutation's metadata entry. Since WebStorage replays events
            // in order, it is safe to delete the entry right after updating it.
            this.tu(t);
        }, t.prototype.eu = function(t) {
            var e = "not-current";
            // Lookup an existing query state if the target ID was already registered
            // by another tab
                    if (this.Yc(t)) {
                var n = this.storage.getItem(no(this.persistenceKey, t));
                if (n) {
                    var r = io.Dc(t, n);
                    r && (e = r.state);
                }
            }
            return this.nu.Nc(t), this.jc(), e;
        }, t.prototype.su = function(t) {
            this.nu.Fc(t), this.jc();
        }, t.prototype.iu = function(t) {
            return this.nu.activeTargetIds.has(t);
        }, t.prototype.ru = function(t) {
            this.removeItem(no(this.persistenceKey, t));
        }, t.prototype.ou = function(t, e, n) {
            this.hu(t, e, n);
        }, t.prototype.au = function(t, e, n) {
            var r = this;
            e.forEach((function(t) {
                r.tu(t);
            })), this.currentUser = t, n.forEach((function(t) {
                r.Jc(t);
            }));
        }, t.prototype.cu = function(t) {
            this.uu(t);
        }, t.prototype.th = function() {
            this.tr && (this.window.removeEventListener("storage", this.$c), this.removeItem(this.Lc), 
            this.tr = !1);
        }, t.prototype.getItem = function(t) {
            var e = this.storage.getItem(t);
            return E$1("SharedClientState", "READ", t, e), e;
        }, t.prototype.setItem = function(t, e) {
            E$1("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
        }, t.prototype.removeItem = function(t) {
            E$1("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
        }, t.prototype.xc = function(t) {
            var r = this, i = t;
            // Note: The function is typed to take Event to be interface-compatible with
            // `Window.addEventListener`.
                    if (i.storageArea === this.storage) {
                if (E$1("SharedClientState", "EVENT", i.key, i.newValue), i.key === this.Lc) return void T$2("Received WebStorage notification for local change. Another client might have garbage-collected our state");
                this.ms.gi((function() {
                    return __awaiter(r, void 0, void 0, (function() {
                        var t, e, r, o, s, u;
                        return __generator(this, (function(n) {
                            if (this.tr) {
                                if (null !== i.key) if (this.Bc.test(i.key)) {
                                    if (null == i.newValue) return t = this.lu(i.key), [ 2 /*return*/ , this._u(t, null) ];
                                    if (e = this.fu(i.key, i.newValue)) return [ 2 /*return*/ , this._u(e.clientId, e) ];
                                } else if (this.Uc.test(i.key)) {
                                    if (null !== i.newValue && (r = this.du(i.key, i.newValue))) return [ 2 /*return*/ , this.wu(r) ];
                                } else if (this.Qc.test(i.key)) {
                                    if (null !== i.newValue && (o = this.Tu(i.key, i.newValue))) return [ 2 /*return*/ , this.Eu(o) ];
                                } else if (i.key === this.Wc) {
                                    if (null !== i.newValue && (s = this.Kc(i.newValue))) return [ 2 /*return*/ , this.Gc(s) ];
                                } else i.key === this.qc && (u = function(t) {
                                    var e = nr.Es;
                                    if (null != t) try {
                                        var n = JSON.parse(t);
                                        S$2("number" == typeof n), e = n;
                                    } catch (t) {
                                        T$2("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                    }
                                    return e;
                                }(i.newValue)) !== nr.Es && this.fs(u);
                            } else this.Mc.push(i);
                            return [ 2 /*return*/ ];
                        }));
                    }));
                }));
            }
        }, Object.defineProperty(t.prototype, "nu", {
            get: function() {
                return this.Oc.get(this.kc);
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.jc = function() {
            this.setItem(this.Lc, this.nu.Cc());
        }, t.prototype.Xc = function(t, e, n) {
            var r = new ro(this.currentUser, t, e, n), i = eo(this.persistenceKey, this.currentUser, t);
            this.setItem(i, r.Cc());
        }, t.prototype.tu = function(t) {
            var e = eo(this.persistenceKey, this.currentUser, t);
            this.removeItem(e);
        }, t.prototype.uu = function(t) {
            var e = {
                clientId: this.kc,
                onlineState: t
            };
            this.storage.setItem(this.Wc, JSON.stringify(e));
        }, t.prototype.hu = function(t, e, n) {
            var r = no(this.persistenceKey, t), i = new io(t, e, n);
            this.setItem(r, i.Cc());
        }, 
        /**
         * Parses a client state key in WebStorage. Returns null if the key does not
         * match the expected key format.
         */
        t.prototype.lu = function(t) {
            var e = this.Bc.exec(t);
            return e ? e[1] : null;
        }, 
        /**
         * Parses a client state in WebStorage. Returns 'null' if the value could not
         * be parsed.
         */
        t.prototype.fu = function(t, e) {
            var n = this.lu(t);
            return oo.Dc(n, e);
        }, 
        /**
         * Parses a mutation batch state in WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.du = function(t, e) {
            var n = this.Uc.exec(t), r = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
            return ro.Dc(new ji(i), r, e);
        }, 
        /**
         * Parses a query target state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.Tu = function(t, e) {
            var n = this.Qc.exec(t), r = Number(n[1]);
            return io.Dc(r, e);
        }, 
        /**
         * Parses an online state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.Kc = function(t) {
            return so.Dc(t);
        }, t.prototype.wu = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    return t.user.uid === this.currentUser.uid ? [ 2 /*return*/ , this.fc.mu(t.batchId, t.state, t.error) ] : (E$1("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), 
                    [ 2 /*return*/ ]);
                }));
            }));
        }, t.prototype.Eu = function(t) {
            return this.fc.Iu(t.targetId, t.state, t.error);
        }, t.prototype._u = function(t, e) {
            var n = this, r = e ? this.Oc.st(t, e) : this.Oc.remove(t), i = this.Hc(this.Oc), o = this.Hc(r), s = [], u = [];
            return o.forEach((function(t) {
                i.has(t) || s.push(t);
            })), i.forEach((function(t) {
                o.has(t) || u.push(t);
            })), this.fc.Au(s, u).then((function() {
                n.Oc = r;
            }));
        }, t.prototype.Gc = function(t) {
            // We check whether the client that wrote this online state is still active
            // by comparing its client ID to the list of clients kept active in
            // IndexedDb. If a client does not update their IndexedDb client state
            // within 5 seconds, it is considered inactive and we don't emit an online
            // state event.
            this.Oc.get(t.clientId) && this.Da(t.onlineState);
        }, t.prototype.Hc = function(t) {
            var e = Nt();
            return t.forEach((function(t, n) {
                e = e.Nt(n.activeTargetIds);
            })), e;
        }, t;
    }(), co = /** @class */ function() {
        function t() {
            this.Ru = new uo, this.Pu = {}, this.Da = null, this.fs = null;
        }
        return t.prototype.Jc = function(t) {
            // No op.
        }, t.prototype.Zc = function(t, e, n) {
            // No op.
        }, t.prototype.eu = function(t) {
            return this.Ru.Nc(t), this.Pu[t] || "not-current";
        }, t.prototype.ou = function(t, e, n) {
            this.Pu[t] = e;
        }, t.prototype.su = function(t) {
            this.Ru.Fc(t);
        }, t.prototype.iu = function(t) {
            return this.Ru.activeTargetIds.has(t);
        }, t.prototype.ru = function(t) {
            delete this.Pu[t];
        }, t.prototype.zc = function() {
            return this.Ru.activeTargetIds;
        }, t.prototype.Yc = function(t) {
            return this.Ru.activeTargetIds.has(t);
        }, t.prototype.start = function() {
            return this.Ru = new uo, Promise.resolve();
        }, t.prototype.au = function(t, e, n) {
            // No op.
        }, t.prototype.cu = function(t) {
            // No op.
        }, t.prototype.th = function() {}, t.prototype.Ts = function(t) {}, t;
    }(), ho = function(t) {
        this.key = t;
    }, fo = function(t) {
        this.key = t;
    }, lo = /** @class */ function() {
        function t(t, 
        /** Documents included in the remote target */
        e) {
            this.query = t, this.gu = e, this.Vu = null, 
            /**
                 * A flag whether the view is current with the backend. A view is considered
                 * current after it has seen the current flag from the backend and did not
                 * lose consistency within the watch stream (e.g. because of an existence
                 * filter mismatch).
                 */
            this.Yt = !1, 
            /** Documents in the view but not in the remote target */
            this.yu = Et(), 
            /** Document Keys that have local changes */
            this.qt = Et(), this.pu = Ln(t), this.bu = new _t(this.pu);
        }
        return Object.defineProperty(t.prototype, "vu", {
            /**
             * The set of remote documents that the server has told us belongs to the target associated with
             * this view.
             */
            get: function() {
                return this.gu;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges The doc changes to apply to this view.
         * @param previousChanges If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @return a new set of docs, changes, and refill flag.
         */
        t.prototype.Su = function(t, e) {
            var n = this, r = e ? e.Du : new At, i = e ? e.bu : this.bu, o = e ? e.qt : this.qt, s = i, u = !1, a = this.query.an() && i.size === this.query.limit ? i.last() : null, c = this.query.cn() && i.size === this.query.limit ? i.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.ht((function(t, e) {
                var h = i.get(t), f = e instanceof dn ? e : null;
                f && (f = xn(n.query, f) ? f : null);
                var l = !!h && n.qt.has(h.key), p = !!f && (f.Ge || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                n.qt.has(f.key) && f.hasCommittedMutations), d = !1;
                // Calculate change
                h && f ? h.data().isEqual(f.data()) ? l !== p && (r.track({
                    type: 3 /* Metadata */ ,
                    doc: f
                }), d = !0) : n.Cu(h, f) || (r.track({
                    type: 2 /* Modified */ ,
                    doc: f
                }), d = !0, (a && n.pu(f, a) > 0 || c && n.pu(f, c) < 0) && (
                // This doc moved from inside the limit to outside the limit.
                // That means there may be some other doc in the local cache
                // that should be included instead.
                u = !0)) : !h && f ? (r.track({
                    type: 0 /* Added */ ,
                    doc: f
                }), d = !0) : h && !f && (r.track({
                    type: 1 /* Removed */ ,
                    doc: h
                }), d = !0, (a || c) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                u = !0)), d && (f ? (s = s.add(f), o = p ? o.add(t) : o.delete(t)) : (s = s.delete(t), 
                o = o.delete(t)));
            })), this.query.an() || this.query.cn()) for (;s.size > this.query.limit; ) {
                var h = this.query.an() ? s.last() : s.first();
                s = s.delete(h.key), o = o.delete(h.key), r.track({
                    type: 1 /* Removed */ ,
                    doc: h
                });
            }
            return {
                bu: s,
                Du: r,
                Nu: u,
                qt: o
            };
        }, t.prototype.Cu = function(t, e) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.Ge && e.hasCommittedMutations && !e.Ge;
        }, 
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges The set of changes to make to the view's docs.
         * @param updateLimboDocuments Whether to update limbo documents based on this
         *        change.
         * @param targetChange A target change to apply for computing limbo docs and
         *        sync state.
         * @return A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        t.prototype.Un = function(t, e, n) {
            var r = this, i = this.bu;
            this.bu = t.bu, this.qt = t.qt;
            // Sort changes based on type and query comparator
            var o = t.Du.Mt();
            o.sort((function(t, e) {
                return function(t, e) {
                    var n = function(t) {
                        switch (t) {
                          case 0 /* Added */ :
                            return 1;

                          case 2 /* Modified */ :
                          case 3 /* Metadata */ :
                            // A metadata change is converted to a modified change at the public
                            // api layer.  Since we sort by document key and then change type,
                            // metadata and modified changes must be sorted equivalently.
                            return 2;

                          case 1 /* Removed */ :
                            return 0;

                          default:
                            return A$2();
                        }
                    };
                    return n(t) - n(e);
                }(t.type, e.type) || r.pu(t.doc, e.doc);
            })), this.Fu(n);
            var s = e ? this.ku() : [], u = 0 === this.yu.size && this.Yt ? 1 /* Synced */ : 0 /* Local */ , a = u !== this.Vu;
            return this.Vu = u, 0 !== o.length || a ? {
                snapshot: new St(this.query, t.bu, i, o, t.qt, 0 /* Local */ === u, a, 
                /* excludesMetadataChanges= */ !1),
                $u: s
            } : {
                $u: s
            };
            // no changes
            }, 
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */
        t.prototype.xu = function(t) {
            return this.Yt && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this.Yt = !1, this.Un({
                bu: this.bu,
                Du: new At,
                qt: this.qt,
                Nu: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                $u: []
            };
        }, 
        /**
         * Returns whether the doc for the given key should be in limbo.
         */
        t.prototype.Ou = function(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.gu.has(t) && 
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this.bu.has(t) && !this.bu.get(t).Ge;
        }, 
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */
        t.prototype.Fu = function(t) {
            var e = this;
            t && (t.Jt.forEach((function(t) {
                return e.gu = e.gu.add(t);
            })), t.Xt.forEach((function(t) {})), t.Zt.forEach((function(t) {
                return e.gu = e.gu.delete(t);
            })), this.Yt = t.Yt);
        }, t.prototype.ku = function() {
            var t = this;
            // We can only determine limbo documents when we're in-sync with the server.
                    if (!this.Yt) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    var e = this.yu;
            this.yu = Et(), this.bu.forEach((function(e) {
                t.Ou(e.key) && (t.yu = t.yu.add(e.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            var n = [];
            return e.forEach((function(e) {
                t.yu.has(e) || n.push(new fo(e));
            })), this.yu.forEach((function(t) {
                e.has(t) || n.push(new ho(t));
            })), n;
        }, 
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @return The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Mu = function(t) {
            this.gu = t.gh, this.yu = Et();
            var e = this.Su(t.documents);
            return this.Un(e, /*updateLimboDocuments=*/ !0);
        }, 
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Lu = function() {
            return St.Qt(this.query, this.bu, this.qt, 0 /* Local */ === this.Vu);
        }, t;
    }(), po = function(
    /**
         * The query itself.
         */
    t, 
    /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
    e, 
    /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
    n) {
        this.query = t, this.targetId = e, this.view = n;
    }, yo = function(t) {
        this.key = t, 
        /**
                 * Set to true once we've received a document. This is used in
                 * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
                 * decide whether it needs to manufacture a delete event for the target once
                 * the target is CURRENT.
                 */
        this.qu = !1;
    }, vo = /** @class */ function() {
        function t(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        r, i, o) {
            this.La = t, this.Bu = e, this.qa = n, this.Uu = r, this.currentUser = i, this.Qu = o, 
            this.Wu = null, this.ju = new M$1((function(t) {
                return Dn(t);
            }), Sn), this.Ku = new Map, 
            /**
                 * The keys of documents that are in limbo for which we haven't yet started a
                 * limbo resolution query.
                 */
            this.Gu = [], 
            /**
                 * Keeps track of the target ID for each document that is in limbo with an
                 * active target.
                 */
            this.zu = new ht(K$1.P), 
            /**
                 * Keeps track of the information about an active limbo resolution for each
                 * active target ID that was started for the purpose of limbo resolution.
                 */
            this.Hu = new Map, this.Yu = new Fi, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.Ju = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.Xu = new Map, this.Zu = gi.eo(), this.onlineState = "Unknown" /* Unknown */ , 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.tl = void 0;
        }
        return Object.defineProperty(t.prototype, "el", {
            get: function() {
                return !0 === this.tl;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.subscribe = function(t) {
            this.Wu = t;
        }, t.prototype.listen = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i, o, s;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.nl("listen()"), (i = this.ju.get(t)) ? (
                        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                        // already exists when EventManager calls us for the first time. This
                        // happens when the primary tab is already listening to this query on
                        // behalf of another tab and the user of the primary also starts listening
                        // to the query. EventManager will not have an assigned target ID in this
                        // case and calls `listen` to obtain this ID.
                        e = i.targetId, this.Uu.eu(e), r = i.view.Lu(), [ 3 /*break*/ , 4 ]) : [ 3 /*break*/ , 1 ];

                      case 1:
                        return [ 4 /*yield*/ , Vi(this.La, Tn(t)) ];

                      case 2:
                        return o = n.sent(), s = this.Uu.eu(o.targetId), e = o.targetId, [ 4 /*yield*/ , this.sl(t, e, "current" === s) ];

                      case 3:
                        r = n.sent(), this.el && this.Bu.listen(o), n.label = 4;

                      case 4:
                        return [ 2 /*return*/ , r ];
                    }
                }));
            }));
        }, 
        /**
         * Registers a view for a previously unknown query and computes its initial
         * snapshot.
         */
        t.prototype.sl = function(t, r, i) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, o, s, u, a, c;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return [ 4 /*yield*/ , Ci(this.La, t, 
                        /* usePreviousResults= */ !0) ];

                      case 1:
                        return e = n.sent(), o = new lo(t, e.gh), s = o.Su(e.documents), u = kt.Ht(r, i && "Offline" /* Offline */ !== this.onlineState), 
                        a = o.Un(s, 
                        /* updateLimboDocuments= */ this.el, u), this.il(r, a.$u), c = new po(t, r, o), 
                        [ 2 /*return*/ , (this.ju.set(t, c), this.Ku.has(r) ? this.Ku.get(r).push(t) : this.Ku.set(r, [ t ]), 
                        a.snapshot) ];
                    }
                }));
            }));
        }, t.prototype.lc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        // Only clean up the query view and target if this is the only query mapped
                        // to the target.
                        return this.nl("unlisten()"), e = this.ju.get(t), (r = this.Ku.get(e.targetId)).length > 1 ? [ 2 /*return*/ , (this.Ku.set(e.targetId, r.filter((function(e) {
                            return !Sn(e, t);
                        }))), void this.ju.delete(t)) ] : this.el ? (
                        // We need to remove the local query target first to allow us to verify
                        // whether any other client is still interested in this target.
                        this.Uu.su(e.targetId), this.Uu.Yc(e.targetId) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , Ui(this.La, e.targetId, 
                        /*keepPersistedTargetData=*/ !1).then((function() {
                            i.Uu.ru(e.targetId), i.Bu.lc(e.targetId), i.rl(e.targetId);
                        })).catch(Mi) ]) : [ 3 /*break*/ , 3 ];

                      case 1:
                        n.sent(), n.label = 2;

                      case 2:
                        return [ 3 /*break*/ , 5 ];

                      case 3:
                        return this.rl(e.targetId), [ 4 /*yield*/ , Ui(this.La, e.targetId, 
                        /*keepPersistedTargetData=*/ !0) ];

                      case 4:
                        n.sent(), n.label = 5;

                      case 5:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.write = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, i, o;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        this.nl("write()"), n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 5, , 6 ]), [ 4 /*yield*/ , 
                        /* Accepts locally generated Mutations and commit them to storage. */
                        function(t, e) {
                            var n, r = D$2(t), i = j.now(), o = e.reduce((function(t, e) {
                                return t.add(e.key);
                            }), Et());
                            return r.persistence.runTransaction("Locally write mutations", "readwrite", (function(t) {
                                return r.Rh.Zn(t, o).next((function(o) {
                                    n = o;
                                    for (
                                    // For non-idempotent mutations (such as `FieldValue.increment()`),
                                    // we record the base state in a separate patch mutation. This is
                                    // later used to guarantee consistent values and prevents flicker
                                    // even if the backend sends us an update that already includes our
                                    // transform.
                                    var s = [], u = 0, a = e; u < a.length; u++) {
                                        var c = a[u], h = $e(c, n.get(c.key));
                                        null != h && 
                                        // NOTE: The base state should only be applied if there's some
                                        // existing document to override, so use a Precondition of
                                        // exists=true
                                        s.push(new nn(c.key, h, ln(h.proto.mapValue), He.exists(!0)));
                                    }
                                    return r.Gn.Ir(t, i, s, e);
                                }));
                            })).then((function(t) {
                                var e = t.An(n);
                                return {
                                    batchId: t.batchId,
                                    Fn: e
                                };
                            }));
                        }(this.La, t) ];

                      case 2:
                        return e = n.sent(), this.Uu.Jc(e.batchId), this.ol(e.batchId, r), [ 4 /*yield*/ , this.hl(e.Fn) ];

                      case 3:
                        return n.sent(), [ 4 /*yield*/ , this.Bu.hc() ];

                      case 4:
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 5:
                        return i = n.sent(), o = mr(i, "Failed to persist write"), r.reject(o), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.mc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        this.nl("applyRemoteEvent()"), n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , Ri(this.La, t) ];

                      case 2:
                        return e = n.sent(), 
                        // Update `receivedDocument` as appropriate for any limbo targets.
                        t.Wt.forEach((function(t, e) {
                            var n = r.Hu.get(e);
                            n && (
                            // Since this is a limbo resolution lookup, it's for a single document
                            // and it could be added, modified, or removed, but not a combination.
                            S$2(t.Jt.size + t.Xt.size + t.Zt.size <= 1), t.Jt.size > 0 ? n.qu = !0 : t.Xt.size > 0 ? S$2(n.qu) : t.Zt.size > 0 && (S$2(n.qu), 
                            n.qu = !1));
                        })), [ 4 /*yield*/ , this.hl(e, t) ];

                      case 3:
                        // Update `receivedDocument` as appropriate for any limbo targets.
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 4:
                        return [ 4 /*yield*/ , Mi(n.sent()) ];

                      case 5:
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.xu = function(t, e) {
            // If we are the secondary client, we explicitly ignore the remote store's
            // online state (the local client may go offline, even though the primary
            // tab remains online) and only apply the primary tab's online state from
            // SharedClientState.
            if (this.el && 0 /* RemoteStore */ === e || !this.el && 1 /* SharedClientState */ === e) {
                this.nl("applyOnlineStateChange()");
                var n = [];
                this.ju.forEach((function(e, r) {
                    var i = r.view.xu(t);
                    i.snapshot && n.push(i.snapshot);
                })), this.Wu.al(t), this.Wu.Ea(n), this.onlineState = t, this.el && this.Uu.cu(t);
            }
        }, t.prototype.Ic = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, i, o, s, u, a = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.nl("rejectListens()"), 
                        // PORTING NOTE: Multi-tab only.
                        this.Uu.ou(t, "rejected", r), e = this.Hu.get(t), (i = e && e.key) ? (o = (o = new ht(K$1.P)).st(i, new yn(i, B.min())), 
                        s = Et().add(i), u = new Dt(B.min(), 
                        /* targetChanges= */ new Map, 
                        /* targetMismatches= */ new pt(L$1), o, s), [ 4 /*yield*/ , this.mc(u) ]) : [ 3 /*break*/ , 2 ];

                      case 1:
                        return n.sent(), 
                        // Since this query failed, we won't want to manually unlisten to it.
                        // We only remove it from bookkeeping after we successfully applied the
                        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
                        // this query when the RemoteStore restarts the Watch stream, which should
                        // re-trigger the target failure.
                        this.zu = this.zu.remove(i), this.Hu.delete(t), this.cl(), [ 3 /*break*/ , 4 ];

                      case 2:
                        return [ 4 /*yield*/ , Ui(this.La, t, 
                        /* keepPersistedTargetData */ !1).then((function() {
                            return a.rl(t, r);
                        })).catch(Mi) ];

                      case 3:
                        n.sent(), n.label = 4;

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.yc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        this.nl("applySuccessfulWrite()"), e = t.batch.batchId, n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , Li(this.La, t) ];

                      case 2:
                        return r = n.sent(), 
                        // The local store may or may not be able to apply the write result and
                        // raise events immediately (depending on whether the watcher is caught
                        // up), so we raise user callbacks first so that they consistently happen
                        // before listen events.
                        this.ul(e, /*error=*/ null), this.ll(e), this.Uu.Zc(e, "acknowledged"), [ 4 /*yield*/ , this.hl(r) ];

                      case 3:
                        // The local store may or may not be able to apply the write result and
                        // raise events immediately (depending on whether the watcher is caught
                        // up), so we raise user callbacks first so that they consistently happen
                        // before listen events.
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 4:
                        return [ 4 /*yield*/ , Mi(n.sent()) ];

                      case 5:
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.bc = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        this.nl("rejectFailedWrite()"), n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                            var n = D$2(t);
                            return n.persistence.runTransaction("Reject batch", "readwrite-primary", (function(t) {
                                var r;
                                return n.Gn.Rr(t, e).next((function(e) {
                                    return S$2(null !== e), r = e.keys(), n.Gn.br(t, e);
                                })).next((function() {
                                    return n.Gn.Cr(t);
                                })).next((function() {
                                    return n.Rh.Zn(t, r);
                                }));
                            }));
                        }(this.La, t) ];

                      case 2:
                        return e = n.sent(), 
                        // The local store may or may not be able to apply the write result and
                        // raise events immediately (depending on whether the watcher is caught up),
                        // so we raise user callbacks first so that they consistently happen before
                        // listen events.
                        this.ul(t, r), this.ll(t), this.Uu.Zc(t, "rejected", r), [ 4 /*yield*/ , this.hl(e) ];

                      case 3:
                        // The local store may or may not be able to apply the write result and
                        // raise events immediately (depending on whether the watcher is caught up),
                        // so we raise user callbacks first so that they consistently happen before
                        // listen events.
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 4:
                        return [ 4 /*yield*/ , Mi(n.sent()) ];

                      case 5:
                        return n.sent(), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype._l = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i, o;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        this.Bu.Ga() || E$1("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), 
                        n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , function(t) {
                            var e = D$2(t);
                            return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (function(t) {
                                return e.Gn.Vr(t);
                            }));
                        }(this.La) ];

                      case 2:
                        return -1 === (e = n.sent()) ? [ 2 /*return*/ , void t.resolve() ] : ((r = this.Xu.get(e) || []).push(t), 
                        this.Xu.set(e, r), [ 3 /*break*/ , 4 ]);

                      case 3:
                        return i = n.sent(), o = mr(i, "Initialization of waitForPendingWrites() operation failed"), 
                        t.reject(o), [ 3 /*break*/ , 4 ];

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
         * if there are any.
         */
        t.prototype.ll = function(t) {
            (this.Xu.get(t) || []).forEach((function(t) {
                t.resolve();
            })), this.Xu.delete(t);
        }, 
        /** Reject all outstanding callbacks waiting for pending writes to complete. */ t.prototype.fl = function(t) {
            this.Xu.forEach((function(e) {
                e.forEach((function(e) {
                    e.reject(new G$1(F$1.CANCELLED, t));
                }));
            })), this.Xu.clear();
        }, t.prototype.ol = function(t, e) {
            var n = this.Ju[this.currentUser.$h()];
            n || (n = new ht(L$1)), n = n.st(t, e), this.Ju[this.currentUser.$h()] = n;
        }, 
        /**
         * Resolves or rejects the user callback for the given batch and then discards
         * it.
         */
        t.prototype.ul = function(t, e) {
            var n = this.Ju[this.currentUser.$h()];
            // NOTE: Mutations restored from persistence won't have callbacks, so it's
            // okay for there to be no callback for this ID.
                    if (n) {
                var r = n.get(t);
                r && (e ? r.reject(e) : r.resolve(), n = n.remove(t)), this.Ju[this.currentUser.$h()] = n;
            }
        }, t.prototype.rl = function(t, e) {
            var n = this;
            void 0 === e && (e = null), this.Uu.su(t);
            for (var r = 0, i = this.Ku.get(t); r < i.length; r++) {
                var o = i[r];
                this.ju.delete(o), e && this.Wu.dl(o, e);
            }
            this.Ku.delete(t), this.el && this.Yu.Ch(t).forEach((function(t) {
                n.Yu.Nr(t) || 
                // We removed the last reference for this key
                n.wl(t);
            }));
        }, t.prototype.wl = function(t) {
            // It's possible that the target already got removed because the query failed. In that case,
            // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
            var e = this.zu.get(t);
            null !== e && (this.Bu.lc(e), this.zu = this.zu.remove(t), this.Hu.delete(e), this.cl());
        }, t.prototype.il = function(t, e) {
            for (var n = 0, r = e; n < r.length; n++) {
                var i = r[n];
                i instanceof ho ? (this.Yu.Eo(i.key, t), this.Tl(i)) : i instanceof fo ? (E$1("SyncEngine", "Document no longer in limbo: " + i.key), 
                this.Yu.Io(i.key, t), this.Yu.Nr(i.key) || 
                // We removed the last reference for this key
                this.wl(i.key)) : A$2();
            }
        }, t.prototype.Tl = function(t) {
            var e = t.key;
            this.zu.get(e) || (E$1("SyncEngine", "New document in limbo: " + e), this.Gu.push(e), 
            this.cl());
        }, 
        /**
         * Starts listens for documents in limbo that are enqueued for resolution,
         * subject to a maximum number of concurrent resolutions.
         *
         * Without bounding the number of concurrent resolutions, the server can fail
         * with "resource exhausted" errors which can lead to pathological client
         * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
         */
        t.prototype.cl = function() {
            for (;this.Gu.length > 0 && this.zu.size < this.Qu; ) {
                var t = this.Gu.shift(), e = this.Zu.next();
                this.Hu.set(e, new yo(t)), this.zu = this.zu.st(t, e), this.Bu.listen(new st(Tn(bn(t.path)), e, 2 /* LimboResolution */ , nr.Es));
            }
        }, 
        // Visible for testing
        t.prototype.El = function() {
            return this.zu;
        }, 
        // Visible for testing
        t.prototype.ml = function() {
            return this.Gu;
        }, t.prototype.hl = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var i, o, s, u = this;
                return __generator(this, (function(a) {
                    switch (a.label) {
                      case 0:
                        return i = [], o = [], s = [], this.ju.forEach((function(e, n) {
                            s.push(Promise.resolve().then((function() {
                                var e = n.view.Su(t);
                                return e.Nu ? Ci(u.La, n.query, 
                                /* usePreviousResults= */ !1).then((function(t) {
                                    var r = t.documents;
                                    return n.view.Su(r, e);
                                })) : e;
                                // The query has a limit and some docs were removed, so we need
                                // to re-run the query against the local store to make sure we
                                // didn't lose any good docs that had been past the limit.
                                                    })).then((function(t) {
                                var e = r && r.Wt.get(n.targetId), s = n.view.Un(t, 
                                /* updateLimboDocuments= */ u.el, e);
                                if (u.il(n.targetId, s.$u), s.snapshot) {
                                    u.el && u.Uu.ou(n.targetId, s.snapshot.fromCache ? "not-current" : "current"), i.push(s.snapshot);
                                    var a = er._s(n.targetId, s.snapshot);
                                    o.push(a);
                                }
                            })));
                        })), [ 4 /*yield*/ , Promise.all(s) ];

                      case 1:
                        return a.sent(), this.Wu.Ea(i), [ 4 /*yield*/ , function(t, r) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var e, i, o, s, u, a, c, h, f;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        e = D$2(t), n.label = 1;

                                      case 1:
                                        return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , e.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (function(t) {
                                            return Zn.forEach(r, (function(n) {
                                                return Zn.forEach(n.us, (function(r) {
                                                    return e.persistence.dr.Eo(t, n.targetId, r);
                                                })).next((function() {
                                                    return Zn.forEach(n.ls, (function(r) {
                                                        return e.persistence.dr.Io(t, n.targetId, r);
                                                    }));
                                                }));
                                            }));
                                        })) ];

                                      case 2:
                                        return n.sent(), [ 3 /*break*/ , 4 ];

                                      case 3:
                                        if (!ar(i = n.sent())) throw i;
                                        // If `notifyLocalViewChanges` fails, we did not advance the sequence
                                        // number for the documents that were included in this transaction.
                                        // This might trigger them to be deleted earlier than they otherwise
                                        // would have, but it should not invalidate the integrity of the data.
                                                                            return E$1("LocalStore", "Failed to update sequence numbers: " + i), 
                                        [ 3 /*break*/ , 4 ];

                                      case 4:
                                        for (o = 0, s = r; o < s.length; o++) u = s[o], a = u.targetId, u.fromCache || (c = e.Eh.get(a), 
                                        h = c.Z, f = c.nt(h), 
                                        // Advance the last limbo free snapshot version
                                        e.Eh = e.Eh.st(a, f));
                                        return [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        }(this.La, o) ];

                      case 2:
                        return a.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.nl = function(t) {}, t.prototype.vc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var r;
                return __generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        return this.currentUser.isEqual(t) ? [ 3 /*break*/ , 3 ] : (E$1("SyncEngine", "User change. New user:", t.$h()), 
                        [ 4 /*yield*/ , 
                        /**
                     * Tells the LocalStore that the currently authenticated user has changed.
                     *
                     * In response the local store switches the mutation queue to the new user and
                     * returns any resulting document changes.
                     */
                        // PORTING NOTE: Android and iOS only return the documents affected by the
                        // change.
                        function(t, r) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var e, i, o, s;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return e = D$2(t), i = e.Gn, o = e.Rh, [ 4 /*yield*/ , e.persistence.runTransaction("Handle user change", "readonly", (function(t) {
                                            // Swap out the mutation queue, grabbing the pending mutation batches
                                            // before and after.
                                            var n;
                                            return e.Gn.yr(t).next((function(s) {
                                                return n = s, i = e.persistence.oh(r), 
                                                // Recreate our LocalDocumentsView using the new
                                                // MutationQueue.
                                                o = new tr(e.Ah, i, e.persistence.uh()), i.yr(t);
                                            })).next((function(e) {
                                                for (var r = [], i = [], s = Et(), u = 0, a = n
                                                // Union the old/new changed keys.
                                                ; u < a.length; u++) {
                                                    var c = a[u];
                                                    r.push(c.batchId);
                                                    for (var h = 0, f = c.mutations; h < f.length; h++) {
                                                        var l = f[h];
                                                        s = s.add(l.key);
                                                    }
                                                }
                                                for (var p = 0, d = e; p < d.length; p++) {
                                                    var y = d[p];
                                                    i.push(y.batchId);
                                                    for (var v = 0, g = y.mutations; v < g.length; v++) {
                                                        var m = g[v];
                                                        s = s.add(m.key);
                                                    }
                                                }
                                                // Return the set of all (potentially) changed documents and the list
                                                // of mutation batch IDs that were affected by change.
                                                                                            return o.Zn(t, s).next((function(t) {
                                                    return {
                                                        Il: t,
                                                        Al: r,
                                                        Rl: i
                                                    };
                                                }));
                                            }));
                                        })) ];

                                      case 1:
                                        return s = n.sent(), [ 2 /*return*/ , (e.Gn = i, e.Rh = o, e.Th.Ph(e.Rh), s) ];
                                    }
                                }));
                            }));
                        }(this.La, t) ]);

                      case 1:
                        return r = i.sent(), this.currentUser = t, 
                        // Fails tasks waiting for pending writes requested by previous user.
                        this.fl("'waitForPendingWrites' promise is rejected due to a user change."), 
                        // TODO(b/114226417): Consider calling this only in the primary tab.
                        this.Uu.au(t, r.Al, r.Rl), [ 4 /*yield*/ , this.hl(r.Il) ];

                      case 2:
                        i.sent(), i.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Oe = function(t) {
            var e = this.Hu.get(t);
            if (e && e.qu) return Et().add(e.key);
            var n = Et(), r = this.Ku.get(t);
            if (!r) return n;
            for (var i = 0, o = r; i < o.length; i++) {
                var s = o[i], u = this.ju.get(s);
                n = n.Nt(u.view.vu);
            }
            return n;
        }, t;
    }();

    /**
     * Holds the state of a query target, including its target ID and whether the
     * target is 'not-current', 'current' or 'rejected'.
     */
    // Visible for testing
    /**
     * Reconcile the list of synced documents in an existing view with those
     * from persistence.
     */
    function go(t, r) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, i, o;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return [ 4 /*yield*/ , Ci((e = D$2(t)).La, r.query, 
                    /* usePreviousResults= */ !0) ];

                  case 1:
                    return i = n.sent(), o = r.view.Mu(i), [ 2 /*return*/ , (e.el && e.il(r.targetId, o.$u), 
                    o) ];
                }
            }));
        }));
    }

    /** Applies a mutation state to an existing batch.  */
    // PORTING NOTE: Multi-Tab only.
    function mo(t, r, i, o) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, s;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return (e = D$2(t)).nl("applyBatchState()"), [ 4 /*yield*/ , function(t, e) {
                        var n = D$2(t), r = D$2(n.Gn);
                        return n.persistence.runTransaction("Lookup mutation documents", "readonly", (function(t) {
                            return r.Pr(t, e).next((function(e) {
                                return e ? n.Rh.Zn(t, e) : Zn.resolve(null);
                            }));
                        }));
                    }(e.La, r) ];

                  case 1:
                    return null === (s = n.sent()) ? [ 3 /*break*/ , 6 ] : "pending" !== i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , e.Bu.hc() ];

                  case 2:
                    // If we are the primary client, we need to send this write to the
                    // backend. Secondary clients will ignore these writes since their remote
                    // connection is disabled.
                    return n.sent(), [ 3 /*break*/ , 4 ];

                  case 3:
                    "acknowledged" === i || "rejected" === i ? (
                    // NOTE: Both these methods are no-ops for batches that originated from
                    // other clients.
                    e.ul(r, o || null), function(t, e) {
                        D$2(D$2(t).Gn).Sr(e);
                    }(e.La, r)) : A$2(), n.label = 4;

                  case 4:
                    return [ 4 /*yield*/ , e.hl(s) ];

                  case 5:
                    return n.sent(), [ 3 /*break*/ , 7 ];

                  case 6:
                    // A throttled tab may not have seen the mutation before it was completed
                    // and removed from the mutation queue, in which case we won't have cached
                    // the affected documents. In this case we can safely ignore the update
                    // since that means we didn't apply the mutation locally at all (if we
                    // had, we would have cached the affected documents), and so we will just
                    // see any resulting document changes via normal remote document updates
                    // as applicable.
                    E$1("SyncEngine", "Cannot apply mutation batch with id: " + r), n.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    function wo(t, r) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, i, o, s, u, a, c, h;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return e = D$2(t), !0 !== r || !0 === e.tl ? [ 3 /*break*/ , 3 ] : (i = e.Uu.zc(), 
                    [ 4 /*yield*/ , bo(e, i.N()) ]);

                  case 1:
                    return o = n.sent(), e.tl = !0, [ 4 /*yield*/ , e.Bu.Sc(!0) ];

                  case 2:
                    for (n.sent(), s = 0, u = o; s < u.length; s++) a = u[s], e.Bu.listen(a);
                    return [ 3 /*break*/ , 7 ];

                  case 3:
                    return !1 !== r || !1 === e.tl ? [ 3 /*break*/ , 7 ] : (c = [], h = Promise.resolve(), 
                    e.Ku.forEach((function(t, n) {
                        e.Uu.iu(n) ? c.push(n) : h = h.then((function() {
                            return e.rl(n), Ui(e.La, n, 
                            /*keepPersistedTargetData=*/ !0);
                        })), e.Bu.lc(n);
                    })), [ 4 /*yield*/ , h ]);

                  case 4:
                    return n.sent(), [ 4 /*yield*/ , bo(e, c) ];

                  case 5:
                    return n.sent(), 
                    // PORTING NOTE: Multi-Tab only.
                    function(t) {
                        var e = D$2(t);
                        e.Hu.forEach((function(t, n) {
                            e.Bu.lc(n);
                        })), e.Yu.Nh(), e.Hu = new Map, e.zu = new ht(K$1.P);
                    }(e), e.tl = !1, [ 4 /*yield*/ , e.Bu.Sc(!1) ];

                  case 6:
                    n.sent(), n.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    function bo(t, r, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, i, o, s, u, a, c, h, f, l, p, d, y, v;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    e = D$2(t), i = [], o = [], s = 0, u = r, n.label = 1;

                  case 1:
                    return s < u.length ? (a = u[s], c = void 0, (h = e.Ku.get(a)) && 0 !== h.length ? [ 4 /*yield*/ , Vi(e.La, Tn(h[0])) ] : [ 3 /*break*/ , 7 ]) : [ 3 /*break*/ , 13 ];

                  case 2:
                    // For queries that have a local View, we fetch their current state
                    // from LocalStore (as the resume token and the snapshot version
                    // might have changed) and reconcile their views with the persisted
                    // state (the list of syncedDocuments may have gotten out of sync).
                    c = n.sent(), f = 0, l = h, n.label = 3;

                  case 3:
                    return f < l.length ? (p = l[f], d = e.ju.get(p), [ 4 /*yield*/ , go(e, d) ]) : [ 3 /*break*/ , 6 ];

                  case 4:
                    (y = n.sent()).snapshot && o.push(y.snapshot), n.label = 5;

                  case 5:
                    return f++, [ 3 /*break*/ , 3 ];

                  case 6:
                    return [ 3 /*break*/ , 11 ];

                  case 7:
                    return [ 4 /*yield*/ , qi(e.La, a) ];

                  case 8:
                    return v = n.sent(), [ 4 /*yield*/ , Vi(e.La, v) ];

                  case 9:
                    return c = n.sent(), [ 4 /*yield*/ , e.sl(Io(v), a, 
                    /*current=*/ !1) ];

                  case 10:
                    n.sent(), n.label = 11;

                  case 11:
                    i.push(c), n.label = 12;

                  case 12:
                    return s++, [ 3 /*break*/ , 1 ];

                  case 13:
                    return [ 2 /*return*/ , (e.Wu.Ea(o), i) ];
                }
            }));
        }));
    }

    /**
     * Creates a `Query` object from the specified `Target`. There is no way to
     * obtain the original `Query`, so we synthesize a `Query` from the `Target`
     * object.
     *
     * The synthesized result might be different from the original `Query`, but
     * since the synthesized `Query` should return the same results as the
     * original one (only the presentation of results might differ), the potential
     * difference will not cause issues.
     */
    // PORTING NOTE: Multi-Tab only.
    function Io(t) {
        return wn(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
    }

    /** Returns the IDs of the clients that are currently active. */
    // PORTING NOTE: Multi-Tab only.
    function Eo(t) {
        var e = D$2(t);
        return D$2(D$2(e.La).persistence).rh();
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    function To(t, r, i, o) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, s, u;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return (e = D$2(t)).tl ? (
                    // If we receive a target state notification via WebStorage, we are
                    // either already secondary or another tab has taken the primary lease.
                    E$1("SyncEngine", "Ignoring unexpected query state notification."), [ 3 /*break*/ , 8 ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    if (!e.Ku.has(r)) return [ 3 /*break*/ , 8 ];
                    switch (i) {
                      case "current":
                      case "not-current":
                        return [ 3 /*break*/ , 2 ];

                      case "rejected":
                        return [ 3 /*break*/ , 5 ];
                    }
                    return [ 3 /*break*/ , 7 ];

                  case 2:
                    return [ 4 /*yield*/ , function(t) {
                        var e = D$2(t), n = D$2(e.Ah);
                        return e.persistence.runTransaction("Get new document changes", "readonly", (function(t) {
                            return n.Ur(t, e.Ih);
                        })).then((function(t) {
                            var n = t.Qr, r = t.readTime;
                            return e.Ih = r, n;
                        }));
                    }(e.La) ];

                  case 3:
                    return s = n.sent(), u = Dt.zt(r, "current" === i), [ 4 /*yield*/ , e.hl(s, u) ];

                  case 4:
                    return n.sent(), [ 3 /*break*/ , 8 ];

                  case 5:
                    return [ 4 /*yield*/ , Ui(e.La, r, 
                    /* keepPersistedTargetData */ !0) ];

                  case 6:
                    return n.sent(), e.rl(r, o), [ 3 /*break*/ , 8 ];

                  case 7:
                    A$2(), n.label = 8;

                  case 8:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /** Adds or removes Watch targets for queries from different tabs. */ function No(t, r, i) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, o, s, u, a, c, h, f, l, p;
            return __generator(this, (function(d) {
                switch (d.label) {
                  case 0:
                    if (!(e = D$2(t)).tl) return [ 3 /*break*/ , 10 ];
                    o = 0, s = r, d.label = 1;

                  case 1:
                    return o < s.length ? (u = s[o], e.Ku.has(u) ? (
                    // A target might have been added in a previous attempt
                    E$1("SyncEngine", "Adding an already active target " + u), [ 3 /*break*/ , 5 ]) : [ 4 /*yield*/ , qi(e.La, u) ]) : [ 3 /*break*/ , 6 ];

                  case 2:
                    return a = d.sent(), [ 4 /*yield*/ , Vi(e.La, a) ];

                  case 3:
                    return c = d.sent(), [ 4 /*yield*/ , e.sl(Io(a), c.targetId, 
                    /*current=*/ !1) ];

                  case 4:
                    d.sent(), e.Bu.listen(c), d.label = 5;

                  case 5:
                    return o++, [ 3 /*break*/ , 1 ];

                  case 6:
                    h = function(t) {
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return e.Ku.has(t) ? [ 4 /*yield*/ , Ui(e.La, t, 
                                /* keepPersistedTargetData */ !1).then((function() {
                                    e.Bu.lc(t), e.rl(t);
                                })).catch(Mi) ] : [ 3 /*break*/ , 2 ];

                                // Release queries that are still active.
                                                          case 1:
                                // Release queries that are still active.
                                n.sent(), n.label = 2;

                              case 2:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }, f = 0, l = i, d.label = 7;

                  case 7:
                    return f < l.length ? (p = l[f], [ 5 /*yield**/ , h(p) ]) : [ 3 /*break*/ , 10 ];

                  case 8:
                    d.sent(), d.label = 9;

                  case 9:
                    return f++, [ 3 /*break*/ , 7 ];

                  case 10:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Holds the listeners and the last received ViewSnapshot for a query being
     * tracked by EventManager.
     */ var _o = function() {
        this.Pl = void 0, this.listeners = [];
    }, Ao = /** @class */ function() {
        function t(t) {
            this.fc = t, this.gl = new M$1((function(t) {
                return Dn(t);
            }), Sn), this.onlineState = "Unknown" /* Unknown */ , this.Vl = new Set, this.fc.subscribe(this);
        }
        return t.prototype.listen = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i, o, s, u;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        if (e = t.query, r = !1, (i = this.gl.get(e)) || (r = !0, i = new _o), !r) return [ 3 /*break*/ , 4 ];
                        n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 3, , 4 ]), o = i, [ 4 /*yield*/ , this.fc.listen(e) ];

                      case 2:
                        return o.Pl = n.sent(), [ 3 /*break*/ , 4 ];

                      case 3:
                        return s = n.sent(), u = mr(s, "Initialization of query '" + kn(t.query) + "' failed"), 
                        [ 2 /*return*/ , void t.onError(u) ];

                      case 4:
                        return this.gl.set(e, i), i.listeners.push(t), 
                        // Run global snapshot listeners if a consistent snapshot has been emitted.
                        t.xu(this.onlineState), i.Pl && t.yl(i.Pl) && this.pl(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.lc = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e, r, i, o;
                return __generator(this, (function(n) {
                    return e = t.query, r = !1, (i = this.gl.get(e)) && (o = i.listeners.indexOf(t)) >= 0 && (i.listeners.splice(o, 1), 
                    r = 0 === i.listeners.length), r ? [ 2 /*return*/ , (this.gl.delete(e), this.fc.lc(e)) ] : [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.Ea = function(t) {
            for (var e = !1, n = 0, r = t; n < r.length; n++) {
                var i = r[n], o = i.query, s = this.gl.get(o);
                if (s) {
                    for (var u = 0, a = s.listeners; u < a.length; u++) {
                        a[u].yl(i) && (e = !0);
                    }
                    s.Pl = i;
                }
            }
            e && this.pl();
        }, t.prototype.dl = function(t, e) {
            var n = this.gl.get(t);
            if (n) for (var r = 0, i = n.listeners; r < i.length; r++) {
                i[r].onError(e);
            }
            // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
            // after an error.
                    this.gl.delete(t);
        }, t.prototype.al = function(t) {
            this.onlineState = t;
            var e = !1;
            this.gl.forEach((function(n, r) {
                for (var i = 0, o = r.listeners; i < o.length; i++) {
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    o[i].xu(t) && (e = !0);
                }
            })), e && this.pl();
        }, t.prototype.bl = function(t) {
            this.Vl.add(t), 
            // Immediately fire an initial event, indicating all existing listeners
            // are in-sync.
            t.next();
        }, t.prototype.vl = function(t) {
            this.Vl.delete(t);
        }, 
        // Call all global snapshot listeners that have been set.
        t.prototype.pl = function() {
            this.Vl.forEach((function(t) {
                t.next();
            }));
        }, t;
    }(), So = /** @class */ function() {
        function t(t, e, n) {
            this.query = t, this.Sl = e, 
            /**
                 * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
                 * observer. This flag is set to true once we've actually raised an event.
                 */
            this.Dl = !1, this.Cl = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {}
            /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */;
        }
        return t.prototype.yl = function(t) {
            if (!this.options.includeMetadataChanges) {
                for (
                // Remove the metadata only changes.
                var e = [], n = 0, r = t.docChanges; n < r.length; n++) {
                    var i = r[n];
                    3 /* Metadata */ !== i.type && e.push(i);
                }
                t = new St(t.query, t.docs, t.Lt, e, t.qt, t.fromCache, t.Bt, 
                /* excludesMetadataChanges= */ !0);
            }
            var o = !1;
            return this.Dl ? this.Nl(t) && (this.Sl.next(t), o = !0) : this.Fl(t, this.onlineState) && (this.kl(t), 
            o = !0), this.Cl = t, o;
        }, t.prototype.onError = function(t) {
            this.Sl.error(t);
        }, 
        /** Returns whether a snapshot was raised. */ t.prototype.xu = function(t) {
            this.onlineState = t;
            var e = !1;
            return this.Cl && !this.Dl && this.Fl(this.Cl, t) && (this.kl(this.Cl), e = !0), 
            e;
        }, t.prototype.Fl = function(t, e) {
            // Always raise the first event when we're synced
            if (!t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    var n = "Offline" /* Offline */ !== e;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return !(this.options.$l && n || t.docs._() && "Offline" /* Offline */ !== e);
            // Raise data from cache if we have any documents or we are offline
            }, t.prototype.Nl = function(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            var e = this.Cl && this.Cl.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.Bt && !e) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }, t.prototype.kl = function(t) {
            t = St.Qt(t.query, t.docs, t.qt, t.fromCache), this.Dl = !0, this.Sl.next(t);
        }, t;
    }(), Do = /** @class */ function() {
        function t() {}
        return t.prototype.Ph = function(t) {
            this.xl = t;
        }, t.prototype.ns = function(t, e, n, r) {
            var i = this;
            // Queries that match all documents don't benefit from using
            // IndexFreeQueries. It is more efficient to scan all documents in a
            // collection, rather than to perform individual lookups.
                    return e.hn() || n.isEqual(B.min()) ? this.Ol(t, e) : this.xl.Zn(t, r).next((function(o) {
                var u = i.Ml(e, o);
                return (e.an() || e.cn()) && i.Nu(e.nn, u, r, n) ? i.Ol(t, e) : (I$1() <= LogLevel.DEBUG && E$1("IndexFreeQueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), kn(e)), 
                i.xl.ns(t, e, n).next((function(t) {
                    // We merge `previousResults` into `updateResults`, since
                    // `updateResults` is already a DocumentMap. If a document is
                    // contained in both lists, then its contents are the same.
                    return u.forEach((function(e) {
                        t = t.st(e.key, e);
                    })), t;
                })));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }, 
        /** Applies the query filter and sorting to the provided documents.  */ t.prototype.Ml = function(t, e) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            var n = new pt(Ln(t));
            return e.forEach((function(e, r) {
                r instanceof dn && xn(t, r) && (n = n.add(r));
            })), n;
        }, 
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param sortedPreviousResults The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion The version of the snapshot when the query
         * was last synchronized.
         */
        t.prototype.Nu = function(t, e, n, r) {
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            if (n.size !== e.size) return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    var i = "F" /* First */ === t ? e.last() : e.first();
            return !!i && (i.hasPendingWrites || i.version.o(r) > 0);
        }, t.prototype.Ol = function(t, e) {
            return I$1() <= LogLevel.DEBUG && E$1("IndexFreeQueryEngine", "Using full collection scan to execute query:", kn(e)), 
            this.xl.ns(t, e, B.min());
        }, t;
    }(), ko = /** @class */ function() {
        function t(t, e) {
            this.zn = t, this.dr = e, 
            /**
                 * The set of all mutations that have been sent but not yet been applied to
                 * the backend.
                 */
            this.Gn = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.Ll = 1, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.ql = new pt(Gi.yh);
        }
        return t.prototype.mr = function(t) {
            return Zn.resolve(0 === this.Gn.length);
        }, t.prototype.Ir = function(t, e, n, r) {
            var i = this.Ll;
            this.Ll++, this.Gn.length > 0 && this.Gn[this.Gn.length - 1];
            var o = new Kn(i, e, n, r);
            this.Gn.push(o);
            // Track references by document key and index collection parents.
            for (var s = 0, u = r; s < u.length; s++) {
                var a = u[s];
                this.ql = this.ql.add(new Gi(a.key, i)), this.zn.Ar(t, a.key.path.p());
            }
            return Zn.resolve(o);
        }, t.prototype.Rr = function(t, e) {
            return Zn.resolve(this.Bl(e));
        }, t.prototype.gr = function(t, e) {
            var n = e + 1, r = this.Ul(n), i = r < 0 ? 0 : r;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return Zn.resolve(this.Gn.length > i ? this.Gn[i] : null);
        }, t.prototype.Vr = function() {
            return Zn.resolve(0 === this.Gn.length ? -1 : this.Ll - 1);
        }, t.prototype.yr = function(t) {
            return Zn.resolve(this.Gn.slice());
        }, t.prototype.Yn = function(t, e) {
            var n = this, r = new Gi(e, 0), i = new Gi(e, Number.POSITIVE_INFINITY), o = [];
            return this.ql.St([ r, i ], (function(t) {
                var e = n.Bl(t.kh);
                o.push(e);
            })), Zn.resolve(o);
        }, t.prototype.es = function(t, e) {
            var n = this, r = new pt(L$1);
            return e.forEach((function(t) {
                var e = new Gi(t, 0), i = new Gi(t, Number.POSITIVE_INFINITY);
                n.ql.St([ e, i ], (function(t) {
                    r = r.add(t.kh);
                }));
            })), Zn.resolve(this.Ql(r));
        }, t.prototype.as = function(t, e) {
            // Use the query path as a prefix for testing if a document matches the
            // query.
            var n = e.path, r = n.length + 1, i = n;
            // Construct a document reference for actually scanning the index. Unlike
            // the prefix the document key in this reference must have an even number of
            // segments. The empty segment can be used a suffix of the query path
            // because it precedes all other segments in an ordered traversal.
                    K$1.j(i) || (i = i.child(""));
            var o = new Gi(new K$1(i), 0), s = new pt(L$1);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    return this.ql.Dt((function(t) {
                var e = t.key.path;
                return !!n.D(e) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                e.length === r && (s = s.add(t.kh)), !0);
            }), o), Zn.resolve(this.Ql(s));
        }, t.prototype.Ql = function(t) {
            var e = this, n = [];
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
                    return t.forEach((function(t) {
                var r = e.Bl(t);
                null !== r && n.push(r);
            })), n;
        }, t.prototype.br = function(t, e) {
            var n = this;
            S$2(0 === this.Wl(e.batchId, "removed")), this.Gn.shift();
            var r = this.ql;
            return Zn.forEach(e.mutations, (function(i) {
                var o = new Gi(i.key, e.batchId);
                return r = r.delete(o), n.dr.Dr(t, i.key);
            })).next((function() {
                n.ql = r;
            }));
        }, t.prototype.Sr = function(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }, t.prototype.Nr = function(t, e) {
            var n = new Gi(e, 0), r = this.ql.Ct(n);
            return Zn.resolve(e.isEqual(r && r.key));
        }, t.prototype.Cr = function(t) {
            return this.Gn.length, Zn.resolve();
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId The batchId to search for
         * @param action A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */
        t.prototype.Wl = function(t, e) {
            return this.Ul(t);
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @return The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */
        t.prototype.Ul = function(t) {
            return 0 === this.Gn.length ? 0 : t - this.Gn[0].batchId;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
            }, 
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */
        t.prototype.Bl = function(t) {
            var e = this.Ul(t);
            return e < 0 || e >= this.Gn.length ? null : this.Gn[e];
        }, t;
    }(), xo = /** @class */ function() {
        /**
         * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
         * return 0 to avoid unnecessarily doing the work of calculating the size.
         */
        function t(t, e) {
            this.zn = t, this.jl = e, 
            /** Underlying cache of documents and their read times. */
            this.docs = new ht(K$1.P), 
            /** Size of all cached documents. */
            this.size = 0
            /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */;
        }
        return t.prototype.xn = function(t, e, n) {
            var r = e.key, i = this.docs.get(r), o = i ? i.size : 0, s = this.jl(e);
            return this.docs = this.docs.st(r, {
                Or: e,
                size: s,
                readTime: n
            }), this.size += s - o, this.zn.Ar(t, r.path.p());
        }, 
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */
        t.prototype.Mn = function(t) {
            var e = this.docs.get(t);
            e && (this.docs = this.docs.remove(t), this.size -= e.size);
        }, t.prototype.Ln = function(t, e) {
            var n = this.docs.get(e);
            return Zn.resolve(n ? n.Or : null);
        }, t.prototype.getEntries = function(t, e) {
            var n = this, r = gt();
            return e.forEach((function(t) {
                var e = n.docs.get(t);
                r = r.st(t, e ? e.Or : null);
            })), Zn.resolve(r);
        }, t.prototype.ns = function(t, e, n) {
            for (var r = wt(), i = new K$1(e.path.child("")), o = this.docs.ut(i)
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
            ; o.Tt(); ) {
                var s = o.wt(), u = s.key, a = s.value, c = a.Or, h = a.readTime;
                if (!e.path.D(u.path)) break;
                h.o(n) <= 0 || c instanceof dn && xn(e, c) && (r = r.st(c.key, c));
            }
            return Zn.resolve(r);
        }, t.prototype.Kl = function(t, e) {
            return Zn.forEach(this.docs, (function(t) {
                return e(t);
            }));
        }, t.prototype.jr = function(e) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new t.Kr(this);
        }, t.prototype.zr = function(t) {
            return Zn.resolve(this.size);
        }, t;
    }();

    /**
     * EventManager is responsible for mapping queries to query event emitters.
     * It handles "fan-out". -- Identical queries will re-use the same watch on the
     * backend.
     */
    /**
     * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
     */
    xo.Kr = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).Hr = t, n;
        }
        return __extends(n, e), n.prototype.Un = function(t) {
            var e = this, n = [];
            return this.Fn.forEach((function(r, i) {
                i ? n.push(e.Hr.xn(t, i, e.readTime)) : e.Hr.Mn(r);
            })), Zn.Cn(n);
        }, n.prototype.qn = function(t, e) {
            return this.Hr.Ln(t, e);
        }, n.prototype.Bn = function(t, e) {
            return this.Hr.getEntries(t, e);
        }, n;
    }(Xn);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Lo = /** @class */ function() {
        function t(t) {
            this.persistence = t, 
            /**
                 * Maps a target to the data about that target
                 */
            this.Gl = new M$1((function(t) {
                return tt(t);
            }), et), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = B.min(), 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.zl = 0, 
            /**
                 * A ordered bidirectional mapping between documents and the remote target
                 * IDs.
                 */
            this.Hl = new Fi, this.targetCount = 0, this.Yl = gi.to();
        }
        return t.prototype.be = function(t, e) {
            return this.Gl.forEach((function(t, n) {
                return e(n);
            })), Zn.resolve();
        }, t.prototype.ro = function(t) {
            return Zn.resolve(this.lastRemoteSnapshotVersion);
        }, t.prototype.oo = function(t) {
            return Zn.resolve(this.zl);
        }, t.prototype.no = function(t) {
            return this.highestTargetId = this.Yl.next(), Zn.resolve(this.highestTargetId);
        }, t.prototype.ho = function(t, e, n) {
            return n && (this.lastRemoteSnapshotVersion = n), e > this.zl && (this.zl = e), 
            Zn.resolve();
        }, t.prototype.co = function(t) {
            this.Gl.set(t.target, t);
            var e = t.targetId;
            e > this.highestTargetId && (this.Yl = new gi(e), this.highestTargetId = e), t.sequenceNumber > this.zl && (this.zl = t.sequenceNumber);
        }, t.prototype.ao = function(t, e) {
            return this.co(e), this.targetCount += 1, Zn.resolve();
        }, t.prototype.lo = function(t, e) {
            return this.co(e), Zn.resolve();
        }, t.prototype._o = function(t, e) {
            return this.Gl.delete(e.target), this.Hl.Ch(e.targetId), this.targetCount -= 1, 
            Zn.resolve();
        }, t.prototype.hr = function(t, e, n) {
            var r = this, i = 0, o = [];
            return this.Gl.forEach((function(s, u) {
                u.sequenceNumber <= e && null === n.get(u.targetId) && (r.Gl.delete(s), o.push(r.fo(t, u.targetId)), 
                i++);
            })), Zn.Cn(o).next((function() {
                return i;
            }));
        }, t.prototype.do = function(t) {
            return Zn.resolve(this.targetCount);
        }, t.prototype.wo = function(t, e) {
            var n = this.Gl.get(e) || null;
            return Zn.resolve(n);
        }, t.prototype.To = function(t, e, n) {
            return this.Hl.vh(e, n), Zn.resolve();
        }, t.prototype.mo = function(t, e, n) {
            this.Hl.Dh(e, n);
            var r = this.persistence.dr, i = [];
            return r && e.forEach((function(e) {
                i.push(r.Dr(t, e));
            })), Zn.Cn(i);
        }, t.prototype.fo = function(t, e) {
            return this.Hl.Ch(e), Zn.resolve();
        }, t.prototype.Ao = function(t, e) {
            var n = this.Hl.Fh(e);
            return Zn.resolve(n);
        }, t.prototype.Nr = function(t, e) {
            return Zn.resolve(this.Hl.Nr(e));
        }, t;
    }(), Po = /** @class */ function() {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        function t(t) {
            var e = this;
            this.Jl = {}, this.yo = new nr(0), this.po = !1, this.po = !0, this.dr = t(this), 
            this.ko = new Lo(this), this.zn = new Zr, this.Kn = new xo(this.zn, (function(t) {
                return e.dr.Xl(t);
            }));
        }
        return t.prototype.start = function() {
            return Promise.resolve();
        }, t.prototype.th = function() {
            // No durable state to ensure is closed on shutdown.
            return this.po = !1, Promise.resolve();
        }, Object.defineProperty(t.prototype, "tr", {
            get: function() {
                return this.po;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.Bo = function() {
            // No op.
        }, t.prototype.Uo = function() {
            // No op.
        }, t.prototype.uh = function() {
            return this.zn;
        }, t.prototype.oh = function(t) {
            var e = this.Jl[t.$h()];
            return e || (e = new ko(this.zn, this.dr), this.Jl[t.$h()] = e), e;
        }, t.prototype.hh = function() {
            return this.ko;
        }, t.prototype.ah = function() {
            return this.Kn;
        }, t.prototype.runTransaction = function(t, e, n) {
            var r = this;
            E$1("MemoryPersistence", "Starting transaction:", t);
            var i = new Ro(this.yo.next());
            return this.dr.Zl(), n(i).next((function(t) {
                return r.dr.t_(i).next((function() {
                    return t;
                }));
            })).Sn().then((function(t) {
                return i.jn(), t;
            }));
        }, t.prototype.e_ = function(t, e) {
            return Zn.Nn(Object.values(this.Jl).map((function(n) {
                return function() {
                    return n.Nr(t, e);
                };
            })));
        }, t;
    }(), Ro = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).Ro = t, n;
        }
        return __extends(n, e), n;
    }(Jn), Oo = /** @class */ function() {
        function t(t) {
            this.persistence = t, 
            /** Tracks all documents that are active in Query views. */
            this.n_ = new Fi, 
            /** The list of documents that are potentially GCed after each transaction. */
            this.s_ = null;
        }
        return t.i_ = function(e) {
            return new t(e);
        }, Object.defineProperty(t.prototype, "r_", {
            get: function() {
                if (this.s_) return this.s_;
                throw A$2();
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.Eo = function(t, e, n) {
            return this.n_.Eo(n, e), this.r_.delete(n.toString()), Zn.resolve();
        }, t.prototype.Io = function(t, e, n) {
            return this.n_.Io(n, e), this.r_.add(n.toString()), Zn.resolve();
        }, t.prototype.Dr = function(t, e) {
            return this.r_.add(e.toString()), Zn.resolve();
        }, t.prototype.removeTarget = function(t, e) {
            var n = this;
            this.n_.Ch(e.targetId).forEach((function(t) {
                return n.r_.add(t.toString());
            }));
            var r = this.persistence.hh();
            return r.Ao(t, e.targetId).next((function(t) {
                t.forEach((function(t) {
                    return n.r_.add(t.toString());
                }));
            })).next((function() {
                return r._o(t, e);
            }));
        }, t.prototype.Zl = function() {
            this.s_ = new Set;
        }, t.prototype.t_ = function(t) {
            var e = this, n = this.persistence.ah().jr();
            // Remove newly orphaned documents.
                    return Zn.forEach(this.r_, (function(r) {
                var i = K$1.B(r);
                return e.o_(t, i).next((function(t) {
                    t || n.Mn(i);
                }));
            })).next((function() {
                return e.s_ = null, n.apply(t);
            }));
        }, t.prototype.wh = function(t, e) {
            var n = this;
            return this.o_(t, e).next((function(t) {
                t ? n.r_.delete(e.toString()) : n.r_.add(e.toString());
            }));
        }, t.prototype.Xl = function(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }, t.prototype.o_ = function(t, e) {
            var n = this;
            return Zn.Nn([ function() {
                return Zn.resolve(n.n_.Nr(e));
            }, function() {
                return n.persistence.hh().Nr(t, e);
            }, function() {
                return n.persistence.e_(t, e);
            } ]);
        }, t;
    }(), Vo = /** @class */ function() {
        function t(t) {
            this.h_ = t.h_, this.a_ = t.a_;
        }
        return t.prototype.wa = function(t) {
            this.c_ = t;
        }, t.prototype.ua = function(t) {
            this.u_ = t;
        }, t.prototype.onMessage = function(t) {
            this.l_ = t;
        }, t.prototype.close = function() {
            this.a_();
        }, t.prototype.send = function(t) {
            this.h_(t);
        }, t.prototype.__ = function() {
            this.c_();
        }, t.prototype.f_ = function(t) {
            this.u_(t);
        }, t.prototype.d_ = function(t) {
            this.l_(t);
        }, t;
    }(), Uo = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    }, Co = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this, t) || this).forceLongPolling = t.forceLongPolling, n;
        }
        /**
         * Base class for all Rest-based connections to the backend (WebChannel and
         * HTTP).
         */
        return __extends(n, e), n.prototype.A_ = function(t, e, n, r) {
            return new Promise((function(i, o) {
                var s = new esm_5;
                s.listenOnce(esm_3.COMPLETE, (function() {
                    try {
                        switch (s.getLastErrorCode()) {
                          case esm_2.NO_ERROR:
                            var e = s.getResponseJson();
                            E$1("Connection", "XHR received:", JSON.stringify(e)), i(e);
                            break;

                          case esm_2.TIMEOUT:
                            E$1("Connection", 'RPC "' + t + '" timed out'), o(new G$1(F$1.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case esm_2.HTTP_ERROR:
                            var n = s.getStatus();
                            if (E$1("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", s.getResponseText()), 
                            n > 0) {
                                var r = s.getResponseJson().error;
                                if (r && r.status && r.message) {
                                    var u = function(t) {
                                        var e = t.toLowerCase().replace("_", "-");
                                        return Object.values(F$1).indexOf(e) >= 0 ? e : F$1.UNKNOWN;
                                    }(r.status);
                                    o(new G$1(u, r.message));
                                } else o(new G$1(F$1.UNKNOWN, "Server responded with status " + s.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            o(new G$1(F$1.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            A$2();
                        }
                    } finally {
                        E$1("Connection", 'RPC "' + t + '" completed.');
                    }
                }));
                var u = JSON.stringify(r);
                s.send(e, "POST", u, n, 15);
            }));
        }, n.prototype.Ta = function(t, e) {
            var n = [ this.T_, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], r = esm_1(), i = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: "projects/" + this.s.projectId + "/databases/" + this.s.database
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling
            };
            this.I_(i.initMessageHeaders, e), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (i.httpHeadersOverwriteParam = "$httpHeaders");
            var o = n.join("");
            E$1("Connection", "Creating WebChannel: " + o, i);
            var s = r.createWebChannel(o, i), u = !1, d = !1, y = new Vo({
                h_: function(t) {
                    d ? E$1("Connection", "Not sending because WebChannel is closed:", t) : (u || (E$1("Connection", "Opening WebChannel transport."), 
                    s.open(), u = !0), E$1("Connection", "WebChannel sending:", t), s.send(t));
                },
                a_: function() {
                    return s.close();
                }
            }), v = function(t, e) {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                s.listen(t, (function(t) {
                    try {
                        e(t);
                    } catch (t) {
                        setTimeout((function() {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    // Closure events are guarded and exceptions are swallowed, so catch any
            // exception and rethrow using a setTimeout so they become visible again.
            // Note that eventually this function could go away if we are confident
            // enough the code is exception free.
            return v(esm_4.EventType.OPEN, (function() {
                d || E$1("Connection", "WebChannel transport opened.");
            })), v(esm_4.EventType.CLOSE, (function() {
                d || (d = !0, E$1("Connection", "WebChannel transport closed"), y.f_());
            })), v(esm_4.EventType.ERROR, (function(t) {
                d || (d = !0, N$1("Connection", "WebChannel transport errored:", t), y.f_(new G$1(F$1.UNAVAILABLE, "The operation could not be completed")));
            })), v(esm_4.EventType.MESSAGE, (function(t) {
                var e;
                if (!d) {
                    var n = t.data[0];
                    S$2(!!n);
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    var r = n, i = r.error || (null === (e = r[0]) || void 0 === e ? void 0 : e.error);
                    if (i) {
                        E$1("Connection", "WebChannel received error:", i);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        var o = i.status, u = function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var e = it[t];
                            if (void 0 !== e) return ct(e);
                        }(o), a = i.message;
                        void 0 === u && (u = F$1.INTERNAL, a = "Unknown error status: " + o + " with message " + i.message), 
                        // Mark closed so no further events are propagated
                        d = !0, y.f_(new G$1(u, a)), s.close();
                    } else E$1("Connection", "WebChannel received:", n), y.d_(n);
                }
            })), setTimeout((function() {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                y.__();
            }), 0), y;
        }, n;
    }(/** @class */ function() {
        function t(t) {
            this.w_ = t, this.s = t.s;
            var e = t.ssl ? "https" : "http";
            this.T_ = e + "://" + t.host, this.E_ = "projects/" + this.s.projectId + "/databases/" + this.s.database + "/documents";
        }
        return t.prototype.va = function(t, e, n, r) {
            var i = this.m_(t, e);
            E$1("RestConnection", "Sending: ", i, n);
            var o = {};
            return this.I_(o, r), this.A_(t, i, o, n).then((function(t) {
                return E$1("RestConnection", "Received: ", t), t;
            }), (function(e) {
                throw N$1("RestConnection", t + " failed with error: ", e, "url: ", i, "request:", n), 
                e;
            }));
        }, t.prototype.Sa = function(t, e, n, r) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.va(t, e, n, r);
        }, 
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */
        t.prototype.I_ = function(t, e) {
            if (t["X-Goog-Api-Client"] = "gl-js/ fire/7.19.0", 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid	triggering preflight requests.
            t["Content-Type"] = "text/plain", e) for (var n in e.Mh) e.Mh.hasOwnProperty(n) && (t[n] = e.Mh[n]);
        }, t.prototype.m_ = function(t, e) {
            var n = Uo[t];
            return this.T_ + "/v1/" + e + ":" + n;
        }, t;
    }()), qo = /** @class */ function() {
        function t() {
            var t = this;
            this.R_ = function() {
                return t.P_();
            }, this.g_ = function() {
                return t.V_();
            }, this.y_ = [], this.p_();
        }
        return t.prototype.Ka = function(t) {
            this.y_.push(t);
        }, t.prototype.th = function() {
            window.removeEventListener("online", this.R_), window.removeEventListener("offline", this.g_);
        }, t.prototype.p_ = function() {
            window.addEventListener("online", this.R_), window.addEventListener("offline", this.g_);
        }, t.prototype.P_ = function() {
            E$1("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (var t = 0, e = this.y_; t < e.length; t++) {
                (0, e[t])(0 /* AVAILABLE */);
            }
        }, t.prototype.V_ = function() {
            E$1("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (var t = 0, e = this.y_; t < e.length; t++) {
                (0, e[t])(1 /* UNAVAILABLE */);
            }
        }, 
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        t.ks = function() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }, t;
    }(), Mo = /** @class */ function() {
        function t() {}
        return t.prototype.Ka = function(t) {
            // No-op.
        }, t.prototype.th = function() {
            // No-op.
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory-backed instance of Persistence. Data is stored only in RAM and
     * not persisted across sessions.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the WebChannelConnection for the browser. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function Fo(t) {
        return new re(t, /* useProto3Json= */ !0);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Go = "You are using the memory-only build of Firestore. Persistence support is only available via the @firebase/firestore bundle or the firebase-firestore.js build.", jo = /** @class */ function() {
        function t() {}
        return t.prototype.initialize = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.Uu = this.b_(t), this.persistence = this.v_(t), [ 4 /*yield*/ , this.persistence.start() ];

                      case 1:
                        return e.sent(), this.S_ = this.D_(t), this.La = this.C_(t), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.D_ = function(t) {
            return null;
        }, t.prototype.C_ = function(t) {
            /** Manages our in-memory or durable persistence. */
            return e = this.persistence, n = new Do, r = t.N_, new xi(e, n, r);
            var e, n, r;
        }, t.prototype.v_ = function(t) {
            if (t.k_.F_) throw new G$1(F$1.FAILED_PRECONDITION, Go);
            return new Po(Oo.i_);
        }, t.prototype.b_ = function(t) {
            return new co;
        }, t.prototype.terminate = function() {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.S_ && this.S_.stop(), [ 4 /*yield*/ , this.Uu.th() ];

                      case 1:
                        return t.sent(), [ 4 /*yield*/ , this.persistence.th() ];

                      case 2:
                        return t.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.clearPersistence = function(t, e) {
            throw new G$1(F$1.FAILED_PRECONDITION, Go);
        }, t;
    }(), Bo = /** @class */ function(r) {
        function i(t) {
            var e = this;
            return (e = r.call(this) || this).x_ = t, e;
        }
        return __extends(i, r), i.prototype.initialize = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var i, o = this;
                return __generator(this, (function(s) {
                    switch (s.label) {
                      case 0:
                        return [ 4 /*yield*/ , r.prototype.initialize.call(this, t) ];

                      case 1:
                        return s.sent(), [ 4 /*yield*/ , this.x_.initialize(this, t) ];

                      case 2:
                        return s.sent(), i = this.x_.fc, this.Uu instanceof ao ? (this.Uu.fc = {
                            mu: mo.bind(null, i),
                            Iu: To.bind(null, i),
                            Au: No.bind(null, i),
                            rh: Eo.bind(null, i)
                        }, [ 4 /*yield*/ , this.Uu.start() ]) : [ 3 /*break*/ , 4 ];

                      case 3:
                        s.sent(), s.label = 4;

                      case 4:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return [ 4 /*yield*/ , this.persistence.qo((function(t) {
                            return __awaiter(o, void 0, void 0, (function() {
                                return __generator(this, (function(e) {
                                    switch (e.label) {
                                      case 0:
                                        return [ 4 /*yield*/ , wo(this.x_.fc, t) ];

                                      case 1:
                                        return e.sent(), this.S_ && (t && !this.S_.tr ? this.S_.start(this.La) : t || this.S_.stop()), 
                                        [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })) ];

                      case 5:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return s.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, i.prototype.b_ = function(t) {
            if (t.k_.F_ && t.k_.synchronizeTabs) {
                var e = dr();
                if (!ao.ks(e)) throw new G$1(F$1.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
                var n = ki(t.w_.s, t.w_.persistenceKey);
                return new ao(e, t.ei, n, t.clientId, t.N_);
            }
            return new co;
        }, i;
    }(/** @class */ function(r) {
        function i() {
            return null !== r && r.apply(this, arguments) || this;
        }
        return __extends(i, r), i.prototype.initialize = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        return [ 4 /*yield*/ , r.prototype.initialize.call(this, t) ];

                      case 1:
                        return i.sent(), [ 4 /*yield*/ , function(t) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var e, r;
                                return __generator(this, (function(n) {
                                    return e = D$2(t), r = D$2(e.Ah), [ 2 /*return*/ , e.persistence.runTransaction("Synchronize last document change read time", "readonly", (function(t) {
                                        return r.Wr(t);
                                    })).then((function(t) {
                                        e.Ih = t;
                                    })) ];
                                }));
                            }));
                        }(this.La) ];

                      case 2:
                        return i.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, i.prototype.D_ = function(t) {
            var e = this.persistence.dr.Yi;
            return new Tr(e, t.ei);
        }, i.prototype.v_ = function(t) {
            var e = ki(t.w_.s, t.w_.persistenceKey), n = Fo(t.w_.s);
            return new Ni(t.k_.synchronizeTabs, e, t.clientId, Er.Ui(t.k_.cacheSizeBytes), t.ei, dr(), yr(), n, this.Uu, t.k_.Vo);
        }, i.prototype.b_ = function(t) {
            return new co;
        }, i.prototype.clearPersistence = function(t, r) {
            return function(t) {
                return __awaiter(this, void 0, void 0, (function() {
                    var e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return or.ks() ? (e = t + "main", [ 4 /*yield*/ , or.delete(e) ]) : [ 2 /*return*/ , Promise.resolve() ];

                          case 1:
                            return n.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }(ki(t, r));
        }, i;
    }(jo)), zo = /** @class */ function() {
        function t() {}
        return t.prototype.initialize = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                var e = this;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.La ? [ 3 /*break*/ , 3 ] : (this.La = t.La, this.Uu = t.Uu, this.qa = this.O_(r), 
                        this.Bu = this.M_(r), this.fc = this.L_(r), this.q_ = this.B_(r), this.Uu.Da = function(t) {
                            return e.fc.xu(t, 1 /* SharedClientState */);
                        }, this.Bu.fc = this.fc, [ 4 /*yield*/ , this.Bu.start() ]);

                      case 1:
                        return n.sent(), [ 4 /*yield*/ , this.Bu.Sc(this.fc.el) ];

                      case 2:
                        n.sent(), n.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.B_ = function(t) {
            return new Ao(this.fc);
        }, t.prototype.O_ = function(t) {
            var e, n = Fo(t.w_.s), r = (e = t.w_, new Co(e));
            /** Return the Platform-specific connectivity monitor. */ return function(t, e, n) {
                return new Xi(t, e, n);
            }(t.credentials, r, n);
        }, t.prototype.M_ = function(t) {
            var e = this;
            return new Ji(this.La, this.qa, t.ei, (function(t) {
                return e.fc.xu(t, 0 /* RemoteStore */);
            }), qo.ks() ? new qo : new Mo);
        }, t.prototype.L_ = function(t) {
            return function(t, e, n, 
            // PORTING NOTE: Manages state synchronization in multi-tab environments.
            r, i, o, s) {
                var u = new vo(t, e, n, r, i, o);
                return s && (u.tl = !0), u;
            }(this.La, this.Bu, this.qa, this.Uu, t.N_, t.Qu, !t.k_.F_ || !t.k_.synchronizeTabs);
        }, t.prototype.terminate = function() {
            return this.Bu.th();
        }, t;
    }();

    /**
     * Provides all components needed for Firestore with in-memory persistence.
     * Uses EagerGC garbage collection.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function Qo(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, e) {
            if ("object" != typeof t || null === t) return !1;
            for (var n = t, r = 0, i = [ "next", "error", "complete" ]; r < i.length; r++) {
                var o = i[r];
                if (o in n && "function" == typeof n[o]) return !0;
            }
            return !1;
        }(t);
    }

    var Wo = /** @class */ function() {
        function t(t) {
            this.observer = t, 
            /**
                 * When set to true, will not raise future events. Necessary to deal with
                 * async detachment of listener.
                 */
            this.muted = !1;
        }
        return t.prototype.next = function(t) {
            this.observer.next && this.U_(this.observer.next, t);
        }, t.prototype.error = function(t) {
            this.observer.error ? this.U_(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
        }, t.prototype.Q_ = function() {
            this.muted = !0;
        }, t.prototype.U_ = function(t, e) {
            var n = this;
            this.muted || setTimeout((function() {
                n.muted || t(e);
            }), 0);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Validates that no arguments were passed in the invocation of functionName.
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateNoArgs('myFunction', arguments);
     */ function Ho(t, e) {
        if (0 !== e.length) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() does not support arguments, but was called with " + fs(e.length, "argument") + ".");
    }

    /**
     * Validates the invocation of functionName has the exact number of arguments.
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateExactNumberOfArgs('myFunction', arguments, 2);
     */ function Ko(t, e, n) {
        if (e.length !== n) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires " + fs(n, "argument") + ", but was called with " + fs(e.length, "argument") + ".");
    }

    /**
     * Validates the invocation of functionName has at least the provided number of
     * arguments (but can have many more).
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
     */ function Yo(t, e, n) {
        if (e.length < n) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires at least " + fs(n, "argument") + ", but was called with " + fs(e.length, "argument") + ".");
    }

    /**
     * Validates the invocation of functionName has number of arguments between
     * the values provided.
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
     */ function Zo(t, e, n, r) {
        if (e.length < n || e.length > r) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires between " + n + " and " + r + " arguments, but was called with " + fs(e.length, "argument") + ".");
    }

    /**
     * Validates the provided argument is an array and has as least the expected
     * number of elements.
     */
    /**
     * Validates the provided positional argument has the native JavaScript type
     * using typeof checks.
     */ function Xo(t, e, n, r) {
        rs(t, e, hs(n) + " argument", r);
    }

    /**
     * Validates the provided argument has the native JavaScript type using
     * typeof checks or is undefined.
     */ function $o(t, e, n, r) {
        void 0 !== r && Xo(t, e, n, r);
    }

    /**
     * Validates the provided named option has the native JavaScript type using
     * typeof checks.
     */ function Jo(t, e, n, r) {
        rs(t, e, n + " option", r);
    }

    /**
     * Validates the provided named option has the native JavaScript type using
     * typeof checks or is undefined.
     */ function ts(t, e, n, r) {
        void 0 !== r && Jo(t, e, n, r);
    }

    /**
     * Validates that the provided named option equals one of the expected values.
     */
    /**
     * Validates that the provided named option equals one of the expected values or
     * is undefined.
     */
    function es(t, e, n, r, i) {
        void 0 !== r && function(t, e, n, r, i) {
            for (var o = [], s = 0, u = i; s < u.length; s++) {
                var a = u[s];
                if (a === r) return;
                o.push(os(a));
            }
            var c = os(r);
            throw new G$1(F$1.INVALID_ARGUMENT, "Invalid value " + c + " provided to function " + t + '() for option "' + n + '". Acceptable values: ' + o.join(", "));
        }(t, 0, n, r, i);
    }

    /**
     * Validates that the provided argument is a valid enum.
     *
     * @param functionName Function making the validation call.
     * @param enums Array containing all possible values for the enum.
     * @param position Position of the argument in `functionName`.
     * @param argument Argument to validate.
     * @return The value as T if the argument can be converted.
     */ function ns(t, e, n, r) {
        if (!e.some((function(t) {
            return t === r;
        }))) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid value " + os(r) + " provided to function " + t + "() for its " + hs(n) + " argument. Acceptable values: " + e.join(", "));
        return r;
    }

    /** Helper to validate the type of a provided input. */ function rs(t, e, n, r) {
        if (!("object" === e ? is(r) : "non-empty string" === e ? "string" == typeof r && "" !== r : typeof r === e)) {
            var i = os(r);
            throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires its " + n + " to be of type " + e + ", but it was: " + i);
        }
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */ function is(t) {
        return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
    }

    /** Returns a string describing the type / value of the provided input. */ function os(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            var e = 
            /** Hacky method to try to get the constructor name for an object. */
            function(t) {
                if (t.constructor) {
                    var e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                    if (e && e.length > 1) return e[1];
                }
                return null;
            }(t);
            return e ? "a custom " + e + " object" : "an object";
        }
        return "function" == typeof t ? "a function" : A$2();
    }

    function ss(t, e, n) {
        if (void 0 === n) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires a valid " + hs(e) + " argument, but it was undefined.");
    }

    /**
     * Validates the provided positional argument is an object, and its keys and
     * values match the expected keys and types provided in optionTypes.
     */ function us(t, e, n) {
        C$1(e, (function(e, r) {
            if (n.indexOf(e) < 0) throw new G$1(F$1.INVALID_ARGUMENT, "Unknown option '" + e + "' passed to function " + t + "(). Available options: " + n.join(", "));
        }));
    }

    /**
     * Helper method to throw an error that the provided argument did not pass
     * an instanceof check.
     */ function as(t, e, n, r) {
        var i = os(r);
        return new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires its " + hs(n) + " argument to be a " + e + ", but it was: " + i);
    }

    function cs(t, e, n) {
        if (n <= 0) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires its " + hs(e) + " argument to be a positive number, but it was: " + n + ".");
    }

    /** Converts a number to its english word representation */ function hs(t) {
        switch (t) {
          case 1:
            return "first";

          case 2:
            return "second";

          case 3:
            return "third";

          default:
            return t + "th";
        }
    }

    /**
     * Formats the given word as plural conditionally given the preceding number.
     */ function fs(t, e) {
        return t + " " + e + (1 === t ? "" : "s");
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Helper function to assert Uint8Array is available at runtime. */ function ls() {
        if ("undefined" == typeof Uint8Array) throw new G$1(F$1.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
    }

    /** Helper function to assert Base64 functions are available at runtime. */ function ps() {
        if ("undefined" == typeof atob) throw new G$1(F$1.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
    }

    /**
     * Immutable class holding a blob (binary data).
     * This class is directly exposed in the public API.
     *
     * Note that while you can't hide the constructor in JavaScript code, we are
     * using the hack above to make sure no-one outside this module can call it.
     */ var ds = /** @class */ function() {
        function t(t) {
            ps(), this.W_ = t;
        }
        return t.fromBase64String = function(e) {
            Ko("Blob.fromBase64String", arguments, 1), Xo("Blob.fromBase64String", "string", 1, e), 
            ps();
            try {
                return new t(rt.fromBase64String(e));
            } catch (e) {
                throw new G$1(F$1.INVALID_ARGUMENT, "Failed to construct Blob from Base64 string: " + e);
            }
        }, t.fromUint8Array = function(e) {
            if (Ko("Blob.fromUint8Array", arguments, 1), ls(), !(e instanceof Uint8Array)) throw as("Blob.fromUint8Array", "Uint8Array", 1, e);
            return new t(rt.fromUint8Array(e));
        }, t.prototype.toBase64 = function() {
            return Ko("Blob.toBase64", arguments, 0), ps(), this.W_.toBase64();
        }, t.prototype.toUint8Array = function() {
            return Ko("Blob.toUint8Array", arguments, 0), ls(), this.W_.toUint8Array();
        }, t.prototype.toString = function() {
            return "Blob(base64: " + this.toBase64() + ")";
        }, t.prototype.isEqual = function(t) {
            return this.W_.isEqual(t.W_);
        }, t;
    }(), ys = function(t) {
        !function(t, e, n, r) {
            if (!(e instanceof Array) || e.length < 1) throw new G$1(F$1.INVALID_ARGUMENT, "Function FieldPath() requires its fieldNames argument to be an array with at least " + fs(1, "element") + ".");
        }(0, t);
        for (var e = 0; e < t.length; ++e) if (Xo("FieldPath", "string", e, t[e]), 0 === t[e].length) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this.j_ = new H$1(t);
    }, vs = /** @class */ function(e) {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames A list of field names.
         */
        function n() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            return e.call(this, t) || this;
        }
        return __extends(n, e), n.documentId = function() {
            /**
             * Internal Note: The backend doesn't technically support querying by
             * document ID. Instead it queries by the entire document name (full path
             * included), but in the cases we currently support documentId(), the net
             * effect is the same.
             */
            return new n(H$1.L().F());
        }, n.prototype.isEqual = function(t) {
            if (!(t instanceof n)) throw as("isEqual", "FieldPath", 1, t);
            return this.j_.isEqual(t.j_);
        }, n;
    }(ys), gs = new RegExp("[~\\*/\\[\\]]"), ms = function() {
        /** A pointer to the implementing class. */
        this.K_ = this;
    }, ws = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).G_ = t, n;
        }
        return __extends(n, e), n.prototype.z_ = function(t) {
            if (2 /* MergeSet */ !== t.H_) throw 1 /* Update */ === t.H_ ? t.Y_(this.G_ + "() can only appear at the top level of your update data") : t.Y_(this.G_ + "() cannot be used with set() unless you pass {merge:true}");
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
                    return t.qe.push(t.path), null;
        }, n.prototype.isEqual = function(t) {
            return t instanceof n;
        }, n;
    }(ms);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The objects that are a part of this API are exposed to third-parties as
    // compiled javascript so we want to flag our private members with a leading
    // underscore to discourage their use.
    /**
     * A field class base class that is shared by the lite, full and legacy SDK,
     * which supports shared code that deals with FieldPaths.
     */
    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue The sentinel FieldValue for which to create a child
     *     context.
     * @param context The parent context.
     * @param arrayElement Whether or not the FieldValue has an array.
     */
    function bs(t, e, n) {
        return new Rs({
            H_: 3 /* Argument */ ,
            J_: e.settings.J_,
            methodName: t.G_,
            X_: n
        }, e.s, e.serializer, e.ignoreUndefinedProperties);
    }

    var Is = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).G_ = t, n;
        }
        return __extends(n, e), n.prototype.z_ = function(t) {
            return new Qe(t.path, new Ue);
        }, n.prototype.isEqual = function(t) {
            return t instanceof n;
        }, n;
    }(ms), Es = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).G_ = t, r.Z_ = n, r;
        }
        return __extends(n, e), n.prototype.z_ = function(t) {
            var e = bs(this, t, 
            /*array=*/ !0), n = this.Z_.map((function(t) {
                return Ms(t, e);
            })), r = new Ce(n);
            return new Qe(t.path, r);
        }, n.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, n;
    }(ms), Ts = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).G_ = t, r.Z_ = n, r;
        }
        return __extends(n, e), n.prototype.z_ = function(t) {
            var e = bs(this, t, 
            /*array=*/ !0), n = this.Z_.map((function(t) {
                return Ms(t, e);
            })), r = new Me(n);
            return new Qe(t.path, r);
        }, n.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, n;
    }(ms), Ns = /** @class */ function(e) {
        function n(t, n) {
            var r = this;
            return (r = e.call(this) || this).G_ = t, r.tf = n, r;
        }
        return __extends(n, e), n.prototype.z_ = function(t) {
            var e = new Ge(t.serializer, se(t.serializer, this.tf));
            return new Qe(t.path, e);
        }, n.prototype.isEqual = function(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }, n;
    }(ms), _s = /** @class */ function(e) {
        function n() {
            return e.call(this) || this;
        }
        return __extends(n, e), n.delete = function() {
            return Ho("FieldValue.delete", arguments), new As(new ws("FieldValue.delete"));
        }, n.serverTimestamp = function() {
            return Ho("FieldValue.serverTimestamp", arguments), new As(new Is("FieldValue.serverTimestamp"));
        }, n.arrayUnion = function() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we'd need the Firestore instance to do this.
                    return Yo("FieldValue.arrayUnion", arguments, 1), new As(new Es("FieldValue.arrayUnion", t));
        }, n.arrayRemove = function() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we'd need the Firestore instance to do this.
                    return Yo("FieldValue.arrayRemove", arguments, 1), new As(new Ts("FieldValue.arrayRemove", t));
        }, n.increment = function(t) {
            return Xo("FieldValue.increment", "number", 1, t), Ko("FieldValue.increment", arguments, 1), 
            new As(new Ns("FieldValue.increment", t));
        }, n;
    }(ms), As = /** @class */ function(e) {
        function n(t) {
            var n = this;
            return (n = e.call(this) || this).K_ = t, n.G_ = t.G_, n;
        }
        return __extends(n, e), n.prototype.z_ = function(t) {
            return this.K_.z_(t);
        }, n.prototype.isEqual = function(t) {
            return t instanceof n && this.K_.isEqual(t.K_);
        }, n;
    }(_s), Ss = /** @class */ function() {
        function t(t, e) {
            if (Ko("GeoPoint", arguments, 2), Xo("GeoPoint", "number", 1, t), Xo("GeoPoint", "number", 2, e), 
            !isFinite(t) || t < -90 || t > 90) throw new G$1(F$1.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(e) || e < -180 || e > 180) throw new G$1(F$1.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
            this.ef = t, this.nf = e;
        }
        return Object.defineProperty(t.prototype, "latitude", {
            /**
             * Returns the latitude of this geo point, a number between -90 and 90.
             */
            get: function() {
                return this.ef;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "longitude", {
            /**
             * Returns the longitude of this geo point, a number between -180 and 180.
             */
            get: function() {
                return this.nf;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            return this.ef === t.ef && this.nf === t.nf;
        }, t.prototype.toJSON = function() {
            return {
                latitude: this.ef,
                longitude: this.nf
            };
        }, 
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */
        t.prototype.T = function(t) {
            return L$1(this.ef, t.ef) || L$1(this.nf, t.nf);
        }, t;
    }(), Ds = /^__.*__$/, ks = function(t, e, n) {
        this.sf = t, this.if = e, this.rf = n;
    }, xs = /** @class */ function() {
        function t(t, e, n) {
            this.data = t, this.qe = e, this.fieldTransforms = n;
        }
        return t.prototype.hf = function(t, e) {
            var n = [];
            return null !== this.qe ? n.push(new nn(t, this.data, this.qe, e)) : n.push(new en(t, this.data, e)), 
            this.fieldTransforms.length > 0 && n.push(new on$1(t, this.fieldTransforms)), n;
        }, t;
    }(), Ls = /** @class */ function() {
        function t(t, e, n) {
            this.data = t, this.qe = e, this.fieldTransforms = n;
        }
        return t.prototype.hf = function(t, e) {
            var n = [ new nn(t, this.data, this.qe, e) ];
            return this.fieldTransforms.length > 0 && n.push(new on$1(t, this.fieldTransforms)), 
            n;
        }, t;
    }();

    function Ps(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw A$2();
        }
    }

    /** A "context" object passed around while parsing user data. */ var Rs = /** @class */ function() {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings The settings for the parser.
         * @param databaseId The database ID of the Firestore instance.
         * @param serializer The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms A mutable list of field transforms encountered while
         *     parsing the data.
         * @param fieldMask A mutable list of field paths encountered while parsing
         *     the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        function t(t, e, n, r, i, o) {
            this.settings = t, this.s = e, this.serializer = n, this.ignoreUndefinedProperties = r, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === i && this.af(), this.fieldTransforms = i || [], this.qe = o || [];
        }
        return Object.defineProperty(t.prototype, "path", {
            get: function() {
                return this.settings.path;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "H_", {
            get: function() {
                return this.settings.H_;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /** Returns a new context with the specified settings overwritten. */ t.prototype.cf = function(e) {
            return new t(Object.assign(Object.assign({}, this.settings), e), this.s, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.qe);
        }, t.prototype.uf = function(t) {
            var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.cf({
                path: n,
                X_: !1
            });
            return r.lf(t), r;
        }, t.prototype._f = function(t) {
            var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.cf({
                path: n,
                X_: !1
            });
            return r.af(), r;
        }, t.prototype.ff = function(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.cf({
                path: void 0,
                X_: !0
            });
        }, t.prototype.Y_ = function(t) {
            return Qs(t, this.settings.methodName, this.settings.df || !1, this.path, this.settings.J_);
        }, 
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ t.prototype.contains = function(t) {
            return void 0 !== this.qe.find((function(e) {
                return t.D(e);
            })) || void 0 !== this.fieldTransforms.find((function(e) {
                return t.D(e.field);
            }));
        }, t.prototype.af = function() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (var t = 0; t < this.path.length; t++) this.lf(this.path.get(t));
        }, t.prototype.lf = function(t) {
            if (0 === t.length) throw this.Y_("Document fields must not be empty");
            if (Ps(this.H_) && Ds.test(t)) throw this.Y_('Document fields cannot begin and end with "__"');
        }, t;
    }(), Os = /** @class */ function() {
        function t(t, e, n) {
            this.s = t, this.ignoreUndefinedProperties = e, this.serializer = n || Fo(t)
            /** Creates a new top-level parse context. */;
        }
        return t.prototype.wf = function(t, e, n, r) {
            return void 0 === r && (r = !1), new Rs({
                H_: t,
                methodName: e,
                J_: n,
                path: H$1.$(),
                X_: !1,
                df: r
            }, this.s, this.serializer, this.ignoreUndefinedProperties);
        }, t;
    }();

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */
    /** Parse document data from a set() call. */ function Vs(t, e, n, r, i, o) {
        void 0 === o && (o = {});
        var s = t.wf(o.merge || o.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
        js("Data must be an object, but it was:", s, r);
        var u, a, c = Fs(r, s);
        if (o.merge) u = new ze(s.qe), a = s.fieldTransforms; else if (o.mergeFields) {
            for (var h = [], f = 0, l = o.mergeFields; f < l.length; f++) {
                var p = l[f], d = void 0;
                if (p instanceof ys) d = p.j_; else {
                    if ("string" != typeof p) throw A$2();
                    d = zs(e, p, n);
                }
                if (!s.contains(d)) throw new G$1(F$1.INVALID_ARGUMENT, "Field '" + d + "' is specified in your field mask but missing from your input data.");
                Ws(h, d) || h.push(d);
            }
            u = new ze(h), a = s.fieldTransforms.filter((function(t) {
                return u.Ke(t.field);
            }));
        } else u = null, a = s.fieldTransforms;
        return new xs(new hn(c), u, a);
    }

    /** Parse update data from an update() call. */ function Us(t, e, n, r) {
        var i = t.wf(1 /* Update */ , e, n);
        js("Data must be an object, but it was:", i, r);
        var o = [], s = new fn;
        C$1(r, (function(t, r) {
            var u = zs(e, t, n), a = i._f(u);
            if (r instanceof ms && r.K_ instanceof ws) 
            // Add it to the field mask, but don't add anything to updateData.
            o.push(u); else {
                var c = Ms(r, a);
                null != c && (o.push(u), s.set(u, c));
            }
        }));
        var u = new ze(o);
        return new Ls(s.ze(), u, i.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function Cs(t, e, n, r, i, o) {
        var s = t.wf(1 /* Update */ , e, n), u = [ Bs(e, r, n) ], a = [ i ];
        if (o.length % 2 != 0) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
        for (var c = 0; c < o.length; c += 2) u.push(Bs(e, o[c])), a.push(o[c + 1]);
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (var h = [], f = new fn, l = u.length - 1; l >= 0; --l) if (!Ws(h, u[l])) {
            var p = u[l], d = a[l], y = s._f(p);
            if (d instanceof ms && d.K_ instanceof ws) 
            // Add it to the field mask, but don't add anything to updateData.
            h.push(p); else {
                var v = Ms(d, y);
                null != v && (h.push(p), f.set(p, v));
            }
        }
        var g = new ze(h);
        return new Ls(f.ze(), g, s.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function qs(t, e, n, r) {
        return void 0 === r && (r = !1), Ms(n, t.wf(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input Data to be parsed.
     * @param context A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @return The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Ms(t, e) {
        if (Gs(t)) return js("Unsupported field value:", e, t), Fs(t, e);
        if (t instanceof ms) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
         * "Parses" the provided FieldValueImpl, adding any necessary transforms to
         * context.fieldTransforms.
         */
        return function(t, e) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!Ps(e.H_)) throw e.Y_(t.G_ + "() can only be used with update() and set()");
            if (!e.path) throw e.Y_(t.G_ + "() is not currently supported inside arrays");
            var n = t.z_(e);
            n && e.fieldTransforms.push(n);
        }(t, e), null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.qe.push(e.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (e.settings.X_ && 4 /* ArrayArgument */ !== e.H_) throw e.Y_("Nested arrays are not supported");
            return function(t, e) {
                for (var n = [], r = 0, i = 0, o = t; i < o.length; i++) {
                    var s = Ms(o[i], e.ff(r));
                    null == s && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    s = {
                        nullValue: "NULL_VALUE"
                    }), n.push(s), r++;
                }
                return {
                    arrayValue: {
                        values: n
                    }
                };
            }(t, e);
        }
        return function(t, e) {
            if (null === t) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return se(e.serializer, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                var n = j.fromDate(t);
                return {
                    timestampValue: ue(e.serializer, n)
                };
            }
            if (t instanceof j) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                var r = new j(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: ue(e.serializer, r)
                };
            }
            if (t instanceof Ss) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof ds) return {
                bytesValue: ae(e.serializer, t)
            };
            if (t instanceof ks) {
                var i = e.s, o = t.sf;
                if (!o.isEqual(i)) throw e.Y_("Document reference is for database " + o.projectId + "/" + o.database + " but should be for database " + i.projectId + "/" + i.database);
                return {
                    referenceValue: fe(t.sf || e.s, t.if.path)
                };
            }
            if (void 0 === t && e.ignoreUndefinedProperties) return null;
            throw e.Y_("Unsupported field value: " + os(t));
        }(t, e);
    }

    function Fs(t, e) {
        var n = {};
        return q$1(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.qe.push(e.path) : C$1(t, (function(t, r) {
            var i = Ms(r, e.uf(t));
            null != i && (n[t] = i);
        })), {
            mapValue: {
                fields: n
            }
        };
    }

    function Gs(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof j || t instanceof Ss || t instanceof ds || t instanceof ks || t instanceof ms);
    }

    function js(t, e, n) {
        if (!Gs(n) || !is(n)) {
            var r = os(n);
            throw "an object" === r ? e.Y_(t + " a custom object") : e.Y_(t + " " + r);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function Bs(t, e, n) {
        if (e instanceof ys) return e.j_;
        if ("string" == typeof e) return zs(t, e);
        throw Qs("Field path arguments must be of type string or FieldPath.", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName The publicly visible method name
     * @param path The dot-separated string form of a field path which will be split
     * on dots.
     * @param targetDoc The document against which the field path will be evaluated.
     */ function zs(t, e, n) {
        try {
            return function(t) {
                if (t.search(gs) >= 0) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not contain '~', '*', '/', '[', or ']'");
                try {
                    return new (vs.bind.apply(vs, __spreadArrays([ void 0 ], t.split("."))));
                } catch (e) {
                    throw new G$1(F$1.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
                }
            }(e).j_;
        } catch (e) {
            throw Qs((i = e) instanceof Error ? i.message : i.toString(), t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, n);
        }
        /**
     * Extracts the message from a caught exception, which should be an Error object
     * though JS doesn't guarantee that.
     */    var i;
        /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */}

    function Qs(t, e, n, r, i) {
        var o = r && !r._(), s = void 0 !== i, u = "Function " + e + "() called with invalid data";
        n && (u += " (via `toFirestore()`)");
        var a = "";
        return (o || s) && (a += " (found", o && (a += " in field " + r), s && (a += " in document " + i), 
        a += ")"), new G$1(F$1.INVALID_ARGUMENT, (u += ". ") + t + a);
    }

    function Ws(t, e) {
        return t.some((function(t) {
            return t.isEqual(e);
        }));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */ var Hs = /** @class */ function() {
        function t(t) {
            this.qa = t, 
            // The version of each document that was read during this transaction.
            this.Tf = new Map, this.mutations = [], this.Ef = !1, 
            /**
                 * A deferred usage error that occurred previously in this transaction that
                 * will cause the transaction to fail once it actually commits.
                 */
            this.mf = null, 
            /**
                 * Set of documents that have been written in the transaction.
                 *
                 * When there's more than one write to the same key in a transaction, any
                 * writes after the first are handled differently.
                 */
            this.If = new Set;
        }
        return t.prototype.Af = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var r, i = this;
                return __generator(this, (function(o) {
                    switch (o.label) {
                      case 0:
                        if (this.Rf(), this.mutations.length > 0) throw new G$1(F$1.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                        return [ 4 /*yield*/ , function(t, r) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var e, i, o, s, u, a;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return e = D$2(t), i = ge(e.serializer) + "/documents", o = {
                                            documents: r.map((function(t) {
                                                return pe(e.serializer, t);
                                            }))
                                        }, [ 4 /*yield*/ , e.Sa("BatchGetDocuments", i, o) ];

                                      case 1:
                                        return s = n.sent(), u = new Map, s.forEach((function(t) {
                                            var n = function(t, e) {
                                                return "found" in e ? function(t, e) {
                                                    S$2(!!e.found), e.found.name, e.found.updateTime;
                                                    var n = de(t, e.found.name), r = he(e.found.updateTime), i = new hn({
                                                        mapValue: {
                                                            fields: e.found.fields
                                                        }
                                                    });
                                                    return new dn(n, r, i, {});
                                                }(t, e) : "missing" in e ? function(t, e) {
                                                    S$2(!!e.missing), S$2(!!e.readTime);
                                                    var n = de(t, e.missing), r = he(e.readTime);
                                                    return new yn(n, r);
                                                }(t, e) : A$2();
                                            }(e.serializer, t);
                                            u.set(n.key.toString(), n);
                                        })), a = [], [ 2 /*return*/ , (r.forEach((function(t) {
                                            var e = u.get(t.toString());
                                            S$2(!!e), a.push(e);
                                        })), a) ];
                                    }
                                }));
                            }));
                        }(this.qa, t) ];

                      case 1:
                        return [ 2 /*return*/ , ((r = o.sent()).forEach((function(t) {
                            t instanceof yn || t instanceof dn ? i.Pf(t) : A$2();
                        })), r) ];
                    }
                }));
            }));
        }, t.prototype.set = function(t, e) {
            this.write(e.hf(t, this.Qe(t))), this.If.add(t.toString());
        }, t.prototype.update = function(t, e) {
            try {
                this.write(e.hf(t, this.gf(t)));
            } catch (t) {
                this.mf = t;
            }
            this.If.add(t.toString());
        }, t.prototype.delete = function(t) {
            this.write([ new an(t, this.Qe(t)) ]), this.If.add(t.toString());
        }, t.prototype.commit = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, r = this;
                return __generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        if (this.Rf(), this.mf) throw this.mf;
                        return t = this.Tf, 
                        // For each mutation, note that the doc was written.
                        this.mutations.forEach((function(e) {
                            t.delete(e.key.toString());
                        })), 
                        // For each document that was read but not written to, we want to perform
                        // a `verify` operation.
                        t.forEach((function(t, e) {
                            var n = K$1.B(e);
                            r.mutations.push(new cn(n, r.Qe(n)));
                        })), [ 4 /*yield*/ , function(t, r) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var e, i, o;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return e = D$2(t), i = ge(e.serializer) + "/documents", o = {
                                            writes: r.map((function(t) {
                                                return be(e.serializer, t);
                                            }))
                                        }, [ 4 /*yield*/ , e.va("Commit", i, o) ];

                                      case 1:
                                        return n.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        }(this.qa, this.mutations) ];

                      case 1:
                        // For each mutation, note that the doc was written.
                        return i.sent(), this.Ef = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Pf = function(t) {
            var e;
            if (t instanceof dn) e = t.version; else {
                if (!(t instanceof yn)) throw A$2();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                            e = B.min();
            }
            var n = this.Tf.get(t.key.toString());
            if (n) {
                if (!e.isEqual(n)) 
                // This transaction will fail no matter what.
                throw new G$1(F$1.ABORTED, "Document version changed between two reads.");
            } else this.Tf.set(t.key.toString(), e);
        }, 
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */
        t.prototype.Qe = function(t) {
            var e = this.Tf.get(t.toString());
            return !this.If.has(t.toString()) && e ? He.updateTime(e) : He.We();
        }, 
        /**
         * Returns the precondition for a document if the operation is an update.
         */
        t.prototype.gf = function(t) {
            var e = this.Tf.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.If.has(t.toString()) && e) {
                if (e.isEqual(B.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new G$1(F$1.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return He.updateTime(e);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
                    return He.exists(!0);
        }, t.prototype.write = function(t) {
            this.Rf(), this.mutations = this.mutations.concat(t);
        }, t.prototype.Rf = function() {}, t;
    }(), Ks = /** @class */ function() {
        function t(t, e, n, r) {
            this.ei = t, this.qa = e, this.updateFunction = n, this.ii = r, this.Vf = 5, this.Ti = new ir(this.ei, "transaction_retry" /* TransactionRetry */)
            /** Runs the transaction and sets the result on deferred. */;
        }
        return t.prototype.run = function() {
            this.yf();
        }, t.prototype.yf = function() {
            var t = this;
            this.Ti.bs((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    var t, e, r = this;
                    return __generator(this, (function(n) {
                        return t = new Hs(this.qa), (e = this.pf(t)) && e.then((function(e) {
                            r.ei.ai((function() {
                                return t.commit().then((function() {
                                    r.ii.resolve(e);
                                })).catch((function(t) {
                                    r.bf(t);
                                }));
                            }));
                        })).catch((function(t) {
                            r.bf(t);
                        })), [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, t.prototype.pf = function(t) {
            try {
                var e = this.updateFunction(t);
                return !Y$1(e) && e.catch && e.then ? e : (this.ii.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.ii.reject(t), null;
            }
        }, t.prototype.bf = function(t) {
            var e = this;
            this.Vf > 0 && this.vf(t) ? (this.Vf -= 1, this.ei.ai((function() {
                return e.yf(), Promise.resolve();
            }))) : this.ii.reject(t);
        }, t.prototype.vf = function(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                var e = t.code;
                return "aborted" === e || "failed-precondition" === e || !at(e);
            }
            return !1;
        }, t;
    }(), Ys = /** @class */ function() {
        function t(t, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        e) {
            this.credentials = t, this.ei = e, this.clientId = x$1.t(), 
            // We defer our initialization until we get the current user from
            // setChangeListener(). We block the async queue until we got the initial
            // user and the initialization is completed. This will prevent any scheduled
            // work from happening before initialization is completed.
            // If initializationDone resolved then the FirestoreClient is in a usable
            // state.
            this.Sf = new rr
            /**
         * Starts up the FirestoreClient, returning only whether or not enabling
         * persistence succeeded.
         *
         * The intent here is to "do the right thing" as far as users are concerned.
         * Namely, in cases where offline persistence is requested and possible,
         * enable it, but otherwise fall back to persistence disabled. For the most
         * part we expect this to succeed one way or the other so we don't expect our
         * users to actually wait on the firestore.enablePersistence Promise since
         * they generally won't care.
         *
         * Of course some users actually do care about whether or not persistence
         * was successfully enabled, so the Promise returned from this method
         * indicates this outcome.
         *
         * This presents a problem though: even before enablePersistence resolves or
         * rejects, users may have made calls to e.g. firestore.collection() which
         * means that the FirestoreClient in there will be available and will be
         * enqueuing actions on the async queue.
         *
         * Meanwhile any failure of an operation on the async queue causes it to
         * panic and reject any further work, on the premise that unhandled errors
         * are fatal.
         *
         * Consequently the fallback is handled internally here in start, and if the
         * fallback succeeds we signal success to the async queue even though the
         * start() itself signals failure.
         *
         * @param databaseInfo The connection information for the current instance.
         * @param offlineComponentProvider Provider that returns all components
         * required for memory-only or IndexedDB persistence.
         * @param onlineComponentProvider Provider that returns all components
         * required for online support.
         * @param persistenceSettings Settings object to configure offline
         *     persistence.
         * @returns A deferred result indicating the user-visible result of enabling
         *     offline persistence. This method will reject this if IndexedDB fails to
         *     start for any reason. If usePersistence is false this is
         *     unconditionally resolved.
         */;
        }
        return t.prototype.start = function(t, e, n, r) {
            var i = this;
            this.Df(), this.w_ = t;
            // If usePersistence is true, certain classes of errors while starting are
            // recoverable but only by falling back to persistence disabled.
            // If there's an error in the first case but not in recovery we cannot
            // reject the promise blocking the async queue because this will cause the
            // async queue to panic.
            var o = new rr, s = !1;
            // Return only the result of enabling persistence. Note that this does not
            // need to await the completion of initializationDone because the result of
            // this method should not reflect any other kind of failure to start.
            return this.credentials.Bh((function(t) {
                if (!s) return s = !0, E$1("FirestoreClient", "Initializing. user=", t.uid), i.Cf(e, n, r, t, o).then(i.Sf.resolve, i.Sf.reject);
                i.ei.gi((function() {
                    return i.Bu.vc(t);
                }));
            })), 
            // Block the async queue until initialization is done
            this.ei.ai((function() {
                return i.Sf.promise;
            })), o.promise;
        }, 
        /** Enables the network connection and requeues all pending operations. */ t.prototype.enableNetwork = function() {
            var t = this;
            return this.Df(), this.ei.enqueue((function() {
                return t.persistence.Uo(!0), t.Bu.enableNetwork();
            }));
        }, 
        /**
         * Initializes persistent storage, attempting to use IndexedDB if
         * usePersistence is true or memory-only if false.
         *
         * If IndexedDB fails because it's already open in another tab or because the
         * platform can't possibly support our implementation then this method rejects
         * the persistenceResult and falls back on memory-only persistence.
         *
         * @param offlineComponentProvider Provider that returns all components
         * required for memory-only or IndexedDB persistence.
         * @param onlineComponentProvider Provider that returns all components
         * required for online support.
         * @param persistenceSettings Settings object to configure offline persistence
         * @param user The initial user
         * @param persistenceResult A deferred result indicating the user-visible
         *     result of enabling offline persistence. This method will reject this if
         *     IndexedDB fails to start for any reason. If usePersistence is false
         *     this is unconditionally resolved.
         * @returns a Promise indicating whether or not initialization should
         *     continue, i.e. that one of the persistence implementations actually
         *     succeeded.
         */
        t.prototype.Cf = function(t, r, i, o, s) {
            return __awaiter(this, void 0, void 0, (function() {
                var u, a, c = this;
                return __generator(this, (function(h) {
                    switch (h.label) {
                      case 0:
                        return h.trys.push([ 0, 3, , 4 ]), u = {
                            ei: this.ei,
                            w_: this.w_,
                            clientId: this.clientId,
                            credentials: this.credentials,
                            N_: o,
                            Qu: 100,
                            k_: i
                        }, [ 4 /*yield*/ , t.initialize(u) ];

                      case 1:
                        return h.sent(), [ 4 /*yield*/ , r.initialize(t, u) ];

                      case 2:
                        return h.sent(), this.persistence = t.persistence, this.Uu = t.Uu, this.La = t.La, 
                        this.S_ = t.S_, this.qa = r.qa, this.Bu = r.Bu, this.fc = r.fc, this.Nf = r.q_, 
                        // When a user calls clearPersistence() in one client, all other clients
                        // need to be terminated to allow the delete to succeed.
                        this.persistence.Bo((function() {
                            return __awaiter(c, void 0, void 0, (function() {
                                return __generator(this, (function(t) {
                                    switch (t.label) {
                                      case 0:
                                        return [ 4 /*yield*/ , this.terminate() ];

                                      case 1:
                                        return t.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })), s.resolve(), [ 3 /*break*/ , 4 ];

                      case 3:
                        // An unknown failure on the first stage shuts everything down.
                        if (a = h.sent(), 
                        // Regardless of whether or not the retry succeeds, from an user
                        // perspective, offline persistence has failed.
                        s.reject(a), !this.Ff(a)) throw a;
                        return [ 2 /*return*/ , (console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + a), 
                        this.Cf(new jo, new zo, {
                            F_: !1
                        }, o, s)) ];

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Decides whether the provided error allows us to gracefully disable
         * persistence (as opposed to crashing the client).
         */
        t.prototype.Ff = function(t) {
            return "FirebaseError" === t.name ? t.code === F$1.FAILED_PRECONDITION || t.code === F$1.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || 
            // When the browser is out of quota we could get either quota exceeded
            // or an aborted error depending on whether the error happened during
            // schema migration.
            22 === t.code || 20 === t.code || 
            // Firefox Private Browsing mode disables IndexedDb and returns
            // INVALID_STATE for any usage.
            11 === t.code;
        }, 
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */
        t.prototype.Df = function() {
            if (this.ei.mi) throw new G$1(F$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }, 
        /** Disables the network connection. Pending operations will not complete. */ t.prototype.disableNetwork = function() {
            var t = this;
            return this.Df(), this.ei.enqueue((function() {
                return t.persistence.Uo(!1), t.Bu.disableNetwork();
            }));
        }, t.prototype.terminate = function() {
            var t = this;
            this.ei.Pi();
            var r = new rr;
            return this.ei.Ii((function() {
                return __awaiter(t, void 0, void 0, (function() {
                    var t, e;
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return n.trys.push([ 0, 4, , 5 ]), 
                            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.
                            this.S_ && this.S_.stop(), [ 4 /*yield*/ , this.Bu.th() ];

                          case 1:
                            return n.sent(), [ 4 /*yield*/ , this.Uu.th() ];

                          case 2:
                            return n.sent(), [ 4 /*yield*/ , this.persistence.th() ];

                          case 3:
                            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.
                            return n.sent(), 
                            // `removeChangeListener` must be called after shutting down the
                            // RemoteStore as it will prevent the RemoteStore from retrieving
                            // auth tokens.
                            this.credentials.Uh(), r.resolve(), [ 3 /*break*/ , 5 ];

                          case 4:
                            return t = n.sent(), e = mr(t, "Failed to shutdown persistence"), r.reject(e), [ 3 /*break*/ , 5 ];

                          case 5:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), r.promise;
        }, 
        /**
         * Returns a Promise that resolves when all writes that were pending at the time this
         * method was called received server acknowledgement. An acknowledgement can be either acceptance
         * or rejection.
         */
        t.prototype.waitForPendingWrites = function() {
            var t = this;
            this.Df();
            var e = new rr;
            return this.ei.ai((function() {
                return t.fc._l(e);
            })), e.promise;
        }, t.prototype.listen = function(t, e, n) {
            var r = this;
            this.Df();
            var i = new Wo(n), o = new So(t, i, e);
            return this.ei.ai((function() {
                return r.Nf.listen(o);
            })), function() {
                i.Q_(), r.ei.ai((function() {
                    return r.Nf.lc(o);
                }));
            };
        }, t.prototype.kf = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.Df(), [ 4 /*yield*/ , this.Sf.promise ];

                      case 1:
                        return [ 2 /*return*/ , (r.sent(), function(t, r, i) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var o, s = this;
                                return __generator(this, (function(u) {
                                    switch (u.label) {
                                      case 0:
                                        return o = new rr, [ 4 /*yield*/ , t.enqueue((function() {
                                            return __awaiter(s, void 0, void 0, (function() {
                                                var t, e, s;
                                                return __generator(this, (function(n) {
                                                    switch (n.label) {
                                                      case 0:
                                                        return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t, e) {
                                                            var n = D$2(t);
                                                            return n.persistence.runTransaction("read document", "readonly", (function(t) {
                                                                return n.Rh.Hn(t, e);
                                                            }));
                                                        }(r, i) ];

                                                      case 1:
                                                        return (t = n.sent()) instanceof dn ? o.resolve(t) : t instanceof yn ? o.resolve(null) : o.reject(new G$1(F$1.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), 
                                                        [ 3 /*break*/ , 3 ];

                                                      case 2:
                                                        return e = n.sent(), s = mr(e, "Failed to get document '" + i + " from cache"), 
                                                        o.reject(s), [ 3 /*break*/ , 3 ];

                                                      case 3:
                                                        return [ 2 /*return*/ ];
                                                    }
                                                }));
                                            }));
                                        })) ];

                                      case 1:
                                        return [ 2 /*return*/ , (u.sent(), o.promise) ];
                                    }
                                }));
                            }));
                        }(this.ei, this.La, t)) ];
                    }
                }));
            }));
        }, t.prototype.$f = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.Df(), [ 4 /*yield*/ , this.Sf.promise ];

                      case 1:
                        return [ 2 /*return*/ , (e.sent(), function(t, e, n, r) {
                            var i = new rr, o = Zs(t, e, bn(n.path), {
                                includeMetadataChanges: !0,
                                $l: !0
                            }, {
                                next: function(t) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    o();
                                    var e = t.docs.has(n);
                                    !e && t.fromCache ? 
                                    // TODO(dimond): If we're online and the document doesn't
                                    // exist then we resolve with a doc.exists set to false. If
                                    // we're offline however, we reject the Promise in this
                                    // case. Two options: 1) Cache the negative response from
                                    // the server so we can deliver that even when you're
                                    // offline 2) Actually reject the Promise in the online case
                                    // if the document doesn't exist.
                                    i.reject(new G$1(F$1.UNAVAILABLE, "Failed to get document because the client is offline.")) : e && t.fromCache && r && "server" === r.source ? i.reject(new G$1(F$1.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(t);
                                },
                                error: function(t) {
                                    return i.reject(t);
                                }
                            });
                            return i.promise;
                        }(this.ei, this.Nf, t, r)) ];
                    }
                }));
            }));
        }, t.prototype.xf = function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.Df(), [ 4 /*yield*/ , this.Sf.promise ];

                      case 1:
                        return [ 2 /*return*/ , (r.sent(), function(t, r, i) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var o, s = this;
                                return __generator(this, (function(u) {
                                    switch (u.label) {
                                      case 0:
                                        return o = new rr, [ 4 /*yield*/ , t.enqueue((function() {
                                            return __awaiter(s, void 0, void 0, (function() {
                                                var t, e, s, u, a, c;
                                                return __generator(this, (function(n) {
                                                    switch (n.label) {
                                                      case 0:
                                                        return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , Ci(r, i, 
                                                        /* usePreviousResults= */ !0) ];

                                                      case 1:
                                                        return t = n.sent(), e = new lo(i, t.gh), s = e.Su(t.documents), u = e.Un(s, 
                                                        /* updateLimboDocuments= */ !1), o.resolve(u.snapshot), [ 3 /*break*/ , 3 ];

                                                      case 2:
                                                        return a = n.sent(), c = mr(a, "Failed to execute query '" + i + " against cache"), 
                                                        o.reject(c), [ 3 /*break*/ , 3 ];

                                                      case 3:
                                                        return [ 2 /*return*/ ];
                                                    }
                                                }));
                                            }));
                                        })) ];

                                      case 1:
                                        return [ 2 /*return*/ , (u.sent(), o.promise) ];
                                    }
                                }));
                            }));
                        }(this.ei, this.La, t)) ];
                    }
                }));
            }));
        }, t.prototype.Of = function(t, r) {
            return __awaiter(this, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.Df(), [ 4 /*yield*/ , this.Sf.promise ];

                      case 1:
                        return [ 2 /*return*/ , (e.sent(), function(t, e, n, r) {
                            var i = new rr, o = Zs(t, e, n, {
                                includeMetadataChanges: !0,
                                $l: !0
                            }, {
                                next: function(t) {
                                    // Remove query first before passing event to user to avoid
                                    // user actions affecting the now stale query.
                                    o(), t.fromCache && r && "server" === r.source ? i.reject(new G$1(F$1.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(t);
                                },
                                error: function(t) {
                                    return i.reject(t);
                                }
                            });
                            return i.promise;
                        }(this.ei, this.Nf, t, r)) ];
                    }
                }));
            }));
        }, t.prototype.write = function(t) {
            var e = this;
            this.Df();
            var n = new rr;
            return this.ei.ai((function() {
                return e.fc.write(t, n);
            })), n.promise;
        }, t.prototype.s = function() {
            return this.w_.s;
        }, t.prototype.bl = function(t) {
            var r = this;
            this.Df();
            var i = new Wo(t);
            return this.ei.ai((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(t) {
                        return [ 2 /*return*/ , this.Nf.bl(i) ];
                    }));
                }));
            })), function() {
                i.Q_(), r.ei.ai((function() {
                    return __awaiter(r, void 0, void 0, (function() {
                        return __generator(this, (function(t) {
                            return [ 2 /*return*/ , this.Nf.vl(i) ];
                        }));
                    }));
                }));
            };
        }, Object.defineProperty(t.prototype, "Mf", {
            get: function() {
                // Technically, the asyncQueue is still running, but only accepting operations
                // related to termination or supposed to be run after termination. It is effectively
                // terminated to the eyes of users.
                return this.ei.mi;
            },
            enumerable: !1,
            configurable: !0
        }), 
        /**
         * Takes an updateFunction in which a set of reads and writes can be performed
         * atomically. In the updateFunction, the client can read and write values
         * using the supplied transaction object. After the updateFunction, all
         * changes will be committed. If a retryable error occurs (ex: some other
         * client has changed any of the data referenced), then the updateFunction
         * will be called again after a backoff. If the updateFunction still fails
         * after all retries, then the transaction will be rejected.
         *
         * The transaction object passed to the updateFunction contains methods for
         * accessing documents and collections. Unlike other datastore access, data
         * accessed with the transaction will not reflect local changes that have not
         * been committed. For this reason, it is required that all reads are
         * performed before any writes. Transactions must be performed while online.
         */
        t.prototype.transaction = function(t) {
            var e = this;
            this.Df();
            var n = new rr;
            return this.ei.ai((function() {
                return new Ks(e.ei, e.qa, t, n).run(), Promise.resolve();
            })), n.promise;
        }, t;
    }();

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */ function Zs(t, e, n, r, i) {
        var o = new Wo(i), s = new So(n, o, r);
        return t.ai((function() {
            return e.listen(s);
        })), function() {
            o.Q_(), t.ai((function() {
                return e.lc(s);
            }));
        };
    }

    var Xs = /** @class */ function() {
        function t(t, e, n, r) {
            this.s = t, this.timestampsInSnapshots = e, this.Lf = n, this.qf = r;
        }
        return t.prototype.Bf = function(t) {
            switch (Ft(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return Ht(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.Uf(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.Qf(t);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return new ds(Kt(t.bytesValue));

              case 7 /* RefValue */ :
                return this.Wf(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.jf(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.Kf(t.arrayValue);

              case 10 /* ObjectValue */ :
                return this.Gf(t.mapValue);

              default:
                throw A$2();
            }
        }, t.prototype.Gf = function(t) {
            var e = this, n = {};
            return C$1(t.fields || {}, (function(t, r) {
                n[t] = e.Bf(r);
            })), n;
        }, t.prototype.jf = function(t) {
            return new Ss(Ht(t.latitude), Ht(t.longitude));
        }, t.prototype.Kf = function(t) {
            var e = this;
            return (t.values || []).map((function(t) {
                return e.Bf(t);
            }));
        }, t.prototype.Qf = function(t) {
            switch (this.Lf) {
              case "previous":
                var e = function t(e) {
                    var n = e.mapValue.fields.__previous_value__;
                    return Ct(n) ? t(n) : n;
                }(t);
                return null == e ? null : this.Bf(e);

              case "estimate":
                return this.Uf(qt(t));

              default:
                return null;
            }
        }, t.prototype.Uf = function(t) {
            var e = Wt(t), n = new j(e.seconds, e.nanos);
            return this.timestampsInSnapshots ? n : n.toDate();
        }, t.prototype.Wf = function(t) {
            var e = Q$1.k(t);
            S$2(Le(e));
            var n = new V$1(e.get(1), e.get(3)), r = new K$1(e.V(5));
            return n.isEqual(this.s) || 
            // TODO(b/64130202): Somehow support foreign references.
            T$2("Document " + r + " contains a document reference within a different database (" + n.projectId + "/" + n.database + ") which is not supported. It will be treated as a reference in the current database (" + this.s.projectId + "/" + this.s.database + ") instead."), 
            this.qf(r);
        }, t;
    }(), $s = Er.ji, Js = /** @class */ function() {
        function t(t) {
            var e, n, r, i;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new G$1(F$1.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = !0;
            } else Jo("settings", "non-empty string", "host", t.host), this.host = t.host, ts("settings", "boolean", "ssl", t.ssl), 
            this.ssl = null === (e = t.ssl) || void 0 === e || e;
            if (us("settings", t, [ "host", "ssl", "credentials", "timestampsInSnapshots", "cacheSizeBytes", "experimentalForceLongPolling", "ignoreUndefinedProperties" ]), 
            ts("settings", "object", "credentials", t.credentials), this.credentials = t.credentials, 
            ts("settings", "boolean", "timestampsInSnapshots", t.timestampsInSnapshots), ts("settings", "boolean", "ignoreUndefinedProperties", t.ignoreUndefinedProperties), 
            // Nobody should set timestampsInSnapshots anymore, but the error depends on
            // whether they set it to true or false...
            !0 === t.timestampsInSnapshots ? T$2("The setting 'timestampsInSnapshots: true' is no longer required and should be removed.") : !1 === t.timestampsInSnapshots && T$2("Support for 'timestampsInSnapshots: false' will be removed soon. You must update your code to handle Timestamp objects."), 
            this.timestampsInSnapshots = null === (n = t.timestampsInSnapshots) || void 0 === n || n, 
            this.ignoreUndefinedProperties = null !== (r = t.ignoreUndefinedProperties) && void 0 !== r && r, 
            ts("settings", "number", "cacheSizeBytes", t.cacheSizeBytes), void 0 === t.cacheSizeBytes) this.cacheSizeBytes = Er.Gi; else {
                if (t.cacheSizeBytes !== $s && t.cacheSizeBytes < Er.Ki) throw new G$1(F$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + Er.Ki);
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            ts("settings", "boolean", "experimentalForceLongPolling", t.experimentalForceLongPolling), 
            this.forceLongPolling = null !== (i = t.experimentalForceLongPolling) && void 0 !== i && i;
        }
        return t.prototype.isEqual = function(t) {
            return this.host === t.host && this.ssl === t.ssl && this.timestampsInSnapshots === t.timestampsInSnapshots && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.forceLongPolling === t.forceLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
        }, t;
    }(), tu = /** @class */ function() {
        // Note: We are using `MemoryComponentProvider` as a default
        // ComponentProvider to ensure backwards compatibility with the format
        // expected by the console build.
        function t(r, i, o, s) {
            var u = this;
            if (void 0 === o && (o = new jo), void 0 === s && (s = new zo), this.zf = o, this.Hf = s, 
            this.Yf = null, 
            // Public for use in tests.
            // TODO(mikelehen): Use modularized initialization instead.
            this.Jf = new gr, this.INTERNAL = {
                delete: function() {
                    return __awaiter(u, void 0, void 0, (function() {
                        return __generator(this, (function(t) {
                            switch (t.label) {
                              case 0:
                                // The client must be initalized to ensure that all subsequent API usage
                                // throws an exception.
                                return this.Xf(), [ 4 /*yield*/ , this.Zf.terminate() ];

                              case 1:
                                // The client must be initalized to ensure that all subsequent API usage
                                // throws an exception.
                                return t.sent(), [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }
            }, "object" == typeof r.options) {
                // This is very likely a Firebase app object
                // TODO(b/34177605): Can we somehow use instanceof?
                var a = r;
                this.Yf = a, this.sf = t.td(a), this.ed = a.name, this.nd = new Qi(i);
            } else {
                var c = r;
                if (!c.projectId) throw new G$1(F$1.INVALID_ARGUMENT, "Must provide projectId");
                this.sf = new V$1(c.projectId, c.database), 
                // Use a default persistenceKey that lines up with FirebaseApp.
                this.ed = "[DEFAULT]", this.nd = new zi;
            }
            this.sd = new Js({});
        }
        return Object.defineProperty(t.prototype, "rd", {
            get: function() {
                return this.od || (
                // Lazy initialize UserDataReader once the settings are frozen
                this.od = new Os(this.sf, this.sd.ignoreUndefinedProperties)), this.od;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.settings = function(t) {
            Ko("Firestore.settings", arguments, 1), Xo("Firestore.settings", "object", 1, t);
            var e = new Js(t);
            if (this.Zf && !this.sd.isEqual(e)) throw new G$1(F$1.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");
            this.sd = e, void 0 !== e.credentials && (this.nd = function(t) {
                if (!t) return new zi;
                switch (t.type) {
                  case "gapi":
                    var e = t.hd;
                    // Make sure this really is a Gapi client.
                                    return S$2(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                    new Hi(e, t.zh || "0");

                  case "provider":
                    return t.hd;

                  default:
                    throw new G$1(F$1.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
                }
            }(e.credentials));
        }, t.prototype.enableNetwork = function() {
            return this.Xf(), this.Zf.enableNetwork();
        }, t.prototype.disableNetwork = function() {
            return this.Xf(), this.Zf.disableNetwork();
        }, t.prototype.enablePersistence = function(t) {
            var e, n;
            if (this.Zf) throw new G$1(F$1.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");
            var r = !1, i = !1;
            if (t && (void 0 !== t.experimentalTabSynchronization && T$2("The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead."), 
            r = null !== (n = null !== (e = t.synchronizeTabs) && void 0 !== e ? e : t.experimentalTabSynchronization) && void 0 !== n && n, 
            i = !!t.experimentalForceOwningTab && t.experimentalForceOwningTab, r && i)) throw new G$1(F$1.INVALID_ARGUMENT, "The 'experimentalForceOwningTab' setting cannot be used with 'synchronizeTabs'.");
            return this.ad(this.zf, this.Hf, {
                F_: !0,
                cacheSizeBytes: this.sd.cacheSizeBytes,
                synchronizeTabs: r,
                Vo: i
            });
        }, t.prototype.clearPersistence = function() {
            return __awaiter(this, void 0, void 0, (function() {
                var t, r = this;
                return __generator(this, (function(i) {
                    if (void 0 !== this.Zf && !this.Zf.Mf) throw new G$1(F$1.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
                    return t = new rr, [ 2 /*return*/ , (this.Jf.Ii((function() {
                        return __awaiter(r, void 0, void 0, (function() {
                            var e;
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , this.zf.clearPersistence(this.sf, this.ed) ];

                                  case 1:
                                    return n.sent(), t.resolve(), [ 3 /*break*/ , 3 ];

                                  case 2:
                                    return e = n.sent(), t.reject(e), [ 3 /*break*/ , 3 ];

                                  case 3:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })), t.promise) ];
                }));
            }));
        }, t.prototype.terminate = function() {
            return this.app._removeServiceInstance("firestore"), this.INTERNAL.delete();
        }, Object.defineProperty(t.prototype, "ud", {
            get: function() {
                return this.Xf(), this.Zf.Mf;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.waitForPendingWrites = function() {
            return this.Xf(), this.Zf.waitForPendingWrites();
        }, t.prototype.onSnapshotsInSync = function(t) {
            if (this.Xf(), Qo(t)) return this.Zf.bl(t);
            Xo("Firestore.onSnapshotsInSync", "function", 1, t);
            var e = {
                next: t
            };
            return this.Zf.bl(e);
        }, t.prototype.Xf = function() {
            return this.Zf || 
            // Kick off starting the client but don't actually wait for it.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.ad(new jo, new zo, {
                F_: !1
            }), this.Zf;
        }, t.prototype.ld = function() {
            return new O$1(this.sf, this.ed, this.sd.host, this.sd.ssl, this.sd.forceLongPolling);
        }, t.prototype.ad = function(t, e, n) {
            var r = this.ld();
            return this.Zf = new Ys(this.nd, this.Jf), this.Zf.start(r, t, e, n);
        }, t.td = function(t) {
            if (e = t.options, !Object.prototype.hasOwnProperty.call(e, "projectId")) throw new G$1(F$1.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
            var e, n = t.options.projectId;
            /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */        if (!n || "string" != typeof n) throw new G$1(F$1.INVALID_ARGUMENT, "projectId must be a string in FirebaseApp.options");
            return new V$1(n);
        }, Object.defineProperty(t.prototype, "app", {
            get: function() {
                if (!this.Yf) throw new G$1(F$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
                return this.Yf;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.collection = function(t) {
            return Ko("Firestore.collection", arguments, 1), Xo("Firestore.collection", "non-empty string", 1, t), 
            this.Xf(), new yu(Q$1.k(t), this, 
            /* converter= */ null);
        }, t.prototype.doc = function(t) {
            return Ko("Firestore.doc", arguments, 1), Xo("Firestore.doc", "non-empty string", 1, t), 
            this.Xf(), ru._d(Q$1.k(t), this, 
            /* converter= */ null);
        }, t.prototype.collectionGroup = function(t) {
            if (Ko("Firestore.collectionGroup", arguments, 1), Xo("Firestore.collectionGroup", "non-empty string", 1, t), 
            t.indexOf("/") >= 0) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid collection ID '" + t + "' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");
            return this.Xf(), new pu(function(t) {
                return new mn(Q$1.$(), t);
            }(t), this, 
            /* converter= */ null);
        }, t.prototype.runTransaction = function(t) {
            var e = this;
            return Ko("Firestore.runTransaction", arguments, 1), Xo("Firestore.runTransaction", "function", 1, t), 
            this.Xf().transaction((function(n) {
                return t(new eu(e, n));
            }));
        }, t.prototype.batch = function() {
            return this.Xf(), new nu(this);
        }, Object.defineProperty(t, "logLevel", {
            get: function() {
                switch (I$1()) {
                  case LogLevel.DEBUG:
                    return "debug";

                  case LogLevel.ERROR:
                    return "error";

                  case LogLevel.SILENT:
                    return "silent";

                  case LogLevel.WARN:
                    return "warn";

                  case LogLevel.INFO:
                    return "info";

                  case LogLevel.VERBOSE:
                    return "verbose";

                  default:
                    // The default log level is error
                    return "error";
                }
            },
            enumerable: !1,
            configurable: !0
        }), t.setLogLevel = function(t) {
            var e;
            Ko("Firestore.setLogLevel", arguments, 1), ns("setLogLevel", [ "debug", "error", "silent", "warn", "info", "verbose" ], 1, t), 
            e = t, b.setLogLevel(e);
        }, 
        // Note: this is not a property because the minifier can't work correctly with
        // the way TypeScript compiler outputs properties.
        t.prototype.fd = function() {
            return this.sd.timestampsInSnapshots;
        }, t;
    }(), eu = /** @class */ function() {
        function t(t, e) {
            this.dd = t, this.wd = e;
        }
        return t.prototype.get = function(t) {
            var e = this;
            Ko("Transaction.get", arguments, 1);
            var n = wu("Transaction.get", t, this.dd);
            return this.wd.Af([ n.if ]).then((function(t) {
                if (!t || 1 !== t.length) return A$2();
                var r = t[0];
                if (r instanceof yn) return new ou(e.dd, n.if, null, 
                /* fromCache= */ !1, 
                /* hasPendingWrites= */ !1, n.rf);
                if (r instanceof dn) return new ou(e.dd, n.if, r, 
                /* fromCache= */ !1, 
                /* hasPendingWrites= */ !1, n.rf);
                throw A$2();
            }));
        }, t.prototype.set = function(t, e, n) {
            Zo("Transaction.set", arguments, 2, 3);
            var r = wu("Transaction.set", t, this.dd);
            n = vu("Transaction.set", n);
            var i = Iu(r.rf, e, n), o = Vs(this.dd.rd, "Transaction.set", r.if, i, null !== r.rf, n);
            return this.wd.set(r.if, o), this;
        }, t.prototype.update = function(t, e, n) {
            for (var r, i, o = [], s = 3; s < arguments.length; s++) o[s - 3] = arguments[s];
            return "string" == typeof e || e instanceof vs ? (Yo("Transaction.update", arguments, 3), 
            r = wu("Transaction.update", t, this.dd), i = Cs(this.dd.rd, "Transaction.update", r.if, e, n, o)) : (Ko("Transaction.update", arguments, 2), 
            r = wu("Transaction.update", t, this.dd), i = Us(this.dd.rd, "Transaction.update", r.if, e)), 
            this.wd.update(r.if, i), this;
        }, t.prototype.delete = function(t) {
            Ko("Transaction.delete", arguments, 1);
            var e = wu("Transaction.delete", t, this.dd);
            return this.wd.delete(e.if), this;
        }, t;
    }(), nu = /** @class */ function() {
        function t(t) {
            this.dd = t, this.Td = [], this.Ed = !1;
        }
        return t.prototype.set = function(t, e, n) {
            Zo("WriteBatch.set", arguments, 2, 3), this.md();
            var r = wu("WriteBatch.set", t, this.dd);
            n = vu("WriteBatch.set", n);
            var i = Iu(r.rf, e, n), o = Vs(this.dd.rd, "WriteBatch.set", r.if, i, null !== r.rf, n);
            return this.Td = this.Td.concat(o.hf(r.if, He.We())), this;
        }, t.prototype.update = function(t, e, n) {
            for (var r, i, o = [], s = 3; s < arguments.length; s++) o[s - 3] = arguments[s];
            return this.md(), "string" == typeof e || e instanceof vs ? (Yo("WriteBatch.update", arguments, 3), 
            r = wu("WriteBatch.update", t, this.dd), i = Cs(this.dd.rd, "WriteBatch.update", r.if, e, n, o)) : (Ko("WriteBatch.update", arguments, 2), 
            r = wu("WriteBatch.update", t, this.dd), i = Us(this.dd.rd, "WriteBatch.update", r.if, e)), 
            this.Td = this.Td.concat(i.hf(r.if, He.exists(!0))), this;
        }, t.prototype.delete = function(t) {
            Ko("WriteBatch.delete", arguments, 1), this.md();
            var e = wu("WriteBatch.delete", t, this.dd);
            return this.Td = this.Td.concat(new an(e.if, He.We())), this;
        }, t.prototype.commit = function() {
            return this.md(), this.Ed = !0, this.Td.length > 0 ? this.dd.Xf().write(this.Td) : Promise.resolve();
        }, t.prototype.md = function() {
            if (this.Ed) throw new G$1(F$1.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }, t;
    }(), ru = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            return (i = e.call(this, n.sf, t, r) || this).if = t, i.firestore = n, i.rf = r, 
            i.Zf = i.firestore.Xf(), i;
        }
        return __extends(n, e), n._d = function(t, e, r) {
            if (t.length % 2 != 0) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t.F() + " has " + t.length);
            return new n(new K$1(t), e, r);
        }, Object.defineProperty(n.prototype, "id", {
            get: function() {
                return this.if.path.S();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "parent", {
            get: function() {
                return new yu(this.if.path.p(), this.firestore, this.rf);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "path", {
            get: function() {
                return this.if.path.F();
            },
            enumerable: !1,
            configurable: !0
        }), n.prototype.collection = function(t) {
            if (Ko("DocumentReference.collection", arguments, 1), Xo("DocumentReference.collection", "non-empty string", 1, t), 
            !t) throw new G$1(F$1.INVALID_ARGUMENT, "Must provide a non-empty collection name to collection()");
            var e = Q$1.k(t);
            return new yu(this.if.path.child(e), this.firestore, 
            /* converter= */ null);
        }, n.prototype.isEqual = function(t) {
            if (!(t instanceof n)) throw as("isEqual", "DocumentReference", 1, t);
            return this.firestore === t.firestore && this.if.isEqual(t.if) && this.rf === t.rf;
        }, n.prototype.set = function(t, e) {
            Zo("DocumentReference.set", arguments, 1, 2), e = vu("DocumentReference.set", e);
            var n = Iu(this.rf, t, e), r = Vs(this.firestore.rd, "DocumentReference.set", this.if, n, null !== this.rf, e);
            return this.Zf.write(r.hf(this.if, He.We()));
        }, n.prototype.update = function(t, e) {
            for (var n, r = [], i = 2; i < arguments.length; i++) r[i - 2] = arguments[i];
            return "string" == typeof t || t instanceof vs ? (Yo("DocumentReference.update", arguments, 2), 
            n = Cs(this.firestore.rd, "DocumentReference.update", this.if, t, e, r)) : (Ko("DocumentReference.update", arguments, 1), 
            n = Us(this.firestore.rd, "DocumentReference.update", this.if, t)), this.Zf.write(n.hf(this.if, He.exists(!0)));
        }, n.prototype.delete = function() {
            return Ko("DocumentReference.delete", arguments, 0), this.Zf.write([ new an(this.if, He.We()) ]);
        }, n.prototype.onSnapshot = function() {
            for (var t, e, n, r = this, i = [], o = 0; o < arguments.length; o++) i[o] = arguments[o];
            Zo("DocumentReference.onSnapshot", arguments, 1, 4);
            var s = {
                includeMetadataChanges: !1
            }, u = 0;
            "object" != typeof i[u] || Qo(i[u]) || (us("DocumentReference.onSnapshot", s = i[u], [ "includeMetadataChanges" ]), 
            ts("DocumentReference.onSnapshot", "boolean", "includeMetadataChanges", s.includeMetadataChanges), 
            u++);
            var a = {
                includeMetadataChanges: s.includeMetadataChanges
            };
            if (Qo(i[u])) {
                var c = i[u];
                i[u] = null === (t = c.next) || void 0 === t ? void 0 : t.bind(c), i[u + 1] = null === (e = c.error) || void 0 === e ? void 0 : e.bind(c), 
                i[u + 2] = null === (n = c.complete) || void 0 === n ? void 0 : n.bind(c);
            } else Xo("DocumentReference.onSnapshot", "function", u, i[u]), $o("DocumentReference.onSnapshot", "function", u + 1, i[u + 1]), 
            $o("DocumentReference.onSnapshot", "function", u + 2, i[u + 2]);
            var h = {
                next: function(t) {
                    i[u] && i[u](r.Id(t));
                },
                error: i[u + 1],
                complete: i[u + 2]
            };
            return this.Zf.listen(bn(this.if.path), a, h);
        }, n.prototype.get = function(t) {
            var e = this;
            Zo("DocumentReference.get", arguments, 0, 1), mu("DocumentReference.get", t);
            var n = this.firestore.Xf();
            return t && "cache" === t.source ? n.kf(this.if).then((function(t) {
                return new ou(e.firestore, e.if, t, 
                /*fromCache=*/ !0, t instanceof dn && t.Ge, e.rf);
            })) : n.$f(this.if, t).then((function(t) {
                return e.Id(t);
            }));
        }, n.prototype.withConverter = function(t) {
            return new n(this.if, this.firestore, t);
        }, 
        /**
         * Converts a ViewSnapshot that contains the current document to a
         * DocumentSnapshot.
         */
        n.prototype.Id = function(t) {
            var e = t.docs.get(this.if);
            return new ou(this.firestore, this.if, e, t.fromCache, t.hasPendingWrites, this.rf);
        }, n;
    }(ks), iu = /** @class */ function() {
        function t(t, e) {
            this.hasPendingWrites = t, this.fromCache = e;
        }
        return t.prototype.isEqual = function(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }, t;
    }(), ou = /** @class */ function() {
        function t(t, e, n, r, i, o) {
            this.dd = t, this.if = e, this.Ad = n, this.Rd = r, this.Pd = i, this.rf = o;
        }
        return t.prototype.data = function(t) {
            var e = this;
            if (Zo("DocumentSnapshot.data", arguments, 0, 1), t = gu("DocumentSnapshot.data", t), 
            this.Ad) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                if (this.rf) {
                    var n = new su(this.dd, this.if, this.Ad, this.Rd, this.Pd, 
                    /* converter= */ null);
                    return this.rf.fromFirestore(n, t);
                }
                return new Xs(this.dd.sf, this.dd.fd(), t.serverTimestamps || "none", (function(t) {
                    return new ru(t, e.dd, /* converter= */ null);
                })).Bf(this.Ad.tn());
            }
        }, t.prototype.get = function(t, e) {
            var n = this;
            if (Zo("DocumentSnapshot.get", arguments, 1, 2), e = gu("DocumentSnapshot.get", e), 
            this.Ad) {
                var r = this.Ad.data().field(Bs("DocumentSnapshot.get", t, this.if));
                if (null !== r) return new Xs(this.dd.sf, this.dd.fd(), e.serverTimestamps || "none", (function(t) {
                    return new ru(t, n.dd, n.rf);
                })).Bf(r);
            }
        }, Object.defineProperty(t.prototype, "id", {
            get: function() {
                return this.if.path.S();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ref", {
            get: function() {
                return new ru(this.if, this.dd, this.rf);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "exists", {
            get: function() {
                return null !== this.Ad;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "metadata", {
            get: function() {
                return new iu(this.Pd, this.Rd);
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) throw as("isEqual", "DocumentSnapshot", 1, e);
            return this.dd === e.dd && this.Rd === e.Rd && this.if.isEqual(e.if) && (null === this.Ad ? null === e.Ad : this.Ad.isEqual(e.Ad)) && this.rf === e.rf;
        }, t;
    }(), su = /** @class */ function(e) {
        function n() {
            return null !== e && e.apply(this, arguments) || this;
        }
        return __extends(n, e), n.prototype.data = function(t) {
            return e.prototype.data.call(this, t);
        }, n;
    }(ou);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    function uu(t, e, n, r, i, o, s) {
        var u;
        if (i.M()) {
            if ("array-contains" /* ARRAY_CONTAINS */ === o || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === o) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
            if ("in" /* IN */ === o || "not-in" /* NOT_IN */ === o) {
                hu(s, o);
                for (var a = [], c = 0, h = s; c < h.length; c++) {
                    var f = h[c];
                    a.push(cu(r, t, f));
                }
                u = {
                    arrayValue: {
                        values: a
                    }
                };
            } else u = cu(r, t, s);
        } else "in" /* IN */ !== o && "not-in" /* NOT_IN */ !== o && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== o || hu(s, o), 
        u = qs(n, e, s, 
        /* allowArrays= */ "in" /* IN */ === o || "not-in" /* NOT_IN */ === o);
        var l = Pn.create(i, o, u);
        return function(t, e) {
            if (e._n()) {
                var n = t.ln();
                if (null !== n && !n.isEqual(e.field)) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '" + n.toString() + "' and '" + e.field.toString() + "'");
                var r = t.un();
                null !== r && fu(t, e.field, r);
            }
            var i = t.fn(
            /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
     * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
     *
     * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
     * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
     */
            function(t) {
                switch (t) {
                  case "!=" /* NOT_EQUAL */ :
                    return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                  case "array-contains" /* ARRAY_CONTAINS */ :
                    return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                  case "in" /* IN */ :
                    return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                  case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                    return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                  case "not-in" /* NOT_IN */ :
                    return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                  default:
                    return [];
                }
            }(e.op));
            if (null !== i) 
            // Special case when it's a duplicate op to give a slightly clearer error message.
            throw i === e.op ? new G$1(F$1.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e.op.toString() + "' filter.") : new G$1(F$1.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e.op.toString() + "' filters with '" + i.toString() + "' filters.");
        }(t, l), l;
    }

    function au(t, e, n) {
        if (null !== t.startAt) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
        if (null !== t.endAt) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
        var r = new Qn(e, n);
        return function(t, e) {
            if (null === t.un()) {
                // This is the first order by. It must match any inequality.
                var n = t.ln();
                null !== n && fu(t, n, e.field);
            }
        }(t, r), r
        /**
     * Create a Bound from a query and a document.
     *
     * Note that the Bound will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */
        /**
     * Parses the given documentIdValue into a ReferenceValue, throwing
     * appropriate errors if the value is anything other than a DocumentReference
     * or String, or if the string is malformed.
     */;
    }

    function cu(t, e, n) {
        if ("string" == typeof n) {
            if ("" === n) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!In(e) && -1 !== n.indexOf("/")) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n + "' contains a '/' character.");
            var r = e.path.child(Q$1.k(n));
            if (!K$1.j(r)) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r + "' is not because it has an odd number of segments (" + r.length + ").");
            return Yt(t, new K$1(r));
        }
        if (n instanceof ks) return Yt(t, n.if);
        throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + os(n) + ".");
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function hu(t, e) {
        if (!Array.isArray(t) || 0 === t.length) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
        if (t.length > 10) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
        if ("in" /* IN */ === e || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e) {
            if (t.indexOf(null) >= 0) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters cannot contain 'null' in the value array.");
            if (t.filter((function(t) {
                return Number.isNaN(t);
            })).length > 0) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters cannot contain 'NaN' in the value array.");
        }
    }

    function fu(t, e, n) {
        if (!n.isEqual(e)) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first orderBy(), but your first orderBy() is on field '" + n.toString() + "' instead.");
    }

    function lu(t) {
        if (t.cn() && 0 === t.en.length) throw new G$1(F$1.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }

    var pu = /** @class */ function() {
        function t(t, e, n) {
            this.gd = t, this.firestore = e, this.rf = n;
        }
        return t.prototype.where = function(e, n, r) {
            // TODO(ne-queries): Add 'not-in' and '!=' to validation.
            var i;
            Ko("Query.where", arguments, 3), ss("Query.where", 3, r), i = "not-in" === n || "!=" === n ? n : ns("Query.where", [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , "==" /* EQUAL */ , ">=" /* GREATER_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , "array-contains" /* ARRAY_CONTAINS */ , "in" /* IN */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ ], 2, n);
            var o = Bs("Query.where", e), s = uu(this.gd, "Query.where", this.firestore.rd, this.firestore.sf, o, i, r);
            return new t(function(t, e) {
                var n = t.filters.concat([ e ]);
                return new mn(t.path, t.collectionGroup, t.en.slice(), n, t.limit, t.nn, t.startAt, t.endAt);
            }(this.gd, s), this.firestore, this.rf);
        }, t.prototype.orderBy = function(e, n) {
            var r;
            if (Zo("Query.orderBy", arguments, 1, 2), $o("Query.orderBy", "non-empty string", 2, n), 
            void 0 === n || "asc" === n) r = "asc" /* ASCENDING */; else {
                if ("desc" !== n) throw new G$1(F$1.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + n + "', expected 'asc' or 'desc'.");
                r = "desc" /* DESCENDING */;
            }
            var i = Bs("Query.orderBy", e), o = au(this.gd, i, r);
            return new t(function(t, e) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                var n = t.en.concat([ e ]);
                return new mn(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.nn, t.startAt, t.endAt);
            }(this.gd, o), this.firestore, this.rf);
        }, t.prototype.limit = function(e) {
            return Ko("Query.limit", arguments, 1), Xo("Query.limit", "number", 1, e), cs("Query.limit", 1, e), 
            new t(Nn(this.gd, e, "F" /* First */), this.firestore, this.rf);
        }, t.prototype.limitToLast = function(e) {
            return Ko("Query.limitToLast", arguments, 1), Xo("Query.limitToLast", "number", 1, e), 
            cs("Query.limitToLast", 1, e), new t(Nn(this.gd, e, "L" /* Last */), this.firestore, this.rf);
        }, t.prototype.startAt = function(e) {
            for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
            Yo("Query.startAt", arguments, 1);
            var i = this.Vd("Query.startAt", e, n, 
            /*before=*/ !0);
            return new t(_n(this.gd, i), this.firestore, this.rf);
        }, t.prototype.startAfter = function(e) {
            for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
            Yo("Query.startAfter", arguments, 1);
            var i = this.Vd("Query.startAfter", e, n, 
            /*before=*/ !1);
            return new t(_n(this.gd, i), this.firestore, this.rf);
        }, t.prototype.endBefore = function(e) {
            for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
            Yo("Query.endBefore", arguments, 1);
            var i = this.Vd("Query.endBefore", e, n, 
            /*before=*/ !0);
            return new t(An(this.gd, i), this.firestore, this.rf);
        }, t.prototype.endAt = function(e) {
            for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
            Yo("Query.endAt", arguments, 1);
            var i = this.Vd("Query.endAt", e, n, 
            /*before=*/ !1);
            return new t(An(this.gd, i), this.firestore, this.rf);
        }, t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) throw as("isEqual", "Query", 1, e);
            return this.firestore === e.firestore && Sn(this.gd, e.gd) && this.rf === e.rf;
        }, t.prototype.withConverter = function(e) {
            return new t(this.gd, this.firestore, e);
        }, 
        /** Helper function to create a bound from a document or fields */ t.prototype.Vd = function(t, e, n, i) {
            if (ss(t, 1, e), e instanceof ou) return Ko(t, __spreadArrays([ e ], n), 1), function(t, e, n, r, i) {
                if (!r) throw new G$1(F$1.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n + "().");
                // Because people expect to continue/end a query at the exact document
                // provided, we need to use the implicit sort order rather than the explicit
                // sort order, because it's guaranteed to contain the document key. That way
                // the position becomes unambiguous and the query continues/ends exactly at
                // the provided document. Without the key (by using the explicit sort
                // orders), multiple documents could match the position, yielding duplicate
                // results.
                for (var o = [], s = 0, u = En(t); s < u.length; s++) {
                    var a = u[s];
                    if (a.field.M()) o.push(Yt(e, r.key)); else {
                        var c = r.field(a.field);
                        if (Ct(c)) throw new G$1(F$1.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                        if (null === c) {
                            var h = a.field.F();
                            throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
                        }
                        o.push(c);
                    }
                }
                return new Gn(o, i);
            }(this.gd, this.firestore.sf, t, e.Ad, i);
            var o = [ e ].concat(n);
            return function(t, e, n, r, i, o) {
                // Use explicit order by's because it has to match the query the user made
                var s = t.en;
                if (i.length > s.length) throw new G$1(F$1.INVALID_ARGUMENT, "Too many arguments provided to " + r + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
                for (var u = [], a = 0; a < i.length; a++) {
                    var c = i[a];
                    if (s[a].field.M()) {
                        if ("string" != typeof c) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r + "(), but got a " + typeof c);
                        if (!In(t) && -1 !== c.indexOf("/")) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r + "() must be a plain document ID, but '" + c + "' contains a slash.");
                        var h = t.path.child(Q$1.k(c));
                        if (!K$1.j(h)) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
                        var f = new K$1(h);
                        u.push(Yt(e, f));
                    } else {
                        var l = qs(n, r, c);
                        u.push(l);
                    }
                }
                return new Gn(u, o);
            }(this.gd, this.firestore.sf, this.firestore.rd, t, o, i);
        }, t.prototype.onSnapshot = function() {
            for (var t, e, n, r = this, i = [], o = 0; o < arguments.length; o++) i[o] = arguments[o];
            Zo("Query.onSnapshot", arguments, 1, 4);
            var s = {}, u = 0;
            if ("object" != typeof i[u] || Qo(i[u]) || (us("Query.onSnapshot", s = i[u], [ "includeMetadataChanges" ]), 
            ts("Query.onSnapshot", "boolean", "includeMetadataChanges", s.includeMetadataChanges), 
            u++), Qo(i[u])) {
                var a = i[u];
                i[u] = null === (t = a.next) || void 0 === t ? void 0 : t.bind(a), i[u + 1] = null === (e = a.error) || void 0 === e ? void 0 : e.bind(a), 
                i[u + 2] = null === (n = a.complete) || void 0 === n ? void 0 : n.bind(a);
            } else Xo("Query.onSnapshot", "function", u, i[u]), $o("Query.onSnapshot", "function", u + 1, i[u + 1]), 
            $o("Query.onSnapshot", "function", u + 2, i[u + 2]);
            var c = {
                next: function(t) {
                    i[u] && i[u](new du(r.firestore, r.gd, t, r.rf));
                },
                error: i[u + 1],
                complete: i[u + 2]
            };
            return lu(this.gd), this.firestore.Xf().listen(this.gd, s, c);
        }, t.prototype.get = function(t) {
            var e = this;
            Zo("Query.get", arguments, 0, 1), mu("Query.get", t), lu(this.gd);
            var n = this.firestore.Xf();
            return (t && "cache" === t.source ? n.xf(this.gd) : n.Of(this.gd, t)).then((function(t) {
                return new du(e.firestore, e.gd, t, e.rf);
            }));
        }, t;
    }(), du = /** @class */ function() {
        function t(t, e, n, r) {
            this.dd = t, this.yd = e, this.pd = n, this.rf = r, this.bd = null, this.vd = null, 
            this.metadata = new iu(n.hasPendingWrites, n.fromCache);
        }
        return Object.defineProperty(t.prototype, "docs", {
            get: function() {
                var t = [];
                return this.forEach((function(e) {
                    return t.push(e);
                })), t;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "empty", {
            get: function() {
                return this.pd.docs._();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.pd.docs.size;
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.forEach = function(t, e) {
            var n = this;
            Zo("QuerySnapshot.forEach", arguments, 1, 2), Xo("QuerySnapshot.forEach", "function", 1, t), 
            this.pd.docs.forEach((function(r) {
                t.call(e, n.Sd(r, n.metadata.fromCache, n.pd.qt.has(r.key)));
            }));
        }, Object.defineProperty(t.prototype, "query", {
            get: function() {
                return new pu(this.yd, this.dd, this.rf);
            },
            enumerable: !1,
            configurable: !0
        }), t.prototype.docChanges = function(t) {
            t && (us("QuerySnapshot.docChanges", t, [ "includeMetadataChanges" ]), ts("QuerySnapshot.docChanges", "boolean", "includeMetadataChanges", t.includeMetadataChanges));
            var e = !(!t || !t.includeMetadataChanges);
            if (e && this.pd.Ut) throw new G$1(F$1.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this.bd && this.vd === e || (this.bd = 
            /**
         * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.
         *
         * Exported for testing.
         *
         * @param snapshot The ViewSnapshot that represents the expected state.
         * @param includeMetadataChanges Whether to include metadata changes.
         * @param converter A factory function that returns a QueryDocumentSnapshot.
         * @return An objecyt that matches the firestore.DocumentChange API.
         */
            function(t, e, n) {
                if (t.Lt._()) {
                    // Special case the first snapshot because index calculation is easy and
                    // fast
                    var r = 0;
                    return t.docChanges.map((function(e) {
                        var i = n(e.doc, t.fromCache, t.qt.has(e.doc.key));
                        return e.doc, {
                            type: "added",
                            doc: i,
                            oldIndex: -1,
                            newIndex: r++
                        };
                    }));
                }
                // A DocumentSet that is updated incrementally as changes are applied to use
                // to lookup the index of a document.
                var i = t.Lt;
                return t.docChanges.filter((function(t) {
                    return e || 3 /* Metadata */ !== t.type;
                })).map((function(e) {
                    var r = n(e.doc, t.fromCache, t.qt.has(e.doc.key)), o = -1, s = -1;
                    return 0 /* Added */ !== e.type && (o = i.indexOf(e.doc.key), i = i.delete(e.doc.key)), 
                    1 /* Removed */ !== e.type && (s = (i = i.add(e.doc)).indexOf(e.doc.key)), {
                        type: bu(e.type),
                        doc: r,
                        oldIndex: o,
                        newIndex: s
                    };
                }));
            }(this.pd, e, this.Sd.bind(this)), this.vd = e), this.bd;
        }, 
        /** Check the equality. The call can be very expensive. */ t.prototype.isEqual = function(e) {
            if (!(e instanceof t)) throw as("isEqual", "QuerySnapshot", 1, e);
            return this.dd === e.dd && Sn(this.yd, e.yd) && this.pd.isEqual(e.pd) && this.rf === e.rf;
        }, t.prototype.Sd = function(t, e, n) {
            return new su(this.dd, t.key, t, e, n, this.rf);
        }, t;
    }(), yu = /** @class */ function(e) {
        function n(t, n, r) {
            var i = this;
            if ((i = e.call(this, bn(t), n, r) || this).Dd = t, t.length % 2 != 1) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t.F() + " has " + t.length);
            return i;
        }
        return __extends(n, e), Object.defineProperty(n.prototype, "id", {
            get: function() {
                return this.gd.path.S();
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "parent", {
            get: function() {
                var t = this.gd.path.p();
                return t._() ? null : new ru(new K$1(t), this.firestore, 
                /* converter= */ null);
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(n.prototype, "path", {
            get: function() {
                return this.gd.path.F();
            },
            enumerable: !1,
            configurable: !0
        }), n.prototype.doc = function(t) {
            Zo("CollectionReference.doc", arguments, 0, 1), 
            // We allow omission of 'pathString' but explicitly prohibit passing in both
            // 'undefined' and 'null'.
            0 === arguments.length && (t = x$1.t()), Xo("CollectionReference.doc", "non-empty string", 1, t);
            var e = Q$1.k(t);
            return ru._d(this.gd.path.child(e), this.firestore, this.rf);
        }, n.prototype.add = function(t) {
            Ko("CollectionReference.add", arguments, 1), Xo("CollectionReference.add", "object", 1, this.rf ? this.rf.toFirestore(t) : t);
            var e = this.doc();
            return e.set(t).then((function() {
                return e;
            }));
        }, n.prototype.withConverter = function(t) {
            return new n(this.Dd, this.firestore, t);
        }, n;
    }(pu);

    function vu(t, e) {
        if (void 0 === e) return {
            merge: !1
        };
        if (us(t, e, [ "merge", "mergeFields" ]), ts(t, "boolean", "merge", e.merge), function(t, e, n, r, i) {
            void 0 !== r && function(t, e, n, r, i) {
                if (!(r instanceof Array)) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires its " + e + " option to be an array, but it was: " + os(r));
                for (var o = 0; o < r.length; ++o) if (!i(r[o])) throw new G$1(F$1.INVALID_ARGUMENT, "Function " + t + "() requires all " + e + " elements to be " + n + ", but the value at index " + o + " was: " + os(r[o]));
            }(t, e, n, r, i);
        }(t, "mergeFields", "a string or a FieldPath", e.mergeFields, (function(t) {
            return "string" == typeof t || t instanceof vs;
        })), void 0 !== e.mergeFields && void 0 !== e.merge) throw new G$1(F$1.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
        return e;
    }

    function gu(t, e) {
        return void 0 === e ? {} : (us(t, e, [ "serverTimestamps" ]), es(t, 0, "serverTimestamps", e.serverTimestamps, [ "estimate", "previous", "none" ]), 
        e);
    }

    function mu(t, e) {
        $o(t, "object", 1, e), e && (us(t, e, [ "source" ]), es(t, 0, "source", e.source, [ "default", "server", "cache" ]));
    }

    function wu(t, e, n) {
        if (e instanceof ks) {
            if (e.firestore !== n) throw new G$1(F$1.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
            return e;
        }
        throw as(t, "DocumentReference", 1, e);
    }

    function bu(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return A$2();
        }
    }

    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function Iu(t, e, n) {
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e;
    }

    var Eu = {
        Firestore: tu,
        GeoPoint: Ss,
        Timestamp: j,
        Blob: ds,
        Transaction: eu,
        WriteBatch: nu,
        DocumentReference: ru,
        DocumentSnapshot: ou,
        Query: pu,
        QueryDocumentSnapshot: su,
        QuerySnapshot: du,
        CollectionReference: yu,
        FieldPath: vs,
        FieldValue: _s,
        setLogLevel: tu.setLogLevel,
        CACHE_SIZE_UNLIMITED: $s
    };

    /**
     * Configures Firestore as part of the Firebase SDK by calling registerService.
     *
     * @param firebase The FirebaseNamespace to register Firestore with
     * @param firestoreFactory A factory function that returns a new Firestore
     *    instance.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Registers the main Firestore build with the components framework.
     * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
     */ function Tu(t) {
        !function(t, e) {
            t.INTERNAL.registerComponent(new Component("firestore", (function(t) {
                return function(t, e) {
                    var n = new zo, r = new Bo(n);
                    return new tu(t, e, r, n);
                }(t.getProvider("app").getImmediate(), t.getProvider("auth-internal"));
            }), "PUBLIC" /* PUBLIC */).setServiceProps(Object.assign({}, Eu)));
        }(t), t.registerVersion("@firebase/firestore", "1.16.5");
    }

    Tu(firebase$1);

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Constants used in the Firebase Storage library.
     */
    /**
     * Domain name for firebase storage.
     */
    var DEFAULT_HOST = 'firebasestorage.googleapis.com';
    /**
     * The key in Firebase config json for the storage bucket.
     */
    var CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
    /**
     * 2 minutes
     *
     * The timeout for all operations except upload.
     */
    var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
    /**
     * 10 minutes
     *
     * The timeout for upload.
     */
    var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FirebaseStorageError = /** @class */ (function () {
        function FirebaseStorageError(code, message) {
            this.code_ = prependCode(code);
            this.message_ = 'Firebase Storage: ' + message;
            this.serverResponse_ = null;
            this.name_ = 'FirebaseError';
        }
        FirebaseStorageError.prototype.codeProp = function () {
            return this.code;
        };
        FirebaseStorageError.prototype.codeEquals = function (code) {
            return prependCode(code) === this.codeProp();
        };
        FirebaseStorageError.prototype.serverResponseProp = function () {
            return this.serverResponse_;
        };
        FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {
            this.serverResponse_ = serverResponse;
        };
        Object.defineProperty(FirebaseStorageError.prototype, "name", {
            get: function () {
                return this.name_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseStorageError.prototype, "code", {
            get: function () {
                return this.code_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseStorageError.prototype, "message", {
            get: function () {
                if (this.serverResponse_) {
                    return this.message_ + '\n' + this.serverResponse_;
                }
                else {
                    return this.message_;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
            get: function () {
                return this.serverResponse_;
            },
            enumerable: false,
            configurable: true
        });
        return FirebaseStorageError;
    }());
    var Code = {
        // Shared between all platforms
        UNKNOWN: 'unknown',
        OBJECT_NOT_FOUND: 'object-not-found',
        BUCKET_NOT_FOUND: 'bucket-not-found',
        PROJECT_NOT_FOUND: 'project-not-found',
        QUOTA_EXCEEDED: 'quota-exceeded',
        UNAUTHENTICATED: 'unauthenticated',
        UNAUTHORIZED: 'unauthorized',
        RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
        INVALID_CHECKSUM: 'invalid-checksum',
        CANCELED: 'canceled',
        // JS specific
        INVALID_EVENT_NAME: 'invalid-event-name',
        INVALID_URL: 'invalid-url',
        INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
        NO_DEFAULT_BUCKET: 'no-default-bucket',
        CANNOT_SLICE_BLOB: 'cannot-slice-blob',
        SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
        NO_DOWNLOAD_URL: 'no-download-url',
        INVALID_ARGUMENT: 'invalid-argument',
        INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
        APP_DELETED: 'app-deleted',
        INVALID_ROOT_OPERATION: 'invalid-root-operation',
        INVALID_FORMAT: 'invalid-format',
        INTERNAL_ERROR: 'internal-error'
    };
    function prependCode(code) {
        return 'storage/' + code;
    }
    function unknown() {
        var message = 'An unknown error occurred, please check the error payload for ' +
            'server response.';
        return new FirebaseStorageError(Code.UNKNOWN, message);
    }
    function objectNotFound(path) {
        return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
    }
    function quotaExceeded(bucket) {
        return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" +
            bucket +
            "' exceeded, please view quota on " +
            'https://firebase.google.com/pricing/.');
    }
    function unauthenticated() {
        var message = 'User is not authenticated, please authenticate using Firebase ' +
            'Authentication and try again.';
        return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
    }
    function unauthorized(path) {
        return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
    }
    function retryLimitExceeded() {
        return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
    }
    function canceled() {
        return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
    }
    function invalidUrl(url) {
        return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
    }
    function invalidDefaultBucket(bucket) {
        return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
    }
    function cannotSliceBlob() {
        return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
    }
    function serverFileWrongSize() {
        return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
    }
    function noDownloadURL() {
        return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
    }
    function invalidArgument(index, fnName, message) {
        return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
    }
    function invalidArgumentCount(argMin, argMax, fnName, real) {
        var countPart;
        var plural;
        if (argMin === argMax) {
            countPart = argMin;
            plural = argMin === 1 ? 'argument' : 'arguments';
        }
        else {
            countPart = 'between ' + argMin + ' and ' + argMax;
            plural = 'arguments';
        }
        return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' +
            fnName +
            '`: Expected ' +
            countPart +
            ' ' +
            plural +
            ', received ' +
            real +
            '.');
    }
    function appDeleted() {
        return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
    }
    /**
     * @param name The name of the operation that was invalid.
     */
    function invalidRootOperation(name) {
        return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" +
            name +
            "' cannot be performed on a root reference, create a non-root " +
            "reference using child, such as .child('file.png').");
    }
    /**
     * @param format The format that was not valid.
     * @param message A message describing the format violation.
     */
    function invalidFormat(format, message) {
        return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
    }
    /**
     * @param message A message describing the internal error.
     */
    function internalError(message) {
        throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StringFormat = {
        RAW: 'raw',
        BASE64: 'base64',
        BASE64URL: 'base64url',
        DATA_URL: 'data_url'
    };
    function formatValidator(stringFormat) {
        switch (stringFormat) {
            case StringFormat.RAW:
            case StringFormat.BASE64:
            case StringFormat.BASE64URL:
            case StringFormat.DATA_URL:
                return;
            default:
                throw ('Expected one of the event types: [' +
                    StringFormat.RAW +
                    ', ' +
                    StringFormat.BASE64 +
                    ', ' +
                    StringFormat.BASE64URL +
                    ', ' +
                    StringFormat.DATA_URL +
                    '].');
        }
    }
    /**
     * @struct
     */
    var StringData = /** @class */ (function () {
        function StringData(data, contentType) {
            this.data = data;
            this.contentType = contentType || null;
        }
        return StringData;
    }());
    function dataFromString(format, stringData) {
        switch (format) {
            case StringFormat.RAW:
                return new StringData(utf8Bytes_(stringData));
            case StringFormat.BASE64:
            case StringFormat.BASE64URL:
                return new StringData(base64Bytes_(format, stringData));
            case StringFormat.DATA_URL:
                return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
            // do nothing
        }
        // assert(false);
        throw unknown();
    }
    function utf8Bytes_(value) {
        var b = [];
        for (var i = 0; i < value.length; i++) {
            var c = value.charCodeAt(i);
            if (c <= 127) {
                b.push(c);
            }
            else {
                if (c <= 2047) {
                    b.push(192 | (c >> 6), 128 | (c & 63));
                }
                else {
                    if ((c & 64512) === 55296) {
                        // The start of a surrogate pair.
                        var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                        if (!valid) {
                            // The second surrogate wasn't there.
                            b.push(239, 191, 189);
                        }
                        else {
                            var hi = c;
                            var lo = value.charCodeAt(++i);
                            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                            b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                    else {
                        if ((c & 64512) === 56320) {
                            // Invalid low surrogate.
                            b.push(239, 191, 189);
                        }
                        else {
                            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                        }
                    }
                }
            }
        }
        return new Uint8Array(b);
    }
    function percentEncodedBytes_(value) {
        var decoded;
        try {
            decoded = decodeURIComponent(value);
        }
        catch (e) {
            throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
        }
        return utf8Bytes_(decoded);
    }
    function base64Bytes_(format, value) {
        switch (format) {
            case StringFormat.BASE64: {
                var hasMinus = value.indexOf('-') !== -1;
                var hasUnder = value.indexOf('_') !== -1;
                if (hasMinus || hasUnder) {
                    var invalidChar = hasMinus ? '-' : '_';
                    throw invalidFormat(format, "Invalid character '" +
                        invalidChar +
                        "' found: is it base64url encoded?");
                }
                break;
            }
            case StringFormat.BASE64URL: {
                var hasPlus = value.indexOf('+') !== -1;
                var hasSlash = value.indexOf('/') !== -1;
                if (hasPlus || hasSlash) {
                    var invalidChar = hasPlus ? '+' : '/';
                    throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
                }
                value = value.replace(/-/g, '+').replace(/_/g, '/');
                break;
            }
            // do nothing
        }
        var bytes;
        try {
            bytes = atob(value);
        }
        catch (e) {
            throw invalidFormat(format, 'Invalid character found');
        }
        var array = new Uint8Array(bytes.length);
        for (var i = 0; i < bytes.length; i++) {
            array[i] = bytes.charCodeAt(i);
        }
        return array;
    }
    /**
     * @struct
     */
    var DataURLParts = /** @class */ (function () {
        function DataURLParts(dataURL) {
            this.base64 = false;
            this.contentType = null;
            var matches = dataURL.match(/^data:([^,]+)?,/);
            if (matches === null) {
                throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
            }
            var middle = matches[1] || null;
            if (middle != null) {
                this.base64 = endsWith(middle, ';base64');
                this.contentType = this.base64
                    ? middle.substring(0, middle.length - ';base64'.length)
                    : middle;
            }
            this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
        }
        return DataURLParts;
    }());
    function dataURLBytes_(dataUrl) {
        var parts = new DataURLParts(dataUrl);
        if (parts.base64) {
            return base64Bytes_(StringFormat.BASE64, parts.rest);
        }
        else {
            return percentEncodedBytes_(parts.rest);
        }
    }
    function dataURLContentType_(dataUrl) {
        var parts = new DataURLParts(dataUrl);
        return parts.contentType;
    }
    function endsWith(s, end) {
        var longEnough = s.length >= end.length;
        if (!longEnough) {
            return false;
        }
        return s.substring(s.length - end.length) === end;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskEvent = {
        /** Triggered whenever the task changes or progress is updated. */
        STATE_CHANGED: 'state_changed'
    };
    var InternalTaskState = {
        RUNNING: 'running',
        PAUSING: 'pausing',
        PAUSED: 'paused',
        SUCCESS: 'success',
        CANCELING: 'canceling',
        CANCELED: 'canceled',
        ERROR: 'error'
    };
    var TaskState = {
        /** The task is currently transferring data. */
        RUNNING: 'running',
        /** The task was paused by the user. */
        PAUSED: 'paused',
        /** The task completed successfully. */
        SUCCESS: 'success',
        /** The task was canceled. */
        CANCELED: 'canceled',
        /** The task failed with an error. */
        ERROR: 'error'
    };
    function taskStateFromInternalTaskState(state) {
        switch (state) {
            case InternalTaskState.RUNNING:
            case InternalTaskState.PAUSING:
            case InternalTaskState.CANCELING:
                return TaskState.RUNNING;
            case InternalTaskState.PAUSED:
                return TaskState.PAUSED;
            case InternalTaskState.SUCCESS:
                return TaskState.SUCCESS;
            case InternalTaskState.CANCELED:
                return TaskState.CANCELED;
            case InternalTaskState.ERROR:
                return TaskState.ERROR;
            default:
                // TODO(andysoto): assert(false);
                return TaskState.ERROR;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @return False if the object is undefined or null, true otherwise.
     */
    function isDef(p) {
        return p != null;
    }
    function isJustDef(p) {
        return p !== void 0;
    }
    function isFunction$2(p) {
        return typeof p === 'function';
    }
    function isObject(p) {
        return typeof p === 'object';
    }
    function isNonNullObject(p) {
        return isObject(p) && p !== null;
    }
    function isNonArrayObject(p) {
        return isObject(p) && !Array.isArray(p);
    }
    function isString(p) {
        return typeof p === 'string' || p instanceof String;
    }
    function isInteger(p) {
        return isNumber$2(p) && Number.isInteger(p);
    }
    function isNumber$2(p) {
        return typeof p === 'number' || p instanceof Number;
    }
    function isNativeBlob(p) {
        return isNativeBlobDefined() && p instanceof Blob;
    }
    function isNativeBlobDefined() {
        return typeof Blob !== 'undefined';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @enum{number}
     */
    var ErrorCode;
    (function (ErrorCode) {
        ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
        ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
        ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
    })(ErrorCode || (ErrorCode = {}));

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
     * doesn't work in React Native on Android.
     */
    var NetworkXhrIo = /** @class */ (function () {
        function NetworkXhrIo() {
            var _this = this;
            this.sent_ = false;
            this.xhr_ = new XMLHttpRequest();
            this.errorCode_ = ErrorCode.NO_ERROR;
            this.sendPromise_ = new Promise(function (resolve) {
                _this.xhr_.addEventListener('abort', function () {
                    _this.errorCode_ = ErrorCode.ABORT;
                    resolve(_this);
                });
                _this.xhr_.addEventListener('error', function () {
                    _this.errorCode_ = ErrorCode.NETWORK_ERROR;
                    resolve(_this);
                });
                _this.xhr_.addEventListener('load', function () {
                    resolve(_this);
                });
            });
        }
        /**
         * @override
         */
        NetworkXhrIo.prototype.send = function (url, method, body, headers) {
            if (this.sent_) {
                throw internalError('cannot .send() more than once');
            }
            this.sent_ = true;
            this.xhr_.open(method, url, true);
            if (isDef(headers)) {
                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        this.xhr_.setRequestHeader(key, headers[key].toString());
                    }
                }
            }
            if (isDef(body)) {
                this.xhr_.send(body);
            }
            else {
                this.xhr_.send();
            }
            return this.sendPromise_;
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getErrorCode = function () {
            if (!this.sent_) {
                throw internalError('cannot .getErrorCode() before sending');
            }
            return this.errorCode_;
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getStatus = function () {
            if (!this.sent_) {
                throw internalError('cannot .getStatus() before sending');
            }
            try {
                return this.xhr_.status;
            }
            catch (e) {
                return -1;
            }
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getResponseText = function () {
            if (!this.sent_) {
                throw internalError('cannot .getResponseText() before sending');
            }
            return this.xhr_.responseText;
        };
        /**
         * Aborts the request.
         * @override
         */
        NetworkXhrIo.prototype.abort = function () {
            this.xhr_.abort();
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.getResponseHeader = function (header) {
            return this.xhr_.getResponseHeader(header);
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
            if (isDef(this.xhr_.upload)) {
                this.xhr_.upload.addEventListener('progress', listener);
            }
        };
        /**
         * @override
         */
        NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
            if (isDef(this.xhr_.upload)) {
                this.xhr_.upload.removeEventListener('progress', listener);
            }
        };
        return NetworkXhrIo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Factory-like class for creating XhrIo instances.
     */
    var XhrIoPool = /** @class */ (function () {
        function XhrIoPool() {
        }
        XhrIoPool.prototype.createXhrIo = function () {
            return new NetworkXhrIo();
        };
        return XhrIoPool;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getBlobBuilder() {
        if (typeof BlobBuilder !== 'undefined') {
            return BlobBuilder;
        }
        else if (typeof WebKitBlobBuilder !== 'undefined') {
            return WebKitBlobBuilder;
        }
        else {
            return undefined;
        }
    }
    /**
     * Concatenates one or more values together and converts them to a Blob.
     *
     * @param args The values that will make up the resulting blob.
     * @return The blob.
     */
    function getBlob() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var BlobBuilder = getBlobBuilder();
        if (BlobBuilder !== undefined) {
            var bb = new BlobBuilder();
            for (var i = 0; i < args.length; i++) {
                bb.append(args[i]);
            }
            return bb.getBlob();
        }
        else {
            if (isNativeBlobDefined()) {
                return new Blob(args);
            }
            else {
                throw Error("This browser doesn't seem to support creating Blobs");
            }
        }
    }
    /**
     * Slices the blob. The returned blob contains data from the start byte
     * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
     *
     * @param blob The blob to be sliced.
     * @param start Index of the starting byte.
     * @param end Index of the ending byte.
     * @return The blob slice or null if not supported.
     */
    function sliceBlob(blob, start, end) {
        if (blob.webkitSlice) {
            return blob.webkitSlice(start, end);
        }
        else if (blob.mozSlice) {
            return blob.mozSlice(start, end);
        }
        else if (blob.slice) {
            return blob.slice(start, end);
        }
        return null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param opt_elideCopy If true, doesn't copy mutable input data
     *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
     *     modified after this blob's construction.
     */
    var FbsBlob = /** @class */ (function () {
        function FbsBlob(data, elideCopy) {
            var size = 0;
            var blobType = '';
            if (isNativeBlob(data)) {
                this.data_ = data;
                size = data.size;
                blobType = data.type;
            }
            else if (data instanceof ArrayBuffer) {
                if (elideCopy) {
                    this.data_ = new Uint8Array(data);
                }
                else {
                    this.data_ = new Uint8Array(data.byteLength);
                    this.data_.set(new Uint8Array(data));
                }
                size = this.data_.length;
            }
            else if (data instanceof Uint8Array) {
                if (elideCopy) {
                    this.data_ = data;
                }
                else {
                    this.data_ = new Uint8Array(data.length);
                    this.data_.set(data);
                }
                size = data.length;
            }
            this.size_ = size;
            this.type_ = blobType;
        }
        FbsBlob.prototype.size = function () {
            return this.size_;
        };
        FbsBlob.prototype.type = function () {
            return this.type_;
        };
        FbsBlob.prototype.slice = function (startByte, endByte) {
            if (isNativeBlob(this.data_)) {
                var realBlob = this.data_;
                var sliced = sliceBlob(realBlob, startByte, endByte);
                if (sliced === null) {
                    return null;
                }
                return new FbsBlob(sliced);
            }
            else {
                var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
                return new FbsBlob(slice, true);
            }
        };
        FbsBlob.getBlob = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (isNativeBlobDefined()) {
                var blobby = args.map(function (val) {
                    if (val instanceof FbsBlob) {
                        return val.data_;
                    }
                    else {
                        return val;
                    }
                });
                return new FbsBlob(getBlob.apply(null, blobby));
            }
            else {
                var uint8Arrays = args.map(function (val) {
                    if (isString(val)) {
                        return dataFromString(StringFormat.RAW, val).data;
                    }
                    else {
                        // Blobs don't exist, so this has to be a Uint8Array.
                        return val.data_;
                    }
                });
                var finalLength_1 = 0;
                uint8Arrays.forEach(function (array) {
                    finalLength_1 += array.byteLength;
                });
                var merged_1 = new Uint8Array(finalLength_1);
                var index_1 = 0;
                uint8Arrays.forEach(function (array) {
                    for (var i = 0; i < array.length; i++) {
                        merged_1[index_1++] = array[i];
                    }
                });
                return new FbsBlob(merged_1, true);
            }
        };
        FbsBlob.prototype.uploadData = function () {
            return this.data_;
        };
        return FbsBlob;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @struct
     */
    var Location = /** @class */ (function () {
        function Location(bucket, path) {
            this.bucket = bucket;
            this.path_ = path;
        }
        Object.defineProperty(Location.prototype, "path", {
            get: function () {
                return this.path_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Location.prototype, "isRoot", {
            get: function () {
                return this.path.length === 0;
            },
            enumerable: false,
            configurable: true
        });
        Location.prototype.fullServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
        };
        Location.prototype.bucketOnlyServerUrl = function () {
            var encode = encodeURIComponent;
            return '/b/' + encode(this.bucket) + '/o';
        };
        Location.makeFromBucketSpec = function (bucketString) {
            var bucketLocation;
            try {
                bucketLocation = Location.makeFromUrl(bucketString);
            }
            catch (e) {
                // Not valid URL, use as-is. This lets you put bare bucket names in
                // config.
                return new Location(bucketString, '');
            }
            if (bucketLocation.path === '') {
                return bucketLocation;
            }
            else {
                throw invalidDefaultBucket(bucketString);
            }
        };
        Location.makeFromUrl = function (url) {
            var location = null;
            var bucketDomain = '([A-Za-z0-9.\\-_]+)';
            function gsModify(loc) {
                if (loc.path.charAt(loc.path.length - 1) === '/') {
                    loc.path_ = loc.path_.slice(0, -1);
                }
            }
            var gsPath = '(/(.*))?$';
            var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
            var gsIndices = { bucket: 1, path: 3 };
            function httpModify(loc) {
                loc.path_ = decodeURIComponent(loc.path);
            }
            var version = 'v[A-Za-z0-9_]+';
            var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\.');
            var firebaseStoragePath = '(/([^?#]*).*)?$';
            var firebaseStorageRegExp = new RegExp("^https?://" + firebaseStorageHost + "/" + version + "/b/" + bucketDomain + "/o" + firebaseStoragePath, 'i');
            var firebaseStorageIndices = { bucket: 1, path: 3 };
            var cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';
            var cloudStoragePath = '([^?#]*)';
            var cloudStorageRegExp = new RegExp("^https?://" + cloudStorageHost + "/" + bucketDomain + "/" + cloudStoragePath, 'i');
            var cloudStorageIndices = { bucket: 1, path: 2 };
            var groups = [
                { regex: gsRegex, indices: gsIndices, postModify: gsModify },
                {
                    regex: firebaseStorageRegExp,
                    indices: firebaseStorageIndices,
                    postModify: httpModify
                },
                {
                    regex: cloudStorageRegExp,
                    indices: cloudStorageIndices,
                    postModify: httpModify
                }
            ];
            for (var i = 0; i < groups.length; i++) {
                var group = groups[i];
                var captures = group.regex.exec(url);
                if (captures) {
                    var bucketValue = captures[group.indices.bucket];
                    var pathValue = captures[group.indices.path];
                    if (!pathValue) {
                        pathValue = '';
                    }
                    location = new Location(bucketValue, pathValue);
                    group.postModify(location);
                    break;
                }
            }
            if (location == null) {
                throw invalidUrl(url);
            }
            return location;
        };
        return Location;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns the Object resulting from parsing the given JSON, or null if the
     * given string does not represent a JSON object.
     */
    function jsonObjectOrNull(s) {
        var obj;
        try {
            obj = JSON.parse(s);
        }
        catch (e) {
            return null;
        }
        if (isNonArrayObject(obj)) {
            return obj;
        }
        else {
            return null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Contains helper methods for manipulating paths.
     */
    /**
     * @return Null if the path is already at the root.
     */
    function parent(path) {
        if (path.length === 0) {
            return null;
        }
        var index = path.lastIndexOf('/');
        if (index === -1) {
            return '';
        }
        var newPath = path.slice(0, index);
        return newPath;
    }
    function child(path, childPath) {
        var canonicalChildPath = childPath
            .split('/')
            .filter(function (component) { return component.length > 0; })
            .join('/');
        if (path.length === 0) {
            return canonicalChildPath;
        }
        else {
            return path + '/' + canonicalChildPath;
        }
    }
    /**
     * Returns the last component of a path.
     * '/foo/bar' -> 'bar'
     * '/foo/bar/baz/' -> 'baz/'
     * '/a' -> 'a'
     */
    function lastComponent(path) {
        var index = path.lastIndexOf('/', path.length - 2);
        if (index === -1) {
            return path;
        }
        else {
            return path.slice(index + 1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function makeUrl(urlPart) {
        return "https://" + DEFAULT_HOST + "/v0" + urlPart;
    }
    function makeQueryString(params) {
        var encode = encodeURIComponent;
        var queryPart = '?';
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                // @ts-ignore TODO: remove once typescript is upgraded to 3.5.x
                var nextPart = encode(key) + '=' + encode(params[key]);
                queryPart = queryPart + nextPart + '&';
            }
        }
        // Chop off the extra '&' or '?' on the end
        queryPart = queryPart.slice(0, -1);
        return queryPart;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function noXform_(metadata, value) {
        return value;
    }
    /**
     * @struct
     */
    var Mapping = /** @class */ (function () {
        function Mapping(server, local, writable, xform) {
            this.server = server;
            this.local = local || server;
            this.writable = !!writable;
            this.xform = xform || noXform_;
        }
        return Mapping;
    }());
    var mappings_ = null;
    function xformPath(fullPath) {
        if (!isString(fullPath) || fullPath.length < 2) {
            return fullPath;
        }
        else {
            return lastComponent(fullPath);
        }
    }
    function getMappings() {
        if (mappings_) {
            return mappings_;
        }
        var mappings = [];
        mappings.push(new Mapping('bucket'));
        mappings.push(new Mapping('generation'));
        mappings.push(new Mapping('metageneration'));
        mappings.push(new Mapping('name', 'fullPath', true));
        function mappingsXformPath(_metadata, fullPath) {
            return xformPath(fullPath);
        }
        var nameMapping = new Mapping('name');
        nameMapping.xform = mappingsXformPath;
        mappings.push(nameMapping);
        /**
         * Coerces the second param to a number, if it is defined.
         */
        function xformSize(_metadata, size) {
            if (isDef(size)) {
                return Number(size);
            }
            else {
                return size;
            }
        }
        var sizeMapping = new Mapping('size');
        sizeMapping.xform = xformSize;
        mappings.push(sizeMapping);
        mappings.push(new Mapping('timeCreated'));
        mappings.push(new Mapping('updated'));
        mappings.push(new Mapping('md5Hash', null, true));
        mappings.push(new Mapping('cacheControl', null, true));
        mappings.push(new Mapping('contentDisposition', null, true));
        mappings.push(new Mapping('contentEncoding', null, true));
        mappings.push(new Mapping('contentLanguage', null, true));
        mappings.push(new Mapping('contentType', null, true));
        mappings.push(new Mapping('metadata', 'customMetadata', true));
        mappings_ = mappings;
        return mappings_;
    }
    function addRef(metadata, service) {
        function generateRef() {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var loc = new Location(bucket, path);
            return service.makeStorageReference(loc);
        }
        Object.defineProperty(metadata, 'ref', { get: generateRef });
    }
    function fromResource(service, resource, mappings) {
        var metadata = {};
        metadata['type'] = 'file';
        var len = mappings.length;
        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];
            metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
        }
        addRef(metadata, service);
        return metadata;
    }
    function fromResourceString(service, resourceString, mappings) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        var resource = obj;
        return fromResource(service, resource, mappings);
    }
    function downloadUrlFromResourceString(metadata, resourceString) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        if (!isString(obj['downloadTokens'])) {
            // This can happen if objects are uploaded through GCS and retrieved
            // through list, so we don't want to throw an Error.
            return null;
        }
        var tokens = obj['downloadTokens'];
        if (tokens.length === 0) {
            return null;
        }
        var encode = encodeURIComponent;
        var tokensList = tokens.split(',');
        var urls = tokensList.map(function (token) {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
            var base = makeUrl(urlPart);
            var queryString = makeQueryString({
                alt: 'media',
                token: token
            });
            return base + queryString;
        });
        return urls[0];
    }
    function toResourceString(metadata, mappings) {
        var resource = {};
        var len = mappings.length;
        for (var i = 0; i < len; i++) {
            var mapping = mappings[i];
            if (mapping.writable) {
                resource[mapping.server] = metadata[mapping.local];
            }
        }
        return JSON.stringify(resource);
    }
    function metadataValidator(p) {
        if (!isObject(p) || !p) {
            throw 'Expected Metadata object.';
        }
        for (var key in p) {
            if (p.hasOwnProperty(key)) {
                var val = p[key];
                if (key === 'customMetadata') {
                    if (!isObject(val)) {
                        throw 'Expected object for \'customMetadata\' mapping.';
                    }
                }
                else {
                    if (isNonNullObject(val)) {
                        throw "Mapping for '" + key + "' cannot be an object.";
                    }
                }
            }
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_RESULTS_KEY = 'maxResults';
    var MAX_MAX_RESULTS = 1000;
    var PAGE_TOKEN_KEY = 'pageToken';
    var PREFIXES_KEY = 'prefixes';
    var ITEMS_KEY = 'items';
    function fromBackendResponse(service, bucket, resource) {
        var listResult = {
            prefixes: [],
            items: [],
            nextPageToken: resource['nextPageToken']
        };
        if (resource[PREFIXES_KEY]) {
            for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {
                var path = _a[_i];
                var pathWithoutTrailingSlash = path.replace(/\/$/, '');
                var reference = service.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
                listResult.prefixes.push(reference);
            }
        }
        if (resource[ITEMS_KEY]) {
            for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {
                var item = _c[_b];
                var reference = service.makeStorageReference(new Location(bucket, item['name']));
                listResult.items.push(reference);
            }
        }
        return listResult;
    }
    function fromResponseString(service, bucket, resourceString) {
        var obj = jsonObjectOrNull(resourceString);
        if (obj === null) {
            return null;
        }
        var resource = obj;
        return fromBackendResponse(service, bucket, resource);
    }
    function listOptionsValidator(p) {
        if (!isObject(p) || !p) {
            throw 'Expected ListOptions object.';
        }
        for (var key in p) {
            if (key === MAX_RESULTS_KEY) {
                if (!isInteger(p[MAX_RESULTS_KEY]) ||
                    p[MAX_RESULTS_KEY] <= 0) {
                    throw 'Expected maxResults to be a positive number.';
                }
                if (p[MAX_RESULTS_KEY] > 1000) {
                    throw "Expected maxResults to be less than or equal to " + MAX_MAX_RESULTS + ".";
                }
            }
            else if (key === PAGE_TOKEN_KEY) {
                if (p[PAGE_TOKEN_KEY] && !isString(p[PAGE_TOKEN_KEY])) {
                    throw 'Expected pageToken to be string.';
                }
            }
            else {
                throw 'Unknown option: ' + key;
            }
        }
    }

    var RequestInfo = /** @class */ (function () {
        function RequestInfo(url, method, 
        /**
         * Returns the value with which to resolve the request's promise. Only called
         * if the request is successful. Throw from this function to reject the
         * returned Request's promise with the thrown error.
         * Note: The XhrIo passed to this function may be reused after this callback
         * returns. Do not keep a reference to it in any way.
         */
        handler, timeout) {
            this.url = url;
            this.method = method;
            this.handler = handler;
            this.timeout = timeout;
            this.urlParams = {};
            this.headers = {};
            this.body = null;
            this.errorHandler = null;
            /**
             * Called with the current number of bytes uploaded and total size (-1 if not
             * computable) of the request body (i.e. used to report upload progress).
             */
            this.progressCallback = null;
            this.successCodes = [200];
            this.additionalRetryCodes = [];
        }
        return RequestInfo;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws the UNKNOWN FirebaseStorageError if cndn is false.
     */
    function handlerCheck(cndn) {
        if (!cndn) {
            throw unknown();
        }
    }
    function metadataHandler(service, mappings) {
        function handler(xhr, text) {
            var metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return metadata;
        }
        return handler;
    }
    function listHandler(service, bucket) {
        function handler(xhr, text) {
            var listResult = fromResponseString(service, bucket, text);
            handlerCheck(listResult !== null);
            return listResult;
        }
        return handler;
    }
    function downloadUrlHandler(service, mappings) {
        function handler(xhr, text) {
            var metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return downloadUrlFromResourceString(metadata, text);
        }
        return handler;
    }
    function sharedErrorHandler(location) {
        function errorHandler(xhr, err) {
            var newErr;
            if (xhr.getStatus() === 401) {
                newErr = unauthenticated();
            }
            else {
                if (xhr.getStatus() === 402) {
                    newErr = quotaExceeded(location.bucket);
                }
                else {
                    if (xhr.getStatus() === 403) {
                        newErr = unauthorized(location.path);
                    }
                    else {
                        newErr = err;
                    }
                }
            }
            newErr.setServerResponseProp(err.serverResponseProp());
            return newErr;
        }
        return errorHandler;
    }
    function objectErrorHandler(location) {
        var shared = sharedErrorHandler(location);
        function errorHandler(xhr, err) {
            var newErr = shared(xhr, err);
            if (xhr.getStatus() === 404) {
                newErr = objectNotFound(location.path);
            }
            newErr.setServerResponseProp(err.serverResponseProp());
            return newErr;
        }
        return errorHandler;
    }
    function getMetadata(service, location, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function list(service, location, delimiter, pageToken, maxResults) {
        var urlParams = {};
        if (location.isRoot) {
            urlParams['prefix'] = '';
        }
        else {
            urlParams['prefix'] = location.path + '/';
        }
        if (delimiter && delimiter.length > 0) {
            urlParams['delimiter'] = delimiter;
        }
        if (pageToken) {
            urlParams['pageToken'] = pageToken;
        }
        if (maxResults) {
            urlParams['maxResults'] = maxResults;
        }
        var urlPart = location.bucketOnlyServerUrl();
        var url = makeUrl(urlPart);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    function getDownloadUrl(service, location, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'GET';
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function updateMetadata(service, location, metadata, mappings) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'PATCH';
        var body = toResourceString(metadata, mappings);
        var headers = { 'Content-Type': 'application/json; charset=utf-8' };
        var timeout = service.maxOperationRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function deleteObject(service, location) {
        var urlPart = location.fullServerUrl();
        var url = makeUrl(urlPart);
        var method = 'DELETE';
        var timeout = service.maxOperationRetryTime;
        function handler(_xhr, _text) { }
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.successCodes = [200, 204];
        requestInfo.errorHandler = objectErrorHandler(location);
        return requestInfo;
    }
    function determineContentType_(metadata, blob) {
        return ((metadata && metadata['contentType']) ||
            (blob && blob.type()) ||
            'application/octet-stream');
    }
    function metadataForUpload_(location, blob, metadata) {
        var metadataClone = Object.assign({}, metadata);
        metadataClone['fullPath'] = location.path;
        metadataClone['size'] = blob.size();
        if (!metadataClone['contentType']) {
            metadataClone['contentType'] = determineContentType_(null, blob);
        }
        return metadataClone;
    }
    function multipartUpload(service, location, mappings, blob, metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var headers = {
            'X-Goog-Upload-Protocol': 'multipart'
        };
        function genBoundary() {
            var str = '';
            for (var i = 0; i < 2; i++) {
                str = str + Math.random().toString().slice(2);
            }
            return str;
        }
        var boundary = genBoundary();
        headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
        var metadata_ = metadataForUpload_(location, blob, metadata);
        var metadataString = toResourceString(metadata_, mappings);
        var preBlobPart = '--' +
            boundary +
            '\r\n' +
            'Content-Type: application/json; charset=utf-8\r\n\r\n' +
            metadataString +
            '\r\n--' +
            boundary +
            '\r\n' +
            'Content-Type: ' +
            metadata_['contentType'] +
            '\r\n\r\n';
        var postBlobPart = '\r\n--' + boundary + '--';
        var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
        if (body === null) {
            throw cannotSliceBlob();
        }
        var urlParams = { name: metadata_['fullPath'] };
        var url = makeUrl(urlPart);
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param current The number of bytes that have been uploaded so far.
     * @param total The total number of bytes in the upload.
     * @param opt_finalized True if the server has finished the upload.
     * @param opt_metadata The upload metadata, should
     *     only be passed if opt_finalized is true.
     * @struct
     */
    var ResumableUploadStatus = /** @class */ (function () {
        function ResumableUploadStatus(current, total, finalized, metadata) {
            this.current = current;
            this.total = total;
            this.finalized = !!finalized;
            this.metadata = metadata || null;
        }
        return ResumableUploadStatus;
    }());
    function checkResumeHeader_(xhr, allowed) {
        var status = null;
        try {
            status = xhr.getResponseHeader('X-Goog-Upload-Status');
        }
        catch (e) {
            handlerCheck(false);
        }
        var allowedStatus = allowed || ['active'];
        handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
        return status;
    }
    function createResumableUpload(service, location, mappings, blob, metadata) {
        var urlPart = location.bucketOnlyServerUrl();
        var metadataForUpload = metadataForUpload_(location, blob, metadata);
        var urlParams = { name: metadataForUpload['fullPath'] };
        var url = makeUrl(urlPart);
        var method = 'POST';
        var headers = {
            'X-Goog-Upload-Protocol': 'resumable',
            'X-Goog-Upload-Command': 'start',
            'X-Goog-Upload-Header-Content-Length': blob.size(),
            'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
            'Content-Type': 'application/json; charset=utf-8'
        };
        var body = toResourceString(metadataForUpload, mappings);
        var timeout = service.maxUploadRetryTime;
        function handler(xhr) {
            checkResumeHeader_(xhr);
            var url;
            try {
                url = xhr.getResponseHeader('X-Goog-Upload-URL');
            }
            catch (e) {
                handlerCheck(false);
            }
            handlerCheck(isString(url));
            return url;
        }
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.urlParams = urlParams;
        requestInfo.headers = headers;
        requestInfo.body = body;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     */
    function getResumableUploadStatus(service, location, url, blob) {
        var headers = { 'X-Goog-Upload-Command': 'query' };
        function handler(xhr) {
            var status = checkResumeHeader_(xhr, ['active', 'final']);
            var sizeString = null;
            try {
                sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
            }
            catch (e) {
                handlerCheck(false);
            }
            if (!sizeString) {
                // null or empty string
                handlerCheck(false);
            }
            var size = Number(sizeString);
            handlerCheck(!isNaN(size));
            return new ResumableUploadStatus(size, blob.size(), status === 'final');
        }
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }
    /**
     * Any uploads via the resumable upload API must transfer a number of bytes
     * that is a multiple of this number.
     */
    var resumableUploadChunkSize = 256 * 1024;
    /**
     * @param url From a call to fbs.requests.createResumableUpload.
     * @param chunkSize Number of bytes to upload.
     * @param status The previous status.
     *     If not passed or null, we start from the beginning.
     * @throws fbs.Error If the upload is already complete, the passed in status
     *     has a final size inconsistent with the blob, or the blob cannot be sliced
     *     for upload.
     */
    function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
        // TODO(andysoto): standardize on internal asserts
        // assert(!(opt_status && opt_status.finalized));
        var status_ = new ResumableUploadStatus(0, 0);
        if (status) {
            status_.current = status.current;
            status_.total = status.total;
        }
        else {
            status_.current = 0;
            status_.total = blob.size();
        }
        if (blob.size() !== status_.total) {
            throw serverFileWrongSize();
        }
        var bytesLeft = status_.total - status_.current;
        var bytesToUpload = bytesLeft;
        if (chunkSize > 0) {
            bytesToUpload = Math.min(bytesToUpload, chunkSize);
        }
        var startByte = status_.current;
        var endByte = startByte + bytesToUpload;
        var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
        var headers = {
            'X-Goog-Upload-Command': uploadCommand,
            'X-Goog-Upload-Offset': status_.current
        };
        var body = blob.slice(startByte, endByte);
        if (body === null) {
            throw cannotSliceBlob();
        }
        function handler(xhr, text) {
            // TODO(andysoto): Verify the MD5 of each uploaded range:
            // the 'x-range-md5' header comes back with status code 308 responses.
            // We'll only be able to bail out though, because you can't re-upload a
            // range that you previously uploaded.
            var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
            var newCurrent = status_.current + bytesToUpload;
            var size = blob.size();
            var metadata;
            if (uploadStatus === 'final') {
                metadata = metadataHandler(service, mappings)(xhr, text);
            }
            else {
                metadata = null;
            }
            return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
        }
        var method = 'POST';
        var timeout = service.maxUploadRetryTime;
        var requestInfo = new RequestInfo(url, method, handler, timeout);
        requestInfo.headers = headers;
        requestInfo.body = body.uploadData();
        requestInfo.progressCallback = progressCallback || null;
        requestInfo.errorHandler = sharedErrorHandler(location);
        return requestInfo;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @struct
     */
    var Observer = /** @class */ (function () {
        function Observer(nextOrObserver, error, complete) {
            var asFunctions = isFunction$2(nextOrObserver) ||
                isDef(error) ||
                isDef(complete);
            if (asFunctions) {
                this.next = nextOrObserver;
                this.error = error || null;
                this.complete = complete || null;
            }
            else {
                var observer = nextOrObserver;
                this.next = observer.next || null;
                this.error = observer.error || null;
                this.complete = observer.complete || null;
            }
        }
        return Observer;
    }());

    var UploadTaskSnapshot = /** @class */ (function () {
        function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
            this.bytesTransferred = bytesTransferred;
            this.totalBytes = totalBytes;
            this.state = state;
            this.metadata = metadata;
            this.task = task;
            this.ref = ref;
        }
        return UploadTaskSnapshot;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param name Name of the function.
     * @param specs Argument specs.
     * @param passed The actual arguments passed to the function.
     * @throws {fbs.Error} If the arguments are invalid.
     */
    function validate(name, specs, passed) {
        var minArgs = specs.length;
        var maxArgs = specs.length;
        for (var i = 0; i < specs.length; i++) {
            if (specs[i].optional) {
                minArgs = i;
                break;
            }
        }
        var validLength = minArgs <= passed.length && passed.length <= maxArgs;
        if (!validLength) {
            throw invalidArgumentCount(minArgs, maxArgs, name, passed.length);
        }
        for (var i = 0; i < passed.length; i++) {
            try {
                specs[i].validator(passed[i]);
            }
            catch (e) {
                if (e instanceof Error) {
                    throw invalidArgument(i, name, e.message);
                }
                else {
                    throw invalidArgument(i, name, e);
                }
            }
        }
    }
    /**
     * @struct
     */
    var ArgSpec = /** @class */ (function () {
        function ArgSpec(validator, optional) {
            var self = this;
            this.validator = function (p) {
                if (self.optional && !isJustDef(p)) {
                    return;
                }
                validator(p);
            };
            this.optional = !!optional;
        }
        return ArgSpec;
    }());
    function and_(v1, v2) {
        return function (p) {
            v1(p);
            v2(p);
        };
    }
    function stringSpec(validator, optional) {
        function stringValidator(p) {
            if (!isString(p)) {
                throw 'Expected string.';
            }
        }
        var chainedValidator;
        if (validator) {
            chainedValidator = and_(stringValidator, validator);
        }
        else {
            chainedValidator = stringValidator;
        }
        return new ArgSpec(chainedValidator, optional);
    }
    function uploadDataSpec() {
        function validator(p) {
            var valid = p instanceof Uint8Array ||
                p instanceof ArrayBuffer ||
                (isNativeBlobDefined() && p instanceof Blob);
            if (!valid) {
                throw 'Expected Blob or File.';
            }
        }
        return new ArgSpec(validator);
    }
    function metadataSpec(optional) {
        return new ArgSpec(metadataValidator, optional);
    }
    function listOptionSpec(optional) {
        return new ArgSpec(listOptionsValidator, optional);
    }
    function nonNegativeNumberSpec() {
        function validator(p) {
            var valid = isNumber$2(p) && p >= 0;
            if (!valid) {
                throw 'Expected a number 0 or greater.';
            }
        }
        return new ArgSpec(validator);
    }
    function looseObjectSpec(validator, optional) {
        function isLooseObjectValidator(p) {
            var isLooseObject = p === null || (isDef(p) && p instanceof Object);
            if (!isLooseObject) {
                throw 'Expected an Object.';
            }
            if (validator !== undefined && validator !== null) {
                validator(p);
            }
        }
        return new ArgSpec(isLooseObjectValidator, optional);
    }
    function nullFunctionSpec(optional) {
        function validator(p) {
            var valid = p === null || isFunction$2(p);
            if (!valid) {
                throw 'Expected a Function.';
            }
        }
        return new ArgSpec(validator, optional);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a function that invokes f with its arguments asynchronously as a
     * microtask, i.e. as soon as possible after the current script returns back
     * into browser code.
     */
    function async(f) {
        return function () {
            var argsToForward = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                argsToForward[_i] = arguments[_i];
            }
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(function () { return f.apply(void 0, argsToForward); });
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a blob being uploaded. Can be used to pause/resume/cancel the
     * upload and manage callbacks for various events.
     */
    var UploadTask = /** @class */ (function () {
        /**
         * @param ref The firebaseStorage.Reference object this task came
         *     from, untyped to avoid cyclic dependencies.
         * @param blob The blob to upload.
         */
        function UploadTask(ref, service, location, mappings, blob, metadata) {
            var _this = this;
            if (metadata === void 0) { metadata = null; }
            this.transferred_ = 0;
            this.needToFetchStatus_ = false;
            this.needToFetchMetadata_ = false;
            this.observers_ = [];
            this.error_ = null;
            this.uploadUrl_ = null;
            this.request_ = null;
            this.chunkMultiplier_ = 1;
            this.resolve_ = null;
            this.reject_ = null;
            this.ref_ = ref;
            this.service_ = service;
            this.location_ = location;
            this.blob_ = blob;
            this.metadata_ = metadata;
            this.mappings_ = mappings;
            this.resumable_ = this.shouldDoResumable_(this.blob_);
            this.state_ = InternalTaskState.RUNNING;
            this.errorHandler_ = function (error) {
                _this.request_ = null;
                _this.chunkMultiplier_ = 1;
                if (error.codeEquals(Code.CANCELED)) {
                    _this.needToFetchStatus_ = true;
                    _this.completeTransitions_();
                }
                else {
                    _this.error_ = error;
                    _this.transition_(InternalTaskState.ERROR);
                }
            };
            this.metadataErrorHandler_ = function (error) {
                _this.request_ = null;
                if (error.codeEquals(Code.CANCELED)) {
                    _this.completeTransitions_();
                }
                else {
                    _this.error_ = error;
                    _this.transition_(InternalTaskState.ERROR);
                }
            };
            this.promise_ = new Promise(function (resolve, reject) {
                _this.resolve_ = resolve;
                _this.reject_ = reject;
                _this.start_();
            });
            // Prevent uncaught rejections on the internal promise from bubbling out
            // to the top level with a dummy handler.
            this.promise_.then(null, function () { });
        }
        UploadTask.prototype.makeProgressCallback_ = function () {
            var _this = this;
            var sizeBefore = this.transferred_;
            return function (loaded) { return _this.updateProgress_(sizeBefore + loaded); };
        };
        UploadTask.prototype.shouldDoResumable_ = function (blob) {
            return blob.size() > 256 * 1024;
        };
        UploadTask.prototype.start_ = function () {
            if (this.state_ !== InternalTaskState.RUNNING) {
                // This can happen if someone pauses us in a resume callback, for example.
                return;
            }
            if (this.request_ !== null) {
                return;
            }
            if (this.resumable_) {
                if (this.uploadUrl_ === null) {
                    this.createResumable_();
                }
                else {
                    if (this.needToFetchStatus_) {
                        this.fetchStatus_();
                    }
                    else {
                        if (this.needToFetchMetadata_) {
                            // Happens if we miss the metadata on upload completion.
                            this.fetchMetadata_();
                        }
                        else {
                            this.continueUpload_();
                        }
                    }
                }
            }
            else {
                this.oneShotUpload_();
            }
        };
        UploadTask.prototype.resolveToken_ = function (callback) {
            var _this = this;
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.service_.getAuthToken().then(function (authToken) {
                switch (_this.state_) {
                    case InternalTaskState.RUNNING:
                        callback(authToken);
                        break;
                    case InternalTaskState.CANCELING:
                        _this.transition_(InternalTaskState.CANCELED);
                        break;
                    case InternalTaskState.PAUSING:
                        _this.transition_(InternalTaskState.PAUSED);
                        break;
                }
            });
        };
        // TODO(andysoto): assert false
        UploadTask.prototype.createResumable_ = function () {
            var _this = this;
            this.resolveToken_(function (authToken) {
                var requestInfo = createResumableUpload(_this.service_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
                var createRequest = _this.service_.makeRequest(requestInfo, authToken);
                _this.request_ = createRequest;
                createRequest.getPromise().then(function (url) {
                    _this.request_ = null;
                    _this.uploadUrl_ = url;
                    _this.needToFetchStatus_ = false;
                    _this.completeTransitions_();
                }, _this.errorHandler_);
            });
        };
        UploadTask.prototype.fetchStatus_ = function () {
            var _this = this;
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            var url = this.uploadUrl_;
            this.resolveToken_(function (authToken) {
                var requestInfo = getResumableUploadStatus(_this.service_, _this.location_, url, _this.blob_);
                var statusRequest = _this.service_.makeRequest(requestInfo, authToken);
                _this.request_ = statusRequest;
                statusRequest.getPromise().then(function (status) {
                    status = status;
                    _this.request_ = null;
                    _this.updateProgress_(status.current);
                    _this.needToFetchStatus_ = false;
                    if (status.finalized) {
                        _this.needToFetchMetadata_ = true;
                    }
                    _this.completeTransitions_();
                }, _this.errorHandler_);
            });
        };
        UploadTask.prototype.continueUpload_ = function () {
            var _this = this;
            var chunkSize = resumableUploadChunkSize * this.chunkMultiplier_;
            var status = new ResumableUploadStatus(this.transferred_, this.blob_.size());
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            var url = this.uploadUrl_;
            this.resolveToken_(function (authToken) {
                var requestInfo;
                try {
                    requestInfo = continueResumableUpload(_this.location_, _this.service_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
                }
                catch (e) {
                    _this.error_ = e;
                    _this.transition_(InternalTaskState.ERROR);
                    return;
                }
                var uploadRequest = _this.service_.makeRequest(requestInfo, authToken);
                _this.request_ = uploadRequest;
                uploadRequest
                    .getPromise()
                    .then(function (newStatus) {
                    _this.increaseMultiplier_();
                    _this.request_ = null;
                    _this.updateProgress_(newStatus.current);
                    if (newStatus.finalized) {
                        _this.metadata_ = newStatus.metadata;
                        _this.transition_(InternalTaskState.SUCCESS);
                    }
                    else {
                        _this.completeTransitions_();
                    }
                }, _this.errorHandler_);
            });
        };
        UploadTask.prototype.increaseMultiplier_ = function () {
            var currentSize = resumableUploadChunkSize * this.chunkMultiplier_;
            // Max chunk size is 32M.
            if (currentSize < 32 * 1024 * 1024) {
                this.chunkMultiplier_ *= 2;
            }
        };
        UploadTask.prototype.fetchMetadata_ = function () {
            var _this = this;
            this.resolveToken_(function (authToken) {
                var requestInfo = getMetadata(_this.service_, _this.location_, _this.mappings_);
                var metadataRequest = _this.service_.makeRequest(requestInfo, authToken);
                _this.request_ = metadataRequest;
                metadataRequest.getPromise().then(function (metadata) {
                    _this.request_ = null;
                    _this.metadata_ = metadata;
                    _this.transition_(InternalTaskState.SUCCESS);
                }, _this.metadataErrorHandler_);
            });
        };
        UploadTask.prototype.oneShotUpload_ = function () {
            var _this = this;
            this.resolveToken_(function (authToken) {
                var requestInfo = multipartUpload(_this.service_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
                var multipartRequest = _this.service_.makeRequest(requestInfo, authToken);
                _this.request_ = multipartRequest;
                multipartRequest.getPromise().then(function (metadata) {
                    _this.request_ = null;
                    _this.metadata_ = metadata;
                    _this.updateProgress_(_this.blob_.size());
                    _this.transition_(InternalTaskState.SUCCESS);
                }, _this.errorHandler_);
            });
        };
        UploadTask.prototype.updateProgress_ = function (transferred) {
            var old = this.transferred_;
            this.transferred_ = transferred;
            // A progress update can make the "transferred" value smaller (e.g. a
            // partial upload not completed by server, after which the "transferred"
            // value may reset to the value at the beginning of the request).
            if (this.transferred_ !== old) {
                this.notifyObservers_();
            }
        };
        UploadTask.prototype.transition_ = function (state) {
            if (this.state_ === state) {
                return;
            }
            switch (state) {
                case InternalTaskState.CANCELING:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    this.state_ = state;
                    if (this.request_ !== null) {
                        this.request_.cancel();
                    }
                    break;
                case InternalTaskState.PAUSING:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING);
                    this.state_ = state;
                    if (this.request_ !== null) {
                        this.request_.cancel();
                    }
                    break;
                case InternalTaskState.RUNNING:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.PAUSING);
                    var wasPaused = this.state_ === InternalTaskState.PAUSED;
                    this.state_ = state;
                    if (wasPaused) {
                        this.notifyObservers_();
                        this.start_();
                    }
                    break;
                case InternalTaskState.PAUSED:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSING);
                    this.state_ = state;
                    this.notifyObservers_();
                    break;
                case InternalTaskState.CANCELED:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.PAUSED ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this.error_ = canceled();
                    this.state_ = state;
                    this.notifyObservers_();
                    break;
                case InternalTaskState.ERROR:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this.state_ = state;
                    this.notifyObservers_();
                    break;
                case InternalTaskState.SUCCESS:
                    // TODO(andysoto):
                    // assert(this.state_ === InternalTaskState.RUNNING ||
                    //        this.state_ === InternalTaskState.PAUSING ||
                    //        this.state_ === InternalTaskState.CANCELING);
                    this.state_ = state;
                    this.notifyObservers_();
                    break;
            }
        };
        UploadTask.prototype.completeTransitions_ = function () {
            switch (this.state_) {
                case InternalTaskState.PAUSING:
                    this.transition_(InternalTaskState.PAUSED);
                    break;
                case InternalTaskState.CANCELING:
                    this.transition_(InternalTaskState.CANCELED);
                    break;
                case InternalTaskState.RUNNING:
                    this.start_();
                    break;
            }
        };
        Object.defineProperty(UploadTask.prototype, "snapshot", {
            get: function () {
                var externalState = taskStateFromInternalTaskState(this.state_);
                return new UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds a callback for an event.
         * @param type The type of event to listen for.
         */
        UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
            function typeValidator() {
                if (type !== TaskEvent.STATE_CHANGED) {
                    throw "Expected one of the event types: [" + TaskEvent.STATE_CHANGED + "].";
                }
            }
            var nextOrObserverMessage = 'Expected a function or an Object with one of ' +
                '`next`, `error`, `complete` properties.';
            var nextValidator = nullFunctionSpec(true).validator;
            var observerValidator = looseObjectSpec(null, true).validator;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            function nextOrObserverValidator(p) {
                try {
                    nextValidator(p);
                    return;
                }
                catch (e) { }
                try {
                    observerValidator(p);
                    var anyDefined = isJustDef(p['next']) ||
                        isJustDef(p['error']) ||
                        isJustDef(p['complete']);
                    if (!anyDefined) {
                        throw '';
                    }
                    return;
                }
                catch (e) {
                    throw nextOrObserverMessage;
                }
            }
            var specs = [
                stringSpec(typeValidator),
                looseObjectSpec(nextOrObserverValidator, true),
                nullFunctionSpec(true),
                nullFunctionSpec(true)
            ];
            validate('on', specs, arguments);
            var self = this;
            function makeBinder(specs) {
                function binder(nextOrObserver, error, complete) {
                    if (specs !== null) {
                        validate('on', specs, arguments);
                    }
                    var observer = new Observer(nextOrObserver, error, completed);
                    self.addObserver_(observer);
                    return function () {
                        self.removeObserver_(observer);
                    };
                }
                return binder;
            }
            function binderNextOrObserverValidator(p) {
                if (p === null) {
                    throw nextOrObserverMessage;
                }
                nextOrObserverValidator(p);
            }
            var binderSpecs = [
                looseObjectSpec(binderNextOrObserverValidator),
                nullFunctionSpec(true),
                nullFunctionSpec(true)
            ];
            var typeOnly = !(isJustDef(nextOrObserver) ||
                isJustDef(error) ||
                isJustDef(completed));
            if (typeOnly) {
                return makeBinder(binderSpecs);
            }
            else {
                return makeBinder(null)(nextOrObserver, error, completed);
            }
        };
        /**
         * This object behaves like a Promise, and resolves with its snapshot data
         * when the upload completes.
         * @param onFulfilled The fulfillment callback. Promise chaining works as normal.
         * @param onRejected The rejection callback.
         */
        UploadTask.prototype.then = function (onFulfilled, onRejected) {
            // These casts are needed so that TypeScript can infer the types of the
            // resulting Promise.
            return this.promise_.then(onFulfilled, onRejected);
        };
        /**
         * Equivalent to calling `then(null, onRejected)`.
         */
        UploadTask.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
        };
        /**
         * Adds the given observer.
         */
        UploadTask.prototype.addObserver_ = function (observer) {
            this.observers_.push(observer);
            this.notifyObserver_(observer);
        };
        /**
         * Removes the given observer.
         */
        UploadTask.prototype.removeObserver_ = function (observer) {
            var i = this.observers_.indexOf(observer);
            if (i !== -1) {
                this.observers_.splice(i, 1);
            }
        };
        UploadTask.prototype.notifyObservers_ = function () {
            var _this = this;
            this.finishPromise_();
            var observers = this.observers_.slice();
            observers.forEach(function (observer) {
                _this.notifyObserver_(observer);
            });
        };
        UploadTask.prototype.finishPromise_ = function () {
            if (this.resolve_ !== null) {
                var triggered = true;
                switch (taskStateFromInternalTaskState(this.state_)) {
                    case TaskState.SUCCESS:
                        async(this.resolve_.bind(null, this.snapshot))();
                        break;
                    case TaskState.CANCELED:
                    case TaskState.ERROR:
                        var toCall = this.reject_;
                        async(toCall.bind(null, this.error_))();
                        break;
                    default:
                        triggered = false;
                        break;
                }
                if (triggered) {
                    this.resolve_ = null;
                    this.reject_ = null;
                }
            }
        };
        UploadTask.prototype.notifyObserver_ = function (observer) {
            var externalState = taskStateFromInternalTaskState(this.state_);
            switch (externalState) {
                case TaskState.RUNNING:
                case TaskState.PAUSED:
                    if (observer.next) {
                        async(observer.next.bind(observer, this.snapshot))();
                    }
                    break;
                case TaskState.SUCCESS:
                    if (observer.complete) {
                        async(observer.complete.bind(observer))();
                    }
                    break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                    if (observer.error) {
                        async(observer.error.bind(observer, this.error_))();
                    }
                    break;
                default:
                    // TODO(andysoto): assert(false);
                    if (observer.error) {
                        async(observer.error.bind(observer, this.error_))();
                    }
            }
        };
        /**
         * Resumes a paused task. Has no effect on a currently running or failed task.
         * @return True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.resume = function () {
            validate('resume', [], arguments);
            var valid = this.state_ === InternalTaskState.PAUSED ||
                this.state_ === InternalTaskState.PAUSING;
            if (valid) {
                this.transition_(InternalTaskState.RUNNING);
            }
            return valid;
        };
        /**
         * Pauses a currently running task. Has no effect on a paused or failed task.
         * @return True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.pause = function () {
            validate('pause', [], arguments);
            var valid = this.state_ === InternalTaskState.RUNNING;
            if (valid) {
                this.transition_(InternalTaskState.PAUSING);
            }
            return valid;
        };
        /**
         * Cancels a currently running or paused task. Has no effect on a complete or
         * failed task.
         * @return True if the operation took effect, false if ignored.
         */
        UploadTask.prototype.cancel = function () {
            validate('cancel', [], arguments);
            var valid = this.state_ === InternalTaskState.RUNNING ||
                this.state_ === InternalTaskState.PAUSING;
            if (valid) {
                this.transition_(InternalTaskState.CANCELING);
            }
            return valid;
        };
        return UploadTask;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides methods to interact with a bucket in the Firebase Storage service.
     * @param location An fbs.location, or the URL at
     *     which to base this object, in one of the following forms:
     *         gs://<bucket>/<object-path>
     *         http[s]://firebasestorage.googleapis.com/
     *                     <api-version>/b/<bucket>/o/<object-path>
     *     Any query or fragment strings will be ignored in the http[s]
     *     format. If no value is passed, the storage object will use a URL based on
     *     the project ID of the base firebase.App instance.
     */
    var Reference = /** @class */ (function () {
        function Reference(service, location) {
            this.service = service;
            if (location instanceof Location) {
                this.location = location;
            }
            else {
                this.location = Location.makeFromUrl(location);
            }
        }
        /**
         * @return The URL for the bucket and path this object references,
         *     in the form gs://<bucket>/<object-path>
         * @override
         */
        Reference.prototype.toString = function () {
            validate('toString', [], arguments);
            return 'gs://' + this.location.bucket + '/' + this.location.path;
        };
        Reference.prototype.newRef = function (service, location) {
            return new Reference(service, location);
        };
        Reference.prototype.mappings = function () {
            return getMappings();
        };
        /**
         * @return A reference to the object obtained by
         *     appending childPath, removing any duplicate, beginning, or trailing
         *     slashes.
         */
        Reference.prototype.child = function (childPath) {
            validate('child', [stringSpec()], arguments);
            var newPath = child(this.location.path, childPath);
            var location = new Location(this.location.bucket, newPath);
            return this.newRef(this.service, location);
        };
        Object.defineProperty(Reference.prototype, "parent", {
            /**
             * @return A reference to the parent of the
             *     current object, or null if the current object is the root.
             */
            get: function () {
                var newPath = parent(this.location.path);
                if (newPath === null) {
                    return null;
                }
                var location = new Location(this.location.bucket, newPath);
                return this.newRef(this.service, location);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "root", {
            /**
             * @return An reference to the root of this
             *     object's bucket.
             */
            get: function () {
                var location = new Location(this.location.bucket, '');
                return this.newRef(this.service, location);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "bucket", {
            get: function () {
                return this.location.bucket;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "fullPath", {
            get: function () {
                return this.location.path;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "name", {
            get: function () {
                return lastComponent(this.location.path);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reference.prototype, "storage", {
            get: function () {
                return this.service;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Uploads a blob to this object's location.
         * @param data The blob to upload.
         * @return An UploadTask that lets you control and
         *     observe the upload.
         */
        Reference.prototype.put = function (data, metadata) {
            if (metadata === void 0) { metadata = null; }
            validate('put', [uploadDataSpec(), metadataSpec(true)], arguments);
            this.throwIfRoot_('put');
            return new UploadTask(this, this.service, this.location, this.mappings(), new FbsBlob(data), metadata);
        };
        /**
         * Uploads a string to this object's location.
         * @param value The string to upload.
         * @param format The format of the string to upload.
         * @return An UploadTask that lets you control and
         *     observe the upload.
         */
        Reference.prototype.putString = function (value, format, metadata) {
            if (format === void 0) { format = StringFormat.RAW; }
            validate('putString', [stringSpec(), stringSpec(formatValidator, true), metadataSpec(true)], arguments);
            this.throwIfRoot_('putString');
            var data = dataFromString(format, value);
            var metadataClone = Object.assign({}, metadata);
            if (!isDef(metadataClone['contentType']) &&
                isDef(data.contentType)) {
                metadataClone['contentType'] = data.contentType;
            }
            return new UploadTask(this, this.service, this.location, this.mappings(), new FbsBlob(data.data, true), metadataClone);
        };
        /**
         * Deletes the object at this location.
         * @return A promise that resolves if the deletion succeeds.
         */
        Reference.prototype.delete = function () {
            var _this = this;
            validate('delete', [], arguments);
            this.throwIfRoot_('delete');
            return this.service.getAuthToken().then(function (authToken) {
                var requestInfo = deleteObject(_this.service, _this.location);
                return _this.service.makeRequest(requestInfo, authToken).getPromise();
            });
        };
        /**
         * List all items (files) and prefixes (folders) under this storage reference.
         *
         * This is a helper method for calling list() repeatedly until there are
         * no more results. The default pagination size is 1000.
         *
         * Note: The results may not be consistent if objects are changed while this
         * operation is running.
         *
         * Warning: listAll may potentially consume too many resources if there are
         * too many results.
         *
         * @return A Promise that resolves with all the items and prefixes under
         *      the current storage reference. `prefixes` contains references to
         *      sub-directories and `items` contains references to objects in this
         *      folder. `nextPageToken` is never returned.
         */
        Reference.prototype.listAll = function () {
            validate('listAll', [], arguments);
            var accumulator = {
                prefixes: [],
                items: []
            };
            return this.listAllHelper(accumulator).then(function () { return accumulator; });
        };
        Reference.prototype.listAllHelper = function (accumulator, pageToken) {
            return __awaiter(this, void 0, void 0, function () {
                var opt, nextPage;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            opt = {
                                // maxResults is 1000 by default.
                                pageToken: pageToken
                            };
                            return [4 /*yield*/, this.list(opt)];
                        case 1:
                            nextPage = _c.sent();
                            (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);
                            (_b = accumulator.items).push.apply(_b, nextPage.items);
                            if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.listAllHelper(accumulator, nextPage.nextPageToken)];
                        case 2:
                            _c.sent();
                            _c.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * List items (files) and prefixes (folders) under this storage reference.
         *
         * List API is only available for Firebase Rules Version 2.
         *
         * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
         * delimited folder structure.
         * Refer to GCS's List API if you want to learn more.
         *
         * To adhere to Firebase Rules's Semantics, Firebase Storage does not
         * support objects whose paths end with "/" or contain two consecutive
         * "/"s. Firebase Storage List API will filter these unsupported objects.
         * list() may fail if there are too many unsupported objects in the bucket.
         *
         * @param options See ListOptions for details.
         * @return A Promise that resolves with the items and prefixes.
         *      `prefixes` contains references to sub-folders and `items`
         *      contains references to objects in this folder. `nextPageToken`
         *      can be used to get the rest of the results.
         */
        Reference.prototype.list = function (options) {
            validate('list', [listOptionSpec(true)], arguments);
            var self = this;
            return this.service.getAuthToken().then(function (authToken) {
                var op = options || {};
                var requestInfo = list(self.service, self.location, 
                /*delimiter= */ '/', op.pageToken, op.maxResults);
                return self.service.makeRequest(requestInfo, authToken).getPromise();
            });
        };
        /**
         *     A promise that resolves with the metadata for this object. If this
         *     object doesn't exist or metadata cannot be retreived, the promise is
         *     rejected.
         */
        Reference.prototype.getMetadata = function () {
            var _this = this;
            validate('getMetadata', [], arguments);
            this.throwIfRoot_('getMetadata');
            return this.service.getAuthToken().then(function (authToken) {
                var requestInfo = getMetadata(_this.service, _this.location, _this.mappings());
                return _this.service.makeRequest(requestInfo, authToken).getPromise();
            });
        };
        /**
         * Updates the metadata for this object.
         * @param metadata The new metadata for the object.
         *     Only values that have been explicitly set will be changed. Explicitly
         *     setting a value to null will remove the metadata.
         * @return A promise that resolves
         *     with the new metadata for this object.
         *     @see firebaseStorage.Reference.prototype.getMetadata
         */
        Reference.prototype.updateMetadata = function (metadata) {
            var _this = this;
            validate('updateMetadata', [metadataSpec()], arguments);
            this.throwIfRoot_('updateMetadata');
            return this.service.getAuthToken().then(function (authToken) {
                var requestInfo = updateMetadata(_this.service, _this.location, metadata, _this.mappings());
                return _this.service.makeRequest(requestInfo, authToken).getPromise();
            });
        };
        /**
         * @return A promise that resolves with the download
         *     URL for this object.
         */
        Reference.prototype.getDownloadURL = function () {
            var _this = this;
            validate('getDownloadURL', [], arguments);
            this.throwIfRoot_('getDownloadURL');
            return this.service.getAuthToken().then(function (authToken) {
                var requestInfo = getDownloadUrl(_this.service, _this.location, _this.mappings());
                return _this.service
                    .makeRequest(requestInfo, authToken)
                    .getPromise()
                    .then(function (url) {
                    if (url === null) {
                        throw noDownloadURL();
                    }
                    return url;
                });
            });
        };
        Reference.prototype.throwIfRoot_ = function (name) {
            if (this.location.path === '') {
                throw invalidRootOperation(name);
            }
        };
        return Reference;
    }());

    /**
     * A request whose promise always fails.
     * @struct
     * @template T
     */
    var FailRequest = /** @class */ (function () {
        function FailRequest(error) {
            this.promise_ = Promise.reject(error);
        }
        /** @inheritDoc */
        FailRequest.prototype.getPromise = function () {
            return this.promise_;
        };
        /** @inheritDoc */
        FailRequest.prototype.cancel = function (_appDelete) {
        };
        return FailRequest;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param f May be invoked
     *     before the function returns.
     * @param callback Get all the arguments passed to the function
     *     passed to f, including the initial boolean.
     */
    function start(f, callback, timeout) {
        // TODO(andysoto): make this code cleaner (probably refactor into an actual
        // type instead of a bunch of functions with state shared in the closure)
        var waitSeconds = 1;
        // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
        // TODO: find a way to exclude Node type definition for storage because storage only works in browser
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var timeoutId = null;
        var hitTimeout = false;
        var cancelState = 0;
        function canceled() {
            return cancelState === 2;
        }
        var triggeredCallback = false;
        // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
        // the no-explicit-any rule when ESlint releases it.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        function triggerCallback() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!triggeredCallback) {
                triggeredCallback = true;
                callback.apply(null, args);
            }
        }
        function callWithDelay(millis) {
            timeoutId = setTimeout(function () {
                timeoutId = null;
                f(handler, canceled());
            }, millis);
        }
        // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
        // the no-explicit-any rule when ESlint releases it.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        function handler(success) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (triggeredCallback) {
                return;
            }
            if (success) {
                triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
                return;
            }
            var mustStop = canceled() || hitTimeout;
            if (mustStop) {
                triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));
                return;
            }
            if (waitSeconds < 64) {
                /* TODO(andysoto): don't back off so quickly if we know we're offline. */
                waitSeconds *= 2;
            }
            var waitMillis;
            if (cancelState === 1) {
                cancelState = 2;
                waitMillis = 0;
            }
            else {
                waitMillis = (waitSeconds + Math.random()) * 1000;
            }
            callWithDelay(waitMillis);
        }
        var stopped = false;
        function stop(wasTimeout) {
            if (stopped) {
                return;
            }
            stopped = true;
            if (triggeredCallback) {
                return;
            }
            if (timeoutId !== null) {
                if (!wasTimeout) {
                    cancelState = 2;
                }
                clearTimeout(timeoutId);
                callWithDelay(0);
            }
            else {
                if (!wasTimeout) {
                    cancelState = 1;
                }
            }
        }
        callWithDelay(0);
        setTimeout(function () {
            hitTimeout = true;
            stop(true);
        }, timeout);
        return stop;
    }
    /**
     * Stops the retry loop from repeating.
     * If the function is currently "in between" retries, it is invoked immediately
     * with the second parameter as "true". Otherwise, it will be invoked once more
     * after the current invocation finishes iff the current invocation would have
     * triggered another retry.
     */
    function stop(id) {
        id(false);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @struct
     * @template T
     */
    var NetworkRequest = /** @class */ (function () {
        function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
            var _this = this;
            this.pendingXhr_ = null;
            this.backoffId_ = null;
            this.resolve_ = null;
            this.reject_ = null;
            this.canceled_ = false;
            this.appDelete_ = false;
            this.url_ = url;
            this.method_ = method;
            this.headers_ = headers;
            this.body_ = body;
            this.successCodes_ = successCodes.slice();
            this.additionalRetryCodes_ = additionalRetryCodes.slice();
            this.callback_ = callback;
            this.errorCallback_ = errorCallback;
            this.progressCallback_ = progressCallback;
            this.timeout_ = timeout;
            this.pool_ = pool;
            this.promise_ = new Promise(function (resolve, reject) {
                _this.resolve_ = resolve;
                _this.reject_ = reject;
                _this.start_();
            });
        }
        /**
         * Actually starts the retry loop.
         */
        NetworkRequest.prototype.start_ = function () {
            var self = this;
            function doTheRequest(backoffCallback, canceled) {
                if (canceled) {
                    backoffCallback(false, new RequestEndStatus(false, null, true));
                    return;
                }
                var xhr = self.pool_.createXhrIo();
                self.pendingXhr_ = xhr;
                function progressListener(progressEvent) {
                    var loaded = progressEvent.loaded;
                    var total = progressEvent.lengthComputable ? progressEvent.total : -1;
                    if (self.progressCallback_ !== null) {
                        self.progressCallback_(loaded, total);
                    }
                }
                if (self.progressCallback_ !== null) {
                    xhr.addUploadProgressListener(progressListener);
                }
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                xhr
                    .send(self.url_, self.method_, self.body_, self.headers_)
                    .then(function (xhr) {
                    if (self.progressCallback_ !== null) {
                        xhr.removeUploadProgressListener(progressListener);
                    }
                    self.pendingXhr_ = null;
                    xhr = xhr;
                    var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;
                    var status = xhr.getStatus();
                    if (!hitServer || self.isRetryStatusCode_(status)) {
                        var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;
                        backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                        return;
                    }
                    var successCode = self.successCodes_.indexOf(status) !== -1;
                    backoffCallback(true, new RequestEndStatus(successCode, xhr));
                });
            }
            /**
             * @param requestWentThrough True if the request eventually went
             *     through, false if it hit the retry limit or was canceled.
             */
            function backoffDone(requestWentThrough, status) {
                var resolve = self.resolve_;
                var reject = self.reject_;
                var xhr = status.xhr;
                if (status.wasSuccessCode) {
                    try {
                        var result = self.callback_(xhr, xhr.getResponseText());
                        if (isJustDef(result)) {
                            resolve(result);
                        }
                        else {
                            resolve();
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                }
                else {
                    if (xhr !== null) {
                        var err = unknown();
                        err.setServerResponseProp(xhr.getResponseText());
                        if (self.errorCallback_) {
                            reject(self.errorCallback_(xhr, err));
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        if (status.canceled) {
                            var err = self.appDelete_ ? appDeleted() : canceled();
                            reject(err);
                        }
                        else {
                            var err = retryLimitExceeded();
                            reject(err);
                        }
                    }
                }
            }
            if (this.canceled_) {
                backoffDone(false, new RequestEndStatus(false, null, true));
            }
            else {
                this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
            }
        };
        /** @inheritDoc */
        NetworkRequest.prototype.getPromise = function () {
            return this.promise_;
        };
        /** @inheritDoc */
        NetworkRequest.prototype.cancel = function (appDelete) {
            this.canceled_ = true;
            this.appDelete_ = appDelete || false;
            if (this.backoffId_ !== null) {
                stop(this.backoffId_);
            }
            if (this.pendingXhr_ !== null) {
                this.pendingXhr_.abort();
            }
        };
        NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
            // The codes for which to retry came from this page:
            // https://cloud.google.com/storage/docs/exponential-backoff
            var isFiveHundredCode = status >= 500 && status < 600;
            var extraRetryCodes = [
                // Request Timeout: web server didn't receive full request in time.
                408,
                // Too Many Requests: you're getting rate-limited, basically.
                429
            ];
            var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
            var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
            return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
        };
        return NetworkRequest;
    }());
    /**
     * A collection of information about the result of a network request.
     * @param opt_canceled Defaults to false.
     * @struct
     */
    var RequestEndStatus = /** @class */ (function () {
        function RequestEndStatus(wasSuccessCode, xhr, canceled) {
            this.wasSuccessCode = wasSuccessCode;
            this.xhr = xhr;
            this.canceled = !!canceled;
        }
        return RequestEndStatus;
    }());
    function addAuthHeader_(headers, authToken) {
        if (authToken !== null && authToken.length > 0) {
            headers['Authorization'] = 'Firebase ' + authToken;
        }
    }
    function addVersionHeader_(headers) {
        var version = typeof firebase$1 !== 'undefined' ? firebase$1.SDK_VERSION : 'AppManager';
        headers['X-Firebase-Storage-Version'] = 'webjs/' + version;
    }
    function addGmpidHeader_(headers, appId) {
        if (appId) {
            headers['X-Firebase-GMPID'] = appId;
        }
    }
    /**
     * @template T
     */
    function makeRequest(requestInfo, appId, authToken, pool) {
        var queryPart = makeQueryString(requestInfo.urlParams);
        var url = requestInfo.url + queryPart;
        var headers = Object.assign({}, requestInfo.headers);
        addGmpidHeader_(headers, appId);
        addAuthHeader_(headers, authToken);
        addVersionHeader_(headers);
        return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A service that provides firebaseStorage.Reference instances.
     * @param opt_url gs:// url to a custom Storage Bucket
     *
     * @struct
     */
    var StorageService = /** @class */ (function () {
        function StorageService(app, authProvider, pool, url) {
            var _a;
            this.bucket_ = null;
            this.appId_ = null;
            this.deleted_ = false;
            this.app_ = app;
            this.authProvider_ = authProvider;
            this.maxOperationRetryTime_ = DEFAULT_MAX_OPERATION_RETRY_TIME;
            this.maxUploadRetryTime_ = DEFAULT_MAX_UPLOAD_RETRY_TIME;
            this.requests_ = new Set();
            this.pool_ = pool;
            if (url != null) {
                this.bucket_ = Location.makeFromBucketSpec(url);
            }
            else {
                this.bucket_ = StorageService.extractBucket_((_a = this.app_) === null || _a === void 0 ? void 0 : _a.options);
            }
            this.internals_ = new ServiceInternals(this);
        }
        StorageService.extractBucket_ = function (config) {
            var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
            if (bucketString == null) {
                return null;
            }
            return Location.makeFromBucketSpec(bucketString);
        };
        StorageService.prototype.getAuthToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var auth, tokenData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            auth = this.authProvider_.getImmediate({ optional: true });
                            if (!auth) return [3 /*break*/, 2];
                            return [4 /*yield*/, auth.getToken()];
                        case 1:
                            tokenData = _a.sent();
                            if (tokenData !== null) {
                                return [2 /*return*/, tokenData.accessToken];
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/, null];
                    }
                });
            });
        };
        /**
         * Stop running requests and prevent more from being created.
         */
        StorageService.prototype.deleteApp = function () {
            this.deleted_ = true;
            this.app_ = null;
            this.requests_.forEach(function (request) { return request.cancel(); });
            this.requests_.clear();
        };
        /**
         * Returns a new firebaseStorage.Reference object referencing this StorageService
         * at the given Location.
         * @param loc The Location.
         * @return A firebaseStorage.Reference.
         */
        StorageService.prototype.makeStorageReference = function (loc) {
            return new Reference(this, loc);
        };
        StorageService.prototype.makeRequest = function (requestInfo, authToken) {
            var _this = this;
            if (!this.deleted_) {
                var request_1 = makeRequest(requestInfo, this.appId_, authToken, this.pool_);
                this.requests_.add(request_1);
                // Request removes itself from set when complete.
                request_1.getPromise().then(function () { return _this.requests_.delete(request_1); }, function () { return _this.requests_.delete(request_1); });
                return request_1;
            }
            else {
                return new FailRequest(appDeleted());
            }
        };
        /**
         * Returns a firebaseStorage.Reference for the given path in the default
         * bucket.
         */
        StorageService.prototype.ref = function (path) {
            function validator(path) {
                if (typeof path !== 'string') {
                    throw 'Path is not a string.';
                }
                if (/^[A-Za-z]+:\/\//.test(path)) {
                    throw 'Expected child path but got a URL, use refFromURL instead.';
                }
            }
            validate('ref', [stringSpec(validator, true)], arguments);
            if (this.bucket_ == null) {
                throw new Error('No Storage Bucket defined in Firebase Options.');
            }
            var ref = new Reference(this, this.bucket_);
            if (path != null) {
                return ref.child(path);
            }
            else {
                return ref;
            }
        };
        /**
         * Returns a firebaseStorage.Reference object for the given absolute URL,
         * which must be a gs:// or http[s]:// URL.
         */
        StorageService.prototype.refFromURL = function (url) {
            function validator(p) {
                if (typeof p !== 'string') {
                    throw 'Path is not a string.';
                }
                if (!/^[A-Za-z]+:\/\//.test(p)) {
                    throw 'Expected full URL but got a child path, use ref instead.';
                }
                try {
                    Location.makeFromUrl(p);
                }
                catch (e) {
                    throw 'Expected valid full URL but got an invalid one.';
                }
            }
            validate('refFromURL', [stringSpec(validator, false)], arguments);
            return new Reference(this, url);
        };
        Object.defineProperty(StorageService.prototype, "maxUploadRetryTime", {
            get: function () {
                return this.maxUploadRetryTime_;
            },
            enumerable: false,
            configurable: true
        });
        StorageService.prototype.setMaxUploadRetryTime = function (time) {
            validate('setMaxUploadRetryTime', [nonNegativeNumberSpec()], arguments);
            this.maxUploadRetryTime_ = time;
        };
        Object.defineProperty(StorageService.prototype, "maxOperationRetryTime", {
            get: function () {
                return this.maxOperationRetryTime_;
            },
            enumerable: false,
            configurable: true
        });
        StorageService.prototype.setMaxOperationRetryTime = function (time) {
            validate('setMaxOperationRetryTime', [nonNegativeNumberSpec()], arguments);
            this.maxOperationRetryTime_ = time;
        };
        Object.defineProperty(StorageService.prototype, "app", {
            get: function () {
                return this.app_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StorageService.prototype, "INTERNAL", {
            get: function () {
                return this.internals_;
            },
            enumerable: false,
            configurable: true
        });
        return StorageService;
    }());
    /**
     * @struct
     */
    var ServiceInternals = /** @class */ (function () {
        function ServiceInternals(service) {
            this.service_ = service;
        }
        /**
         * Called when the associated app is deleted.
         */
        ServiceInternals.prototype.delete = function () {
            this.service_.deleteApp();
            return Promise.resolve();
        };
        return ServiceInternals;
    }());

    var name$e = "@firebase/storage";
    var version$3 = "0.3.42";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type constant for Firebase Storage.
     */
    var STORAGE_TYPE = 'storage';
    function factory(container, url) {
        // Dependencies
        var app = container.getProvider('app').getImmediate();
        var authProvider = container.getProvider('auth-internal');
        return new StorageService(app, authProvider, new XhrIoPool(), url);
    }
    function registerStorage(instance) {
        var namespaceExports = {
            // no-inline
            TaskState: TaskState,
            TaskEvent: TaskEvent,
            StringFormat: StringFormat,
            Storage: StorageService,
            Reference: Reference
        };
        instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, "PUBLIC" /* PUBLIC */)
            .setServiceProps(namespaceExports)
            .setMultipleInstances(true));
        instance.registerVersion(name$e, version$3);
    }
    registerStorage(firebase$1);

    const loggers = {};
    function getLogger(name, level = 'info') {
      if (!loggers.hasOwnProperty(name) || loggers[name].level !== level) {
        const levels = ['trace', 'debug', 'info', 'warn', 'error'];
        // const getTimestamp = () => ''
        // const getTimestamp = () => moment().format('YY-MM-DD HH:mm:ss')
        // const coloredPrefix = `%c[${getTimestamp()}] [${name}] `
        // const prefix = `[${getTimestamp()}] [${name}] `
        const coloredPrefix = `%c[${name}] `;
        const prefix = `[${name}] `;
        const noop = () => {};

        const error =
          levels.indexOf(level) <= levels.indexOf('error')
            ? console.error.bind(console, coloredPrefix, 'color:#ED8784')
            : noop;
        const warn =
          levels.indexOf(level) <= levels.indexOf('warn')
            ? console.warn.bind(console, coloredPrefix, 'color:#F3D9A2')
            : noop;
        const info =
          levels.indexOf(level) <= levels.indexOf('info')
            ? console.info.bind(console, coloredPrefix, 'color:#8CE9FF')
            : noop;
        const debug =
          levels.indexOf(level) <= levels.indexOf('debug')
            ? console.log.bind(console, prefix)
            : noop;
        const trace =
          levels.indexOf(level) <= levels.indexOf('trace')
            ? console.log.bind(console, prefix)
            : noop;
        // logger.setLevel('TRACE')

        loggers[name] = {
          level,
          error,
          warn,
          info,
          debug,
          trace,
        };

        // console.log('new logger', name, loggers[name])
      }
      return loggers[name]
    }

    /**
     * Randomly shuffle an array (in place shuffle)
     * https://stackoverflow.com/a/2450976/1293256
     * @param  {Array} array The array to shuffle
     * @return {String}      The first item in the shuffled array
     */
    const shuffle = function (array) {
      let currentIndex = array.length;
      let temporaryValue, randomIndex;

      // While there remain elements to shuffle...
      while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;

        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
      }

      return array
    };

    function isEmpty(obj) {
      return obj.constructor === Object && Object.entries(obj).length === 0
    }
    function getPropertyName(obj) {
      return Object.getOwnPropertyNames(obj)[0]
    }

    const lexicoSort = (a, b) => {
      if (a < b) return -1
      if (a > b) return 1
      return 0
    };

    const firebaseConfig = {
      apiKey: 'AIzaSyAMnIlAk2yqGItw5EfTCLqj2SdJF6Q5620',
      authDomain: 'mathereal-1586176000451.firebaseapp.com',
      databaseURL: 'https://mathereal-1586176000451.firebaseio.com',
      projectId: 'mathereal-1586176000451',
      storageBucket: 'mathereal-1586176000451.appspot.com',
      messagingSenderId: '702572178697',
      appId: '1:702572178697:web:cb14e184230ff9ca8277d8',
    };

    firebase$1.initializeApp(firebaseConfig);


    const db$1 = firebase$1.firestore();
    const storage = firebase$1.storage().ref();

    function fetchCollection({ path, filters }) {
      const { error, info, trace } = getLogger('fetchCollection', 'trace');
      trace(`  fetching ${path} with filters :`, filters);
     

      const pathArray = path.split('/');
      let documents = [];
      let collectionRef = db$1.collection(pathArray.shift());
      while (pathArray.length > 0) {
        collectionRef = collectionRef
          .doc(pathArray.shift())
          .collection(pathArray.shift());
      }

      filters.forEach((filter) => {
        const name = Object.getOwnPropertyNames(filter)[0];
        const value = filter[name];
        collectionRef = collectionRef.where(name, '==', value);
      });

      return collectionRef
        .get()
        .then((docs) => {
          docs.forEach((doc) => {
        
            documents.push({ ...doc.data(), id: doc.id });
          });
          //   info(`  fetched ${path} :`, documents)
          return documents
        })
        .catch((err) => console.log(err))
    }

    async function getCollection({collectionPath, filters=[], thenCallback, extract, sort}) {
        
        //  check in store
        const store = get_store_value(collections);
       
        let values = store[collectionPath];
        let promise;

        for (let i = 0; values && i < filters.length; i++) {
          const filter = filters[i];
          const filterName = getPropertyName(filter);
          const filterValue = filter[filterName];
          values = values[filterValue];
        }

        if (values && values.collection) {
          promise=Promise.resolve(values.collection);
        }

        // else fetch
        else promise =  fetchCollection({
          path: collectionPath,
          filters,
        }).then((documents) => {
         
            if (extract) documents = documents.map((value) => value[extract]);
            if (sort) documents = documents.sort(sort);
          // updating store
          collections.update((store) => {
            if (!store[collectionPath]) {
              store[collectionPath] = {};
            }
            let nested = store[collectionPath];

            filters.forEach((filter) => {
              const filterName = getPropertyName(filter);
              const filterValue = filter[filterName];
              if (!nested[filterValue]) nested[filterValue] = {};
              nested = nested[filterValue];
            });
            
            
            nested.collection = documents;
            return store
          });
          return documents

        });
      
        promise = promise.then(values=> {
        
            if (thenCallback) thenCallback(values);
            return values});

        return promise
      }

    /* src/components/Filter.svelte generated by Svelte v3.24.1 */

    const { console: console_1$1 } = globals;
    const get_default_slot_changes = dirty => ({ filters: dirty & /*newFilters*/ 4 });
    const get_default_slot_context = ctx => ({ filters: /*newFilters*/ ctx[2] });

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (61:0) {:catch error}
    function create_catch_block$1(ctx) {
    	let t0;
    	let t1;
    	let t2_value = /*error*/ ctx[15] + "";
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text(/*label*/ ctx[0]);
    			t1 = space();
    			t2 = text(t2_value);
    		},
    		l: function claim(nodes) {
    			t0 = claim_text(nodes, /*label*/ ctx[0]);
    			t1 = claim_space(nodes);
    			t2 = claim_text(nodes, t2_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 1) set_data_dev(t0, /*label*/ ctx[0]);
    			if (dirty & /*valuesP*/ 2 && t2_value !== (t2_value = /*error*/ ctx[15] + "")) set_data_dev(t2, t2_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(61:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (50:0) {:then values}
    function create_then_block$1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*selected*/ ctx[3] && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (if_block) if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*selected*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*selected*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(50:0) {:then values}",
    		ctx
    	});

    	return block;
    }

    // (51:2) {#if selected}
    function create_if_block$8(ctx) {
    	let select;
    	let updating_value;
    	let t;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[8].call(null, value);
    	}

    	let select_props = {
    		enhanced: true,
    		label: /*label*/ ctx[0],
    		$$slots: { default: [create_default_slot$5] },
    		$$scope: { ctx }
    	};

    	if (/*selected*/ ctx[3] !== void 0) {
    		select_props.value = /*selected*/ ctx[3];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, "value", select_value_binding));
    	const default_slot_template = /*$$slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context);

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    			t = space();
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			claim_component(select.$$.fragment, nodes);
    			t = claim_space(nodes);
    			if (default_slot) default_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};
    			if (dirty & /*label*/ 1) select_changes.label = /*label*/ ctx[0];

    			if (dirty & /*$$scope, valuesP, selected*/ 522) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*selected*/ 8) {
    				updating_value = true;
    				select_changes.value = /*selected*/ ctx[3];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, newFilters*/ 516) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(51:2) {#if selected}",
    		ctx
    	});

    	return block;
    }

    // (54:8) <Option value="{value}" selected="{selected === value}">
    function create_default_slot_1$2(ctx) {
    	let t_value = /*value*/ ctx[12] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*valuesP*/ 2 && t_value !== (t_value = /*value*/ ctx[12] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(54:8) <Option value=\\\"{value}\\\" selected=\\\"{selected === value}\\\">",
    		ctx
    	});

    	return block;
    }

    // (53:6) {#each values as value}
    function create_each_block(ctx) {
    	let option;
    	let current;

    	option = new Option({
    			props: {
    				value: /*value*/ ctx[12],
    				selected: /*selected*/ ctx[3] === /*value*/ ctx[12],
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(option.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(option.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(option, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const option_changes = {};
    			if (dirty & /*valuesP*/ 2) option_changes.value = /*value*/ ctx[12];
    			if (dirty & /*selected, valuesP*/ 10) option_changes.selected = /*selected*/ ctx[3] === /*value*/ ctx[12];

    			if (dirty & /*$$scope, valuesP*/ 514) {
    				option_changes.$$scope = { dirty, ctx };
    			}

    			option.$set(option_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(option.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(option.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(option, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(53:6) {#each values as value}",
    		ctx
    	});

    	return block;
    }

    // (52:4) <Select enhanced bind:value="{selected}" label="{label}">
    function create_default_slot$5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*values*/ ctx[11];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(nodes);
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*valuesP, selected*/ 10) {
    				each_value = /*values*/ ctx[11];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(52:4) <Select enhanced bind:value=\\\"{selected}\\\" label=\\\"{label}\\\">",
    		ctx
    	});

    	return block;
    }

    // (47:16)    <Spinner />  {:then values}
    function create_pending_block$1(ctx) {
    	let spinner;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(spinner.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(47:16)    <Spinner />  {:then values}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let await_block_anchor;
    	let promise;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block$1,
    		value: 11,
    		error: 15,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*valuesP*/ ctx[1], info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		l: function claim(nodes) {
    			await_block_anchor = empty();
    			info.block.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*valuesP*/ 2 && promise !== (promise = /*valuesP*/ ctx[1]) && handle_promise(promise, info)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[11] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { label } = $$props;
    	let { collectionPath } = $$props;
    	let { filters = [] } = $$props;
    	let { defaultValue } = $$props;
    	let valuesP;
    	let newFilters;
    	let selected;

    	function initSelect(values) {
    		console.log("values received", label);

    		$$invalidate(3, selected = defaultValue && values.includes(defaultValue)
    		? defaultValue
    		: values[0]);

    		$$invalidate(4, defaultValue = null);
    	}

    	const writable_props = ["label", "collectionPath", "filters", "defaultValue"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Filter> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Filter", $$slots, ['default']);

    	function select_value_binding(value) {
    		selected = value;
    		$$invalidate(3, selected);
    	}

    	$$self.$$set = $$props => {
    		if ("label" in $$props) $$invalidate(0, label = $$props.label);
    		if ("collectionPath" in $$props) $$invalidate(5, collectionPath = $$props.collectionPath);
    		if ("filters" in $$props) $$invalidate(6, filters = $$props.filters);
    		if ("defaultValue" in $$props) $$invalidate(4, defaultValue = $$props.defaultValue);
    		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		collections,
    		Select,
    		Option,
    		fetchCollection,
    		Spinner,
    		getCollection,
    		label,
    		collectionPath,
    		filters,
    		defaultValue,
    		valuesP,
    		newFilters,
    		selected,
    		initSelect
    	});

    	$$self.$inject_state = $$props => {
    		if ("label" in $$props) $$invalidate(0, label = $$props.label);
    		if ("collectionPath" in $$props) $$invalidate(5, collectionPath = $$props.collectionPath);
    		if ("filters" in $$props) $$invalidate(6, filters = $$props.filters);
    		if ("defaultValue" in $$props) $$invalidate(4, defaultValue = $$props.defaultValue);
    		if ("valuesP" in $$props) $$invalidate(1, valuesP = $$props.valuesP);
    		if ("newFilters" in $$props) $$invalidate(2, newFilters = $$props.newFilters);
    		if ("selected" in $$props) $$invalidate(3, selected = $$props.selected);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*collectionPath, filters*/ 96) {
    			 $$invalidate(1, valuesP = getCollection({
    				collectionPath,
    				filters,
    				thenCallback: initSelect,
    				extract: "name"
    			}));
    		}

    		if ($$self.$$.dirty & /*selected, filters, collectionPath*/ 104) {
    			 {
    				if (selected) {
    					$$invalidate(2, newFilters = [
    						...filters,
    						{
    							[collectionPath.toLowerCase().slice(0, -1)]: selected
    						}
    					]); // selected
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*label, selected*/ 9) {
    			 {
    				console.log("selected", label, selected);
    			}
    		}
    	};

    	return [
    		label,
    		valuesP,
    		newFilters,
    		selected,
    		defaultValue,
    		collectionPath,
    		filters,
    		$$slots,
    		select_value_binding,
    		$$scope
    	];
    }

    class Filter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			label: 0,
    			collectionPath: 5,
    			filters: 6,
    			defaultValue: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Filter",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*label*/ ctx[0] === undefined && !("label" in props)) {
    			console_1$1.warn("<Filter> was created without expected prop 'label'");
    		}

    		if (/*collectionPath*/ ctx[5] === undefined && !("collectionPath" in props)) {
    			console_1$1.warn("<Filter> was created without expected prop 'collectionPath'");
    		}

    		if (/*defaultValue*/ ctx[4] === undefined && !("defaultValue" in props)) {
    			console_1$1.warn("<Filter> was created without expected prop 'defaultValue'");
    		}
    	}

    	get label() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get collectionPath() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set collectionPath(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filters() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filters(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get defaultValue() {
    		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set defaultValue(value) {
    		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    	  path: basedir,
    	  exports: {},
    	  require: function (path, base) {
          return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
        }
    	}, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

    var token = '%[a-f0-9]{2}';
    var singleMatcher = new RegExp(token, 'gi');
    var multiMatcher = new RegExp('(' + token + ')+', 'gi');

    function decodeComponents(components, split) {
    	try {
    		// Try to decode the entire string first
    		return decodeURIComponent(components.join(''));
    	} catch (err) {
    		// Do nothing
    	}

    	if (components.length === 1) {
    		return components;
    	}

    	split = split || 1;

    	// Split the array in 2 parts
    	var left = components.slice(0, split);
    	var right = components.slice(split);

    	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }

    function decode(input) {
    	try {
    		return decodeURIComponent(input);
    	} catch (err) {
    		var tokens = input.match(singleMatcher);

    		for (var i = 1; i < tokens.length; i++) {
    			input = decodeComponents(tokens, i).join('');

    			tokens = input.match(singleMatcher);
    		}

    		return input;
    	}
    }

    function customDecodeURIComponent(input) {
    	// Keep track of all the replacements and prefill the map with the `BOM`
    	var replaceMap = {
    		'%FE%FF': '\uFFFD\uFFFD',
    		'%FF%FE': '\uFFFD\uFFFD'
    	};

    	var match = multiMatcher.exec(input);
    	while (match) {
    		try {
    			// Decode as big chunks as possible
    			replaceMap[match[0]] = decodeURIComponent(match[0]);
    		} catch (err) {
    			var result = decode(match[0]);

    			if (result !== match[0]) {
    				replaceMap[match[0]] = result;
    			}
    		}

    		match = multiMatcher.exec(input);
    	}

    	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    	replaceMap['%C2'] = '\uFFFD';

    	var entries = Object.keys(replaceMap);

    	for (var i = 0; i < entries.length; i++) {
    		// Replace all decoded components
    		var key = entries[i];
    		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    	}

    	return input;
    }

    var decodeUriComponent = function (encodedURI) {
    	if (typeof encodedURI !== 'string') {
    		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
    	}

    	try {
    		encodedURI = encodedURI.replace(/\+/g, ' ');

    		// Try the built in decoder first
    		return decodeURIComponent(encodedURI);
    	} catch (err) {
    		// Fallback to a more advanced decoder
    		return customDecodeURIComponent(encodedURI);
    	}
    };

    var splitOnFirst = (string, separator) => {
    	if (!(typeof string === 'string' && typeof separator === 'string')) {
    		throw new TypeError('Expected the arguments to be of type `string`');
    	}

    	if (separator === '') {
    		return [string];
    	}

    	const separatorIndex = string.indexOf(separator);

    	if (separatorIndex === -1) {
    		return [string];
    	}

    	return [
    		string.slice(0, separatorIndex),
    		string.slice(separatorIndex + separator.length)
    	];
    };

    var queryString = createCommonjsModule(function (module, exports) {




    const isNullOrUndefined = value => value === null || value === undefined;

    function encoderForArrayFormat(options) {
    	switch (options.arrayFormat) {
    		case 'index':
    			return key => (result, value) => {
    				const index = result.length;

    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[', index, ']'].join('')];
    				}

    				return [
    					...result,
    					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
    				];
    			};

    		case 'bracket':
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[]'].join('')];
    				}

    				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
    			};

    		case 'comma':
    		case 'separator':
    			return key => (result, value) => {
    				if (value === null || value === undefined || value.length === 0) {
    					return result;
    				}

    				if (result.length === 0) {
    					return [[encode(key, options), '=', encode(value, options)].join('')];
    				}

    				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
    			};

    		default:
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, encode(key, options)];
    				}

    				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
    			};
    	}
    }

    function parserForArrayFormat(options) {
    	let result;

    	switch (options.arrayFormat) {
    		case 'index':
    			return (key, value, accumulator) => {
    				result = /\[(\d*)\]$/.exec(key);

    				key = key.replace(/\[\d*\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = {};
    				}

    				accumulator[key][result[1]] = value;
    			};

    		case 'bracket':
    			return (key, value, accumulator) => {
    				result = /(\[\])$/.exec(key);
    				key = key.replace(/\[\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = [value];
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};

    		case 'comma':
    		case 'separator':
    			return (key, value, accumulator) => {
    				const isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;
    				const newValue = isArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
    				accumulator[key] = newValue;
    			};

    		default:
    			return (key, value, accumulator) => {
    				if (accumulator[key] === undefined) {
    					accumulator[key] = value;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};
    	}
    }

    function validateArrayFormatSeparator(value) {
    	if (typeof value !== 'string' || value.length !== 1) {
    		throw new TypeError('arrayFormatSeparator must be single character string');
    	}
    }

    function encode(value, options) {
    	if (options.encode) {
    		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
    	}

    	return value;
    }

    function decode(value, options) {
    	if (options.decode) {
    		return decodeUriComponent(value);
    	}

    	return value;
    }

    function keysSorter(input) {
    	if (Array.isArray(input)) {
    		return input.sort();
    	}

    	if (typeof input === 'object') {
    		return keysSorter(Object.keys(input))
    			.sort((a, b) => Number(a) - Number(b))
    			.map(key => input[key]);
    	}

    	return input;
    }

    function removeHash(input) {
    	const hashStart = input.indexOf('#');
    	if (hashStart !== -1) {
    		input = input.slice(0, hashStart);
    	}

    	return input;
    }

    function getHash(url) {
    	let hash = '';
    	const hashStart = url.indexOf('#');
    	if (hashStart !== -1) {
    		hash = url.slice(hashStart);
    	}

    	return hash;
    }

    function extract(input) {
    	input = removeHash(input);
    	const queryStart = input.indexOf('?');
    	if (queryStart === -1) {
    		return '';
    	}

    	return input.slice(queryStart + 1);
    }

    function parseValue(value, options) {
    	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
    		value = Number(value);
    	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
    		value = value.toLowerCase() === 'true';
    	}

    	return value;
    }

    function parse(input, options) {
    	options = Object.assign({
    		decode: true,
    		sort: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ',',
    		parseNumbers: false,
    		parseBooleans: false
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const formatter = parserForArrayFormat(options);

    	// Create an object with no prototype
    	const ret = Object.create(null);

    	if (typeof input !== 'string') {
    		return ret;
    	}

    	input = input.trim().replace(/^[?#&]/, '');

    	if (!input) {
    		return ret;
    	}

    	for (const param of input.split('&')) {
    		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

    		// Missing `=` should be `null`:
    		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    		value = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);
    		formatter(decode(key, options), value, ret);
    	}

    	for (const key of Object.keys(ret)) {
    		const value = ret[key];
    		if (typeof value === 'object' && value !== null) {
    			for (const k of Object.keys(value)) {
    				value[k] = parseValue(value[k], options);
    			}
    		} else {
    			ret[key] = parseValue(value, options);
    		}
    	}

    	if (options.sort === false) {
    		return ret;
    	}

    	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
    		const value = ret[key];
    		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
    			// Sort object keys, not values
    			result[key] = keysSorter(value);
    		} else {
    			result[key] = value;
    		}

    		return result;
    	}, Object.create(null));
    }

    exports.extract = extract;
    exports.parse = parse;

    exports.stringify = (object, options) => {
    	if (!object) {
    		return '';
    	}

    	options = Object.assign({
    		encode: true,
    		strict: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ','
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const shouldFilter = key => (
    		(options.skipNull && isNullOrUndefined(object[key])) ||
    		(options.skipEmptyString && object[key] === '')
    	);

    	const formatter = encoderForArrayFormat(options);

    	const objectCopy = {};

    	for (const key of Object.keys(object)) {
    		if (!shouldFilter(key)) {
    			objectCopy[key] = object[key];
    		}
    	}

    	const keys = Object.keys(objectCopy);

    	if (options.sort !== false) {
    		keys.sort(options.sort);
    	}

    	return keys.map(key => {
    		const value = object[key];

    		if (value === undefined) {
    			return '';
    		}

    		if (value === null) {
    			return encode(key, options);
    		}

    		if (Array.isArray(value)) {
    			return value
    				.reduce(formatter(key), [])
    				.join('&');
    		}

    		return encode(key, options) + '=' + encode(value, options);
    	}).filter(x => x.length > 0).join('&');
    };

    exports.parseUrl = (input, options) => {
    	options = Object.assign({
    		decode: true
    	}, options);

    	const [url, hash] = splitOnFirst(input, '#');

    	return Object.assign(
    		{
    			url: url.split('?')[0] || '',
    			query: parse(extract(input), options)
    		},
    		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
    	);
    };

    exports.stringifyUrl = (input, options) => {
    	options = Object.assign({
    		encode: true,
    		strict: true
    	}, options);

    	const url = removeHash(input.url).split('?')[0] || '';
    	const queryFromUrl = exports.extract(input.url);
    	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

    	const query = Object.assign(parsedQueryFromUrl, input.query);
    	let queryString = exports.stringify(query, options);
    	if (queryString) {
    		queryString = `?${queryString}`;
    	}

    	let hash = getHash(input.url);
    	if (input.fragmentIdentifier) {
    		hash = `#${encode(input.fragmentIdentifier, options)}`;
    	}

    	return `${url}${queryString}${hash}`;
    };
    });

    /* src/components/ThemeItem.svelte generated by Svelte v3.24.1 */

    const file$g = "src/components/ThemeItem.svelte";
    const get_buttons_slot_changes = dirty => ({});
    const get_buttons_slot_context = ctx => ({});
    const get_text_slot_changes = dirty => ({});
    const get_text_slot_context = ctx => ({});

    function create_fragment$k(ctx) {
    	let div2;
    	let div0;
    	let t;
    	let div1;
    	let current;
    	const text_slot_template = /*$$slots*/ ctx[1].text;
    	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[0], get_text_slot_context);
    	const buttons_slot_template = /*$$slots*/ ctx[1].buttons;
    	const buttons_slot = create_slot(buttons_slot_template, ctx, /*$$scope*/ ctx[0], get_buttons_slot_context);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			if (text_slot) text_slot.c();
    			t = space();
    			div1 = element("div");
    			if (buttons_slot) buttons_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div2 = claim_element(nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			div0 = claim_element(div2_nodes, "DIV", { class: true });
    			var div0_nodes = children(div0);
    			if (text_slot) text_slot.l(div0_nodes);
    			div0_nodes.forEach(detach_dev);
    			t = claim_space(div2_nodes);
    			div1 = claim_element(div2_nodes, "DIV", { class: true });
    			var div1_nodes = children(div1);
    			if (buttons_slot) buttons_slot.l(div1_nodes);
    			div1_nodes.forEach(detach_dev);
    			div2_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div0, "class", "text svelte-1dm7v6b");
    			add_location(div0, file$g, 5, 4, 49);
    			attr_dev(div1, "class", "buttons svelte-1dm7v6b");
    			add_location(div1, file$g, 8, 4, 117);
    			attr_dev(div2, "class", "theme svelte-1dm7v6b");
    			add_location(div2, file$g, 4, 0, 25);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);

    			if (text_slot) {
    				text_slot.m(div0, null);
    			}

    			append_dev(div2, t);
    			append_dev(div2, div1);

    			if (buttons_slot) {
    				buttons_slot.m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (text_slot) {
    				if (text_slot.p && dirty & /*$$scope*/ 1) {
    					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[0], dirty, get_text_slot_changes, get_text_slot_context);
    				}
    			}

    			if (buttons_slot) {
    				if (buttons_slot.p && dirty & /*$$scope*/ 1) {
    					update_slot(buttons_slot, buttons_slot_template, ctx, /*$$scope*/ ctx[0], dirty, get_buttons_slot_changes, get_buttons_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(text_slot, local);
    			transition_in(buttons_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(text_slot, local);
    			transition_out(buttons_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (text_slot) text_slot.d(detaching);
    			if (buttons_slot) buttons_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ThemeItem> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("ThemeItem", $$slots, ['text','buttons']);

    	$$self.$$set = $$props => {
    		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, $$slots];
    }

    class ThemeItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ThemeItem",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    var css_248z$6 = "@import url(\"https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap\");.mdc-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);display:inline-flex;position:relative;align-items:center;justify-content:center;box-sizing:border-box;width:56px;height:56px;padding:0;border:none;fill:currentColor;text-decoration:none;cursor:pointer;user-select:none;-moz-appearance:none;-webkit-appearance:none;overflow:hidden;transition:box-shadow .28s cubic-bezier(.4,0,.2,1),opacity 15ms linear 30ms,transform .27s cubic-bezier(0,0,.2,1) 0ms;background-color:#018786;color:#fff;color:var(--mdc-theme-on-secondary,#fff)}.mdc-fab:not(.mdc-fab--extended){border-radius:50%}.mdc-fab::-moz-focus-inner{padding:0;border:0}.mdc-fab:focus,.mdc-fab:hover{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mdc-fab:active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mdc-fab:active,.mdc-fab:focus{outline:none}.mdc-fab:hover{cursor:pointer}.mdc-fab>svg{width:100%}@supports not (-ms-ime-align:auto){.mdc-fab{background-color:var(--mdc-theme-secondary,#018786)}}.mdc-fab .mdc-fab__icon{width:24px;height:24px;font-size:24px}.mdc-fab--mini{width:40px;height:40px}.mdc-fab--extended{font-family:Lato,sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:2.25rem;font-weight:500;letter-spacing:.08929em;text-decoration:none;text-transform:uppercase;border-radius:24px;padding:0 20px;width:auto;max-width:100%;height:48px}.mdc-fab--extended .mdc-fab__icon{margin-left:-8px;margin-right:12px}.mdc-fab--extended .mdc-fab__icon[dir=rtl],.mdc-fab--extended .mdc-fab__label+.mdc-fab__icon,[dir=rtl] .mdc-fab--extended .mdc-fab__icon{margin-left:12px;margin-right:-8px}.mdc-fab--extended .mdc-fab__label+.mdc-fab__icon[dir=rtl],[dir=rtl] .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon{margin-left:-8px;margin-right:12px}.mdc-fab__label{justify-content:flex-start;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.mdc-fab__icon{transition:transform .18s cubic-bezier(0,0,.2,1) 90ms;fill:currentColor;will-change:transform}.mdc-fab .mdc-fab__icon{display:inline-flex;align-items:center;justify-content:center}.mdc-fab--exited{transform:scale(0);opacity:0;transition:opacity 15ms linear .15s,transform .18s cubic-bezier(.4,0,1,1) 0ms}.mdc-fab--exited .mdc-fab__icon{transform:scale(0);transition:transform 135ms cubic-bezier(.4,0,1,1) 0ms}@keyframes mdc-ripple-fg-radius-in{0%{animation-timing-function:cubic-bezier(.4,0,.2,1);transform:translate(var(--mdc-ripple-fg-translate-start,0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}}@keyframes mdc-ripple-fg-opacity-in{0%{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity,0)}}@keyframes mdc-ripple-fg-opacity-out{0%{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity,0)}to{opacity:0}}.mdc-ripple-surface--test-edge-var-bug{--mdc-ripple-surface-test-edge-var:1px solid #000;visibility:hidden}.mdc-ripple-surface--test-edge-var-bug:before{border:var(--mdc-ripple-surface-test-edge-var)}.mdc-fab{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-fab:after,.mdc-fab:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}.mdc-fab:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-fab.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-fab.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-fab.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}.mdc-fab.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-fab.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-fab:after,.mdc-fab:before{top:-50%;left:-50%;width:200%;height:200%}.mdc-fab.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-fab:after,.mdc-fab:before{background-color:#fff}@supports not (-ms-ime-align:auto){.mdc-fab:after,.mdc-fab:before{background-color:var(--mdc-theme-on-secondary,#fff)}}.mdc-fab:hover:before{opacity:.08}.mdc-fab.mdc-ripple-upgraded--background-focused:before,.mdc-fab:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.24}.mdc-fab:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-fab:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.24}.mdc-fab.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.24}.mdc-ripple-surface{--mdc-ripple-fg-size:0;--mdc-ripple-left:0;--mdc-ripple-top:0;--mdc-ripple-fg-scale:1;--mdc-ripple-fg-translate-end:0;--mdc-ripple-fg-translate-start:0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:relative;outline:none;overflow:hidden}.mdc-ripple-surface:after,.mdc-ripple-surface:before{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:\"\"}.mdc-ripple-surface:before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-ripple-surface.mdc-ripple-upgraded:before{transform:scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface.mdc-ripple-upgraded:after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-ripple-surface.mdc-ripple-upgraded--unbounded:after{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0)}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-activation:after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-ripple-surface.mdc-ripple-upgraded--foreground-deactivation:after{animation:mdc-ripple-fg-opacity-out .15s;transform:translate(var(--mdc-ripple-fg-translate-end,0)) scale(var(--mdc-ripple-fg-scale,1))}.mdc-ripple-surface:after,.mdc-ripple-surface:before{background-color:#000}.mdc-ripple-surface:hover:before{opacity:.04}.mdc-ripple-surface.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.mdc-ripple-surface:after,.mdc-ripple-surface:before{top:-50%;left:-50%;width:200%;height:200%}.mdc-ripple-surface.mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]{overflow:visible}.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded]:before{top:0;left:0;width:100%;height:100%}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after,.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:before{top:var(--mdc-ripple-top,0);left:var(--mdc-ripple-left,0);width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface[data-mdc-ripple-is-unbounded].mdc-ripple-upgraded:after{width:var(--mdc-ripple-fg-size,100%);height:var(--mdc-ripple-fg-size,100%)}.mdc-ripple-surface--primary:after,.mdc-ripple-surface--primary:before{background-color:#6200ee}@supports not (-ms-ime-align:auto){.mdc-ripple-surface--primary:after,.mdc-ripple-surface--primary:before{background-color:var(--mdc-theme-primary,#6200ee)}}.mdc-ripple-surface--primary:hover:before{opacity:.04}.mdc-ripple-surface--primary.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface--primary:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--primary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.mdc-ripple-surface--accent:after,.mdc-ripple-surface--accent:before{background-color:#018786}@supports not (-ms-ime-align:auto){.mdc-ripple-surface--accent:after,.mdc-ripple-surface--accent:before{background-color:var(--mdc-theme-secondary,#018786)}}.mdc-ripple-surface--accent:hover:before{opacity:.04}.mdc-ripple-surface--accent.mdc-ripple-upgraded--background-focused:before,.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.mdc-ripple-surface--accent:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.12}.mdc-ripple-surface--accent.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.12}.smui-fab--color-primary{background-color:#6200ee;color:#fff;color:var(--mdc-theme-on-primary,#fff)}@supports not (-ms-ime-align:auto){.smui-fab--color-primary{background-color:var(--mdc-theme-primary,#6200ee)}}.smui-fab--color-primary:after,.smui-fab--color-primary:before{background-color:#fff}@supports not (-ms-ime-align:auto){.smui-fab--color-primary:after,.smui-fab--color-primary:before{background-color:var(--mdc-theme-on-primary,#fff)}}.smui-fab--color-primary:hover:before{opacity:.08}.smui-fab--color-primary.mdc-ripple-upgraded--background-focused:before,.smui-fab--color-primary:not(.mdc-ripple-upgraded):focus:before{transition-duration:75ms;opacity:.24}.smui-fab--color-primary:not(.mdc-ripple-upgraded):after{transition:opacity .15s linear}.smui-fab--color-primary:not(.mdc-ripple-upgraded):active:after{transition-duration:75ms;opacity:.24}.smui-fab--color-primary.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:0.24}";
    styleInject(css_248z$6);

    /* node_modules/@smui/fab/Fab.svelte generated by Svelte v3.24.1 */
    const file$h = "node_modules/@smui/fab/Fab.svelte";

    function create_fragment$l(ctx) {
    	let button;
    	let button_class_value;
    	let useActions_action;
    	let forwardEvents_action;
    	let Ripple_action;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	let button_levels = [
    		{
    			class: button_class_value = "\n    mdc-fab\n    " + /*className*/ ctx[1] + "\n    " + (/*mini*/ ctx[4] ? "mdc-fab--mini" : "") + "\n    " + (/*exited*/ ctx[5] ? "mdc-fab--exited" : "") + "\n    " + (/*extended*/ ctx[6] ? "mdc-fab--extended" : "") + "\n    " + (/*color*/ ctx[3] === "primary"
    			? "smui-fab--color-primary"
    			: "") + "\n  "
    		},
    		exclude(/*$$props*/ ctx[8], ["use", "class", "ripple", "color", "mini", "exited", "extended"])
    	];

    	let button_data = {};

    	for (let i = 0; i < button_levels.length; i += 1) {
    		button_data = assign(button_data, button_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			button = claim_element(nodes, "BUTTON", { class: true });
    			var button_nodes = children(button);
    			if (default_slot) default_slot.l(button_nodes);
    			button_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(button, button_data);
    			add_location(button, file$h, 0, 0, 0);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(useActions_action = useActions.call(null, button, /*use*/ ctx[0])),
    					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[7].call(null, button)),
    					action_destroyer(Ripple_action = Ripple.call(null, button, {
    						ripple: /*ripple*/ ctx[2],
    						unbounded: false
    					}))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 512) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
    				}
    			}

    			set_attributes(button, button_data = get_spread_update(button_levels, [
    				(!current || dirty & /*className, mini, exited, extended, color*/ 122 && button_class_value !== (button_class_value = "\n    mdc-fab\n    " + /*className*/ ctx[1] + "\n    " + (/*mini*/ ctx[4] ? "mdc-fab--mini" : "") + "\n    " + (/*exited*/ ctx[5] ? "mdc-fab--exited" : "") + "\n    " + (/*extended*/ ctx[6] ? "mdc-fab--extended" : "") + "\n    " + (/*color*/ ctx[3] === "primary"
    				? "smui-fab--color-primary"
    				: "") + "\n  ")) && { class: button_class_value },
    				dirty & /*$$props*/ 256 && exclude(/*$$props*/ ctx[8], ["use", "class", "ripple", "color", "mini", "exited", "extended"])
    			]));

    			if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);

    			if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple*/ 4) Ripple_action.update.call(null, {
    				ripple: /*ripple*/ ctx[2],
    				unbounded: false
    			});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	const forwardEvents = forwardEventsBuilder(get_current_component());
    	let { use = [] } = $$props;
    	let { class: className = "" } = $$props;
    	let { ripple = true } = $$props;
    	let { color = "secondary" } = $$props;
    	let { mini = false } = $$props;
    	let { exited = false } = $$props;
    	let { extended = false } = $$props;
    	setContext("SMUI:label:context", "fab");
    	setContext("SMUI:icon:context", "fab");
    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Fab", $$slots, ['default']);

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("use" in $$new_props) $$invalidate(0, use = $$new_props.use);
    		if ("class" in $$new_props) $$invalidate(1, className = $$new_props.class);
    		if ("ripple" in $$new_props) $$invalidate(2, ripple = $$new_props.ripple);
    		if ("color" in $$new_props) $$invalidate(3, color = $$new_props.color);
    		if ("mini" in $$new_props) $$invalidate(4, mini = $$new_props.mini);
    		if ("exited" in $$new_props) $$invalidate(5, exited = $$new_props.exited);
    		if ("extended" in $$new_props) $$invalidate(6, extended = $$new_props.extended);
    		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		setContext,
    		get_current_component,
    		forwardEventsBuilder,
    		exclude,
    		useActions,
    		Ripple,
    		forwardEvents,
    		use,
    		className,
    		ripple,
    		color,
    		mini,
    		exited,
    		extended
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ("use" in $$props) $$invalidate(0, use = $$new_props.use);
    		if ("className" in $$props) $$invalidate(1, className = $$new_props.className);
    		if ("ripple" in $$props) $$invalidate(2, ripple = $$new_props.ripple);
    		if ("color" in $$props) $$invalidate(3, color = $$new_props.color);
    		if ("mini" in $$props) $$invalidate(4, mini = $$new_props.mini);
    		if ("exited" in $$props) $$invalidate(5, exited = $$new_props.exited);
    		if ("extended" in $$props) $$invalidate(6, extended = $$new_props.extended);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);

    	return [
    		use,
    		className,
    		ripple,
    		color,
    		mini,
    		exited,
    		extended,
    		forwardEvents,
    		$$props,
    		$$scope,
    		$$slots
    	];
    }

    class Fab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			use: 0,
    			class: 1,
    			ripple: 2,
    			color: 3,
    			mini: 4,
    			exited: 5,
    			extended: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Fab",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get use() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set use(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ripple() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ripple(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mini() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mini(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get exited() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set exited(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get extended() {
    		throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set extended(value) {
    		throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const LOCATION = {};
    const ROUTER = {};

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    function getLocation(source) {
      return {
        ...source.location,
        state: source.history.state,
        key: (source.history.state && source.history.state.key) || "initial"
      };
    }

    function createHistory(source, options) {
      const listeners = [];
      let location = getLocation(source);

      return {
        get location() {
          return location;
        },

        listen(listener) {
          listeners.push(listener);

          const popstateListener = () => {
            location = getLocation(source);
            listener({ location, action: "POP" });
          };

          source.addEventListener("popstate", popstateListener);

          return () => {
            source.removeEventListener("popstate", popstateListener);

            const index = listeners.indexOf(listener);
            listeners.splice(index, 1);
          };
        },

        navigate(to, { state, replace = false } = {}) {
          state = { ...state, key: Date.now() + "" };
          // try...catch iOS Safari limits to 100 pushState calls
          try {
            if (replace) {
              source.history.replaceState(state, null, to);
            } else {
              source.history.pushState(state, null, to);
            }
          } catch (e) {
            source.location[replace ? "replace" : "assign"](to);
          }

          location = getLocation(source);
          listeners.forEach(listener => listener({ location, action: "PUSH" }));
        }
      };
    }

    // Stores history entries in memory for testing or other platforms like Native
    function createMemorySource(initialPathname = "/") {
      let index = 0;
      const stack = [{ pathname: initialPathname, search: "" }];
      const states = [];

      return {
        get location() {
          return stack[index];
        },
        addEventListener(name, fn) {},
        removeEventListener(name, fn) {},
        history: {
          get entries() {
            return stack;
          },
          get index() {
            return index;
          },
          get state() {
            return states[index];
          },
          pushState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            index++;
            stack.push({ pathname, search });
            states.push(state);
          },
          replaceState(state, _, uri) {
            const [pathname, search = ""] = uri.split("?");
            stack[index] = { pathname, search };
            states[index] = state;
          }
        }
      };
    }

    // Global history uses window.history as the source if available,
    // otherwise a memory history
    const canUseDOM = Boolean(
      typeof window !== "undefined" &&
        window.document &&
        window.document.createElement
    );
    const globalHistory = createHistory(canUseDOM ? window : createMemorySource());
    const { navigate } = globalHistory;

    /**
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     * */

    const paramRe = /^:(.+)/;

    const SEGMENT_POINTS = 4;
    const STATIC_POINTS = 3;
    const DYNAMIC_POINTS = 2;
    const SPLAT_PENALTY = 1;
    const ROOT_POINTS = 1;

    /**
     * Check if `string` starts with `search`
     * @param {string} string
     * @param {string} search
     * @return {boolean}
     */
    function startsWith(string, search) {
      return string.substr(0, search.length) === search;
    }

    /**
     * Check if `segment` is a root segment
     * @param {string} segment
     * @return {boolean}
     */
    function isRootSegment(segment) {
      return segment === "";
    }

    /**
     * Check if `segment` is a dynamic segment
     * @param {string} segment
     * @return {boolean}
     */
    function isDynamic(segment) {
      return paramRe.test(segment);
    }

    /**
     * Check if `segment` is a splat
     * @param {string} segment
     * @return {boolean}
     */
    function isSplat(segment) {
      return segment[0] === "*";
    }

    /**
     * Split up the URI into segments delimited by `/`
     * @param {string} uri
     * @return {string[]}
     */
    function segmentize(uri) {
      return (
        uri
          // Strip starting/ending `/`
          .replace(/(^\/+|\/+$)/g, "")
          .split("/")
      );
    }

    /**
     * Strip `str` of potential start and end `/`
     * @param {string} str
     * @return {string}
     */
    function stripSlashes(str) {
      return str.replace(/(^\/+|\/+$)/g, "");
    }

    /**
     * Score a route depending on how its individual segments look
     * @param {object} route
     * @param {number} index
     * @return {object}
     */
    function rankRoute(route, index) {
      const score = route.default
        ? 0
        : segmentize(route.path).reduce((score, segment) => {
            score += SEGMENT_POINTS;

            if (isRootSegment(segment)) {
              score += ROOT_POINTS;
            } else if (isDynamic(segment)) {
              score += DYNAMIC_POINTS;
            } else if (isSplat(segment)) {
              score -= SEGMENT_POINTS + SPLAT_PENALTY;
            } else {
              score += STATIC_POINTS;
            }

            return score;
          }, 0);

      return { route, score, index };
    }

    /**
     * Give a score to all routes and sort them on that
     * @param {object[]} routes
     * @return {object[]}
     */
    function rankRoutes(routes) {
      return (
        routes
          .map(rankRoute)
          // If two routes have the exact same score, we go by index instead
          .sort((a, b) =>
            a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index
          )
      );
    }

    /**
     * Ranks and picks the best route to match. Each segment gets the highest
     * amount of points, then the type of segment gets an additional amount of
     * points where
     *
     *  static > dynamic > splat > root
     *
     * This way we don't have to worry about the order of our routes, let the
     * computers do it.
     *
     * A route looks like this
     *
     *  { path, default, value }
     *
     * And a returned match looks like:
     *
     *  { route, params, uri }
     *
     * @param {object[]} routes
     * @param {string} uri
     * @return {?object}
     */
    function pick(routes, uri) {
      let match;
      let default_;

      const [uriPathname] = uri.split("?");
      const uriSegments = segmentize(uriPathname);
      const isRootUri = uriSegments[0] === "";
      const ranked = rankRoutes(routes);

      for (let i = 0, l = ranked.length; i < l; i++) {
        const route = ranked[i].route;
        let missed = false;

        if (route.default) {
          default_ = {
            route,
            params: {},
            uri
          };
          continue;
        }

        const routeSegments = segmentize(route.path);
        const params = {};
        const max = Math.max(uriSegments.length, routeSegments.length);
        let index = 0;

        for (; index < max; index++) {
          const routeSegment = routeSegments[index];
          const uriSegment = uriSegments[index];

          if (routeSegment !== undefined && isSplat(routeSegment)) {
            // Hit a splat, just grab the rest, and return a match
            // uri:   /files/documents/work
            // route: /files/* or /files/*splatname
            const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);

            params[splatName] = uriSegments
              .slice(index)
              .map(decodeURIComponent)
              .join("/");
            break;
          }

          if (uriSegment === undefined) {
            // URI is shorter than the route, no match
            // uri:   /users
            // route: /users/:userId
            missed = true;
            break;
          }

          let dynamicMatch = paramRe.exec(routeSegment);

          if (dynamicMatch && !isRootUri) {
            const value = decodeURIComponent(uriSegment);
            params[dynamicMatch[1]] = value;
          } else if (routeSegment !== uriSegment) {
            // Current segments don't match, not dynamic, not splat, so no match
            // uri:   /users/123/settings
            // route: /users/:id/profile
            missed = true;
            break;
          }
        }

        if (!missed) {
          match = {
            route,
            params,
            uri: "/" + uriSegments.slice(0, index).join("/")
          };
          break;
        }
      }

      return match || default_ || null;
    }

    /**
     * Check if the `path` matches the `uri`.
     * @param {string} path
     * @param {string} uri
     * @return {?object}
     */
    function match(route, uri) {
      return pick([route], uri);
    }

    /**
     * Add the query to the pathname if a query is given
     * @param {string} pathname
     * @param {string} [query]
     * @return {string}
     */
    function addQuery(pathname, query) {
      return pathname + (query ? `?${query}` : "");
    }

    /**
     * Resolve URIs as though every path is a directory, no files. Relative URIs
     * in the browser can feel awkward because not only can you be "in a directory",
     * you can be "at a file", too. For example:
     *
     *  browserSpecResolve('foo', '/bar/') => /bar/foo
     *  browserSpecResolve('foo', '/bar') => /foo
     *
     * But on the command line of a file system, it's not as complicated. You can't
     * `cd` from a file, only directories. This way, links have to know less about
     * their current path. To go deeper you can do this:
     *
     *  <Link to="deeper"/>
     *  // instead of
     *  <Link to=`{${props.uri}/deeper}`/>
     *
     * Just like `cd`, if you want to go deeper from the command line, you do this:
     *
     *  cd deeper
     *  # not
     *  cd $(pwd)/deeper
     *
     * By treating every path as a directory, linking to relative paths should
     * require less contextual information and (fingers crossed) be more intuitive.
     * @param {string} to
     * @param {string} base
     * @return {string}
     */
    function resolve(to, base) {
      // /foo/bar, /baz/qux => /foo/bar
      if (startsWith(to, "/")) {
        return to;
      }

      const [toPathname, toQuery] = to.split("?");
      const [basePathname] = base.split("?");
      const toSegments = segmentize(toPathname);
      const baseSegments = segmentize(basePathname);

      // ?a=b, /users?b=c => /users?a=b
      if (toSegments[0] === "") {
        return addQuery(basePathname, toQuery);
      }

      // profile, /users/789 => /users/789/profile
      if (!startsWith(toSegments[0], ".")) {
        const pathname = baseSegments.concat(toSegments).join("/");

        return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);
      }

      // ./       , /users/123 => /users/123
      // ../      , /users/123 => /users
      // ../..    , /users/123 => /
      // ../../one, /a/b/c/d   => /a/b/one
      // .././one , /a/b/c/d   => /a/b/c/one
      const allSegments = baseSegments.concat(toSegments);
      const segments = [];

      allSegments.forEach(segment => {
        if (segment === "..") {
          segments.pop();
        } else if (segment !== ".") {
          segments.push(segment);
        }
      });

      return addQuery("/" + segments.join("/"), toQuery);
    }

    /**
     * Combines the `basepath` and the `path` into one path.
     * @param {string} basepath
     * @param {string} path
     */
    function combinePaths(basepath, path) {
      return `${stripSlashes(
    path === "/" ? basepath : `${stripSlashes(basepath)}/${stripSlashes(path)}`
  )}/`;
    }

    /**
     * Decides whether a given `event` should result in a navigation or not.
     * @param {object} event
     */
    function shouldNavigate(event) {
      return (
        !event.defaultPrevented &&
        event.button === 0 &&
        !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
      );
    }

    /* node_modules/svelte-routing/src/Router.svelte generated by Svelte v3.24.1 */

    function create_fragment$m(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 32) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let $base;
    	let $location;
    	let $routes;
    	let { basepath = "/" } = $$props;
    	let { url = null } = $$props;
    	const locationContext = getContext(LOCATION);
    	const routerContext = getContext(ROUTER);
    	const routes = writable([]);
    	validate_store(routes, "routes");
    	component_subscribe($$self, routes, value => $$invalidate(10, $routes = value));
    	const activeRoute = writable(null);
    	let hasActiveRoute = false; // Used in SSR to synchronously set that a Route is active.

    	// If locationContext is not set, this is the topmost Router in the tree.
    	// If the `url` prop is given we force the location to it.
    	const location = locationContext || writable(url ? { pathname: url } : globalHistory.location);

    	validate_store(location, "location");
    	component_subscribe($$self, location, value => $$invalidate(9, $location = value));

    	// If routerContext is set, the routerBase of the parent Router
    	// will be the base for this Router's descendants.
    	// If routerContext is not set, the path and resolved uri will both
    	// have the value of the basepath prop.
    	const base = routerContext
    	? routerContext.routerBase
    	: writable({ path: basepath, uri: basepath });

    	validate_store(base, "base");
    	component_subscribe($$self, base, value => $$invalidate(8, $base = value));

    	const routerBase = derived([base, activeRoute], ([base, activeRoute]) => {
    		// If there is no activeRoute, the routerBase will be identical to the base.
    		if (activeRoute === null) {
    			return base;
    		}

    		const { path: basepath } = base;
    		const { route, uri } = activeRoute;

    		// Remove the potential /* or /*splatname from
    		// the end of the child Routes relative paths.
    		const path = route.default
    		? basepath
    		: route.path.replace(/\*.*$/, "");

    		return { path, uri };
    	});

    	function registerRoute(route) {
    		const { path: basepath } = $base;
    		let { path } = route;

    		// We store the original path in the _path property so we can reuse
    		// it when the basepath changes. The only thing that matters is that
    		// the route reference is intact, so mutation is fine.
    		route._path = path;

    		route.path = combinePaths(basepath, path);

    		if (typeof window === "undefined") {
    			// In SSR we should set the activeRoute immediately if it is a match.
    			// If there are more Routes being registered after a match is found,
    			// we just skip them.
    			if (hasActiveRoute) {
    				return;
    			}

    			const matchingRoute = match(route, $location.pathname);

    			if (matchingRoute) {
    				activeRoute.set(matchingRoute);
    				hasActiveRoute = true;
    			}
    		} else {
    			routes.update(rs => {
    				rs.push(route);
    				return rs;
    			});
    		}
    	}

    	function unregisterRoute(route) {
    		routes.update(rs => {
    			const index = rs.indexOf(route);
    			rs.splice(index, 1);
    			return rs;
    		});
    	}

    	if (!locationContext) {
    		// The topmost Router in the tree is responsible for updating
    		// the location store and supplying it through context.
    		onMount(() => {
    			const unlisten = globalHistory.listen(history => {
    				location.set(history.location);
    			});

    			return unlisten;
    		});

    		setContext(LOCATION, location);
    	}

    	setContext(ROUTER, {
    		activeRoute,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute
    	});

    	const writable_props = ["basepath", "url"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Router", $$slots, ['default']);

    	$$self.$$set = $$props => {
    		if ("basepath" in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ("url" in $$props) $$invalidate(4, url = $$props.url);
    		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		setContext,
    		onMount,
    		writable,
    		derived,
    		LOCATION,
    		ROUTER,
    		globalHistory,
    		pick,
    		match,
    		stripSlashes,
    		combinePaths,
    		basepath,
    		url,
    		locationContext,
    		routerContext,
    		routes,
    		activeRoute,
    		hasActiveRoute,
    		location,
    		base,
    		routerBase,
    		registerRoute,
    		unregisterRoute,
    		$base,
    		$location,
    		$routes
    	});

    	$$self.$inject_state = $$props => {
    		if ("basepath" in $$props) $$invalidate(3, basepath = $$props.basepath);
    		if ("url" in $$props) $$invalidate(4, url = $$props.url);
    		if ("hasActiveRoute" in $$props) hasActiveRoute = $$props.hasActiveRoute;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$base*/ 256) {
    			// This reactive statement will update all the Routes' path when
    			// the basepath changes.
    			 {
    				const { path: basepath } = $base;

    				routes.update(rs => {
    					rs.forEach(r => r.path = combinePaths(basepath, r._path));
    					return rs;
    				});
    			}
    		}

    		if ($$self.$$.dirty & /*$routes, $location*/ 1536) {
    			// This reactive statement will be run when the Router is created
    			// when there are no Routes and then again the following tick, so it
    			// will not find an active Route in SSR and in the browser it will only
    			// pick an active Route after all Routes have been registered.
    			 {
    				const bestMatch = pick($routes, $location.pathname);
    				activeRoute.set(bestMatch);
    			}
    		}
    	};

    	return [routes, location, base, basepath, url, $$scope, $$slots];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { basepath: 3, url: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get basepath() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set basepath(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get url() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-routing/src/Route.svelte generated by Svelte v3.24.1 */

    const get_default_slot_changes$1 = dirty => ({
    	params: dirty & /*routeParams*/ 2,
    	location: dirty & /*$location*/ 16
    });

    const get_default_slot_context$1 = ctx => ({
    	params: /*routeParams*/ ctx[1],
    	location: /*$location*/ ctx[4]
    });

    // (40:0) {#if $activeRoute !== null && $activeRoute.route === route}
    function create_if_block$9(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$3, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*component*/ ctx[0] !== null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(40:0) {#if $activeRoute !== null && $activeRoute.route === route}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {:else}
    function create_else_block$6(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, routeParams, $location*/ 530) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$1, get_default_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(43:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (41:2) {#if component !== null}
    function create_if_block_1$3(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{ location: /*$location*/ ctx[4] },
    		/*routeParams*/ ctx[1],
    		/*routeProps*/ ctx[2]
    	];

    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$location, routeParams, routeProps*/ 22)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*$location*/ 16 && { location: /*$location*/ ctx[4] },
    					dirty & /*routeParams*/ 2 && get_spread_object(/*routeParams*/ ctx[1]),
    					dirty & /*routeProps*/ 4 && get_spread_object(/*routeProps*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(41:2) {#if component !== null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$activeRoute*/ ctx[3] !== null && /*$activeRoute*/ ctx[3].route === /*route*/ ctx[7] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (if_block) if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$activeRoute*/ ctx[3] !== null && /*$activeRoute*/ ctx[3].route === /*route*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$activeRoute*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	let $location;
    	let { path = "" } = $$props;
    	let { component = null } = $$props;
    	const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
    	validate_store(activeRoute, "activeRoute");
    	component_subscribe($$self, activeRoute, value => $$invalidate(3, $activeRoute = value));
    	const location = getContext(LOCATION);
    	validate_store(location, "location");
    	component_subscribe($$self, location, value => $$invalidate(4, $location = value));

    	const route = {
    		path,
    		// If no path prop is given, this Route will act as the default Route
    		// that is rendered if no other Route in the Router is a match.
    		default: path === ""
    	};

    	let routeParams = {};
    	let routeProps = {};
    	registerRoute(route);

    	// There is no need to unregister Routes in SSR since it will all be
    	// thrown away anyway.
    	if (typeof window !== "undefined") {
    		onDestroy(() => {
    			unregisterRoute(route);
    		});
    	}

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Route", $$slots, ['default']);

    	$$self.$$set = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("path" in $$new_props) $$invalidate(8, path = $$new_props.path);
    		if ("component" in $$new_props) $$invalidate(0, component = $$new_props.component);
    		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onDestroy,
    		ROUTER,
    		LOCATION,
    		path,
    		component,
    		registerRoute,
    		unregisterRoute,
    		activeRoute,
    		location,
    		route,
    		routeParams,
    		routeProps,
    		$activeRoute,
    		$location
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    		if ("path" in $$props) $$invalidate(8, path = $$new_props.path);
    		if ("component" in $$props) $$invalidate(0, component = $$new_props.component);
    		if ("routeParams" in $$props) $$invalidate(1, routeParams = $$new_props.routeParams);
    		if ("routeProps" in $$props) $$invalidate(2, routeProps = $$new_props.routeProps);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$activeRoute*/ 8) {
    			 if ($activeRoute && $activeRoute.route === route) {
    				$$invalidate(1, routeParams = $activeRoute.params);
    			}
    		}

    		 {
    			const { path, component, ...rest } = $$props;
    			$$invalidate(2, routeProps = rest);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		component,
    		routeParams,
    		routeProps,
    		$activeRoute,
    		$location,
    		activeRoute,
    		location,
    		route,
    		path,
    		$$scope,
    		$$slots
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { path: 8, component: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get component() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set component(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-routing/src/Link.svelte generated by Svelte v3.24.1 */
    const file$i = "node_modules/svelte-routing/src/Link.svelte";

    function create_fragment$o(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	let a_levels = [
    		{ href: /*href*/ ctx[0] },
    		{ "aria-current": /*ariaCurrent*/ ctx[2] },
    		/*props*/ ctx[1]
    	];

    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			a = claim_element(nodes, "A", { href: true, "aria-current": true });
    			var a_nodes = children(a);
    			if (default_slot) default_slot.l(a_nodes);
    			a_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_attributes(a, a_data);
    			add_location(a, file$i, 40, 0, 1249);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*onClick*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 1024) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
    				(!current || dirty & /*ariaCurrent*/ 4) && { "aria-current": /*ariaCurrent*/ ctx[2] },
    				dirty & /*props*/ 2 && /*props*/ ctx[1]
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let $base;
    	let $location;
    	let { to = "#" } = $$props;
    	let { replace = false } = $$props;
    	let { state = {} } = $$props;
    	let { getProps = () => ({}) } = $$props;
    	const { base } = getContext(ROUTER);
    	validate_store(base, "base");
    	component_subscribe($$self, base, value => $$invalidate(14, $base = value));
    	const location = getContext(LOCATION);
    	validate_store(location, "location");
    	component_subscribe($$self, location, value => $$invalidate(15, $location = value));
    	const dispatch = createEventDispatcher();
    	let href, isPartiallyCurrent, isCurrent, props;

    	function onClick(event) {
    		dispatch("click", event);

    		if (shouldNavigate(event)) {
    			event.preventDefault();

    			// Don't push another entry to the history stack when the user
    			// clicks on a Link to the page they are currently on.
    			const shouldReplace = $location.pathname === href || replace;

    			navigate(href, { state, replace: shouldReplace });
    		}
    	}

    	const writable_props = ["to", "replace", "state", "getProps"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Link> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Link", $$slots, ['default']);

    	$$self.$$set = $$props => {
    		if ("to" in $$props) $$invalidate(6, to = $$props.to);
    		if ("replace" in $$props) $$invalidate(7, replace = $$props.replace);
    		if ("state" in $$props) $$invalidate(8, state = $$props.state);
    		if ("getProps" in $$props) $$invalidate(9, getProps = $$props.getProps);
    		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		ROUTER,
    		LOCATION,
    		navigate,
    		startsWith,
    		resolve,
    		shouldNavigate,
    		to,
    		replace,
    		state,
    		getProps,
    		base,
    		location,
    		dispatch,
    		href,
    		isPartiallyCurrent,
    		isCurrent,
    		props,
    		onClick,
    		$base,
    		$location,
    		ariaCurrent
    	});

    	$$self.$inject_state = $$props => {
    		if ("to" in $$props) $$invalidate(6, to = $$props.to);
    		if ("replace" in $$props) $$invalidate(7, replace = $$props.replace);
    		if ("state" in $$props) $$invalidate(8, state = $$props.state);
    		if ("getProps" in $$props) $$invalidate(9, getProps = $$props.getProps);
    		if ("href" in $$props) $$invalidate(0, href = $$props.href);
    		if ("isPartiallyCurrent" in $$props) $$invalidate(12, isPartiallyCurrent = $$props.isPartiallyCurrent);
    		if ("isCurrent" in $$props) $$invalidate(13, isCurrent = $$props.isCurrent);
    		if ("props" in $$props) $$invalidate(1, props = $$props.props);
    		if ("ariaCurrent" in $$props) $$invalidate(2, ariaCurrent = $$props.ariaCurrent);
    	};

    	let ariaCurrent;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*to, $base*/ 16448) {
    			 $$invalidate(0, href = to === "/" ? $base.uri : resolve(to, $base.uri));
    		}

    		if ($$self.$$.dirty & /*$location, href*/ 32769) {
    			 $$invalidate(12, isPartiallyCurrent = startsWith($location.pathname, href));
    		}

    		if ($$self.$$.dirty & /*href, $location*/ 32769) {
    			 $$invalidate(13, isCurrent = href === $location.pathname);
    		}

    		if ($$self.$$.dirty & /*isCurrent*/ 8192) {
    			 $$invalidate(2, ariaCurrent = isCurrent ? "page" : undefined);
    		}

    		if ($$self.$$.dirty & /*getProps, $location, href, isPartiallyCurrent, isCurrent*/ 45569) {
    			 $$invalidate(1, props = getProps({
    				location: $location,
    				href,
    				isPartiallyCurrent,
    				isCurrent
    			}));
    		}
    	};

    	return [
    		href,
    		props,
    		ariaCurrent,
    		base,
    		location,
    		onClick,
    		to,
    		replace,
    		state,
    		getProps,
    		$$scope,
    		$$slots
    	];
    }

    class Link extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { to: 6, replace: 7, state: 8, getProps: 9 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Link",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get to() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set to(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get replace() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set replace(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get state() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set state(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getProps() {
    		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getProps(value) {
    		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ThemesList.svelte generated by Svelte v3.24.1 */

    const { console: console_1$2 } = globals;
    const file$j = "src/components/ThemesList.svelte";

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    // (1:0) <script>   import { getCollection }
    function create_catch_block$2(ctx) {
    	const block = {
    		c: noop,
    		l: noop,
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$2.name,
    		type: "catch",
    		source: "(1:0) <script>   import { getCollection }",
    		ctx
    	});

    	return block;
    }

    // (83:0) {:then themes}
    function create_then_block$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*themes*/ ctx[13];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(nodes);
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*findLevels, promise, grade, navigate, subject, domain*/ 31) {
    				each_value = /*themes*/ ctx[13];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$2.name,
    		type: "then",
    		source: "(83:0) {:then themes}",
    		ctx
    	});

    	return block;
    }

    // (85:4) {#if findLevels(theme, grade).length}
    function create_if_block$a(ctx) {
    	let themeitem;
    	let current;

    	themeitem = new ThemeItem({
    			props: {
    				$$slots: {
    					default: [create_default_slot$6],
    					buttons: [create_buttons_slot],
    					text: [create_text_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(themeitem.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(themeitem.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(themeitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const themeitem_changes = {};

    			if (dirty & /*$$scope, promise, grade, subject, domain*/ 1048591) {
    				themeitem_changes.$$scope = { dirty, ctx };
    			}

    			themeitem.$set(themeitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(themeitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(themeitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(themeitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(85:4) {#if findLevels(theme, grade).length}",
    		ctx
    	});

    	return block;
    }

    // (87:8) <div slot="text">
    function create_text_slot(ctx) {
    	let div;
    	let t_value = /*theme*/ ctx[14] + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { slot: true });
    			var div_nodes = children(div);
    			t = claim_text(div_nodes, t_value);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div, "slot", "text");
    			add_location(div, file$j, 86, 8, 1977);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*promise*/ 8 && t_value !== (t_value = /*theme*/ ctx[14] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_text_slot.name,
    		type: "slot",
    		source: "(87:8) <div slot=\\\"text\\\">",
    		ctx
    	});

    	return block;
    }

    // (91:14) <Fab                 mini                 on:click="{() => navigate(`/flash-cards/play?subject=${subject}&domain=${domain}&theme=${theme}&level=${level}`)}"               >
    function create_default_slot_1$3(ctx) {
    	let t_value = /*level*/ ctx[17] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*promise, grade*/ 9 && t_value !== (t_value = /*level*/ ctx[17] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(91:14) <Fab                 mini                 on:click=\\\"{() => navigate(`/flash-cards/play?subject=${subject}&domain=${domain}&theme=${theme}&level=${level}`)}\\\"               >",
    		ctx
    	});

    	return block;
    }

    // (89:10) {#each findLevels(theme, grade) as level}
    function create_each_block_1(ctx) {
    	let span;
    	let fab;
    	let t;
    	let current;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[6](/*theme*/ ctx[14], /*level*/ ctx[17], ...args);
    	}

    	fab = new Fab({
    			props: {
    				mini: true,
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	fab.$on("click", click_handler);

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(fab.$$.fragment);
    			t = space();
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			claim_component(fab.$$.fragment, span_nodes);
    			t = claim_space(span_nodes);
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(span, "class", "fab svelte-6fdhpt");
    			add_location(span, file$j, 89, 12, 2101);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(fab, span, null);
    			append_dev(span, t);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const fab_changes = {};

    			if (dirty & /*$$scope, promise, grade*/ 1048585) {
    				fab_changes.$$scope = { dirty, ctx };
    			}

    			fab.$set(fab_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fab.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fab.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(fab);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(89:10) {#each findLevels(theme, grade) as level}",
    		ctx
    	});

    	return block;
    }

    // (88:8) <div slot="buttons">
    function create_buttons_slot(ctx) {
    	let div;
    	let current;
    	let each_value_1 = /*findLevels*/ ctx[4](/*theme*/ ctx[14], /*grade*/ ctx[0]);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { slot: true });
    			var div_nodes = children(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(div_nodes);
    			}

    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div, "slot", "buttons");
    			add_location(div, file$j, 87, 8, 2016);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*navigate, subject, domain, promise, findLevels, grade*/ 31) {
    				each_value_1 = /*findLevels*/ ctx[4](/*theme*/ ctx[14], /*grade*/ ctx[0]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_buttons_slot.name,
    		type: "slot",
    		source: "(88:8) <div slot=\\\"buttons\\\">",
    		ctx
    	});

    	return block;
    }

    // (86:6) <ThemeItem>
    function create_default_slot$6(ctx) {
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = space();
    			t1 = space();
    		},
    		l: function claim(nodes) {
    			t0 = claim_space(nodes);
    			t1 = claim_space(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(86:6) <ThemeItem>",
    		ctx
    	});

    	return block;
    }

    // (84:2) {#each themes as theme}
    function create_each_block$1(ctx) {
    	let show_if = /*findLevels*/ ctx[4](/*theme*/ ctx[14], /*grade*/ ctx[0]).length;
    	let if_block_anchor;
    	let current;
    	let if_block = show_if && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (if_block) if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*promise, grade*/ 9) show_if = /*findLevels*/ ctx[4](/*theme*/ ctx[14], /*grade*/ ctx[0]).length;

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*promise, grade*/ 9) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(84:2) {#each themes as theme}",
    		ctx
    	});

    	return block;
    }

    // (81:16)    <Spinner /> {:then themes}
    function create_pending_block$2(ctx) {
    	let spinner;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(spinner.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$2.name,
    		type: "pending",
    		source: "(81:16)    <Spinner /> {:then themes}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let await_block_anchor;
    	let promise_1;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block$2,
    		then: create_then_block$2,
    		catch: create_catch_block$2,
    		value: 13,
    		blocks: [,,,]
    	};

    	handle_promise(promise_1 = /*promise*/ ctx[3], info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		l: function claim(nodes) {
    			await_block_anchor = empty();
    			info.block.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*promise*/ 8 && promise_1 !== (promise_1 = /*promise*/ ctx[3]) && handle_promise(promise_1, info)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[13] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { filters } = $$props;
    	let { grade } = $$props;
    	let subject;
    	let domain;
    	let themesP;
    	let cardsP;
    	let promise;
    	let levels;
    	let grades;

    	const gradesP = getCollection({
    		collectionPath: "Grades",
    		extract: "name",
    		sort: lexicoSort
    	}).then(values => {
    		grades = values;
    		return values;
    	}).catch(error => console.log(error));

    	const levelsByThemes = {};

    	const findLevels = (theme, grade) => {
    		const levelsTheme = levelsByThemes[theme];

    		const levels = grades.reduce(
    			(prev, current) => {
    				return grades.indexOf(current) >= grades.indexOf(grade) && levelsTheme[current]
    				? prev.concat(levelsTheme[current])
    				: prev;
    			},
    			[]
    		);

    		return levels;
    	};

    	const writable_props = ["filters", "grade"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<ThemesList> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("ThemesList", $$slots, []);
    	const click_handler = (theme, level) => navigate(`/flash-cards/play?subject=${subject}&domain=${domain}&theme=${theme}&level=${level}`);

    	$$self.$$set = $$props => {
    		if ("filters" in $$props) $$invalidate(5, filters = $$props.filters);
    		if ("grade" in $$props) $$invalidate(0, grade = $$props.grade);
    	};

    	$$self.$capture_state = () => ({
    		getCollection,
    		Spinner,
    		ThemeItem,
    		Button: Button_1,
    		Label,
    		lexicoSort,
    		isEmpty,
    		Fab,
    		navigate,
    		filters,
    		grade,
    		subject,
    		domain,
    		themesP,
    		cardsP,
    		promise,
    		levels,
    		grades,
    		gradesP,
    		levelsByThemes,
    		findLevels
    	});

    	$$self.$inject_state = $$props => {
    		if ("filters" in $$props) $$invalidate(5, filters = $$props.filters);
    		if ("grade" in $$props) $$invalidate(0, grade = $$props.grade);
    		if ("subject" in $$props) $$invalidate(1, subject = $$props.subject);
    		if ("domain" in $$props) $$invalidate(2, domain = $$props.domain);
    		if ("themesP" in $$props) $$invalidate(7, themesP = $$props.themesP);
    		if ("cardsP" in $$props) $$invalidate(8, cardsP = $$props.cardsP);
    		if ("promise" in $$props) $$invalidate(3, promise = $$props.promise);
    		if ("levels" in $$props) levels = $$props.levels;
    		if ("grades" in $$props) grades = $$props.grades;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*filters*/ 32) {
    			 if (Array.isArray(filters)) {
    				
    				$$invalidate(1, [{ subject }, { domain }] = filters, subject, ($$invalidate(2, domain), $$invalidate(5, filters)));
    			}
    		}

    		if ($$self.$$.dirty & /*filters*/ 32) {
    			 $$invalidate(7, themesP = getCollection({
    				collectionPath: "Themes",
    				filters,
    				extract: "name"
    			}));
    		}

    		if ($$self.$$.dirty & /*filters, levelsByThemes*/ 1056) {
    			 $$invalidate(8, cardsP = getCollection({ collectionPath: "FlashCards", filters }).then(cards => {
    				cards.forEach(card => {
    					const { level, theme, grade } = card;
    					const levelsTheme = levelsByThemes[theme];

    					if (levelsTheme) {
    						levelsTheme[grade] = levelsTheme[grade].includes(level)
    						? levelsTheme[grade]
    						: levelsTheme[grade].concat(level).sort((a, b) => a - b);
    					} else {
    						$$invalidate(10, levelsByThemes[theme] = { [grade]: [level] }, levelsByThemes);
    					}
    				});

    				return cards;
    			}));
    		}

    		if ($$self.$$.dirty & /*themesP, cardsP*/ 384) {
    			 $$invalidate(3, promise = Promise.all([themesP, cardsP, gradesP]).then(([themes]) => themes));
    		}
    	};

    	return [grade, subject, domain, promise, findLevels, filters, click_handler];
    }

    class ThemesList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, { filters: 5, grade: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ThemesList",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*filters*/ ctx[5] === undefined && !("filters" in props)) {
    			console_1$2.warn("<ThemesList> was created without expected prop 'filters'");
    		}

    		if (/*grade*/ ctx[0] === undefined && !("grade" in props)) {
    			console_1$2.warn("<ThemesList> was created without expected prop 'grade'");
    		}
    	}

    	get filters() {
    		throw new Error("<ThemesList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filters(value) {
    		throw new Error("<ThemesList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get grade() {
    		throw new Error("<ThemesList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set grade(value) {
    		throw new Error("<ThemesList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/FlashCards.svelte generated by Svelte v3.24.1 */

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (35:0) {:catch error}
    function create_catch_block$3(ctx) {
    	let t_value = /*error*/ ctx[11] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$3.name,
    		type: "catch",
    		source: "(35:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (29:0) {:then grades}
    function create_then_block$3(ctx) {
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[5].call(null, value);
    	}

    	let select_props = {
    		enhanced: true,
    		label: "Niveau",
    		$$slots: { default: [create_default_slot_2$2] },
    		$$scope: { ctx }
    	};

    	if (/*grade*/ ctx[2] !== void 0) {
    		select_props.value = /*grade*/ ctx[2];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind(select, "value", select_value_binding));

    	const block = {
    		c: function create() {
    			create_component(select.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(select.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(select, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};

    			if (dirty & /*$$scope, grade*/ 4100) {
    				select_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*grade*/ 4) {
    				updating_value = true;
    				select_changes.value = /*grade*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(select, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$3.name,
    		type: "then",
    		source: "(29:0) {:then grades}",
    		ctx
    	});

    	return block;
    }

    // (32:6) <Option value="{agrade}" selected="{grade === agrade}">
    function create_default_slot_3$2(ctx) {
    	let t_value = /*agrade*/ ctx[8] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(32:6) <Option value=\\\"{agrade}\\\" selected=\\\"{grade === agrade}\\\">",
    		ctx
    	});

    	return block;
    }

    // (31:4) {#each grades as agrade}
    function create_each_block$2(ctx) {
    	let option;
    	let current;

    	option = new Option({
    			props: {
    				value: /*agrade*/ ctx[8],
    				selected: /*grade*/ ctx[2] === /*agrade*/ ctx[8],
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(option.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(option.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(option, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const option_changes = {};
    			if (dirty & /*grade*/ 4) option_changes.selected = /*grade*/ ctx[2] === /*agrade*/ ctx[8];

    			if (dirty & /*$$scope*/ 4096) {
    				option_changes.$$scope = { dirty, ctx };
    			}

    			option.$set(option_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(option.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(option.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(option, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(31:4) {#each grades as agrade}",
    		ctx
    	});

    	return block;
    }

    // (30:2) <Select enhanced bind:value="{grade}" label="Niveau">
    function create_default_slot_2$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*grades*/ ctx[7];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(nodes);
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*gradesP, grade*/ 12) {
    				each_value = /*grades*/ ctx[7];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(30:2) <Select enhanced bind:value=\\\"{grade}\\\" label=\\\"Niveau\\\">",
    		ctx
    	});

    	return block;
    }

    // (27:16)    <Spinner /> {:then grades}
    function create_pending_block$3(ctx) {
    	let spinner;
    	let current;
    	spinner = new Spinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(spinner.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$3.name,
    		type: "pending",
    		source: "(27:16)    <Spinner /> {:then grades}",
    		ctx
    	});

    	return block;
    }

    // (45:2) <Filter     label="Domaine"     collectionPath="Domains"     defaultValue="{domain}"     filters="{filters}"     let:filters   >
    function create_default_slot_1$4(ctx) {
    	let themeslist;
    	let current;

    	themeslist = new ThemesList({
    			props: {
    				filters: /*filters*/ ctx[6],
    				grade: /*grade*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(themeslist.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(themeslist.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(themeslist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const themeslist_changes = {};
    			if (dirty & /*filters*/ 64) themeslist_changes.filters = /*filters*/ ctx[6];
    			if (dirty & /*grade*/ 4) themeslist_changes.grade = /*grade*/ ctx[2];
    			themeslist.$set(themeslist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(themeslist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(themeslist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(themeslist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(45:2) <Filter     label=\\\"Domaine\\\"     collectionPath=\\\"Domains\\\"     defaultValue=\\\"{domain}\\\"     filters=\\\"{filters}\\\"     let:filters   >",
    		ctx
    	});

    	return block;
    }

    // (39:0) <Filter   label="Matière"   collectionPath="Subjects"   let:filters   defaultValue="{subject}" >
    function create_default_slot$7(ctx) {
    	let filter;
    	let current;

    	filter = new Filter({
    			props: {
    				label: "Domaine",
    				collectionPath: "Domains",
    				defaultValue: /*domain*/ ctx[1],
    				filters: /*filters*/ ctx[6],
    				$$slots: {
    					default: [
    						create_default_slot_1$4,
    						({ filters }) => ({ 6: filters }),
    						({ filters }) => filters ? 64 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(filter.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(filter.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(filter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const filter_changes = {};
    			if (dirty & /*domain*/ 2) filter_changes.defaultValue = /*domain*/ ctx[1];
    			if (dirty & /*filters*/ 64) filter_changes.filters = /*filters*/ ctx[6];

    			if (dirty & /*$$scope, filters, grade*/ 4164) {
    				filter_changes.$$scope = { dirty, ctx };
    			}

    			filter.$set(filter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(filter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(filter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(filter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(39:0) <Filter   label=\\\"Matière\\\"   collectionPath=\\\"Subjects\\\"   let:filters   defaultValue=\\\"{subject}\\\" >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let promise;
    	let t;
    	let filter;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block$3,
    		then: create_then_block$3,
    		catch: create_catch_block$3,
    		value: 7,
    		error: 11,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*gradesP*/ ctx[3], info);

    	filter = new Filter({
    			props: {
    				label: "Matière",
    				collectionPath: "Subjects",
    				defaultValue: /*subject*/ ctx[0],
    				$$slots: {
    					default: [
    						create_default_slot$7,
    						({ filters }) => ({ 6: filters }),
    						({ filters }) => filters ? 64 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			info.block.c();
    			t = space();
    			create_component(filter.$$.fragment);
    		},
    		l: function claim(nodes) {
    			info.block.l(nodes);
    			t = claim_space(nodes);
    			claim_component(filter.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => t.parentNode;
    			info.anchor = t;
    			insert_dev(target, t, anchor);
    			mount_component(filter, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			{
    				const child_ctx = ctx.slice();
    				child_ctx[7] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}

    			const filter_changes = {};
    			if (dirty & /*subject*/ 1) filter_changes.defaultValue = /*subject*/ ctx[0];

    			if (dirty & /*$$scope, domain, filters, grade*/ 4166) {
    				filter_changes.$$scope = { dirty, ctx };
    			}

    			filter.$set(filter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			transition_in(filter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			transition_out(filter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    			if (detaching) detach_dev(t);
    			destroy_component(filter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { location } = $$props;
    	let subject;
    	let domain;
    	let grade = "3ème";

    	const gradesP = getCollection({
    		collectionPath: "Grades",
    		extract: "name",
    		sort: lexicoSort
    	});

    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FlashCards> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("FlashCards", $$slots, []);

    	function select_value_binding(value) {
    		grade = value;
    		$$invalidate(2, grade);
    	}

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(4, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		Filter,
    		queryString,
    		ThemesList,
    		getCollection,
    		Spinner,
    		Select,
    		Option,
    		lexicoSort,
    		location,
    		subject,
    		domain,
    		grade,
    		gradesP
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(4, location = $$props.location);
    		if ("subject" in $$props) $$invalidate(0, subject = $$props.subject);
    		if ("domain" in $$props) $$invalidate(1, domain = $$props.domain);
    		if ("grade" in $$props) $$invalidate(2, grade = $$props.grade);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*location*/ 16) {
    			 {
    				const queryParams = queryString.parse(location.search);
    				$$invalidate(0, subject = queryParams.subject);
    				$$invalidate(1, domain = queryParams.domain);
    			}
    		}
    	};

    	return [subject, domain, grade, gradesP, location, select_value_binding];
    }

    class FlashCards extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { location: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FlashCards",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[4] === undefined && !("location" in props)) {
    			console.warn("<FlashCards> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<FlashCards>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<FlashCards>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/routes/Home.svelte generated by Svelte v3.24.1 */

    function create_fragment$r(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Home");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "Home");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Home", $$slots, []);
    	return [];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$r.name
    		});
    	}
    }

    /* src/routes/About.svelte generated by Svelte v3.24.1 */

    function create_fragment$s(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			t0 = text(/*id*/ ctx[0]);
    			t1 = space();
    			t2 = text(/*id2*/ ctx[1]);
    			t3 = text("\nAbout");
    		},
    		l: function claim(nodes) {
    			t0 = claim_text(nodes, /*id*/ ctx[0]);
    			t1 = claim_space(nodes);
    			t2 = claim_text(nodes, /*id2*/ ctx[1]);
    			t3 = claim_text(nodes, "\nAbout");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*id*/ 1) set_data_dev(t0, /*id*/ ctx[0]);
    			if (dirty & /*id2*/ 2) set_data_dev(t2, /*id2*/ ctx[1]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { id } = $$props;
    	let { id2 } = $$props;
    	const writable_props = ["id", "id2"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("About", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("id2" in $$props) $$invalidate(1, id2 = $$props.id2);
    	};

    	$$self.$capture_state = () => ({ id, id2 });

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("id2" in $$props) $$invalidate(1, id2 = $$props.id2);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, id2];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, { id: 0, id2: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
    			console.warn("<About> was created without expected prop 'id'");
    		}

    		if (/*id2*/ ctx[1] === undefined && !("id2" in props)) {
    			console.warn("<About> was created without expected prop 'id2'");
    		}
    	}

    	get id() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id2() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id2(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var lexer_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.token = token;
    exports.lexer = lexer;
    exports.LexingError = void 0;

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

    function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    var LexingError = /*#__PURE__*/function (_Error) {
      _inherits(LexingError, _Error);

      var _super = _createSuper(LexingError);

      function LexingError() {
        _classCallCheck(this, LexingError);

        return _super.apply(this, arguments);
      }

      return LexingError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    exports.LexingError = LexingError;

    function stringToken(pattern) {
      var _pattern = pattern;
      return {
        get pattern() {
          return _pattern;
        },

        get lexem() {
          return _pattern;
        },

        match: function match(s) {
          return s.startsWith(_pattern);
        }
      };
    }

    function regExToken(pattern) {
      var _pattern = pattern;

      var _lexem;

      var _parts;

      return {
        get pattern() {
          return _pattern;
        },

        get lexem() {
          return _lexem;
        },

        get parts() {
          return _parts;
        },

        match: function match(s) {
          var r = new RegExp(_pattern);
          var matched = r.exec(s);

          if (matched) {
            _lexem = matched[0];
            _parts = matched.length > 1 ? matched : null;
          }

          return matched !== null;
        }
      };
    }

    function token(pattern) {
      var t;

      if (pattern.startsWith('@')) {
        // TODO: pourquoi les parentheses -> ça décale les indices dans le tableau de matching
        t = regExToken('^(' + pattern.slice(1, pattern.length) + ')');
      } else {
        t = stringToken(pattern);
      }

      return t;
    }

    function lexer(exp) {
      var _pos = 0;

      var _savedPos;

      var _lexem;

      var _baseExp = exp.replace(/\s/g, '');

      var _parts;

      return {
        get lexem() {
          return _lexem;
        },

        get pos() {
          return _pos;
        },

        get parts() {
          return _parts;
        },

        match: function match(t) {
          if (_pos >= _baseExp.length) return false;

          var s = _baseExp.slice(_pos, _baseExp.length);

          if (t.match(s)) {
            _lexem = t.lexem;
            if (t.parts) _parts = t.parts;
            _pos += _lexem.length;
            return true;
          }

          return false;
        },
        saveTrack: function saveTrack() {
          _savedPos = _pos;
        },
        backTrack: function backTrack() {
          _pos = _savedPos;
        }
      };
    }
    });

    /*
     *  decimal.js v10.2.0
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js
     *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Licence
     */


    // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


      // The maximum exponent magnitude.
      // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
    var EXP_LIMIT = 9e15,                      // 0 to 9e15

      // The limit on the value of `precision`, and on the value of the first argument to
      // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
      MAX_DIGITS = 1e9,                        // 0 to 1e9

      // Base conversion alphabet.
      NUMERALS = '0123456789abcdef',

      // The natural logarithm of 10 (1025 digits).
      LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

      // Pi (1025 digits).
      PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


      // The initial configuration properties of the Decimal constructor.
      DEFAULTS = {

        // These values must be integers within the stated ranges (inclusive).
        // Most of these values can be changed at run-time using the `Decimal.config` method.

        // The maximum number of significant digits of the result of a calculation or base conversion.
        // E.g. `Decimal.config({ precision: 20 });`
        precision: 20,                         // 1 to MAX_DIGITS

        // The rounding mode used when rounding to `precision`.
        //
        // ROUND_UP         0 Away from zero.
        // ROUND_DOWN       1 Towards zero.
        // ROUND_CEIL       2 Towards +Infinity.
        // ROUND_FLOOR      3 Towards -Infinity.
        // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        //
        // E.g.
        // `Decimal.rounding = 4;`
        // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
        rounding: 4,                           // 0 to 8

        // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP         0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
        // FLOOR      3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN  6 The IEEE 754 remainder function.
        // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
        //
        // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
        // division (9) are commonly used for the modulus operation. The other rounding modes can also
        // be used, but they may not give useful results.
        modulo: 1,                             // 0 to 9

        // The exponent value at and beneath which `toString` returns exponential notation.
        // JavaScript numbers: -7
        toExpNeg: -7,                          // 0 to -EXP_LIMIT

        // The exponent value at and above which `toString` returns exponential notation.
        // JavaScript numbers: 21
        toExpPos:  21,                         // 0 to EXP_LIMIT

        // The minimum exponent value, beneath which underflow to zero occurs.
        // JavaScript numbers: -324  (5e-324)
        minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

        // The maximum exponent value, above which overflow to Infinity occurs.
        // JavaScript numbers: 308  (1.7976931348623157e+308)
        maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

        // Whether to use cryptographically-secure random number generation, if available.
        crypto: false                          // true/false
      },


    // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


      inexact, quadrant,
      external = true,

      decimalError = '[DecimalError] ',
      invalidArgument$1 = decimalError + 'Invalid argument: ',
      precisionLimitExceeded = decimalError + 'Precision limit exceeded',
      cryptoUnavailable = decimalError + 'crypto unavailable',

      mathfloor = Math.floor,
      mathpow = Math.pow,

      isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
      isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
      isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
      isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

      BASE = 1e7,
      LOG_BASE = 7,
      MAX_SAFE_INTEGER = 9007199254740991,

      LN10_PRECISION = LN10.length - 1,
      PI_PRECISION = PI.length - 1,

      // Decimal.prototype object
      P$2 = { name: '[object Decimal]' };


    // Decimal prototype methods


    /*
     *  absoluteValue             abs
     *  ceil
     *  comparedTo                cmp
     *  cosine                    cos
     *  cubeRoot                  cbrt
     *  decimalPlaces             dp
     *  dividedBy                 div
     *  dividedToIntegerBy        divToInt
     *  equals                    eq
     *  floor
     *  greaterThan               gt
     *  greaterThanOrEqualTo      gte
     *  hyperbolicCosine          cosh
     *  hyperbolicSine            sinh
     *  hyperbolicTangent         tanh
     *  inverseCosine             acos
     *  inverseHyperbolicCosine   acosh
     *  inverseHyperbolicSine     asinh
     *  inverseHyperbolicTangent  atanh
     *  inverseSine               asin
     *  inverseTangent            atan
     *  isFinite
     *  isInteger                 isInt
     *  isNaN
     *  isNegative                isNeg
     *  isPositive                isPos
     *  isZero
     *  lessThan                  lt
     *  lessThanOrEqualTo         lte
     *  logarithm                 log
     *  [maximum]                 [max]
     *  [minimum]                 [min]
     *  minus                     sub
     *  modulo                    mod
     *  naturalExponential        exp
     *  naturalLogarithm          ln
     *  negated                   neg
     *  plus                      add
     *  precision                 sd
     *  round
     *  sine                      sin
     *  squareRoot                sqrt
     *  tangent                   tan
     *  times                     mul
     *  toBinary
     *  toDecimalPlaces           toDP
     *  toExponential
     *  toFixed
     *  toFraction
     *  toHexadecimal             toHex
     *  toNearest
     *  toNumber
     *  toOctal
     *  toPower                   pow
     *  toPrecision
     *  toSignificantDigits       toSD
     *  toString
     *  truncated                 trunc
     *  valueOf                   toJSON
     */


    /*
     * Return a new Decimal whose value is the absolute value of this Decimal.
     *
     */
    P$2.absoluteValue = P$2.abs = function () {
      var x = new this.constructor(this);
      if (x.s < 0) x.s = 1;
      return finalise(x);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
     * direction of positive Infinity.
     *
     */
    P$2.ceil = function () {
      return finalise(new this.constructor(this), this.e + 1, 2);
    };


    /*
     * Return
     *   1    if the value of this Decimal is greater than the value of `y`,
     *  -1    if the value of this Decimal is less than the value of `y`,
     *   0    if they have the same value,
     *   NaN  if the value of either Decimal is NaN.
     *
     */
    P$2.comparedTo = P$2.cmp = function (y) {
      var i, j, xdL, ydL,
        x = this,
        xd = x.d,
        yd = (y = new x.constructor(y)).d,
        xs = x.s,
        ys = y.s;

      // Either NaN or ±Infinity?
      if (!xd || !yd) {
        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
      }

      // Either zero?
      if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

      // Signs differ?
      if (xs !== ys) return xs;

      // Compare exponents.
      if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

      xdL = xd.length;
      ydL = yd.length;

      // Compare digit by digit.
      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
      }

      // Compare lengths.
      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
    };


    /*
     * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-1, 1]
     *
     * cos(0)         = 1
     * cos(-0)        = 1
     * cos(Infinity)  = NaN
     * cos(-Infinity) = NaN
     * cos(NaN)       = NaN
     *
     */
    P$2.cosine = P$2.cos = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.d) return new Ctor(NaN);

      // cos(0) = cos(-0) = 1
      if (!x.d[0]) return new Ctor(1);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;

      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
    };


    /*
     *
     * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     *  cbrt(0)  =  0
     *  cbrt(-0) = -0
     *  cbrt(1)  =  1
     *  cbrt(-1) = -1
     *  cbrt(N)  =  N
     *  cbrt(-I) = -I
     *  cbrt(I)  =  I
     *
     * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
     *
     */
    P$2.cubeRoot = P$2.cbrt = function () {
      var e, m, n, r, rep, s, sd, t, t3, t3plusx,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite() || x.isZero()) return new Ctor(x);
      external = false;

      // Initial estimate.
      s = x.s * mathpow(x.s * x, 1 / 3);

       // Math.cbrt underflow/overflow?
       // Pass x to Math.pow as integer, then adjust the exponent of the result.
      if (!s || Math.abs(s) == 1 / 0) {
        n = digitsToString(x.d);
        e = x.e;

        // Adjust n exponent so it is a multiple of 3 away from x exponent.
        if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
        s = mathpow(n, 1 / 3);

        // Rarely, e may be one less than the result exponent value.
        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new Ctor(n);
        r.s = x.s;
      } else {
        r = new Ctor(s.toString());
      }

      sd = (e = Ctor.precision) + 3;

      // Halley's method.
      // TODO? Compare Newton's method.
      for (;;) {
        t = r;
        t3 = t.times(t).times(t);
        t3plusx = t3.plus(x);
        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

        // TODO? Replace with for-loop and checkRoundingDigits.
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
          // , i.e. approaching a rounding boundary, continue the iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the exact result as the
            // nines may infinitely repeat.
            if (!rep) {
              finalise(t, e + 1, 0);

              if (t.times(t).times(t).eq(x)) {
                r = t;
                break;
              }
            }

            sd += 4;
            rep = 1;
          } else {

            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
            // If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              finalise(r, e + 1, 1);
              m = !r.times(r).times(r).eq(x);
            }

            break;
          }
        }
      }

      external = true;

      return finalise(r, e, Ctor.rounding, m);
    };


    /*
     * Return the number of decimal places of the value of this Decimal.
     *
     */
    P$2.decimalPlaces = P$2.dp = function () {
      var w,
        d = this.d,
        n = NaN;

      if (d) {
        w = d.length - 1;
        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

        // Subtract the number of trailing zeros of the last word.
        w = d[w];
        if (w) for (; w % 10 == 0; w /= 10) n--;
        if (n < 0) n = 0;
      }

      return n;
    };


    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     */
    P$2.dividedBy = P$2.div = function (y) {
      return divide(this, new this.constructor(y));
    };


    /*
     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
     * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
     *
     */
    P$2.dividedToIntegerBy = P$2.divToInt = function (y) {
      var x = this,
        Ctor = x.constructor;
      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
    };


    /*
     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
     *
     */
    P$2.equals = P$2.eq = function (y) {
      return this.cmp(y) === 0;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
     * direction of negative Infinity.
     *
     */
    P$2.floor = function () {
      return finalise(new this.constructor(this), this.e + 1, 3);
    };


    /*
     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
     * false.
     *
     */
    P$2.greaterThan = P$2.gt = function (y) {
      return this.cmp(y) > 0;
    };


    /*
     * Return true if the value of this Decimal is greater than or equal to the value of `y`,
     * otherwise return false.
     *
     */
    P$2.greaterThanOrEqualTo = P$2.gte = function (y) {
      var k = this.cmp(y);
      return k == 1 || k === 0;
    };


    /*
     * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [1, Infinity]
     *
     * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
     *
     * cosh(0)         = 1
     * cosh(-0)        = 1
     * cosh(Infinity)  = Infinity
     * cosh(-Infinity) = Infinity
     * cosh(NaN)       = NaN
     *
     *  x        time taken (ms)   result
     * 1000      9                 9.8503555700852349694e+433
     * 10000     25                4.4034091128314607936e+4342
     * 100000    171               1.4033316802130615897e+43429
     * 1000000   3817              1.5166076984010437725e+434294
     * 10000000  abandoned after 2 minute wait
     *
     * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
     *
     */
    P$2.hyperbolicCosine = P$2.cosh = function () {
      var k, n, pr, rm, len,
        x = this,
        Ctor = x.constructor,
        one = new Ctor(1);

      if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
      if (x.isZero()) return one;

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;

      // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
      // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

      // Estimate the optimum number of times to use the argument reduction.
      // TODO? Estimation reused from cosine() and may not be optimal here.
      if (len < 32) {
        k = Math.ceil(len / 3);
        n = (1 / tinyPow(4, k)).toString();
      } else {
        k = 16;
        n = '2.3283064365386962890625e-10';
      }

      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

      // Reverse argument reduction
      var cosh2_x,
        i = k,
        d8 = new Ctor(8);
      for (; i--;) {
        cosh2_x = x.times(x);
        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
      }

      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
    };


    /*
     * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-Infinity, Infinity]
     *
     * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
     *
     * sinh(0)         = 0
     * sinh(-0)        = -0
     * sinh(Infinity)  = Infinity
     * sinh(-Infinity) = -Infinity
     * sinh(NaN)       = NaN
     *
     * x        time taken (ms)
     * 10       2 ms
     * 100      5 ms
     * 1000     14 ms
     * 10000    82 ms
     * 100000   886 ms            1.4033316802130615897e+43429
     * 200000   2613 ms
     * 300000   5407 ms
     * 400000   8824 ms
     * 500000   13026 ms          8.7080643612718084129e+217146
     * 1000000  48543 ms
     *
     * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
     *
     */
    P$2.hyperbolicSine = P$2.sinh = function () {
      var k, pr, rm, len,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite() || x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;

      if (len < 3) {
        x = taylorSeries(Ctor, 2, x, x, true);
      } else {

        // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
        // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
        // 3 multiplications and 1 addition

        // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
        // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
        // 4 multiplications and 2 additions

        // Estimate the optimum number of times to use the argument reduction.
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;

        x = x.times(1 / tinyPow(5, k));
        x = taylorSeries(Ctor, 2, x, x, true);

        // Reverse argument reduction
        var sinh2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);
        for (; k--;) {
          sinh2_x = x.times(x);
          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
        }
      }

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(x, pr, rm, true);
    };


    /*
     * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-1, 1]
     *
     * tanh(x) = sinh(x) / cosh(x)
     *
     * tanh(0)         = 0
     * tanh(-0)        = -0
     * tanh(Infinity)  = 1
     * tanh(-Infinity) = -1
     * tanh(NaN)       = NaN
     *
     */
    P$2.hyperbolicTangent = P$2.tanh = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(x.s);
      if (x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 7;
      Ctor.rounding = 1;

      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
    };


    /*
     * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
     * this Decimal.
     *
     * Domain: [-1, 1]
     * Range: [0, pi]
     *
     * acos(x) = pi/2 - asin(x)
     *
     * acos(0)       = pi/2
     * acos(-0)      = pi/2
     * acos(1)       = 0
     * acos(-1)      = pi
     * acos(1/2)     = pi/3
     * acos(-1/2)    = 2*pi/3
     * acos(|x| > 1) = NaN
     * acos(NaN)     = NaN
     *
     */
    P$2.inverseCosine = P$2.acos = function () {
      var halfPi,
        x = this,
        Ctor = x.constructor,
        k = x.abs().cmp(1),
        pr = Ctor.precision,
        rm = Ctor.rounding;

      if (k !== -1) {
        return k === 0
          // |x| is 1
          ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
          // |x| > 1 or x is NaN
          : new Ctor(NaN);
      }

      if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

      // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

      Ctor.precision = pr + 6;
      Ctor.rounding = 1;

      x = x.asin();
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return halfPi.minus(x);
    };


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
     * value of this Decimal.
     *
     * Domain: [1, Infinity]
     * Range: [0, Infinity]
     *
     * acosh(x) = ln(x + sqrt(x^2 - 1))
     *
     * acosh(x < 1)     = NaN
     * acosh(NaN)       = NaN
     * acosh(Infinity)  = Infinity
     * acosh(-Infinity) = NaN
     * acosh(0)         = NaN
     * acosh(-0)        = NaN
     * acosh(1)         = 0
     * acosh(-1)        = NaN
     *
     */
    P$2.inverseHyperbolicCosine = P$2.acosh = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
      if (!x.isFinite()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
      Ctor.rounding = 1;
      external = false;

      x = x.times(x).minus(1).sqrt().plus(x);

      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.ln();
    };


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
     * of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-Infinity, Infinity]
     *
     * asinh(x) = ln(x + sqrt(x^2 + 1))
     *
     * asinh(NaN)       = NaN
     * asinh(Infinity)  = Infinity
     * asinh(-Infinity) = -Infinity
     * asinh(0)         = 0
     * asinh(-0)        = -0
     *
     */
    P$2.inverseHyperbolicSine = P$2.asinh = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite() || x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
      Ctor.rounding = 1;
      external = false;

      x = x.times(x).plus(1).sqrt().plus(x);

      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.ln();
    };


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
     * value of this Decimal.
     *
     * Domain: [-1, 1]
     * Range: [-Infinity, Infinity]
     *
     * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
     *
     * atanh(|x| > 1)   = NaN
     * atanh(NaN)       = NaN
     * atanh(Infinity)  = NaN
     * atanh(-Infinity) = NaN
     * atanh(0)         = 0
     * atanh(-0)        = -0
     * atanh(1)         = Infinity
     * atanh(-1)        = -Infinity
     *
     */
    P$2.inverseHyperbolicTangent = P$2.atanh = function () {
      var pr, rm, wpr, xsd,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(NaN);
      if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      xsd = x.sd();

      if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

      Ctor.precision = wpr = xsd - x.e;

      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

      Ctor.precision = pr + 4;
      Ctor.rounding = 1;

      x = x.ln();

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.times(0.5);
    };


    /*
     * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
     * Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-pi/2, pi/2]
     *
     * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
     *
     * asin(0)       = 0
     * asin(-0)      = -0
     * asin(1/2)     = pi/6
     * asin(-1/2)    = -pi/6
     * asin(1)       = pi/2
     * asin(-1)      = -pi/2
     * asin(|x| > 1) = NaN
     * asin(NaN)     = NaN
     *
     * TODO? Compare performance of Taylor series.
     *
     */
    P$2.inverseSine = P$2.asin = function () {
      var halfPi, k,
        pr, rm,
        x = this,
        Ctor = x.constructor;

      if (x.isZero()) return new Ctor(x);

      k = x.abs().cmp(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;

      if (k !== -1) {

        // |x| is 1
        if (k === 0) {
          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
          halfPi.s = x.s;
          return halfPi;
        }

        // |x| > 1 or x is NaN
        return new Ctor(NaN);
      }

      // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

      Ctor.precision = pr + 6;
      Ctor.rounding = 1;

      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return x.times(2);
    };


    /*
     * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
     * of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-pi/2, pi/2]
     *
     * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
     *
     * atan(0)         = 0
     * atan(-0)        = -0
     * atan(1)         = pi/4
     * atan(-1)        = -pi/4
     * atan(Infinity)  = pi/2
     * atan(-Infinity) = -pi/2
     * atan(NaN)       = NaN
     *
     */
    P$2.inverseTangent = P$2.atan = function () {
      var i, j, k, n, px, t, r, wpr, x2,
        x = this,
        Ctor = x.constructor,
        pr = Ctor.precision,
        rm = Ctor.rounding;

      if (!x.isFinite()) {
        if (!x.s) return new Ctor(NaN);
        if (pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.5);
          r.s = x.s;
          return r;
        }
      } else if (x.isZero()) {
        return new Ctor(x);
      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.25);
        r.s = x.s;
        return r;
      }

      Ctor.precision = wpr = pr + 10;
      Ctor.rounding = 1;

      // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

      // Argument reduction
      // Ensure |x| < 0.42
      // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

      k = Math.min(28, wpr / LOG_BASE + 2 | 0);

      for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

      external = false;

      j = Math.ceil(wpr / LOG_BASE);
      n = 1;
      x2 = x.times(x);
      r = new Ctor(x);
      px = x;

      // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
      for (; i !== -1;) {
        px = px.times(x2);
        t = r.minus(px.div(n += 2));

        px = px.times(x2);
        r = t.plus(px.div(n += 2));

        if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
      }

      if (k) r = r.times(2 << (k - 1));

      external = true;

      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
    };


    /*
     * Return true if the value of this Decimal is a finite number, otherwise return false.
     *
     */
    P$2.isFinite = function () {
      return !!this.d;
    };


    /*
     * Return true if the value of this Decimal is an integer, otherwise return false.
     *
     */
    P$2.isInteger = P$2.isInt = function () {
      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
    };


    /*
     * Return true if the value of this Decimal is NaN, otherwise return false.
     *
     */
    P$2.isNaN = function () {
      return !this.s;
    };


    /*
     * Return true if the value of this Decimal is negative, otherwise return false.
     *
     */
    P$2.isNegative = P$2.isNeg = function () {
      return this.s < 0;
    };


    /*
     * Return true if the value of this Decimal is positive, otherwise return false.
     *
     */
    P$2.isPositive = P$2.isPos = function () {
      return this.s > 0;
    };


    /*
     * Return true if the value of this Decimal is 0 or -0, otherwise return false.
     *
     */
    P$2.isZero = function () {
      return !!this.d && this.d[0] === 0;
    };


    /*
     * Return true if the value of this Decimal is less than `y`, otherwise return false.
     *
     */
    P$2.lessThan = P$2.lt = function (y) {
      return this.cmp(y) < 0;
    };


    /*
     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
     *
     */
    P$2.lessThanOrEqualTo = P$2.lte = function (y) {
      return this.cmp(y) < 1;
    };


    /*
     * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * If no base is specified, return log[10](arg).
     *
     * log[base](arg) = ln(arg) / ln(base)
     *
     * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
     * otherwise:
     *
     * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
     * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
     * between the result and the correctly rounded result will be one ulp (unit in the last place).
     *
     * log[-b](a)       = NaN
     * log[0](a)        = NaN
     * log[1](a)        = NaN
     * log[NaN](a)      = NaN
     * log[Infinity](a) = NaN
     * log[b](0)        = -Infinity
     * log[b](-0)       = -Infinity
     * log[b](-a)       = NaN
     * log[b](1)        = 0
     * log[b](Infinity) = Infinity
     * log[b](NaN)      = NaN
     *
     * [base] {number|string|Decimal} The base of the logarithm.
     *
     */
    P$2.logarithm = P$2.log = function (base) {
      var isBase10, d, denominator, k, inf, num, sd, r,
        arg = this,
        Ctor = arg.constructor,
        pr = Ctor.precision,
        rm = Ctor.rounding,
        guard = 5;

      // Default base is 10.
      if (base == null) {
        base = new Ctor(10);
        isBase10 = true;
      } else {
        base = new Ctor(base);
        d = base.d;

        // Return NaN if base is negative, or non-finite, or is 0 or 1.
        if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

        isBase10 = base.eq(10);
      }

      d = arg.d;

      // Is arg negative, non-finite, 0 or 1?
      if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
      }

      // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
      // integer power of 10.
      if (isBase10) {
        if (d.length > 1) {
          inf = true;
        } else {
          for (k = d[0]; k % 10 === 0;) k /= 10;
          inf = k !== 1;
        }
      }

      external = false;
      sd = pr + guard;
      num = naturalLogarithm(arg, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

      // The result will have 5 rounding digits.
      r = divide(num, denominator, sd, 1);

      // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
      // calculate 10 further digits.
      //
      // If the result is known to have an infinite decimal expansion, repeat this until it is clear
      // that the result is above or below the boundary. Otherwise, if after calculating the 10
      // further digits, the last 14 are nines, round up and assume the result is exact.
      // Also assume the result is exact if the last 14 are zero.
      //
      // Example of a result that will be incorrectly rounded:
      // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
      // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
      // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
      // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
      // place is still 2.6.
      if (checkRoundingDigits(r.d, k = pr, rm)) {

        do {
          sd += 10;
          num = naturalLogarithm(arg, sd);
          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
          r = divide(num, denominator, sd, 1);

          if (!inf) {

            // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }

            break;
          }
        } while (checkRoundingDigits(r.d, k += 10, rm));
      }

      external = true;

      return finalise(r, pr, rm);
    };


    /*
     * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
     *
     * arguments {number|string|Decimal}
     *
    P.max = function () {
      Array.prototype.push.call(arguments, this);
      return maxOrMin(this.constructor, arguments, 'lt');
    };
     */


    /*
     * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
     *
     * arguments {number|string|Decimal}
     *
    P.min = function () {
      Array.prototype.push.call(arguments, this);
      return maxOrMin(this.constructor, arguments, 'gt');
    };
     */


    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     */
    P$2.minus = P$2.sub = function (y) {
      var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
        x = this,
        Ctor = x.constructor;

      y = new Ctor(y);

      // If either is not finite...
      if (!x.d || !y.d) {

        // Return NaN if either is NaN.
        if (!x.s || !y.s) y = new Ctor(NaN);

        // Return y negated if x is finite and y is ±Infinity.
        else if (x.d) y.s = -y.s;

        // Return x if y is finite and x is ±Infinity.
        // Return x if both are ±Infinity with different signs.
        // Return NaN if both are ±Infinity with the same sign.
        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

        return y;
      }

      // If signs differ...
      if (x.s != y.s) {
        y.s = -y.s;
        return x.plus(y);
      }

      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;

      // If either is zero...
      if (!xd[0] || !yd[0]) {

        // Return y negated if x is zero and y is non-zero.
        if (yd[0]) y.s = -y.s;

        // Return x if y is zero and x is non-zero.
        else if (xd[0]) y = new Ctor(x);

        // Return zero if both are zero.
        // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
        else return new Ctor(rm === 3 ? -0 : 0);

        return external ? finalise(y, pr, rm) : y;
      }

      // x and y are finite, non-zero numbers with the same sign.

      // Calculate base 1e7 exponents.
      e = mathfloor(y.e / LOG_BASE);
      xe = mathfloor(x.e / LOG_BASE);

      xd = xd.slice();
      k = xe - e;

      // If base 1e7 exponents differ...
      if (k) {
        xLTy = k < 0;

        if (xLTy) {
          d = xd;
          k = -k;
          len = yd.length;
        } else {
          d = yd;
          e = xe;
          len = xd.length;
        }

        // Numbers with massively different exponents would result in a very high number of
        // zeros needing to be prepended, but this can be avoided while still ensuring correct
        // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

        if (k > i) {
          k = i;
          d.length = 1;
        }

        // Prepend zeros to equalise exponents.
        d.reverse();
        for (i = k; i--;) d.push(0);
        d.reverse();

      // Base 1e7 exponents equal.
      } else {

        // Check digits to determine which is the bigger number.

        i = xd.length;
        len = yd.length;
        xLTy = i < len;
        if (xLTy) len = i;

        for (i = 0; i < len; i++) {
          if (xd[i] != yd[i]) {
            xLTy = xd[i] < yd[i];
            break;
          }
        }

        k = 0;
      }

      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y.s = -y.s;
      }

      len = xd.length;

      // Append zeros to `xd` if shorter.
      // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
      for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

      // Subtract yd from xd.
      for (i = yd.length; i > k;) {

        if (xd[--i] < yd[i]) {
          for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
          --xd[j];
          xd[i] += BASE;
        }

        xd[i] -= yd[i];
      }

      // Remove trailing zeros.
      for (; xd[--len] === 0;) xd.pop();

      // Remove leading zeros and adjust exponent accordingly.
      for (; xd[0] === 0; xd.shift()) --e;

      // Zero?
      if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

      y.d = xd;
      y.e = getBase10Exponent(xd, e);

      return external ? finalise(y, pr, rm) : y;
    };


    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * The result depends on the modulo mode.
     *
     */
    P$2.modulo = P$2.mod = function (y) {
      var q,
        x = this,
        Ctor = x.constructor;

      y = new Ctor(y);

      // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
      if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

      // Return x if y is ±Infinity or x is ±0.
      if (!y.d || x.d && !x.d[0]) {
        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
      }

      // Prevent rounding of intermediate calculations.
      external = false;

      if (Ctor.modulo == 9) {

        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // result = x - q * y    where  0 <= result < abs(y)
        q = divide(x, y.abs(), 0, 3, 1);
        q.s *= y.s;
      } else {
        q = divide(x, y, 0, Ctor.modulo, 1);
      }

      q = q.times(y);

      external = true;

      return x.minus(q);
    };


    /*
     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
     * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     */
    P$2.naturalExponential = P$2.exp = function () {
      return naturalExponential(this);
    };


    /*
     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
     * rounded to `precision` significant digits using rounding mode `rounding`.
     *
     */
    P$2.naturalLogarithm = P$2.ln = function () {
      return naturalLogarithm(this);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
     * -1.
     *
     */
    P$2.negated = P$2.neg = function () {
      var x = new this.constructor(this);
      x.s = -x.s;
      return finalise(x);
    };


    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     */
    P$2.plus = P$2.add = function (y) {
      var carry, d, e, i, k, len, pr, rm, xd, yd,
        x = this,
        Ctor = x.constructor;

      y = new Ctor(y);

      // If either is not finite...
      if (!x.d || !y.d) {

        // Return NaN if either is NaN.
        if (!x.s || !y.s) y = new Ctor(NaN);

        // Return x if y is finite and x is ±Infinity.
        // Return x if both are ±Infinity with the same sign.
        // Return NaN if both are ±Infinity with different signs.
        // Return y if x is finite and y is ±Infinity.
        else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

        return y;
      }

       // If signs differ...
      if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
      }

      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;

      // If either is zero...
      if (!xd[0] || !yd[0]) {

        // Return x if y is zero.
        // Return y if y is non-zero.
        if (!yd[0]) y = new Ctor(x);

        return external ? finalise(y, pr, rm) : y;
      }

      // x and y are finite, non-zero numbers with the same sign.

      // Calculate base 1e7 exponents.
      k = mathfloor(x.e / LOG_BASE);
      e = mathfloor(y.e / LOG_BASE);

      xd = xd.slice();
      i = k - e;

      // If base 1e7 exponents differ...
      if (i) {

        if (i < 0) {
          d = xd;
          i = -i;
          len = yd.length;
        } else {
          d = yd;
          e = k;
          len = xd.length;
        }

        // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
        k = Math.ceil(pr / LOG_BASE);
        len = k > len ? k + 1 : len + 1;

        if (i > len) {
          i = len;
          d.length = 1;
        }

        // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
        d.reverse();
        for (; i--;) d.push(0);
        d.reverse();
      }

      len = xd.length;
      i = yd.length;

      // If yd is longer than xd, swap xd and yd so xd points to the longer array.
      if (len - i < 0) {
        i = len;
        d = yd;
        yd = xd;
        xd = d;
      }

      // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
      for (carry = 0; i;) {
        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
        xd[i] %= BASE;
      }

      if (carry) {
        xd.unshift(carry);
        ++e;
      }

      // Remove trailing zeros.
      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      for (len = xd.length; xd[--len] == 0;) xd.pop();

      y.d = xd;
      y.e = getBase10Exponent(xd, e);

      return external ? finalise(y, pr, rm) : y;
    };


    /*
     * Return the number of significant digits of the value of this Decimal.
     *
     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
     *
     */
    P$2.precision = P$2.sd = function (z) {
      var k,
        x = this;

      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument$1 + z);

      if (x.d) {
        k = getPrecision(x.d);
        if (z && x.e + 1 > k) k = x.e + 1;
      } else {
        k = NaN;
      }

      return k;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
     * rounding mode `rounding`.
     *
     */
    P$2.round = function () {
      var x = this,
        Ctor = x.constructor;

      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
    };


    /*
     * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-1, 1]
     *
     * sin(x) = x - x^3/3! + x^5/5! - ...
     *
     * sin(0)         = 0
     * sin(-0)        = -0
     * sin(Infinity)  = NaN
     * sin(-Infinity) = NaN
     * sin(NaN)       = NaN
     *
     */
    P$2.sine = P$2.sin = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(NaN);
      if (x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;

      x = sine(Ctor, toLessThanHalfPi(Ctor, x));

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
    };


    /*
     * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     *  sqrt(-n) =  N
     *  sqrt(N)  =  N
     *  sqrt(-I) =  N
     *  sqrt(I)  =  I
     *  sqrt(0)  =  0
     *  sqrt(-0) = -0
     *
     */
    P$2.squareRoot = P$2.sqrt = function () {
      var m, n, sd, r, rep, t,
        x = this,
        d = x.d,
        e = x.e,
        s = x.s,
        Ctor = x.constructor;

      // Negative/NaN/Infinity/zero?
      if (s !== 1 || !d || !d[0]) {
        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
      }

      external = false;

      // Initial estimate.
      s = Math.sqrt(+x);

      // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
      if (s == 0 || s == 1 / 0) {
        n = digitsToString(d);

        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(n);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '1e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new Ctor(n);
      } else {
        r = new Ctor(s.toString());
      }

      sd = (e = Ctor.precision) + 3;

      // Newton-Raphson iteration.
      for (;;) {
        t = r;
        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

        // TODO? Replace with for-loop and checkRoundingDigits.
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
          // 4999, i.e. approaching a rounding boundary, continue the iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the exact result as the
            // nines may infinitely repeat.
            if (!rep) {
              finalise(t, e + 1, 0);

              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }

            sd += 4;
            rep = 1;
          } else {

            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
            // If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              finalise(r, e + 1, 1);
              m = !r.times(r).eq(x);
            }

            break;
          }
        }
      }

      external = true;

      return finalise(r, e, Ctor.rounding, m);
    };


    /*
     * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-Infinity, Infinity]
     *
     * tan(0)         = 0
     * tan(-0)        = -0
     * tan(Infinity)  = NaN
     * tan(-Infinity) = NaN
     * tan(NaN)       = NaN
     *
     */
    P$2.tangent = P$2.tan = function () {
      var pr, rm,
        x = this,
        Ctor = x.constructor;

      if (!x.isFinite()) return new Ctor(NaN);
      if (x.isZero()) return new Ctor(x);

      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 10;
      Ctor.rounding = 1;

      x = x.sin();
      x.s = 1;
      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

      Ctor.precision = pr;
      Ctor.rounding = rm;

      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
    };


    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     */
    P$2.times = P$2.mul = function (y) {
      var carry, e, i, k, r, rL, t, xdL, ydL,
        x = this,
        Ctor = x.constructor,
        xd = x.d,
        yd = (y = new Ctor(y)).d;

      y.s *= x.s;

       // If either is NaN, ±Infinity or ±0...
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

          // Return NaN if either is NaN.
          // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
          ? NaN

          // Return ±Infinity if either is ±Infinity.
          // Return ±0 if either is ±0.
          : !xd || !yd ? y.s / 0 : y.s * 0);
      }

      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
      xdL = xd.length;
      ydL = yd.length;

      // Ensure xd points to the longer array.
      if (xdL < ydL) {
        r = xd;
        xd = yd;
        yd = r;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      }

      // Initialise the result array with zeros.
      r = [];
      rL = xdL + ydL;
      for (i = rL; i--;) r.push(0);

      // Multiply!
      for (i = ydL; --i >= 0;) {
        carry = 0;
        for (k = xdL + i; k > i;) {
          t = r[k] + yd[i] * xd[k - i - 1] + carry;
          r[k--] = t % BASE | 0;
          carry = t / BASE | 0;
        }

        r[k] = (r[k] + carry) % BASE | 0;
      }

      // Remove trailing zeros.
      for (; !r[--rL];) r.pop();

      if (carry) ++e;
      else r.shift();

      y.d = r;
      y.e = getBase10Exponent(r, e);

      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
    };


    /*
     * Return a string representing the value of this Decimal in base 2, round to `sd` significant
     * digits using rounding mode `rm`.
     *
     * If the optional `sd` argument is present then return binary exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P$2.toBinary = function (sd, rm) {
      return toStringBinary(this, 2, sd, rm);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
     *
     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P$2.toDecimalPlaces = P$2.toDP = function (dp, rm) {
      var x = this,
        Ctor = x.constructor;

      x = new Ctor(x);
      if (dp === void 0) return x;

      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      return finalise(x, dp + x.e + 1, rm);
    };


    /*
     * Return a string representing the value of this Decimal in exponential notation rounded to
     * `dp` fixed decimal places using rounding mode `rounding`.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P$2.toExponential = function (dp, rm) {
      var str,
        x = this,
        Ctor = x.constructor;

      if (dp === void 0) {
        str = finiteToString(x, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        x = finalise(new Ctor(x), dp + 1, rm);
        str = finiteToString(x, true, dp + 1);
      }

      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return a string representing the value of this Decimal in normal (fixed-point) notation to
     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
     * omitted.
     *
     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
     * (-0).toFixed(3) is '0.000'.
     * (-0.5).toFixed(0) is '-0'.
     *
     */
    P$2.toFixed = function (dp, rm) {
      var str, y,
        x = this,
        Ctor = x.constructor;

      if (dp === void 0) {
        str = finiteToString(x);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        y = finalise(new Ctor(x), dp + x.e + 1, rm);
        str = finiteToString(y, false, dp + y.e + 1);
      }

      // To determine whether to add the minus sign look at the value before it was rounded,
      // i.e. look at `x` rather than `y`.
      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return an array representing the value of this Decimal as a simple fraction with an integer
     * numerator and an integer denominator.
     *
     * The denominator will be a positive non-zero value less than or equal to the specified maximum
     * denominator. If a maximum denominator is not specified, the denominator will be the lowest
     * value necessary to represent the number exactly.
     *
     * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
     *
     */
    P$2.toFraction = function (maxD) {
      var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
        x = this,
        xd = x.d,
        Ctor = x.constructor;

      if (!xd) return new Ctor(x);

      n1 = d0 = new Ctor(1);
      d1 = n0 = new Ctor(0);

      d = new Ctor(d1);
      e = d.e = getPrecision(xd) - x.e - 1;
      k = e % LOG_BASE;
      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

      if (maxD == null) {

        // d is 10**e, the minimum max-denominator needed.
        maxD = e > 0 ? d : n1;
      } else {
        n = new Ctor(maxD);
        if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument$1 + n);
        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
      }

      external = false;
      n = new Ctor(digitsToString(xd));
      pr = Ctor.precision;
      Ctor.precision = e = xd.length * LOG_BASE * 2;

      for (;;)  {
        q = divide(n, d, 0, 1, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.cmp(maxD) == 1) break;
        d0 = d1;
        d1 = d2;
        d2 = n1;
        n1 = n0.plus(q.times(d2));
        n0 = d2;
        d2 = d;
        d = n.minus(q.times(d2));
        n = d2;
      }

      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;

      // Determine which fraction is closer to x, n0/d0 or n1/d1?
      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
          ? [n1, d1] : [n0, d0];

      Ctor.precision = pr;
      external = true;

      return r;
    };


    /*
     * Return a string representing the value of this Decimal in base 16, round to `sd` significant
     * digits using rounding mode `rm`.
     *
     * If the optional `sd` argument is present then return binary exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P$2.toHexadecimal = P$2.toHex = function (sd, rm) {
      return toStringBinary(this, 16, sd, rm);
    };


    /*
     * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
     * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
     *
     * The return value will always have the same sign as this Decimal, unless either this Decimal
     * or `y` is NaN, in which case the return value will be also be NaN.
     *
     * The return value is not affected by the value of `precision`.
     *
     * y {number|string|Decimal} The magnitude to round to a multiple of.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * 'toNearest() rounding mode not an integer: {rm}'
     * 'toNearest() rounding mode out of range: {rm}'
     *
     */
    P$2.toNearest = function (y, rm) {
      var x = this,
        Ctor = x.constructor;

      x = new Ctor(x);

      if (y == null) {

        // If x is not finite, return x.
        if (!x.d) return x;

        y = new Ctor(1);
        rm = Ctor.rounding;
      } else {
        y = new Ctor(y);
        if (rm === void 0) {
          rm = Ctor.rounding;
        } else {
          checkInt32(rm, 0, 8);
        }

        // If x is not finite, return x if y is not NaN, else NaN.
        if (!x.d) return y.s ? x : y;

        // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
        if (!y.d) {
          if (y.s) y.s = x.s;
          return y;
        }
      }

      // If y is not zero, calculate the nearest multiple of y to x.
      if (y.d[0]) {
        external = false;
        x = divide(x, y, 0, rm, 1).times(y);
        external = true;
        finalise(x);

      // If y is zero, return zero with the sign of x.
      } else {
        y.s = x.s;
        x = y;
      }

      return x;
    };


    /*
     * Return the value of this Decimal converted to a number primitive.
     * Zero keeps its sign.
     *
     */
    P$2.toNumber = function () {
      return +this;
    };


    /*
     * Return a string representing the value of this Decimal in base 8, round to `sd` significant
     * digits using rounding mode `rm`.
     *
     * If the optional `sd` argument is present then return binary exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P$2.toOctal = function (sd, rm) {
      return toStringBinary(this, 8, sd, rm);
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
     * to `precision` significant digits using rounding mode `rounding`.
     *
     * ECMAScript compliant.
     *
     *   pow(x, NaN)                           = NaN
     *   pow(x, ±0)                            = 1

     *   pow(NaN, non-zero)                    = NaN
     *   pow(abs(x) > 1, +Infinity)            = +Infinity
     *   pow(abs(x) > 1, -Infinity)            = +0
     *   pow(abs(x) == 1, ±Infinity)           = NaN
     *   pow(abs(x) < 1, +Infinity)            = +0
     *   pow(abs(x) < 1, -Infinity)            = +Infinity
     *   pow(+Infinity, y > 0)                 = +Infinity
     *   pow(+Infinity, y < 0)                 = +0
     *   pow(-Infinity, odd integer > 0)       = -Infinity
     *   pow(-Infinity, even integer > 0)      = +Infinity
     *   pow(-Infinity, odd integer < 0)       = -0
     *   pow(-Infinity, even integer < 0)      = +0
     *   pow(+0, y > 0)                        = +0
     *   pow(+0, y < 0)                        = +Infinity
     *   pow(-0, odd integer > 0)              = -0
     *   pow(-0, even integer > 0)             = +0
     *   pow(-0, odd integer < 0)              = -Infinity
     *   pow(-0, even integer < 0)             = +Infinity
     *   pow(finite x < 0, finite non-integer) = NaN
     *
     * For non-integer or very large exponents pow(x, y) is calculated using
     *
     *   x^y = exp(y*ln(x))
     *
     * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
     * probability of an incorrectly rounded result
     * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
     * i.e. 1 in 250,000,000,000,000
     *
     * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
     *
     * y {number|string|Decimal} The power to which to raise this Decimal.
     *
     */
    P$2.toPower = P$2.pow = function (y) {
      var e, k, pr, r, rm, s,
        x = this,
        Ctor = x.constructor,
        yn = +(y = new Ctor(y));

      // Either ±Infinity, NaN or ±0?
      if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

      x = new Ctor(x);

      if (x.eq(1)) return x;

      pr = Ctor.precision;
      rm = Ctor.rounding;

      if (y.eq(1)) return finalise(x, pr, rm);

      // y exponent
      e = mathfloor(y.e / LOG_BASE);

      // If y is a small integer use the 'exponentiation by squaring' algorithm.
      if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r = intPow(Ctor, x, k, pr);
        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
      }

      s = x.s;

      // if x is negative
      if (s < 0) {

        // if y is not an integer
        if (e < y.d.length - 1) return new Ctor(NaN);

        // Result is positive if x is negative and the last digit of integer y is even.
        if ((y.d[e] & 1) == 0) s = 1;

        // if x.eq(-1)
        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
          x.s = s;
          return x;
        }
      }

      // Estimate result exponent.
      // x^y = 10^e,  where e = y * log10(x)
      // log10(x) = log10(x_significand) + x_exponent
      // log10(x_significand) = ln(x_significand) / ln(10)
      k = mathpow(+x, yn);
      e = k == 0 || !isFinite(k)
        ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
        : new Ctor(k + '').e;

      // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

      // Overflow/underflow?
      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

      external = false;
      Ctor.rounding = x.s = 1;

      // Estimate the extra guard digits needed to ensure five correct rounding digits from
      // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
      // new Decimal(2.32456).pow('2087987436534566.46411')
      // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
      k = Math.min(12, (e + '').length);

      // r = x^y = exp(y*ln(x))
      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

      // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
      if (r.d) {

        // Truncate to the required precision plus five rounding digits.
        r = finalise(r, pr + 5, 1);

        // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
        // the result.
        if (checkRoundingDigits(r.d, pr, rm)) {
          e = pr + 10;

          // Truncate to the increased precision plus five rounding digits.
          r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

          // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
          if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }
        }
      }

      r.s = s;
      external = true;
      Ctor.rounding = rm;

      return finalise(r, pr, rm);
    };


    /*
     * Return a string representing the value of this Decimal rounded to `sd` significant digits
     * using rounding mode `rounding`.
     *
     * Return exponential notation if `sd` is less than the number of digits necessary to represent
     * the integer part of the value in normal notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */
    P$2.toPrecision = function (sd, rm) {
      var str,
        x = this,
        Ctor = x.constructor;

      if (sd === void 0) {
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);

        x = finalise(new Ctor(x), sd, rm);
        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
      }

      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
     * omitted.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * 'toSD() digits out of range: {sd}'
     * 'toSD() digits not an integer: {sd}'
     * 'toSD() rounding mode not an integer: {rm}'
     * 'toSD() rounding mode out of range: {rm}'
     *
     */
    P$2.toSignificantDigits = P$2.toSD = function (sd, rm) {
      var x = this,
        Ctor = x.constructor;

      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);

        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
      }

      return finalise(new Ctor(x), sd, rm);
    };


    /*
     * Return a string representing the value of this Decimal.
     *
     * Return exponential notation if this Decimal has a positive exponent equal to or greater than
     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
     *
     */
    P$2.toString = function () {
      var x = this,
        Ctor = x.constructor,
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

      return x.isNeg() && !x.isZero() ? '-' + str : str;
    };


    /*
     * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
     *
     */
    P$2.truncated = P$2.trunc = function () {
      return finalise(new this.constructor(this), this.e + 1, 1);
    };


    /*
     * Return a string representing the value of this Decimal.
     * Unlike `toString`, negative zero will include the minus sign.
     *
     */
    P$2.valueOf = P$2.toJSON = function () {
      var x = this,
        Ctor = x.constructor,
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

      return x.isNeg() ? '-' + str : str;
    };


    /*
    // Add aliases to match BigDecimal method names.
    // P.add = P.plus;
    P.subtract = P.minus;
    P.multiply = P.times;
    P.divide = P.div;
    P.remainder = P.mod;
    P.compareTo = P.cmp;
    P.negate = P.neg;
     */


    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


    /*
     *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
     *                           finiteToString, naturalExponential, naturalLogarithm
     *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
     *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
     *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
     *  convertBase              toStringBinary, parseOther
     *  cos                      P.cos
     *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
     *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
     *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
     *                           taylorSeries, atan2, parseOther
     *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
     *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
     *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
     *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
     *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
     *                           P.truncated, divide, getLn10, getPi, naturalExponential,
     *                           naturalLogarithm, ceil, floor, round, trunc
     *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
     *                           toStringBinary
     *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
     *  getLn10                  P.logarithm, naturalLogarithm
     *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
     *  getPrecision             P.precision, P.toFraction
     *  getZeroString            digitsToString, finiteToString
     *  intPow                   P.toPower, parseOther
     *  isOdd                    toLessThanHalfPi
     *  maxOrMin                 max, min
     *  naturalExponential       P.naturalExponential, P.toPower
     *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
     *                           P.toPower, naturalExponential
     *  nonFiniteToString        finiteToString, toStringBinary
     *  parseDecimal             Decimal
     *  parseOther               Decimal
     *  sin                      P.sin
     *  taylorSeries             P.cosh, P.sinh, cos, sin
     *  toLessThanHalfPi         P.cos, P.sin
     *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
     *  truncate                 intPow
     *
     *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
     *                           naturalLogarithm, config, parseOther, random, Decimal
     */


    function digitsToString(d) {
      var i, k, ws,
        indexOfLastWord = d.length - 1,
        str = '',
        w = d[0];

      if (indexOfLastWord > 0) {
        str += w;
        for (i = 1; i < indexOfLastWord; i++) {
          ws = d[i] + '';
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
          str += ws;
        }

        w = d[i];
        ws = w + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
      } else if (w === 0) {
        return '0';
      }

      // Remove trailing zeros of last w.
      for (; w % 10 === 0;) w /= 10;

      return str + w;
    }


    function checkInt32(i, min, max) {
      if (i !== ~~i || i < min || i > max) {
        throw Error(invalidArgument$1 + i);
      }
    }


    /*
     * Check 5 rounding digits if `repeating` is null, 4 otherwise.
     * `repeating == null` if caller is `log` or `pow`,
     * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
     */
    function checkRoundingDigits(d, i, rm, repeating) {
      var di, k, r, rd;

      // Get the length of the first word of the array d.
      for (k = d[0]; k >= 10; k /= 10) --i;

      // Is the rounding digit in the first word of d?
      if (--i < 0) {
        i += LOG_BASE;
        di = 0;
      } else {
        di = Math.ceil((i + 1) / LOG_BASE);
        i %= LOG_BASE;
      }

      // i is the index (0 - 6) of the rounding digit.
      // E.g. if within the word 3487563 the first rounding digit is 5,
      // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
      k = mathpow(10, LOG_BASE - i);
      rd = d[di] % k | 0;

      if (repeating == null) {
        if (i < 3) {
          if (i == 0) rd = rd / 100 | 0;
          else if (i == 1) rd = rd / 10 | 0;
          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
        } else {
          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
            (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
              (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
        }
      } else {
        if (i < 4) {
          if (i == 0) rd = rd / 1000 | 0;
          else if (i == 1) rd = rd / 100 | 0;
          else if (i == 2) rd = rd / 10 | 0;
          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
        } else {
          r = ((repeating || rm < 4) && rd + 1 == k ||
          (!repeating && rm > 3) && rd + 1 == k / 2) &&
            (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
        }
      }

      return r;
    }


    // Convert string of `baseIn` to an array of numbers of `baseOut`.
    // Eg. convertBase('255', 10, 16) returns [15, 15].
    // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
    function convertBase(str, baseIn, baseOut) {
      var j,
        arr = [0],
        arrL,
        i = 0,
        strL = str.length;

      for (; i < strL;) {
        for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
        arr[0] += NUMERALS.indexOf(str.charAt(i++));
        for (j = 0; j < arr.length; j++) {
          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] === void 0) arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }

      return arr.reverse();
    }


    /*
     * cos(x) = 1 - x^2/2! + x^4/4! - ...
     * |x| < pi/2
     *
     */
    function cosine(Ctor, x) {
      var k, y,
        len = x.d.length;

      // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
      // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

      // Estimate the optimum number of times to use the argument reduction.
      if (len < 32) {
        k = Math.ceil(len / 3);
        y = (1 / tinyPow(4, k)).toString();
      } else {
        k = 16;
        y = '2.3283064365386962890625e-10';
      }

      Ctor.precision += k;

      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

      // Reverse argument reduction
      for (var i = k; i--;) {
        var cos2x = x.times(x);
        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
      }

      Ctor.precision -= k;

      return x;
    }


    /*
     * Perform division in the specified base.
     */
    var divide = (function () {

      // Assumes non-zero x and k, and hence non-zero result.
      function multiplyInteger(x, k, base) {
        var temp,
          carry = 0,
          i = x.length;

        for (x = x.slice(); i--;) {
          temp = x[i] * k + carry;
          x[i] = temp % base | 0;
          carry = temp / base | 0;
        }

        if (carry) x.unshift(carry);

        return x;
      }

      function compare(a, b, aL, bL) {
        var i, r;

        if (aL != bL) {
          r = aL > bL ? 1 : -1;
        } else {
          for (i = r = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              r = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return r;
      }

      function subtract(a, b, aL, base) {
        var i = 0;

        // Subtract b from a.
        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }

        // Remove leading zeros.
        for (; !a[0] && a.length > 1;) a.shift();
      }

      return function (x, y, pr, rm, dp, base) {
        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
          yL, yz,
          Ctor = x.constructor,
          sign = x.s == y.s ? 1 : -1,
          xd = x.d,
          yd = y.d;

        // Either NaN, Infinity or 0?
        if (!xd || !xd[0] || !yd || !yd[0]) {

          return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
            !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

            // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
            xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
        }

        if (base) {
          logBase = 1;
          e = x.e - y.e;
        } else {
          base = BASE;
          logBase = LOG_BASE;
          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
        }

        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign);
        qd = q.d = [];

        // Result exponent may be one less than e.
        // The digit array of a Decimal from toStringBinary may have trailing zeros.
        for (i = 0; yd[i] == (xd[i] || 0); i++);

        if (yd[i] > (xd[i] || 0)) e--;

        if (pr == null) {
          sd = pr = Ctor.precision;
          rm = Ctor.rounding;
        } else if (dp) {
          sd = pr + (x.e - y.e) + 1;
        } else {
          sd = pr;
        }

        if (sd < 0) {
          qd.push(1);
          more = true;
        } else {

          // Convert precision in number of base 10 digits to base 1e7 digits.
          sd = sd / logBase + 2 | 0;
          i = 0;

          // divisor < 1e7
          if (yL == 1) {
            k = 0;
            yd = yd[0];
            sd++;

            // k is the carry.
            for (; (i < xL || k) && sd--; i++) {
              t = k * base + (xd[i] || 0);
              qd[i] = t / yd | 0;
              k = t % yd | 0;
            }

            more = k || i < xL;

          // divisor >= 1e7
          } else {

            // Normalise xd and yd so highest order digit of yd is >= base/2
            k = base / (yd[0] + 1) | 0;

            if (k > 1) {
              yd = multiplyInteger(yd, k, base);
              xd = multiplyInteger(xd, k, base);
              yL = yd.length;
              xL = xd.length;
            }

            xi = yL;
            rem = xd.slice(0, yL);
            remL = rem.length;

            // Add zeros to make remainder as long as divisor.
            for (; remL < yL;) rem[remL++] = 0;

            yz = yd.slice();
            yz.unshift(0);
            yd0 = yd[0];

            if (yd[1] >= base / 2) ++yd0;

            do {
              k = 0;

              // Compare divisor and remainder.
              cmp = compare(yd, rem, yL, remL);

              // If divisor < remainder.
              if (cmp < 0) {

                // Calculate trial digit, k.
                rem0 = rem[0];
                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                // k will be how many times the divisor goes into the current remainder.
                k = rem0 / yd0 | 0;

                //  Algorithm:
                //  1. product = divisor * trial digit (k)
                //  2. if product > remainder: product -= divisor, k--
                //  3. remainder -= product
                //  4. if product was < remainder at 2:
                //    5. compare new remainder and divisor
                //    6. If remainder > divisor: remainder -= divisor, k++

                if (k > 1) {
                  if (k >= base) k = base - 1;

                  // product = divisor * trial digit.
                  prod = multiplyInteger(yd, k, base);
                  prodL = prod.length;
                  remL = rem.length;

                  // Compare product and remainder.
                  cmp = compare(prod, rem, prodL, remL);

                  // product > remainder.
                  if (cmp == 1) {
                    k--;

                    // Subtract divisor from product.
                    subtract(prod, yL < prodL ? yz : yd, prodL, base);
                  }
                } else {

                  // cmp is -1.
                  // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                  // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                  if (k == 0) cmp = k = 1;
                  prod = yd.slice();
                }

                prodL = prod.length;
                if (prodL < remL) prod.unshift(0);

                // Subtract product from remainder.
                subtract(rem, prod, remL, base);

                // If product was < previous remainder.
                if (cmp == -1) {
                  remL = rem.length;

                  // Compare divisor and new remainder.
                  cmp = compare(yd, rem, yL, remL);

                  // If divisor < new remainder, subtract divisor from remainder.
                  if (cmp < 1) {
                    k++;

                    // Subtract divisor from remainder.
                    subtract(rem, yL < remL ? yz : yd, remL, base);
                  }
                }

                remL = rem.length;
              } else if (cmp === 0) {
                k++;
                rem = [0];
              }    // if cmp === 1, k will be 0

              // Add the next digit, k, to the result array.
              qd[i++] = k;

              // Update the remainder.
              if (cmp && rem[0]) {
                rem[remL++] = xd[xi] || 0;
              } else {
                rem = [xd[xi]];
                remL = 1;
              }

            } while ((xi++ < xL || rem[0] !== void 0) && sd--);

            more = rem[0] !== void 0;
          }

          // Leading zero?
          if (!qd[0]) qd.shift();
        }

        // logBase is 1 when divide is being used for base conversion.
        if (logBase == 1) {
          q.e = e;
          inexact = more;
        } else {

          // To calculate q.e, first get the number of digits of qd[0].
          for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
          q.e = i + e * logBase - 1;

          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
        }

        return q;
      };
    })();


    /*
     * Round `x` to `sd` significant digits using rounding mode `rm`.
     * Check for over/under-flow.
     */
     function finalise(x, sd, rm, isTruncated) {
      var digits, i, j, k, rd, roundUp, w, xd, xdi,
        Ctor = x.constructor;

      // Don't round if sd is null or undefined.
      out: if (sd != null) {
        xd = x.d;

        // Infinity/NaN.
        if (!xd) return x;

        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
        // w: the word of xd containing rd, a base 1e7 number.
        // xdi: the index of w within xd.
        // digits: the number of digits of w.
        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
        // they had leading zeros)
        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

        // Get the length of the first word of the digits array xd.
        for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
        i = sd - digits;

        // Is the rounding digit in the first word of xd?
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          w = xd[xdi = 0];

          // Get the rounding digit at index j of w.
          rd = w / mathpow(10, digits - j - 1) % 10 | 0;
        } else {
          xdi = Math.ceil((i + 1) / LOG_BASE);
          k = xd.length;
          if (xdi >= k) {
            if (isTruncated) {

              // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
              for (; k++ <= xdi;) xd.push(0);
              w = rd = 0;
              digits = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            w = k = xd[xdi];

            // Get the number of digits of w.
            for (digits = 1; k >= 10; k /= 10) digits++;

            // Get the index of rd within w.
            i %= LOG_BASE;

            // Get the index of rd within w, adjusted for leading zeros.
            // The number of leading zeros of w is given by LOG_BASE - digits.
            j = i - LOG_BASE + digits;

            // Get the rounding digit at index j of w.
            rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
          }
        }

        // Are there any non-zero digits after the rounding digit?
        isTruncated = isTruncated || sd < 0 ||
          xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

        // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
        // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
        // will give 714.

        roundUp = rm < 4
          ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
          : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

            // Check whether the digit to the left of the rounding digit is odd.
            ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
              rm == (x.s < 0 ? 8 : 7));

        if (sd < 1 || !xd[0]) {
          xd.length = 0;
          if (roundUp) {

            // Convert sd to decimal places.
            sd -= x.e + 1;

            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
            x.e = -sd || 0;
          } else {

            // Zero.
            xd[0] = x.e = 0;
          }

          return x;
        }

        // Remove excess digits.
        if (i == 0) {
          xd.length = xdi;
          k = 1;
          xdi--;
        } else {
          xd.length = xdi + 1;
          k = mathpow(10, LOG_BASE - i);

          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
          // j > 0 means i > number of leading zeros of w.
          xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
        }

        if (roundUp) {
          for (;;) {

            // Is the digit to be rounded up in the first word of xd?
            if (xdi == 0) {

              // i will be the length of xd[0] before k is added.
              for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
              j = xd[0] += k;
              for (k = 1; j >= 10; j /= 10) k++;

              // if i != k the length has increased.
              if (i != k) {
                x.e++;
                if (xd[0] == BASE) xd[0] = 1;
              }

              break;
            } else {
              xd[xdi] += k;
              if (xd[xdi] != BASE) break;
              xd[xdi--] = 0;
              k = 1;
            }
          }
        }

        // Remove trailing zeros.
        for (i = xd.length; xd[--i] === 0;) xd.pop();
      }

      if (external) {

        // Overflow?
        if (x.e > Ctor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < Ctor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // Ctor.underflow = true;
        } // else Ctor.underflow = false;
      }

      return x;
    }


    function finiteToString(x, isExp, sd) {
      if (!x.isFinite()) return nonFiniteToString(x);
      var k,
        e = x.e,
        str = digitsToString(x.d),
        len = str.length;

      if (isExp) {
        if (sd && (k = sd - len) > 0) {
          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
        } else if (len > 1) {
          str = str.charAt(0) + '.' + str.slice(1);
        }

        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
      } else if (e < 0) {
        str = '0.' + getZeroString(-e - 1) + str;
        if (sd && (k = sd - len) > 0) str += getZeroString(k);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
      } else {
        if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
        if (sd && (k = sd - len) > 0) {
          if (e + 1 === len) str += '.';
          str += getZeroString(k);
        }
      }

      return str;
    }


    // Calculate the base 10 exponent from the base 1e7 exponent.
    function getBase10Exponent(digits, e) {
      var w = digits[0];

      // Add the number of digits of the first word of the digits array.
      for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
      return e;
    }


    function getLn10(Ctor, sd, pr) {
      if (sd > LN10_PRECISION) {

        // Reset global state in case the exception is caught.
        external = true;
        if (pr) Ctor.precision = pr;
        throw Error(precisionLimitExceeded);
      }
      return finalise(new Ctor(LN10), sd, 1, true);
    }


    function getPi(Ctor, sd, rm) {
      if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
      return finalise(new Ctor(PI), sd, rm, true);
    }


    function getPrecision(digits) {
      var w = digits.length - 1,
        len = w * LOG_BASE + 1;

      w = digits[w];

      // If non-zero...
      if (w) {

        // Subtract the number of trailing zeros of the last word.
        for (; w % 10 == 0; w /= 10) len--;

        // Add the number of digits of the first word.
        for (w = digits[0]; w >= 10; w /= 10) len++;
      }

      return len;
    }


    function getZeroString(k) {
      var zs = '';
      for (; k--;) zs += '0';
      return zs;
    }


    /*
     * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
     * integer of type number.
     *
     * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
     *
     */
    function intPow(Ctor, x, n, pr) {
      var isTruncated,
        r = new Ctor(1),

        // Max n of 9007199254740991 takes 53 loop iterations.
        // Maximum digits array length; leaves [28, 34] guard digits.
        k = Math.ceil(pr / LOG_BASE + 4);

      external = false;

      for (;;) {
        if (n % 2) {
          r = r.times(x);
          if (truncate(r.d, k)) isTruncated = true;
        }

        n = mathfloor(n / 2);
        if (n === 0) {

          // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
          n = r.d.length - 1;
          if (isTruncated && r.d[n] === 0) ++r.d[n];
          break;
        }

        x = x.times(x);
        truncate(x.d, k);
      }

      external = true;

      return r;
    }


    function isOdd(n) {
      return n.d[n.d.length - 1] & 1;
    }


    /*
     * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
     */
    function maxOrMin(Ctor, args, ltgt) {
      var y,
        x = new Ctor(args[0]),
        i = 0;

      for (; ++i < args.length;) {
        y = new Ctor(args[i]);
        if (!y.s) {
          x = y;
          break;
        } else if (x[ltgt](y)) {
          x = y;
        }
      }

      return x;
    }


    /*
     * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
     * digits.
     *
     * Taylor/Maclaurin series.
     *
     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
     *
     * Argument reduction:
     *   Repeat x = x / 32, k += 5, until |x| < 0.1
     *   exp(x) = exp(x / 2^k)^(2^k)
     *
     * Previously, the argument was initially reduced by
     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
     * found to be slower than just dividing repeatedly by 32 as above.
     *
     * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
     * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
     *
     *  exp(Infinity)  = Infinity
     *  exp(-Infinity) = 0
     *  exp(NaN)       = NaN
     *  exp(±0)        = 1
     *
     *  exp(x) is non-terminating for any finite, non-zero x.
     *
     *  The result will always be correctly rounded.
     *
     */
    function naturalExponential(x, sd) {
      var denominator, guard, j, pow, sum, t, wpr,
        rep = 0,
        i = 0,
        k = 0,
        Ctor = x.constructor,
        rm = Ctor.rounding,
        pr = Ctor.precision;

      // 0/NaN/Infinity?
      if (!x.d || !x.d[0] || x.e > 17) {

        return new Ctor(x.d
          ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
          : x.s ? x.s < 0 ? 0 : x : 0 / 0);
      }

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      t = new Ctor(0.03125);

      // while abs(x) >= 0.1
      while (x.e > -2) {

        // x = x / 2^5
        x = x.times(t);
        k += 5;
      }

      // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
      // necessary to ensure the first 4 rounding digits are correct.
      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow = sum = new Ctor(1);
      Ctor.precision = wpr;

      for (;;) {
        pow = finalise(pow.times(x), wpr, 1);
        denominator = denominator.times(++i);
        t = sum.plus(divide(pow, denominator, wpr, 1));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          j = k;
          while (j--) sum = finalise(sum.times(sum), wpr, 1);

          // Check to see if the first 4 rounding digits are [49]999.
          // If so, repeat the summation with a higher precision, otherwise
          // e.g. with precision: 18, rounding: 1
          // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
          // `wpr - guard` is the index of first rounding digit.
          if (sd == null) {

            if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += 10;
              denominator = pow = t = new Ctor(1);
              i = 0;
              rep++;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }

        sum = t;
      }
    }


    /*
     * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
     * digits.
     *
     *  ln(-n)        = NaN
     *  ln(0)         = -Infinity
     *  ln(-0)        = -Infinity
     *  ln(1)         = 0
     *  ln(Infinity)  = Infinity
     *  ln(-Infinity) = NaN
     *  ln(NaN)       = NaN
     *
     *  ln(n) (n != 1) is non-terminating.
     *
     */
    function naturalLogarithm(y, sd) {
      var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
        n = 1,
        guard = 10,
        x = y,
        xd = x.d,
        Ctor = x.constructor,
        rm = Ctor.rounding,
        pr = Ctor.precision;

      // Is x negative or Infinity, NaN, 0 or 1?
      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
      }

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      Ctor.precision = wpr += guard;
      c = digitsToString(xd);
      c0 = c.charAt(0);

      if (Math.abs(e = x.e) < 1.5e15) {

        // Argument reduction.
        // The series converges faster the closer the argument is to 1, so using
        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
        // later be divided by this number, then separate out the power of 10 using
        // ln(a*10^b) = ln(a) + b*ln(10).

        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
        // max n is 6 (gives 0.7 - 1.3)
        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
          x = x.times(y);
          c = digitsToString(x.d);
          c0 = c.charAt(0);
          n++;
        }

        e = x.e;

        if (c0 > 1) {
          x = new Ctor('0.' + c);
          e++;
        } else {
          x = new Ctor(c0 + '.' + c.slice(1));
        }
      } else {

        // The argument reduction method above may result in overflow if the argument y is a massive
        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
        // function using ln(x*10^e) = ln(x) + e*ln(10).
        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;

        return sd == null ? finalise(x, pr, rm, external = true) : x;
      }

      // x1 is x reduced to a value near 1.
      x1 = x;

      // Taylor series.
      // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
      // where x = (y - 1)/(y + 1)    (|x| < 1)
      sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
      x2 = finalise(x.times(x), wpr, 1);
      denominator = 3;

      for (;;) {
        numerator = finalise(numerator.times(x2), wpr, 1);
        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          sum = sum.times(2);

          // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
          // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
          if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
          sum = divide(sum, new Ctor(n), wpr, 1);

          // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
          // been repeated previously) and the first 4 rounding digits 9999?
          // If so, restart the summation with a higher precision, otherwise
          // e.g. with precision: 12, rounding: 1
          // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
          // `wpr - guard` is the index of first rounding digit.
          if (sd == null) {
            if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += guard;
              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
              x2 = finalise(x.times(x), wpr, 1);
              denominator = rep = 1;
            } else {
              return finalise(sum, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum;
          }
        }

        sum = t;
        denominator += 2;
      }
    }


    // ±Infinity, NaN.
    function nonFiniteToString(x) {
      // Unsigned.
      return String(x.s * x.s / 0);
    }


    /*
     * Parse the value of a new Decimal `x` from string `str`.
     */
    function parseDecimal(x, str) {
      var e, i, len;

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

      // Exponential form?
      if ((i = str.search(/e/i)) > 0) {

        // Determine exponent.
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {

        // Integer.
        e = str.length;
      }

      // Determine leading zeros.
      for (i = 0; str.charCodeAt(i) === 48; i++);

      // Determine trailing zeros.
      for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
      str = str.slice(i, len);

      if (str) {
        len -= i;
        x.e = e = e - i - 1;
        x.d = [];

        // Transform base

        // e is the base 10 exponent.
        // i is where to slice str to get the first word of the digits array.
        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;

        if (i < len) {
          if (i) x.d.push(+str.slice(0, i));
          for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }

        for (; i--;) str += '0';
        x.d.push(+str);

        if (external) {

          // Overflow?
          if (x.e > x.constructor.maxE) {

            // Infinity.
            x.d = null;
            x.e = NaN;

          // Underflow?
          } else if (x.e < x.constructor.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
            // x.constructor.underflow = true;
          } // else x.constructor.underflow = false;
        }
      } else {

        // Zero.
        x.e = 0;
        x.d = [0];
      }

      return x;
    }


    /*
     * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
     */
    function parseOther(x, str) {
      var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

      if (str === 'Infinity' || str === 'NaN') {
        if (!+str) x.s = NaN;
        x.e = NaN;
        x.d = null;
        return x;
      }

      if (isHex.test(str))  {
        base = 16;
        str = str.toLowerCase();
      } else if (isBinary.test(str))  {
        base = 2;
      } else if (isOctal.test(str))  {
        base = 8;
      } else {
        throw Error(invalidArgument$1 + str);
      }

      // Is there a binary exponent part?
      i = str.search(/p/i);

      if (i > 0) {
        p = +str.slice(i + 1);
        str = str.substring(2, i);
      } else {
        str = str.slice(2);
      }

      // Convert `str` as an integer then divide the result by `base` raised to a power such that the
      // fraction part will be restored.
      i = str.indexOf('.');
      isFloat = i >= 0;
      Ctor = x.constructor;

      if (isFloat) {
        str = str.replace('.', '');
        len = str.length;
        i = len - i;

        // log[10](16) = 1.2041... , log[10](88) = 1.9444....
        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
      }

      xd = convertBase(str, base, BASE);
      xe = xd.length - 1;

      // Remove trailing zeros.
      for (i = xe; xd[i] === 0; --i) xd.pop();
      if (i < 0) return new Ctor(x.s * 0);
      x.e = getBase10Exponent(xd, xe);
      x.d = xd;
      external = false;

      // At what precision to perform the division to ensure exact conversion?
      // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
      // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
      // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
      // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
      // Therefore using 4 * the number of digits of str will always be enough.
      if (isFloat) x = divide(x, divisor, len * 4);

      // Multiply by the binary exponent part if present.
      if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
      external = true;

      return x;
    }


    /*
     * sin(x) = x - x^3/3! + x^5/5! - ...
     * |x| < pi/2
     *
     */
    function sine(Ctor, x) {
      var k,
        len = x.d.length;

      if (len < 3) return taylorSeries(Ctor, 2, x, x);

      // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
      // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
      // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x);

      // Reverse argument reduction
      var sin2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sin2_x = x.times(x);
        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
      }

      return x;
    }


    // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
    function taylorSeries(Ctor, n, x, y, isHyperbolic) {
      var j, t, u, x2,
        pr = Ctor.precision,
        k = Math.ceil(pr / LOG_BASE);

      external = false;
      x2 = x.times(x);
      u = new Ctor(y);

      for (;;) {
        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
        u = isHyperbolic ? y.plus(t) : y.minus(t);
        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
        t = u.plus(y);

        if (t.d[k] !== void 0) {
          for (j = k; t.d[j] === u.d[j] && j--;);
          if (j == -1) break;
        }

        j = u;
        u = y;
        y = t;
        t = j;
      }

      external = true;
      t.d.length = k + 1;

      return t;
    }


    // Exponent e must be positive and non-zero.
    function tinyPow(b, e) {
      var n = b;
      while (--e) n *= b;
      return n;
    }


    // Return the absolute value of `x` reduced to less than or equal to half pi.
    function toLessThanHalfPi(Ctor, x) {
      var t,
        isNeg = x.s < 0,
        pi = getPi(Ctor, Ctor.precision, 1),
        halfPi = pi.times(0.5);

      x = x.abs();

      if (x.lte(halfPi)) {
        quadrant = isNeg ? 4 : 1;
        return x;
      }

      t = x.divToInt(pi);

      if (t.isZero()) {
        quadrant = isNeg ? 3 : 2;
      } else {
        x = x.minus(t.times(pi));

        // 0 <= x < pi
        if (x.lte(halfPi)) {
          quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
          return x;
        }

        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
      }

      return x.minus(pi).abs();
    }


    /*
     * Return the value of Decimal `x` as a string in base `baseOut`.
     *
     * If the optional `sd` argument is present include a binary exponent suffix.
     */
    function toStringBinary(x, baseOut, sd, rm) {
      var base, e, i, k, len, roundUp, str, xd, y,
        Ctor = x.constructor,
        isExp = sd !== void 0;

      if (isExp) {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
      } else {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      }

      if (!x.isFinite()) {
        str = nonFiniteToString(x);
      } else {
        str = finiteToString(x);
        i = str.indexOf('.');

        // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
        // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
        // minBinaryExponent = floor(decimalExponent * log[2](10))
        // log[2](10) = 3.321928094887362347870319429489390175864

        if (isExp) {
          base = 2;
          if (baseOut == 16) {
            sd = sd * 4 - 3;
          } else if (baseOut == 8) {
            sd = sd * 3 - 2;
          }
        } else {
          base = baseOut;
        }

        // Convert the number as an integer then divide the result by its base raised to a power such
        // that the fraction part will be restored.

        // Non-integer.
        if (i >= 0) {
          str = str.replace('.', '');
          y = new Ctor(1);
          y.e = str.length - i;
          y.d = convertBase(finiteToString(y), 10, base);
          y.e = y.d.length;
        }

        xd = convertBase(str, 10, base);
        e = len = xd.length;

        // Remove trailing zeros.
        for (; xd[--len] == 0;) xd.pop();

        if (!xd[0]) {
          str = isExp ? '0p+0' : '0';
        } else {
          if (i < 0) {
            e--;
          } else {
            x = new Ctor(x);
            x.d = xd;
            x.e = e;
            x = divide(x, y, sd, rm, 0, base);
            xd = x.d;
            e = x.e;
            roundUp = inexact;
          }

          // The rounding digit, i.e. the digit after the digit that may be rounded up.
          i = xd[sd];
          k = base / 2;
          roundUp = roundUp || xd[sd + 1] !== void 0;

          roundUp = rm < 4
            ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
            : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
              rm === (x.s < 0 ? 8 : 7));

          xd.length = sd;

          if (roundUp) {

            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (; ++xd[--sd] > base - 1;) {
              xd[sd] = 0;
              if (!sd) {
                ++e;
                xd.unshift(1);
              }
            }
          }

          // Determine trailing zeros.
          for (len = xd.length; !xd[len - 1]; --len);

          // E.g. [4, 11, 15] becomes 4bf.
          for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

          // Add binary exponent suffix?
          if (isExp) {
            if (len > 1) {
              if (baseOut == 16 || baseOut == 8) {
                i = baseOut == 16 ? 4 : 3;
                for (--len; len % i; len++) str += '0';
                xd = convertBase(str, base, baseOut);
                for (len = xd.length; !xd[len - 1]; --len);

                // xd[0] will always be be 1
                for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
              } else {
                str = str.charAt(0) + '.' + str.slice(1);
              }
            }

            str =  str + (e < 0 ? 'p' : 'p+') + e;
          } else if (e < 0) {
            for (; ++e;) str = '0' + str;
            str = '0.' + str;
          } else {
            if (++e > len) for (e -= len; e-- ;) str += '0';
            else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
          }
        }

        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
      }

      return x.s < 0 ? '-' + str : str;
    }


    // Does not strip trailing zeros.
    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    }


    // Decimal methods


    /*
     *  abs
     *  acos
     *  acosh
     *  add
     *  asin
     *  asinh
     *  atan
     *  atanh
     *  atan2
     *  cbrt
     *  ceil
     *  clone
     *  config
     *  cos
     *  cosh
     *  div
     *  exp
     *  floor
     *  hypot
     *  ln
     *  log
     *  log2
     *  log10
     *  max
     *  min
     *  mod
     *  mul
     *  pow
     *  random
     *  round
     *  set
     *  sign
     *  sin
     *  sinh
     *  sqrt
     *  sub
     *  tan
     *  tanh
     *  trunc
     */


    /*
     * Return a new Decimal whose value is the absolute value of `x`.
     *
     * x {number|string|Decimal}
     *
     */
    function abs(x) {
      return new this(x).abs();
    }


    /*
     * Return a new Decimal whose value is the arccosine in radians of `x`.
     *
     * x {number|string|Decimal}
     *
     */
    function acos(x) {
      return new this(x).acos();
    }


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function acosh(x) {
      return new this(x).acosh();
    }


    /*
     * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function add(x, y) {
      return new this(x).plus(y);
    }


    /*
     * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function asin(x) {
      return new this(x).asin();
    }


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function asinh(x) {
      return new this(x).asinh();
    }


    /*
     * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function atan(x) {
      return new this(x).atan();
    }


    /*
     * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
     * `precision` significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function atanh(x) {
      return new this(x).atanh();
    }


    /*
     * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
     * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
     *
     * Domain: [-Infinity, Infinity]
     * Range: [-pi, pi]
     *
     * y {number|string|Decimal} The y-coordinate.
     * x {number|string|Decimal} The x-coordinate.
     *
     * atan2(±0, -0)               = ±pi
     * atan2(±0, +0)               = ±0
     * atan2(±0, -x)               = ±pi for x > 0
     * atan2(±0, x)                = ±0 for x > 0
     * atan2(-y, ±0)               = -pi/2 for y > 0
     * atan2(y, ±0)                = pi/2 for y > 0
     * atan2(±y, -Infinity)        = ±pi for finite y > 0
     * atan2(±y, +Infinity)        = ±0 for finite y > 0
     * atan2(±Infinity, x)         = ±pi/2 for finite x
     * atan2(±Infinity, -Infinity) = ±3*pi/4
     * atan2(±Infinity, +Infinity) = ±pi/4
     * atan2(NaN, x) = NaN
     * atan2(y, NaN) = NaN
     *
     */
    function atan2(y, x) {
      y = new this(y);
      x = new this(x);
      var r,
        pr = this.precision,
        rm = this.rounding,
        wpr = pr + 4;

      // Either NaN
      if (!y.s || !x.s) {
        r = new this(NaN);

      // Both ±Infinity
      } else if (!y.d && !x.d) {
        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
        r.s = y.s;

      // x is ±Infinity or y is ±0
      } else if (!x.d || y.isZero()) {
        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
        r.s = y.s;

      // y is ±Infinity or x is ±0
      } else if (!y.d || x.isZero()) {
        r = getPi(this, wpr, 1).times(0.5);
        r.s = y.s;

      // Both non-zero and finite
      } else if (x.s < 0) {
        this.precision = wpr;
        this.rounding = 1;
        r = this.atan(divide(y, x, wpr, 1));
        x = getPi(this, wpr, 1);
        this.precision = pr;
        this.rounding = rm;
        r = y.s < 0 ? r.minus(x) : r.plus(x);
      } else {
        r = this.atan(divide(y, x, wpr, 1));
      }

      return r;
    }


    /*
     * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function cbrt(x) {
      return new this(x).cbrt();
    }


    /*
     * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
     *
     * x {number|string|Decimal}
     *
     */
    function ceil(x) {
      return finalise(x = new this(x), x.e + 1, 2);
    }


    /*
     * Configure global settings for a Decimal constructor.
     *
     * `obj` is an object with one or more of the following properties,
     *
     *   precision  {number}
     *   rounding   {number}
     *   toExpNeg   {number}
     *   toExpPos   {number}
     *   maxE       {number}
     *   minE       {number}
     *   modulo     {number}
     *   crypto     {boolean|number}
     *   defaults   {true}
     *
     * E.g. Decimal.config({ precision: 20, rounding: 4 })
     *
     */
    function config(obj) {
      if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
      var i, p, v,
        useDefaults = obj.defaults === true,
        ps = [
          'precision', 1, MAX_DIGITS,
          'rounding', 0, 8,
          'toExpNeg', -EXP_LIMIT, 0,
          'toExpPos', 0, EXP_LIMIT,
          'maxE', 0, EXP_LIMIT,
          'minE', -EXP_LIMIT, 0,
          'modulo', 0, 9
        ];

      for (i = 0; i < ps.length; i += 3) {
        if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
        if ((v = obj[p]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
          else throw Error(invalidArgument$1 + p + ': ' + v);
        }
      }

      if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (v === true || v === false || v === 0 || v === 1) {
          if (v) {
            if (typeof crypto != 'undefined' && crypto &&
              (crypto.getRandomValues || crypto.randomBytes)) {
              this[p] = true;
            } else {
              throw Error(cryptoUnavailable);
            }
          } else {
            this[p] = false;
          }
        } else {
          throw Error(invalidArgument$1 + p + ': ' + v);
        }
      }

      return this;
    }


    /*
     * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function cos(x) {
      return new this(x).cos();
    }


    /*
     * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function cosh(x) {
      return new this(x).cosh();
    }


    /*
     * Create and return a Decimal constructor with the same configuration properties as this Decimal
     * constructor.
     *
     */
    function clone$1(obj) {
      var i, p, ps;

      /*
       * The Decimal constructor and exported function.
       * Return a new Decimal instance.
       *
       * v {number|string|Decimal} A numeric value.
       *
       */
      function Decimal(v) {
        var e, i, t,
          x = this;

        // Decimal called without new.
        if (!(x instanceof Decimal)) return new Decimal(v);

        // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
        // which points to Object.
        x.constructor = Decimal;

        // Duplicate.
        if (v instanceof Decimal) {
          x.s = v.s;

          if (external) {
            if (!v.d || v.e > Decimal.maxE) {

              // Infinity.
              x.e = NaN;
              x.d = null;
            } else if (v.e < Decimal.minE) {

              // Zero.
              x.e = 0;
              x.d = [0];
            } else {
              x.e = v.e;
              x.d = v.d.slice();
            }
          } else {
            x.e = v.e;
            x.d = v.d ? v.d.slice() : v.d;
          }

          return;
        }

        t = typeof v;

        if (t === 'number') {
          if (v === 0) {
            x.s = 1 / v < 0 ? -1 : 1;
            x.e = 0;
            x.d = [0];
            return;
          }

          if (v < 0) {
            v = -v;
            x.s = -1;
          } else {
            x.s = 1;
          }

          // Fast path for small integers.
          if (v === ~~v && v < 1e7) {
            for (e = 0, i = v; i >= 10; i /= 10) e++;

            if (external) {
              if (e > Decimal.maxE) {
                x.e = NaN;
                x.d = null;
              } else if (e < Decimal.minE) {
                x.e = 0;
                x.d = [0];
              } else {
                x.e = e;
                x.d = [v];
              }
            } else {
              x.e = e;
              x.d = [v];
            }

            return;

          // Infinity, NaN.
          } else if (v * 0 !== 0) {
            if (!v) x.s = NaN;
            x.e = NaN;
            x.d = null;
            return;
          }

          return parseDecimal(x, v.toString());

        } else if (t !== 'string') {
          throw Error(invalidArgument$1 + v);
        }

        // Minus sign?
        if ((i = v.charCodeAt(0)) === 45) {
          v = v.slice(1);
          x.s = -1;
        } else {
          // Plus sign?
          if (i === 43) v = v.slice(1);
          x.s = 1;
        }

        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
      }

      Decimal.prototype = P$2;

      Decimal.ROUND_UP = 0;
      Decimal.ROUND_DOWN = 1;
      Decimal.ROUND_CEIL = 2;
      Decimal.ROUND_FLOOR = 3;
      Decimal.ROUND_HALF_UP = 4;
      Decimal.ROUND_HALF_DOWN = 5;
      Decimal.ROUND_HALF_EVEN = 6;
      Decimal.ROUND_HALF_CEIL = 7;
      Decimal.ROUND_HALF_FLOOR = 8;
      Decimal.EUCLID = 9;

      Decimal.config = Decimal.set = config;
      Decimal.clone = clone$1;
      Decimal.isDecimal = isDecimalInstance;

      Decimal.abs = abs;
      Decimal.acos = acos;
      Decimal.acosh = acosh;        // ES6
      Decimal.add = add;
      Decimal.asin = asin;
      Decimal.asinh = asinh;        // ES6
      Decimal.atan = atan;
      Decimal.atanh = atanh;        // ES6
      Decimal.atan2 = atan2;
      Decimal.cbrt = cbrt;          // ES6
      Decimal.ceil = ceil;
      Decimal.cos = cos;
      Decimal.cosh = cosh;          // ES6
      Decimal.div = div;
      Decimal.exp = exp;
      Decimal.floor = floor;
      Decimal.hypot = hypot;        // ES6
      Decimal.ln = ln$1;
      Decimal.log = log;
      Decimal.log10 = log10;        // ES6
      Decimal.log2 = log2;          // ES6
      Decimal.max = max;
      Decimal.min = min;
      Decimal.mod = mod;
      Decimal.mul = mul;
      Decimal.pow = pow;
      Decimal.random = random;
      Decimal.round = round;
      Decimal.sign = sign;          // ES6
      Decimal.sin = sin;
      Decimal.sinh = sinh;          // ES6
      Decimal.sqrt = sqrt;
      Decimal.sub = sub;
      Decimal.tan = tan;
      Decimal.tanh = tanh;          // ES6
      Decimal.trunc = trunc;        // ES6

      if (obj === void 0) obj = {};
      if (obj) {
        if (obj.defaults !== true) {
          ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
          for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
        }
      }

      Decimal.config(obj);

      return Decimal;
    }


    /*
     * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function div(x, y) {
      return new this(x).div(y);
    }


    /*
     * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} The power to which to raise the base of the natural log.
     *
     */
    function exp(x) {
      return new this(x).exp();
    }


    /*
     * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
     *
     * x {number|string|Decimal}
     *
     */
    function floor(x) {
      return finalise(x = new this(x), x.e + 1, 3);
    }


    /*
     * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
     * rounded to `precision` significant digits using rounding mode `rounding`.
     *
     * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
     *
     * arguments {number|string|Decimal}
     *
     */
    function hypot() {
      var i, n,
        t = new this(0);

      external = false;

      for (i = 0; i < arguments.length;) {
        n = new this(arguments[i++]);
        if (!n.d) {
          if (n.s) {
            external = true;
            return new this(1 / 0);
          }
          t = n;
        } else if (t.d) {
          t = t.plus(n.times(n));
        }
      }

      external = true;

      return t.sqrt();
    }


    /*
     * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
     * otherwise return false.
     *
     */
    function isDecimalInstance(obj) {
      return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
    }


    /*
     * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function ln$1(x) {
      return new this(x).ln();
    }


    /*
     * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
     * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
     *
     * log[y](x)
     *
     * x {number|string|Decimal} The argument of the logarithm.
     * y {number|string|Decimal} The base of the logarithm.
     *
     */
    function log(x, y) {
      return new this(x).log(y);
    }


    /*
     * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function log2(x) {
      return new this(x).log(2);
    }


    /*
     * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function log10(x) {
      return new this(x).log(10);
    }


    /*
     * Return a new Decimal whose value is the maximum of the arguments.
     *
     * arguments {number|string|Decimal}
     *
     */
    function max() {
      return maxOrMin(this, arguments, 'lt');
    }


    /*
     * Return a new Decimal whose value is the minimum of the arguments.
     *
     * arguments {number|string|Decimal}
     *
     */
    function min() {
      return maxOrMin(this, arguments, 'gt');
    }


    /*
     * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
     * using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function mod(x, y) {
      return new this(x).mod(y);
    }


    /*
     * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function mul(x, y) {
      return new this(x).mul(y);
    }


    /*
     * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} The base.
     * y {number|string|Decimal} The exponent.
     *
     */
    function pow(x, y) {
      return new this(x).pow(y);
    }


    /*
     * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
     * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
     * are produced).
     *
     * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
     *
     */
    function random(sd) {
      var d, e, k, n,
        i = 0,
        r = new this(1),
        rd = [];

      if (sd === void 0) sd = this.precision;
      else checkInt32(sd, 1, MAX_DIGITS);

      k = Math.ceil(sd / LOG_BASE);

      if (!this.crypto) {
        for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

      // Browsers supporting crypto.getRandomValues.
      } else if (crypto.getRandomValues) {
        d = crypto.getRandomValues(new Uint32Array(k));

        for (; i < k;) {
          n = d[i];

          // 0 <= n < 4294967296
          // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
          if (n >= 4.29e9) {
            d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
          } else {

            // 0 <= n <= 4289999999
            // 0 <= (n % 1e7) <= 9999999
            rd[i++] = n % 1e7;
          }
        }

      // Node.js supporting crypto.randomBytes.
      } else if (crypto.randomBytes) {

        // buffer
        d = crypto.randomBytes(k *= 4);

        for (; i < k;) {

          // 0 <= n < 2147483648
          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

          // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
          if (n >= 2.14e9) {
            crypto.randomBytes(4).copy(d, i);
          } else {

            // 0 <= n <= 2139999999
            // 0 <= (n % 1e7) <= 9999999
            rd.push(n % 1e7);
            i += 4;
          }
        }

        i = k / 4;
      } else {
        throw Error(cryptoUnavailable);
      }

      k = rd[--i];
      sd %= LOG_BASE;

      // Convert trailing digits to zeros according to sd.
      if (k && sd) {
        n = mathpow(10, LOG_BASE - sd);
        rd[i] = (k / n | 0) * n;
      }

      // Remove trailing words which are zero.
      for (; rd[i] === 0; i--) rd.pop();

      // Zero?
      if (i < 0) {
        e = 0;
        rd = [0];
      } else {
        e = -1;

        // Remove leading words which are zero and adjust exponent accordingly.
        for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

        // Count the digits of the first word of rd to determine leading zeros.
        for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

        // Adjust the exponent for leading zeros of the first word of rd.
        if (k < LOG_BASE) e -= LOG_BASE - k;
      }

      r.e = e;
      r.d = rd;

      return r;
    }


    /*
     * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
     *
     * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
     *
     * x {number|string|Decimal}
     *
     */
    function round(x) {
      return finalise(x = new this(x), x.e + 1, this.rounding);
    }


    /*
     * Return
     *   1    if x > 0,
     *  -1    if x < 0,
     *   0    if x is 0,
     *  -0    if x is -0,
     *   NaN  otherwise
     *
     * x {number|string|Decimal}
     *
     */
    function sign(x) {
      x = new this(x);
      return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
    }


    /*
     * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
     * using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function sin(x) {
      return new this(x).sin();
    }


    /*
     * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function sinh(x) {
      return new this(x).sinh();
    }


    /*
     * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     *
     */
    function sqrt(x) {
      return new this(x).sqrt();
    }


    /*
     * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
     * using rounding mode `rounding`.
     *
     * x {number|string|Decimal}
     * y {number|string|Decimal}
     *
     */
    function sub(x, y) {
      return new this(x).sub(y);
    }


    /*
     * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
     * digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function tan(x) {
      return new this(x).tan();
    }


    /*
     * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
     * significant digits using rounding mode `rounding`.
     *
     * x {number|string|Decimal} A value in radians.
     *
     */
    function tanh(x) {
      return new this(x).tanh();
    }


    /*
     * Return a new Decimal whose value is `x` truncated to an integer.
     *
     * x {number|string|Decimal}
     *
     */
    function trunc(x) {
      return finalise(x = new this(x), x.e + 1, 1);
    }


    P$2[Symbol.for('nodejs.util.inspect.custom')] = P$2.toString;
    P$2[Symbol.toStringTag] = 'Decimal';

    // Create and configure initial Decimal constructor.
    var Decimal = clone$1(DEFAULTS);

    // Create the internal constants from their string values.
    LN10 = new Decimal(LN10);
    PI = new Decimal(PI);

    var decimal = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Decimal: Decimal,
        'default': Decimal
    });

    var require$$0 = getCjsExportFromNamespace(decimal);

    var evaluate_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = evaluate;



    var _decimal = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    // Evaluation décimale d'une forme normale dont les symboles ont été substitués.
    // Pour éviter les conversions répétées, renvoie un Decimal
    // Les unités ne sont pas gérées ici, mais dans la fonction appelante eval() associée
    // à node
    function evaluate(node$1, params) {
      switch (node$1.type) {
        case node.TYPE_NUMBER:
          return new _decimal["default"](node$1.value);

        case node.TYPE_SYMBOL:
          throw new Error("Le symbole ".concat(node$1.letter, " doit \xEAtre substitu\xE9"));

        case node.TYPE_HOLE:
          throw new Error("Impossible d'\xE9valuer une expression contenant un trou");

        case node.TYPE_POSITIVE:
        case node.TYPE_BRACKET:
          return evaluate(node$1.first);

        case node.TYPE_OPPOSITE:
          return evaluate(node$1.first).mul(-1);

        case node.TYPE_RADICAL:
          return evaluate(node$1.first).sqrt();

        case node.TYPE_DIFFERENCE:
          return evaluate(node$1.first).sub(evaluate(node$1.last));

        case node.TYPE_POWER:
          return evaluate(node$1.first).pow(evaluate(node$1.last));

        case node.TYPE_QUOTIENT:
        case node.TYPE_DIVISION:
          return evaluate(node$1.first).div(evaluate(node$1.last));

        case node.TYPE_SUM:
          return node$1.children.reduce(function (sum, child) {
            return sum.add(evaluate(child));
          }, new _decimal["default"](0));

        case node.TYPE_PRODUCT:
        case node.TYPE_PRODUCT_IMPLICIT:
        case node.TYPE_PRODUCT_POINT:
          return node$1.children.reduce(function (sum, child) {
            return sum.mul(evaluate(child));
          }, new _decimal["default"](1));

        default:
          return node$1;
      }
    }
    });

    var fraction_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _decimal = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    // const regex = new RegExp('^(\\(?(-?\\d+)(\\.\\d+)?\\)?)(/(-?\\d+))?$')
    // console.log(regex.exec('123.456'))
    // console.log(regex.exec('-123.456'))
    // console.log(regex.exec('123'))
    // console.log(regex.exec('-123'))
    // console.log(regex.exec('123/345'))
    // console.log(regex.exec('-123/345'))
    // console.log(regex.exec('-123/345'))
    function gcd(a, b) {
      if (a < 0) a = -a;
      if (b < 0) b = -b;

      if (b > a) {
        var _ref = [b, a];
        a = _ref[0];
        b = _ref[1];
      }

      while (true) {
        if (b === 0) return a;
        a %= b;
        if (a === 0) return b;
        b %= a;
      }
    }

    var PFraction = {
      add: function add(f) {
        return fraction([this.s * this.n * f.d + this.d * f.s * f.n, this.d * f.d]);
      },
      sub: function sub(f) {
        return fraction([this.s * this.n * f.d - this.d * f.s * f.n, this.d * f.d]);
      },
      mult: function mult(f) {
        return fraction([f.n * this.n, this.d * f.d, f.s * this.s]);
      },
      div: function div(f) {
        return fraction([this.n * f.d, this.d * f.n, f.s * this.s]);
      },
      reduce: function reduce() {
        var d = gcd(this.n, this.d);
        return fraction([this.n / d, this.d / d, this.s]);
      },
      isLowerThan: function isLowerThan(f) {
        return this.sub(f).s === -1;
      },
      isGreaterThan: function isGreaterThan(f) {
        return this.sub(f).s === 1;
      },
      toString: function toString() {
        var str = this.s < 0 ? '-' : '';
        str += this.d === 1 ? this.n : this.n + '/' + this.d;
        return str;
      }
    };

    function createFraction(_ref2) {
      var n = _ref2.n,
          d = _ref2.d,
          s = _ref2.s;
      n = n || 0;
      d = d || 1;
      var properties = {
        s: s || (n === 0 || n < 0 && d < 0 || n > 0 && d > 0 ? 1 : -1),
        n: Math.abs(n),
        d: Math.abs(d)
      };
      var f = Object.create(PFraction);
      Object.assign(f, properties);
      return f;
    }

    function removeCommas(n, d) {
      n = new _decimal["default"](n);
      d = new _decimal["default"](d);
      var n1 = n.toNumber();
      var d1 = d.toNumber(); // est-ce que n est un entier?

      while (!n.isInteger()) {
        n = n.mul(10);
        d = d.mul(10);
      }

      while (!d.isInteger()) {
        n = n.mul(10);
        d = d.mul(10);
      }

      return {
        n: n.toNumber(),
        d: d.toNumber()
      };
    }

    function fraction(arg) {
      // conversion décimal -> fraction
      if (typeof arg === 'number') {
        var s = arg < 0 ? -1 : 1;
        var n = Math.abs(arg);
        var d = 1;

        while ((n | 0) !== n) {
          n *= 10;
          d *= 10;
        }

        return createFraction({
          n: n,
          d: d,
          s: s
        }).reduce();
      } else if (Array.isArray(arg)) {
        return createFraction({
          n: arg[0],
          d: arg[1],
          s: arg[2]
        });
      } else if (typeof arg === 'string') {
        var regex = new RegExp('^(\\(?(-?\\d+)(\\.\\d+)?\\)?)(\\/(-?\\d+))?$');
        var result = regex.exec(arg); // let num = parseFloat(result[1])
        // let denom = result[5] ? parseFloat(result[5]) : null

        var removedCommas = removeCommas(parseFloat(result[1]), result[5] ? parseFloat(result[5]) : 1);
        var num = removedCommas.n;
        var denom = removedCommas.d;
        return createFraction({
          n: num,
          d: denom
        }).reduce();
      } else {
        // console.log('arg ' + arg)
        return fraction(arg.toString(false));
      }
    }

    var _default = fraction;
    exports["default"] = _default;
    });

    var utils = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.round = round;
    exports.binarySearchCmp = binarySearchCmp;
    exports.roundNumber = roundNumber;
    exports.roundDecimal = roundDecimal;

    var _decimal = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    /**
        Recherche par dichitomie
        Searches the sorted array `src` for `val` in the range [`min`, `max`] using the binary search algorithm.

        @return the array index storing `val` or the bitwise complement (~) of the index where `val` would be inserted (guaranteed to be a negative number).
        <br/>The insertion point is only valid for `min` = 0 and `max` = `src.length` - 1.
      **/
    function binarySearchCmp(a, x, comparator) {
      var min = 0;
      var max = a.length - 1; // assert(a != null)
      // assert(comparator != null)
      // assert(min >= 0 && min < a.length)
      // assert(max < a.length)

      var l = min;
      var m;
      var h = max + 1;

      while (l < h) {
        m = l + (h - l >> 1);

        if (comparator(a[m], x) < 0) {
          l = m + 1;
        } else h = m;
      }

      if (l <= max && comparator(a[l], x) === 0) {
        return l;
      } else {
        return ~l;
      }
    }

    function round(value, decimals) {
      return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
    }

    function roundNumber(num, dec) {
      return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
    }

    function roundDecimal(num, dec) {
      return num.mul(_decimal["default"].pow(10, dec)).round().div(_decimal["default"].pow(10, dec));
    }
    });

    var compare_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = compare;





    /**
     * Un ordre doit être défini sur les expressions afin de créer les formes normales, qui permettent d'identifier
     * deux expressions équiavalentes
     * ordre choisi:
     * 2 < a < ? < template
     * pour les autres type, on compare les formes normales, termes à termes
     * renvoie 1 si node1 > node2
     * renvoie 0 si node1 = node2
     * renvoie -1 si node1 < node2
     */
    function compare(node1, node2) {
      var result;
      var i1, i2, next1, next2;

      switch (node1.type) {
        case node.TYPE_HOLE:
          switch (node2.type) {
            case node.TYPE_NUMBER:
            case node.TYPE_SYMBOL:
              return 1;

            case node.TYPE_HOLE:
              return 0;

            case node.TYPE_TEMPLATE:
              return -1;

            default:
              return node1.normal.compareTo(node2.normal);
          }

        case node.TYPE_SYMBOL:
          switch (node2.type) {
            case node.TYPE_NUMBER:
              return 1;

            case node.TYPE_HOLE:
            case node.TYPE_TEMPLATE:
              return -1;

            case node.TYPE_SYMBOL:
              if (node1.string < node2.string) {
                return -1;
              } else if (node1.string > node2.string) {
                return 1;
              } else {
                return 0;
              }

            default:
              return node1.normal.compareTo(node2.normal);
          }

        case node.TYPE_NUMBER:
          switch (node2.type) {
            case node.TYPE_NUMBER:
              if (node1.value < node2.value) {
                return -1;
              } else if (node1.value > node2.value) {
                return 1;
              }

              return 0;

            case node.TYPE_HOLE:
            case node.TYPE_SYMBOL:
            case node.TYPE_TEMPLATE:
              return -1;

            default:
              return node1.normal.compareTo(node2.normal);
          }

        case normal_1.TYPE_NORMAL:
          result = node1.n.mult(node2.d).compareTo(node2.n.mult(node1.d));

          if (result === 0) {
            //  on doit comparer les unités
            if (node1.unit && node2.unit) {
              result = node1.unit.compareTo(node2.unit);
            } else if (node1.unit) {
              result = 1;
            } else if (node2.unit) {
              result = -1;
            }
          }

          return result;

        case normal_1.TYPE_NSUM:
        case normal_1.TYPE_NPRODUCT:
          var _ref = [node1[Symbol.iterator](), node2[Symbol.iterator]()];
          i1 = _ref[0];
          i2 = _ref[1];
          var _ref2 = [i1.next(), i2.next()];
          next1 = _ref2[0];
          next2 = _ref2[1];

          while (!next1.done && !next2.done) {
            var _ref3 = [next1.value, next2.value],
                child1 = _ref3[0],
                child2 = _ref3[1]; // on compare d'abord les bases
            // base1 et base2 sont soit un nProduct, soit une exp

            var _ref4 = [child1[1], child2[1]],
                base1 = _ref4[0],
                base2 = _ref4[1];
            result = base1.compareTo(base2);
            if (result !== 0) return result; // ce n'est pas concluant, on passe aux coefs

            var _ref5 = [child1[0], child2[0]],
                coef1 = _ref5[0],
                coef2 = _ref5[1];

            if (coef1.type === normal_1.TYPE_NSUM) {
              result = coef1.compareTo(coef2);
              if (result !== 0) return result;
            } else {
              // ce sont des number ou rationels, on compare les valeurs numériques
              if (coef1.isLowerThan(coef2)) {
                return -1;
              } else if (coef1.isGreaterThan(coef2)) {
                return 1;
              }
            } //  La comparaison n'est toujours pas concluante, on passe au terme suivant


            next1 = i1.next();
            next2 = i2.next();
          }

          if (next1.done && next2.done) {
            return 0; // les expressions sont équivalentes
          }

          if (next1.done) return -1; // il reste des éléments dans l'expression2 : c'est elle la + grande

          return 1;

        default:
          // par défaut on compare les formes normales
          return node1.normal.compareTo(node2.normal);
      }
    }
    });

    var normal_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = normalize;
    exports.TYPE_NPRODUCT = exports.TYPE_NSUM = exports.TYPE_NORMAL = void 0;



    var _fraction = _interopRequireDefault(fraction_1);





    var _compare = _interopRequireDefault(compare_1);

    var _string, _first, _last, _length, _node, _PNList, _mutatorMap;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _defineEnumerableProperties(obj, descs) { for (var key in descs) { var desc = descs[key]; desc.configurable = desc.enumerable = true; if ("value" in desc) desc.writable = true; Object.defineProperty(obj, key, desc); } if (Object.getOwnPropertySymbols) { var objectSymbols = Object.getOwnPropertySymbols(descs); for (var i = 0; i < objectSymbols.length; i++) { var sym = objectSymbols[i]; var desc = descs[sym]; desc.configurable = desc.enumerable = true; if ("value" in desc) desc.writable = true; Object.defineProperty(obj, sym, desc); } } return obj; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

    function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    var TYPE_NORMAL = 'normal';
    exports.TYPE_NORMAL = TYPE_NORMAL;
    var TYPE_NSUM = 'nsum';
    exports.TYPE_NSUM = TYPE_NSUM;
    var TYPE_NPRODUCT = 'nproduct';
    /* 
    Les formes normales servent à comparer des expressions pour déterminer celles qui sont équivalentes.
    Les formes normales sont vues comme des fractions rationnelles.
    */

    exports.TYPE_NPRODUCT = TYPE_NPRODUCT;
    var PNormal = {
      isZero: function isZero() {
        return this.n.isZero();
      },
      isInt: function isInt() {
        return this.node.isInt();
      },
      isOne: function isOne() {
        return this.node.isOne();
      },
      isMinusOne: function isMinusOne() {
        return this.node.isMinusOne();
      },
      isConvertibleTo: function isConvertibleTo(u) {
        var u1N = nSum([[simpleCoef((0, node.one)()), this.n.first[1]]]);
        var u1D = nSum([[simpleCoef((0, node.one)()), this.d.first[1]]]);
        var u1 = normal(u1N, u1D);
        var u2N = nSum([[simpleCoef((0, node.one)()), u.n.first[1]]]);
        var u2D = nSum([[simpleCoef((0, node.one)()), u.d.first[1]]]);
        var u2 = normal(u2N, u2D);
        return u1.equalsTo(u2);
      },
      getCoefTo: function getCoefTo(u) {
        var coefN1 = nSum([[this.n.first[0], baseOne()]]);
        var coefD1 = nSum([[this.d.first[0], baseOne()]]);
        var coef1 = normal(coefN1, coefD1);
        var coefN2 = nSum([[u.n.first[0], baseOne()]]);
        var coefD2 = nSum([[u.d.first[0], baseOne()]]);
        var coef2 = normal(coefN2, coefD2);
        return coef1.div(coef2);
      },
      // réduit une expression normale correspondant à une fraction numérique
      reduce: function reduce() {
        function test(e) {
          return e.isNumber() || e.isOpposite() && e.first.isNumber();
        }

        if (test(this.n.node) && test(this.d.node)) {
          var f = (0, _fraction["default"])(this.n.string).div((0, _fraction["default"])(this.d.string)).reduce();

          if (f.toString() !== this.string) {
            var e = (0, math_1.math)(f.toString()).normal;
            return normal(e.n, e.d, this.unit);
          }
        }

        return this;
      },
      add: function add(e) {
        if (e.unit && this.unit && !e.unit.equalsTo(this.unit) || this.unit && !e.unit || !this.unit && e.unit) throw new Error("Erreur d'unité");
        return normal(this.n.mult(e.d).add(e.n.mult(this.d)), this.d.mult(e.d), this.unit).reduce();
      },
      sub: function sub(e) {
        if (e.unit && this.unit && !e.unit.equalsTo(this.unit) || this.unit && !e.unit || !this.unit && e.unit) throw new Error("Erreur d'unité");
        return normal(this.n.mult(e.d).sub(e.n.mult(this.d)), this.d.mult(e.d), this.unit).reduce();
      },
      mult: function mult(e) {
        var unit;
        if (this.unit && e.unit) unit = this.unit.mult(e.unit);else if (this.unit) unit = this.unit;else unit = e.unit;
        return normal(this.n.mult(e.n), e.d.mult(this.d), unit).reduce();
      },
      div: function div(e) {
        // TODO: prendre en compte le cas de la division par 0
        var unit;
        if (this.unit && e.unit) unit = this.unit.div(e.unit);else if (this.unit) unit = this.unit;else if (e.unit) unit = e.unit.invert();
        var n = this.n.mult(e.d);
        var d = e.n.mult(this.d);
        return normal(n, d, unit).reduce();
      },
      pow: function pow(e) {
        if (e.isZero()) return normOne(this.unit);
        if (this.isZero()) return this;
        if (this.isOne()) return this;
        var result;

        if (e.isInt()) {
          result = this;

          for (var i = 1; i < e.node.value; i++) {
            result = result.mult(this);
          }
        } else if (e.isMinusOne()) {
          result = this.invert();
        } else if (e.node.isOpposite() && e.node.first.isInt()) {
          var n = e.node.first.value;
          result = this;

          for (var _i = 1; _i < n; _i++) {
            result = result.mult(this);
          }

          result = result.invert();
        } else if (e.equalsTo('1/2')) ; else ;

        return result;
      },
      oppose: function oppose() {
        return normal(this.n.oppose(), this.d, this.unit);
      },
      invert: function invert() {
        return normal(this.d, this.n, this.unit);
      },
      compareTo: function compareTo(e) {
        return (0, _compare["default"])(this, e);
      },

      get node() {
        return this.toNode();
      },

      //  si la forme représente une fraction numérique, celle-ci a été simplifiée et le signe
      // est au numérateur
      toNode: function toNode() {
        var e;

        if (this.d.isOne()) {
          e = this.n.node;
        } else {
          var positive = true;
          var n = this.n.node;

          if (n.isOpposite()) {
            positive = false;
            n = n.first;
          }

          var d = this.d.node;

          if (!(n.isNumber() || n.isHole() || n.isSymbol())) {
            n = (0, node.bracket)([n]);
          }

          if (!(d.isNumber() || d.isHole() || d.isSymbol())) {
            d = (0, node.bracket)([d]);
          }

          e = n.frac(d);
          if (!positive) e = e.oppose();
        }

        e.unit = this.unit;
        return e;
      },

      get string() {
        return this.node.string;
      },

      equalsTo: function equalsTo(e) {
        return this.n.mult(e.d).equalsTo(this.d.mult(e.n));
      }
    };

    function normal(n, d, unit) {
      var o = Object.create(PNormal);
      if (!d) d = nSumOne();
      Object.assign(o, {
        n: n,
        d: d,
        unit: unit,
        type: TYPE_NORMAL
      });
      return o;
    }
    /**
     * Les formes normales sont exprimées sous la forme de sommes de produits
     * Les sommes et les produits sont sous forme de listes dont les éléments comportent deux parties : un coefficient et une base
     * pour les produits, le coefficient correspond à l'exposant.
     * Attention, un coefficient peut très bien lui aussi s'exprimer sous la forme d'une somme, par exemple pour pouvoir
     * travailler avec des expressions de la forme (2+racine(3))*x
     * nSum = [ [coef, base], ...] où coef est un nSum (où les coefs sont des entiers) et base un nProduct
     * nProduct = [ [coef, base], ...] où coef est un nSum et base une expression
     * Exemples de formes normales :
     * one et zero sont des expressions représentant les nombres 1 et 0
     *
     * nSum([ [ nSum([[zero, one]]), nProduct() ] ])
     * 0 =0*1^1-> [ [ [[0,1]], [[1, 1]] ] ]
     * 1 = 1*1^1-> [ [ [[1, 1]], [[1, 1]] ] ]
     * 2 = 2*1^1-> [ [ [[2, 1]], [[1, 1]] ] ]
     * racine(2) = racine(2)*1^1-> [ [ [[1, racine(2)]], [[1, 1]] ] ]
     * 3*racine(2) = 3*racine(2)*1^1-> [ [ [[3, racine(2)]], [[1, 1]] ] ]
     * 5 + 3*racine(2) -> [ [[[5, 1]], [[1, 1]]],   [[[3, racine(2)]], [[1, 1]]] ]
     * x = 1*x^1-> [ [ [[1, 1]], [[1, x]] ] ]
     * x^2 = 1*x^2-> [ [ [[1, 1]], [[2, x]] ] ]
     * 2x = 2*x^1-> [ [ [[2, 1]], [[1, x]] ] ]
     * 1+x -> [ [ [[1, 1]], [[1, 1]] ], [ [[1, 1]], [[1, x]] ] ]
     * x*y -> [ [ [[1, 1]], [[1, x], [1,y]] ] ]
     */

    /**
     * Prototype des formes normales intermédiaires
     */


    var PNList = (_PNList = {}, _defineProperty(_PNList, Symbol.iterator, function () {
      return this.children[Symbol.iterator]();
    }), _defineProperty(_PNList, "compareTo", function compareTo(e) {
      return (0, _compare["default"])(this, e);
    }), _defineProperty(_PNList, "equalsTo", function equalsTo(e) {
      if (typeof e === 'string') e = (0, math_1.math)(e).normal; // avec ou sans l'unité ?

      return this.string === e.string;
    }), _defineProperty(_PNList, "merge", function merge(e) {
      var pos; // on part des fils de this (on enlève les éléments où le coef vaut 0)

      var result = this.children.filter(function (child) {
        return !child[0].isZero();
      });

      var _iterator = _createForOfIteratorHelper(e),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          var base = child[1];
          var coef2 = child[0];
          if (coef2.isZero()) continue;
          var bases = result.map(function (e) {
            return e[1];
          }); // on cherche où insérer child en comparant les bases

          pos = bases.length > 0 ? (0, utils.binarySearchCmp)(bases, base, function (e, f) {
            return e.compareTo(f);
          }) : ~0;

          if (pos < 0) {
            // il n'y a pas de base identique
            result.splice(~pos, 0, child);
          } else {
            // on doit fusionner les deux éléments qui ont la même base
            var coef1 = result[pos][0];
            var coef = void 0;

            if (coef1.type === TYPE_NSUM) {
              coef = coef1.merge(coef2); // coef1 est un nSum
            } else {
              var newcoefvalue = parseInt(coef1.string) + parseInt(coef2.string);
              coef = newcoefvalue < 0 ? (0, node.number)(Math.abs(newcoefvalue)).oppose() : (0, node.number)(newcoefvalue);
            }

            if (coef.isZero()) {
              // on enleve un terme ou un facteur inutile
              result.splice(pos, 1);
            } else {
              result[pos] = [coef, base];
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this.createList(this.type, result);
    }), _defineProperty(_PNList, "createList", function createList(type, children) {
      switch (type) {
        case TYPE_NSUM:
          return nSum(children);

        case TYPE_NPRODUCT:
          return nProduct(children);
      }
    }), _defineProperty(_PNList, "symmetrize", function symmetrize() {
      // symmetrize an element [coef, base]
      var f = function f(e) {
        var coef = e[0];
        var base = e[1];
        var newcoef;
        if (coef.isZero()) return e;

        if (coef.type === TYPE_NSUM) {
          newcoef = coef.oppose();
        } else {
          newcoef = coef.isOpposite() ? coef.first : coef.oppose();
        }

        return [newcoef, base];
      };

      return this.createList(this.type, this.children.map(f));
    }), _string = "string", _mutatorMap = {}, _mutatorMap[_string] = _mutatorMap[_string] || {}, _mutatorMap[_string].get = function () {
      return this.toString();
    }, _defineProperty(_PNList, "toString", function toString() {
      return this.node.string;
    }), _defineProperty(_PNList, "isOne", function isOne() {
      return this.node.isOne();
    }), _defineProperty(_PNList, "isZero", function isZero() {
      return this.node.isZero();
    }), _defineProperty(_PNList, "isMinusOne", function isMinusOne() {
      return this.node.isMinusOne();
    }), _defineProperty(_PNList, "isInt", function isInt() {
      return this.node.isInt();
    }), _defineProperty(_PNList, "isOpposite", function isOpposite() {
      return this.node.isOpposite();
    }), _first = "first", _mutatorMap[_first] = _mutatorMap[_first] || {}, _mutatorMap[_first].get = function () {
      return this.children[0];
    }, _last = "last", _mutatorMap[_last] = _mutatorMap[_last] || {}, _mutatorMap[_last].get = function () {
      return this.children[this.children.length - 1];
    }, _length = "length", _mutatorMap[_length] = _mutatorMap[_length] || {}, _mutatorMap[_length].get = function () {
      return this.children.length;
    }, _node = "node", _mutatorMap[_node] = _mutatorMap[_node] || {}, _mutatorMap[_node].get = function () {
      if (!this._node) {
        this._node = this.toNode();
      }

      return this._node;
    }, _defineProperty(_PNList, "toNode", function toNode() {
      var nProductElementToNode = function nProductElementToNode(_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            coef = _ref2[0],
            base = _ref2[1];

        // normalement coef est différent de 0
        var e = base;

        if (!base.isOne() && !coef.isOne()) {
          e = e.pow(coef);
        }

        return e;
      };

      var e;

      switch (this.type) {
        case TYPE_NPRODUCT:
          for (var i = 0; i < this.children.length; i++) {
            var factor = nProductElementToNode(this.children[i]);

            if (i === 0) {
              e = factor;
            } else if (!factor.isOne()) {
              // est ce que c'est possible?
              e = e.mult(factor);
            }
          }

          break;

        case TYPE_NSUM:
          for (var _i2 = 0; _i2 < this.children.length; _i2++) {
            var child = this.children[_i2];
            var coef = child[0].type === TYPE_NSUM ? child[0].node : child[0];
            var base = child[1].node;
            var term = void 0;
            var minus = false;

            if (base.isOne()) {
              term = coef;
            } else if (coef.isOne()) {
              term = base;
            } else if (coef.isMinusOne()) {
              minus = true;
              term = base;
            } else if (coef.isOpposite()) {
              minus = true;
              term = coef.first.mult(base);
            } else {
              term = coef.mult(base);
            }

            if (_i2 === 0) {
              e = minus ? term.oppose() : term;
            } else {
              e = minus ? e.sub(term) : e.add(term);
            }
          }

      }

      return e;
    }), _defineProperty(_PNList, "mult", function mult(e) {
      var t = [];

      switch (this.type) {
        case TYPE_NPRODUCT:
          t = [].concat(this.merge(e).children);
          t = t.filter(function (e) {
            return !e[1].isOne();
          });
          return nProduct(t);

        case TYPE_NSUM:
          // on boucle d'abord sur les termes des deux sommes que l'on doit multiplier deux à deux
          var _iterator2 = _createForOfIteratorHelper(this),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var term1 = _step2.value;

              var _iterator3 = _createForOfIteratorHelper(e),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var term2 = _step3.value;
                  var coefs = []; // on multiplie les coefs d'un côté, les bases de l'autre

                  var coef1 = term1[0]; // nSum

                  var base1 = term1[1]; // nProduct

                  var coef2 = term2[0]; // nSum

                  var base2 = term2[1]; // nProduct
                  // coef1 et coef2 sont des nSum, il faut les multiplier proprement

                  var _iterator4 = _createForOfIteratorHelper(coef1),
                      _step4;

                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                      var _step4$value = _slicedToArray(_step4.value, 2),
                          coefcoef1 = _step4$value[0],
                          basecoef1 = _step4$value[1];

                      var _iterator5 = _createForOfIteratorHelper(coef2),
                          _step5;

                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                          var _step5$value = _slicedToArray(_step5.value, 2),
                              coefcoef2 = _step5$value[0],
                              basecoef2 = _step5$value[1];

                          // coefcoef1 et coefcoef2 sont des nombres, fractions
                          // basecoef1 et basecoef2 sont des nProduct
                          var newcoefvalue = parseInt(coefcoef1.string) * parseInt(coefcoef2.string);

                          var _coef = newcoefvalue < 0 ? (0, node.number)(Math.abs(newcoefvalue)).oppose() : (0, node.number)(newcoefvalue);

                          var base = basecoef1.mult(basecoef2);
                          coefs.push([_coef, base]);
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                    } // ne pas oublier de merger : (2+racine(3))(3+racine(3)) -> les bases changent de type

                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }

                  var coef = simpleCoef((0, node.zero)()).merge(nSum(coefs)); // A verfier : (1-x)(1+x)
                  // et si l'une des bases  vaut 1 ?

                  t.push([coef, base1.mult(base2)]);
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          return nSumZero().merge(nSum(t));
      }
    }), _defineProperty(_PNList, "add", function add(e) {
      return this.merge(e);
    }), _defineProperty(_PNList, "sub", function sub(e) {
      return this.merge(e.oppose());
    }), _defineProperty(_PNList, "oppose", function oppose() {
      return this.symmetrize();
    }), _defineProperty(_PNList, "invert", function invert() {
      return this.symmetrize();
    }), _defineProperty(_PNList, "div", function div(e) {
      return this.frac(e);
    }), _defineProperty(_PNList, "frac", function frac(denom) {
      var e = this.mult(denom.invert());
      return e;
    }), _defineEnumerableProperties(_PNList, _mutatorMap), _PNList);
    /**
     * Constantes utilsées
     */

    var baseOne = function () {
      var instance;
      return function () {
        if (!instance) {
          instance = nProduct([[(0, node.one)(), (0, node.one)()]]);
        }

        return instance;
      };
    }();
    /**
     * @param {*} coef
     */
    // retourne une nSum à 1 élément dont le coef  n'est pas un nSum


    function simpleCoef(coef) {
      return nSum([[coef, baseOne()]]);
    }

    var coefOne = function () {
      var instance;
      return function () {
        if (!instance) {
          instance = simpleCoef((0, node.one)());
        }

        return instance;
      };
    }();

    var coefZero = function () {
      var instance;
      return function () {
        if (!instance) {
          instance = simpleCoef((0, node.zero)());
        }

        return instance;
      };
    }();

    var nSumOne = function () {
      var instance;
      return function () {
        if (!instance) instance = nSum([[coefOne(), baseOne()]]);
        return instance;
      };
    }();

    var nSumZero = function () {
      var instance;
      return function () {
        if (!instance) instance = nSum([[coefZero(), baseOne()]]);
        return instance;
      };
    }(); // forme normale du nombre 1 - singleton


    var normOne = function () {
      var instance;
      return function (unit) {
        if (!unit) {
          if (!instance) instance = normal(nSumOne(), nSumOne());
          return instance;
        }

        return normal(nSumOne(), nSumOne(), unit);
      };
    }(); // forme normale du nombre 0 - singleton
    /**
     * @param {*} children
     */


    function nProduct(children) {
      var o = Object.create(PNList);
      Object.assign(o, {
        type: TYPE_NPRODUCT,
        children: !children || children.length === 0 ? [[(0, node.one)(), (0, node.one)()]] : children
      });
      return o;
    }
    /**
     * @param {*} children
     * @param {*} unit
     */


    function nSum(children) {
      var o = Object.create(PNList);
      Object.assign(o, {
        type: TYPE_NSUM,
        children: !children || children.length === 0 ? nSumZero().children : children
      });
      return o;
    }

    function createBase(b, e) {
      return nProduct([[e || (0, node.one)(), b]]);
    }

    function normalize(node$1) {
      var d; // dénominateur de la partie normale

      var n; // numérateur de la partie normale

      var e; // forme normale retournée
      // pose des problèmes de prototypes
      // const { unit, ...others } = node // ? est-ce qu'on se débarrasse de la forme normale?
      // others.proto

      switch (node$1.type) {
        case node.TYPE_NUMBER:
          if (node$1.isInt()) {
            // il faut se debarasser de l'unité
            n = nSum([[simpleCoef((0, node.number)(node$1.toString(false))), baseOne()]]);
            d = nSumOne();
          } else {
            // on convertit le float en fraction
            e = (0, math_1.math)((0, _fraction["default"])(node$1).toString(false)).normal;
          }

          break;

        case node.TYPE_PERCENTAGE:
          e = node$1.div(100).normal;
          break;

        case node.TYPE_HOLE:
          n = nSum([[coefOne(), createBase(node$1)]]);
          d = nSumOne();
          break;

        case node.TYPE_SYMBOL:
          n = nSum([[coefOne(), createBase((0, node.symbol)(node$1.toString(false)))]]);
          d = nSumOne();
          break;

        case node.TYPE_BRACKET:
        case node.TYPE_POSITIVE:
          e = normalize(node$1.first);
          break;

        case node.TYPE_OPPOSITE:
          e = node$1.first.normal;
          if (!e.node.isZero()) e = e.oppose(); // pour ne pas avoir un -0

          break;

        case node.TYPE_SUM:
          for (var i = 0; i < node$1.children.length; i++) {
            if (i === 0) {
              e = node$1.first.normal;
            } else {
              e = e.add(node$1.children[i].normal);
            }
          }

          break;

        case node.TYPE_PRODUCT:
        case node.TYPE_PRODUCT_IMPLICIT:
        case node.TYPE_PRODUCT_POINT:
          for (var _i3 = 0; _i3 < node$1.children.length; _i3++) {
            if (_i3 === 0) {
              e = node$1.first.normal;
            } else {
              e = e.mult(node$1.children[_i3].normal);
            }
          }

          break;

        case node.TYPE_DIFFERENCE:
          e = node$1.first.normal.sub(node$1.last.normal);
          break;

        case node.TYPE_DIVISION:
        case node.TYPE_QUOTIENT:
          e = node$1.first.normal.div(node$1.last.normal);
          break;

        case node.TYPE_POWER:
          e = node$1.first.normal.pow(node$1.last.normal);
          break;
      }

      if (!e) {
        e = normal(n, d);
      }

      if (node$1.unit) {
        var u = node$1.unit.normal; //  on récupère le coefficeient de l'unité et on l'applique à la forme normale

        var coefN = nSum([[u.n.first[0], baseOne()]]);
        var coefD = nSum([[u.d.first[0], baseOne()]]);
        var coef = normal(coefN, coefD);
        var uN = nSum([[simpleCoef((0, node.one)()), u.n.first[1]]]);
        var uD = nSum([[simpleCoef((0, node.one)()), u.d.first[1]]]);
        u = normal(uN, uD);
        e = e.mult(coef);
        e.unit = u;
      }

      return e;
    }
    });

    var output = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.text = text;
    exports.latex = latex;





    /* 
    Doit produire la même chaîne que celle qui été utilisée pour créer l'expression */
    function text(e, displayUnit) {
      var s;

      switch (e.type) {
        case node.TYPE_SEGMENT_LENGTH:
          s = e.begin + e.end;
          break;

        case node.TYPE_EQUALITY:
        case node.TYPE_INEQUALITY_LESS:
        case node.TYPE_INEQUALITY_LESSOREQUAL:
        case node.TYPE_INEQUALITY_MORE:
        case node.TYPE_INEQUALITY_MOREOREQUAL:
          s = e.first.string + e.type + e.last.string;
          break;

        case node.TYPE_PERCENTAGE:
          s = e.first.string + '%';
          break;

        case node.TYPE_POSITIVE:
          s = '+' + e.first.string;
          break;

        case node.TYPE_OPPOSITE:
          s = '-' + e.first.string;
          break;

        case node.TYPE_RADICAL:
          s = 'sqrt' + e.first.string;
          break;

        case node.TYPE_BRACKET:
          s = '(' + e.first.string + ')';
          break;

        case node.TYPE_DIFFERENCE:
          s = e.first.string + '-' + e.last.string;
          break;

        case node.TYPE_POWER:
          s = e.first.string + '^' + e.last.string;
          break;

        case node.TYPE_DIVISION:
          s = e.first.string + ':' + e.last.string;
          break;

        case node.TYPE_QUOTIENT:
          s = e.first.string + '/' + e.last.string;
          break;

        case node.TYPE_SUM:
        case node.TYPE_PRODUCT:
        case node.TYPE_PRODUCT_IMPLICIT:
        case node.TYPE_PRODUCT_POINT:
          s = e.children.map(function (child) {
            return child.toString();
          }).join(e.type);
          break;

        case node.TYPE_SYMBOL:
          s = e.letter;
          break;

        case node.TYPE_NUMBER:
          s = e.value.toString();
          break;

        case node.TYPE_HOLE:
          s = '?';
          break;

        case node.TYPE_ERROR:
          s = 'Error';
          break;

        case normal_1.TYPE_NORMAL:
          s = e.n.string + '/' + +e.d.string;
          break;

        case node.TYPE_TEMPLATE:
          s = e.nature;
          if (e.relative) s += 'r';

          switch (e.nature) {
            case '$e':
            case '$ep':
            case '$ei':
              if (!(e.children[0].isHole() && e.children[1].isHole())) {
                s += "{".concat(!e.children[0].isHole() ? e.children[0].string + ';' : '').concat(e.children[1].string, "}");
              } else {
                s += "[".concat(e.children[2].string, ";").concat(e.children[3].string, "]");
              }

              break;

            case '$d':
            case '$dr':
            case '$dn':
              if (e.max_e) {
                if (e.min_e) {
                  s += "{".concat(e.min_e, ":").concat(e.max_e, ";");
                } else {
                  s += "{".concat(e.max_e, ";");
                }

                if (e.min_d) {
                  s += "".concat(e.min_d, ":").concat(e.max_d, "}");
                } else {
                  s += "".concat(e.max_d, "}");
                }
              }

              break;

            case '$l':
              s += '{' + e.children.map(function (child) {
                return child.string;
              }).join(';') + '}';
              break;

            case '$':
              s += '{' + e.first.string + '}';
          }

          break;
      }

      if (e.unit && displayUnit) s += ' ' + e.unit.string;
      return s;
    }

    function latex(e) {
      var s;

      switch (e.type) {
        case node.TYPE_SEGMENT_LENGTH:
          s = e.begin + e.end;
          break;

        case node.TYPE_EQUALITY:
        case node.TYPE_INEQUALITY_LESS:
        case node.TYPE_INEQUALITY_LESSOREQUAL:
        case node.TYPE_INEQUALITY_MORE:
        case node.TYPE_INEQUALITY_MOREOREQUAL:
          s = e.first.latex + e.type + e.last.latex;
          break;

        case node.TYPE_PERCENTAGE:
          s = e.first.latex + '\\%';
          break;

        case node.TYPE_POSITIVE:
          s = '+' + e.first.latex;
          break;

        case node.TYPE_OPPOSITE:
          s = '-' + e.first.latex;
          break;

        case node.TYPE_RADICAL:
          s = '\\sqrt{' + e.first.latex + '}';
          break;

        case node.TYPE_BRACKET:
          s = '\\left(' + e.first.latex + '\\right)';
          break;

        case node.TYPE_DIFFERENCE:
          s = e.first.latex + '-' + e.last.latex;
          break;

        case node.TYPE_POWER:
          s = e.first.latex + '^' + e.last.latex;
          break;

        case node.TYPE_DIVISION:
          s = e.first.latex + '\\div' + e.last.latex;
          break;

        case node.TYPE_QUOTIENT:
          s = '\\frac{' + e.first.latex + '}{' + e.last.latex + '}';
          break;

        case node.TYPE_SUM:
          s = e.children.map(function (child) {
            return child.latex;
          }).join('+');
          break;

        case node.TYPE_PRODUCT:
          s = e.children.map(function (child) {
            return child.latex;
          }).join(' \\times ');
          break;

        case node.TYPE_PRODUCT_IMPLICIT:
          s = e.children.map(function (child) {
            return child.latex;
          }).join('');
          break;

        case node.TYPE_PRODUCT_POINT:
          s = e.children.map(function (child) {
            return child.latex;
          }).join(' \\cdot ');
          break;

        case node.TYPE_SYMBOL:
          s = e.letter;
          break;

        case node.TYPE_NUMBER:
          s = e.value.toString();
          break;

        case node.TYPE_HOLE:
          s = '\\ldots';
          break;

        case node.TYPE_ERROR:
          s = 'Error';
          break;

        default:
          s = e.string;
      }

      return s;
    }
    });

    var transform = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.substitute = substitute;
    exports.generate = generate;





    var _decimal = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    var constants = {
      pi: '3.14',
      e: '2.7'
    };

    function substitute(node$1, params) {
      var e;

      switch (node$1.type) {
        case node.TYPE_SYMBOL:
          if (!constants[node$1.letter] && !params[node$1.letter]) throw new Error("Le symbole ".concat(node$1.letter, " n'a pas de valeur de substitution"));

          if (constants[node$1.letter]) {
            e = (0, math_1.math)(constants[node$1.letter]);
          } else {
            e = (0, math_1.math)(params[node$1.letter]);
          }

          e.unit = node$1.unit; // on refait une substitution au cas où un nouveau symbol a été introduit

          e = substitute(e, params);
          break;

        case node.TYPE_NUMBER:
        case node.TYPE_ERROR:
        case node.TYPE_HOLE:
        case node.TYPE_TEMPLATE:
          e = node$1;
          break;

        default:
          e = (0, node.createNode)({
            type: node$1.type,
            children: node$1.children.map(function (child) {
              return substitute(child, params);
            })
          });
          e.unit = node$1.unit;
      }

      return e;
    }

    function getRandomInt(min, max) {
      min = Math.ceil(min);
      max = Math.floor(max);
      return Math.floor(Math.random() * (max - min)) + min; // The maximum is exclusive and the minimum is inclusive
    }

    function getRandomIntInclusive(min, max) {
      min = Math.ceil(min);
      max = Math.floor(max);
      return Math.floor(Math.random() * (max - min + 1)) + min; // The maximum is inclusive and the minimum is inclusive
    }

    function getIntOfNdigits(nmin, nmax) {
      var trailingzero = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      // inclusive
      function getNumber() {
        return getRandomInt(Math.pow(10, nmin - 1), Math.pow(10, getRandomIntInclusive(nmin, nmax)));
      }

      var v = getNumber();

      if (!trailingzero) {
        while (v % 10 === 0) {
          v = getNumber();
        }
      }

      return v;
    } //   La génération d'un template doit retouner une valeur numérique.
    //  Contrairement à la fonction générale "generate", il lfaut dond substituer les variables.


    function generateTemplate(node$1) {
      var decimal = node$1.nature === '$$';
      var precision = node$1.precision;
      var children = node$1.children.map(function (child) {
        return child.isTemplate() ? generateTemplate(child) : generate(Object.assign(child.substitute(), {
          parent: node$1
        })).eval({
          decimal: decimal,
          precision: precision
        });
      } // on a besoin de garder le lien avec root pour récupérer les templates générés
      );
      var e;
      var value;
      var ndigit;
      var decimalPart;
      var ref;

      switch (node$1.nature) {
        case '$e':
        case '$ep':
        case '$ei':
          if (!children[1].isHole()) {
            e = (0, node.number)(getIntOfNdigits(children[0].isHole() ? 1 : children[0].value, children[1].value));
          } else {
            e = (0, node.number)(getRandomIntInclusive(children[2].value, children[3].value));
          }

          if (node$1.relative && getRandomIntInclusive(0, 1)) e = e.oppose();
          node$1.root.generated.push(e);
          break;

        case '$d':
          // partie entière
          value = new _decimal["default"](getIntOfNdigits(children[0], children[1])); //  partie décimale

          ndigit = getRandomIntInclusive(children[2], children[3]);
          decimalPart = new _decimal["default"](getIntOfNdigits(ndigit, ndigit, false)).div(Math.pow(10, ndigit));
          value = value.add(decimalPart);
          e = (0, node.number)(parseFloat(value.toString()));
          if (node$1.relative && getRandomIntInclusive(0, 1)) e = e.oppose();
          node$1.root.generated.push(e);
          break;

        case '$l':
          e = children[Math.floor(Math.random() * children.length)];
          node$1.root.generated.push(e);
          break;

        case '$':
        case '$$':
          e = children[0];
          node$1.root.generated.push(e);
          break;

        default:
          // $1....
          ref = parseInt(node$1.nature.slice(1, node$1.nature.length), 10);
          e = node$1.root.generated[ref - 1];
      }

      return e;
    } // génération d'une expression quelconque


    function generate(node$1) {
      var e;

      switch (node$1.type) {
        case node.TYPE_TEMPLATE:
          e = generateTemplate(node$1);
          break;

        case node.TYPE_SYMBOL:
        case node.TYPE_HOLE:
        case node.TYPE_NUMBER:
        case node.TYPE_ERROR:
        case node.TYPE_SEGMENT_LENGTH:
          e = node$1;
          break;

        default:
          e = (0, node.createNode)({
            type: node$1.type,
            children: node$1.children.map(function (child) {
              return generate(child);
            })
          });
      }

      return e;
    }
    });

    var node = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createNode = createNode;
    exports.sum = sum;
    exports.difference = difference;
    exports.division = division;
    exports.product = product;
    exports.quotient = quotient;
    exports.power = power;
    exports.opposite = opposite;
    exports.positive = positive;
    exports.bracket = bracket;
    exports.radical = radical;
    exports.percentage = percentage;
    exports.number = number;
    exports.symbol = symbol;
    exports.segmentLength = segmentLength;
    exports.notdefined = notdefined;
    exports.hole = hole;
    exports.template = template;
    exports.equality = equality;
    exports.inequality = inequality;
    exports.zero = exports.one = exports.TYPE_SEGMENT_LENGTH = exports.TYPE_INEQUALITY_MOREOREQUAL = exports.TYPE_INEQUALITY_MORE = exports.TYPE_INEQUALITY_LESSOREQUAL = exports.TYPE_INEQUALITY_LESS = exports.TYPE_EQUALITY = exports.TYPE_BRACKET = exports.TYPE_UNIT = exports.TYPE_SIMPLE_UNIT = exports.TYPE_TEMPLATE = exports.TYPE_RADICAL = exports.TYPE_POSITIVE = exports.TYPE_OPPOSITE = exports.TYPE_PERCENTAGE = exports.TYPE_NUMBER = exports.TYPE_SYMBOL = exports.TYPE_HOLE = exports.TYPE_ERROR = exports.TYPE_POWER = exports.TYPE_QUOTIENT = exports.TYPE_DIVISION = exports.TYPE_PRODUCT_POINT = exports.TYPE_PRODUCT_IMPLICIT = exports.TYPE_PRODUCT = exports.TYPE_DIFFERENCE = exports.TYPE_SUM = void 0;

    var _evaluate = _interopRequireDefault(evaluate_1);

    var _fraction = _interopRequireDefault(fraction_1);

    var _normal2 = _interopRequireDefault(normal_1);



    var _compare = _interopRequireDefault(compare_1);





    var _pos, _first, _last, _length, _string, _latex, _root, _normal, _PNode, _mutatorMap;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _defineEnumerableProperties(obj, descs) { for (var key in descs) { var desc = descs[key]; desc.configurable = desc.enumerable = true; if ("value" in desc) desc.writable = true; Object.defineProperty(obj, key, desc); } if (Object.getOwnPropertySymbols) { var objectSymbols = Object.getOwnPropertySymbols(descs); for (var i = 0; i < objectSymbols.length; i++) { var sym = objectSymbols[i]; var desc = descs[sym]; desc.configurable = desc.enumerable = true; if ("value" in desc) desc.writable = true; Object.defineProperty(obj, sym, desc); } } return obj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var TYPE_SUM = '+';
    exports.TYPE_SUM = TYPE_SUM;
    var TYPE_DIFFERENCE = '-';
    exports.TYPE_DIFFERENCE = TYPE_DIFFERENCE;
    var TYPE_PRODUCT = '*';
    exports.TYPE_PRODUCT = TYPE_PRODUCT;
    var TYPE_PRODUCT_IMPLICIT = '.';
    exports.TYPE_PRODUCT_IMPLICIT = TYPE_PRODUCT_IMPLICIT;
    var TYPE_PRODUCT_POINT = '.';
    exports.TYPE_PRODUCT_POINT = TYPE_PRODUCT_POINT;
    var TYPE_DIVISION = ':';
    exports.TYPE_DIVISION = TYPE_DIVISION;
    var TYPE_QUOTIENT = '/';
    exports.TYPE_QUOTIENT = TYPE_QUOTIENT;
    var TYPE_POWER = '^';
    exports.TYPE_POWER = TYPE_POWER;
    var TYPE_ERROR = '!! Error !!';
    exports.TYPE_ERROR = TYPE_ERROR;
    var TYPE_HOLE = '?';
    exports.TYPE_HOLE = TYPE_HOLE;
    var TYPE_SYMBOL = 'symbol';
    exports.TYPE_SYMBOL = TYPE_SYMBOL;
    var TYPE_NUMBER = 'number';
    exports.TYPE_NUMBER = TYPE_NUMBER;
    var TYPE_PERCENTAGE = 'percentage';
    exports.TYPE_PERCENTAGE = TYPE_PERCENTAGE;
    var TYPE_OPPOSITE = 'opposite';
    exports.TYPE_OPPOSITE = TYPE_OPPOSITE;
    var TYPE_POSITIVE = 'positive';
    exports.TYPE_POSITIVE = TYPE_POSITIVE;
    var TYPE_RADICAL = 'radical';
    exports.TYPE_RADICAL = TYPE_RADICAL;
    var TYPE_TEMPLATE = 'template';
    exports.TYPE_TEMPLATE = TYPE_TEMPLATE;
    var TYPE_SIMPLE_UNIT = 'simple unit';
    exports.TYPE_SIMPLE_UNIT = TYPE_SIMPLE_UNIT;
    var TYPE_UNIT = 'unit';
    exports.TYPE_UNIT = TYPE_UNIT;
    var TYPE_BRACKET = 'bracket';
    exports.TYPE_BRACKET = TYPE_BRACKET;
    var TYPE_EQUALITY = '=';
    exports.TYPE_EQUALITY = TYPE_EQUALITY;
    var TYPE_INEQUALITY_LESS = '<';
    exports.TYPE_INEQUALITY_LESS = TYPE_INEQUALITY_LESS;
    var TYPE_INEQUALITY_LESSOREQUAL = '<=';
    exports.TYPE_INEQUALITY_LESSOREQUAL = TYPE_INEQUALITY_LESSOREQUAL;
    var TYPE_INEQUALITY_MORE = '>';
    exports.TYPE_INEQUALITY_MORE = TYPE_INEQUALITY_MORE;
    var TYPE_INEQUALITY_MOREOREQUAL = '>=';
    exports.TYPE_INEQUALITY_MOREOREQUAL = TYPE_INEQUALITY_MOREOREQUAL;
    var TYPE_SEGMENT_LENGTH = 'segment length';
    exports.TYPE_SEGMENT_LENGTH = TYPE_SEGMENT_LENGTH;
    var PNode = (_PNode = {}, _defineProperty(_PNode, Symbol.iterator, function () {
      return this.children ? this.children[Symbol.iterator]() : null;
    }), _defineProperty(_PNode, "reduce", function reduce() {
      // la fraction est déj
      var b = (0, _fraction["default"])(this.string).reduce();
      var result;

      if (b.n === 0) {
        result = number(0);
      } else if (b.d === 1) {
        result = b.s === 1 ? number(b.n) : opposite([number(b.n)]);
      } else {
        result = quotient([number(b.n), number(b.d)]);

        if (b.s === -1) {
          result = opposite([result]);
        }
      }

      return result;
    }), _defineProperty(_PNode, "develop", function develop() {
      return this;
    }), _defineProperty(_PNode, "simplify", function simplify() {
      return this;
    }), _defineProperty(_PNode, "isIncorrect", function isIncorrect() {
      return this.type === TYPE_ERROR;
    }), _defineProperty(_PNode, "isEquality", function isEquality() {
      return this.type === TYPE_EQUALITY;
    }), _defineProperty(_PNode, "isInequality", function isInequality() {
      return this.type === TYPE_INEQUALITY_LESS || this.type === TYPE_INEQUALITY_LESSOREQUAL || this.type === TYPE_INEQUALITY_MORE || this.type === TYPE_INEQUALITY_MOREOREQUAL;
    }), _defineProperty(_PNode, "isSum", function isSum() {
      return this.type === TYPE_SUM;
    }), _defineProperty(_PNode, "isDifference", function isDifference() {
      return this.type === TYPE_DIFFERENCE;
    }), _defineProperty(_PNode, "isOpposite", function isOpposite() {
      return this.type === TYPE_OPPOSITE;
    }), _defineProperty(_PNode, "isPositive", function isPositive() {
      return this.type === TYPE_POSITIVE;
    }), _defineProperty(_PNode, "isProduct", function isProduct() {
      return this.type === TYPE_PRODUCT || this.type === TYPE_PRODUCT_IMPLICIT || this.type === TYPE_PRODUCT_POINT;
    }), _defineProperty(_PNode, "isDivision", function isDivision() {
      return this.type === TYPE_DIVISION;
    }), _defineProperty(_PNode, "isQuotient", function isQuotient() {
      return this.type === TYPE_QUOTIENT;
    }), _defineProperty(_PNode, "isPower", function isPower() {
      return this.type === TYPE_POWER;
    }), _defineProperty(_PNode, "isRadical", function isRadical() {
      return this.type === TYPE_RADICAL;
    }), _defineProperty(_PNode, "isNumber", function isNumber() {
      return this.type === TYPE_NUMBER;
    }), _defineProperty(_PNode, "isBracket", function isBracket() {
      return this.type === TYPE_BRACKET;
    }), _defineProperty(_PNode, "isSymbol", function isSymbol() {
      return this.type === TYPE_SYMBOL;
    }), _defineProperty(_PNode, "isSegmentLength", function isSegmentLength() {
      return this.type === TYPE_SEGMENT_LENGTH;
    }), _defineProperty(_PNode, "isTemplate", function isTemplate() {
      return this.type === TYPE_TEMPLATE;
    }), _defineProperty(_PNode, "isHole", function isHole() {
      return this.type === TYPE_HOLE;
    }), _defineProperty(_PNode, "isChild", function isChild() {
      return !!this.parent;
    }), _defineProperty(_PNode, "isFunction", function isFunction() {
      return this.isRadical();
    }), _defineProperty(_PNode, "compareTo", function compareTo(e) {
      return (0, _compare["default"])(this, e);
    }), _defineProperty(_PNode, "isLowerThan", function isLowerThan(e) {
      return (0, _fraction["default"])(this).isLowerThan((0, _fraction["default"])(e));
    }), _defineProperty(_PNode, "isGreaterThan", function isGreaterThan(e) {
      return e.isLowerThan(this);
    }), _defineProperty(_PNode, "isOne", function isOne() {
      return this.string === '1';
    }), _defineProperty(_PNode, "isMinusOne", function isMinusOne() {
      return this.string === '-1';
    }), _defineProperty(_PNode, "isZero", function isZero() {
      return this.string === '0';
    }), _defineProperty(_PNode, "strictlyEquals", function strictlyEquals(e) {
      return this.string === e.string;
    }), _defineProperty(_PNode, "equals", function equals(e) {
      return this.normal.string === e.normal.string;
    }), _pos = "pos", _mutatorMap = {}, _mutatorMap[_pos] = _mutatorMap[_pos] || {}, _mutatorMap[_pos].get = function () {
      return this.parent ? this.parent.children.indexOf(this) : 0;
    }, _first = "first", _mutatorMap[_first] = _mutatorMap[_first] || {}, _mutatorMap[_first].get = function () {
      return this.children ? this.children[0] : null;
    }, _last = "last", _mutatorMap[_last] = _mutatorMap[_last] || {}, _mutatorMap[_last].get = function () {
      return this.children ? this.children[this.children.length - 1] : null;
    }, _length = "length", _mutatorMap[_length] = _mutatorMap[_length] || {}, _mutatorMap[_length].get = function () {
      return this.children ? this.children.length : null;
    }, _defineProperty(_PNode, "toString", function toString() {
      var displayUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return (0, output.text)(this, displayUnit);
    }), _string = "string", _mutatorMap[_string] = _mutatorMap[_string] || {}, _mutatorMap[_string].get = function () {
      return this.toString();
    }, _latex = "latex", _mutatorMap[_latex] = _mutatorMap[_latex] || {}, _mutatorMap[_latex].get = function () {
      return (0, output.latex)(this);
    }, _root = "root", _mutatorMap[_root] = _mutatorMap[_root] || {}, _mutatorMap[_root].get = function () {
      if (this.parent) {
        return this.parent.root;
      } else {
        return this;
      }
    }, _defineProperty(_PNode, "isInt", function isInt() {
      // trick pour tester si un nombre est un entier
      return this.isNumber() && (this.value | 0) === this.value;
    }), _defineProperty(_PNode, "isEven", function isEven() {
      return this.isInt() && this.value % 2 === 0;
    }), _defineProperty(_PNode, "isOdd", function isOdd() {
      return this.isInt() && this.value % 2 === 1;
    }), _defineProperty(_PNode, "isNumeric", function isNumeric() {
      return this.isNumber() || this.children && !!this.children.find(function (child) {
        return child.isNumeric();
      });
    }), _defineProperty(_PNode, "add", function add(e) {
      return sum([this, e]);
    }), _defineProperty(_PNode, "sub", function sub(e) {
      return difference([this, e]);
    }), _defineProperty(_PNode, "mult", function mult(e) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TYPE_PRODUCT;
      return product([this, e], type);
    }), _defineProperty(_PNode, "div", function div(e) {
      return division([this, e]);
    }), _defineProperty(_PNode, "frac", function frac(e) {
      return quotient([this, e]);
    }), _defineProperty(_PNode, "oppose", function oppose() {
      return opposite([this]);
    }), _defineProperty(_PNode, "pow", function pow(e) {
      return power([this, e]);
    }), _defineProperty(_PNode, "eval", function _eval() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // TODO: memoize
      // par défaut on veut une évaluation exacte
      params.decimal = params.decimal || false;
      var precision = params.precision || 10; // on substitue récursivement car un symbole peut en introduire un autre. Exemple : a = 2 pi

      var e = this.substitute(params); // on passe par la forme normale car elle nous donne la valeur exacte et gère les unités

      e = e.normal; // si on doit faire une conversion

      if (params.unit) {
        if (!e.unit) {
          throw new Error("calcul avec unité d'une expression sans unité");
        }

        var coef = e.unit.getCoefTo(params.unit.normal);
        e = e.mult(coef);
      } // on retourne à la forme naturelle


      e = e.node; // on met à jour l'unité qui a pu être modifiée par une conversion
      //  par défaut, c'est l'unité de base dela forme normale qui est utilisée.

      if (params.unit) {
        e.unit = params.unit;
      } // si on veut la valeur décimale


      if (params.decimal) {
        //  on garde en mémoire l'unité
        var unit = e.unit; // evaluate retourne un objet Decimal

        e = number((0, utils.roundDecimal)((0, _evaluate["default"])(e), precision).toString()); //  on remet l'unité qui avait disparu

        if (unit) e.unit = unit;
      }

      return e;
    }), _defineProperty(_PNode, "generate", function generate() {
      // tableau contenant les valeurs générées pour  $1, $2, ....
      this.root.generated = [];
      return (0, transform.generate)(this);
    }), _defineProperty(_PNode, "shallow", function shallow() {
      return {
        nature: this.type,
        children: this.children.map(function (e) {
          return e.type;
        })
      };
    }), _normal = "normal", _mutatorMap[_normal] = _mutatorMap[_normal] || {}, _mutatorMap[_normal].get = function () {
      if (!this._normal) this._normal = (0, _normal2["default"])(this);
      return this._normal;
    }, _defineProperty(_PNode, "substitute", function substitute(symbols) {
      this.root.substitutionMap = _objectSpread({}, this.root.substitutionMap, {}, symbols);
      return (0, transform.substitute)(this, symbols);
    }), _defineProperty(_PNode, "matchTemplate", function matchTemplate(t) {
      var n;

      function checkChildren(e, t) {
        for (var i = 0; i < t.length; i++) {
          if (!e.children[i].matchTemplate(t.children[i])) return false;
        }

        return true;
      }

      function checkDigitsNumber(n, minDigits, maxDigits) {
        var ndigits = n === 0 ? 0 : Math.floor(Math.log10(n)) + 1;
        return ndigits <= maxDigits && ndigits >= minDigits;
      }

      function checkLimits(n, min, max) {
        return n >= min && n <= max;
      }

      switch (t.type) {
        case TYPE_NUMBER:
          return this.isNumber() && this.value === t.value;

        case TYPE_HOLE:
          return this.isHole();

        case TYPE_SYMBOL:
          return this.isSymbol() && this.letter === t.letter;

        case TYPE_TEMPLATE:
          switch (t.nature) {
            case '$e':
            case '$ep':
            case '$ei':
              if (t.relative && this.isOpposite()) return this.first.matchTemplate(template({
                nature: t.nature,
                children: t.children
              }));
              if (!t.children[1].isHole() && !checkDigitsNumber(this.value, !t.children[0].isHole() ? t.children[0].value : 0, t.children[1].value)) return false;
              if (!t.children[2].isHole() && !checkLimits(this.value, t.children[2].value, t.children[3].value)) return false;
              if (t.nature === '$e') return this.isInt();
              if (t.nature === '$ep') return this.isEven();
              if (t.nature === '$ei') return this.isOdd();
              break;

            default:
              // $1 ....
              n = parseInt(t.nature.slice(1, t.nature.length), 10);
              return this.matchTemplate(t.root.generated[n - 1]);
          }

          break;

        default:
          return t.type === this.type && t.length === this.length && checkChildren(this, t);
      }
    }), _defineEnumerableProperties(_PNode, _mutatorMap), _PNode);
    /* 
    Création de la représentation intermédiaire de l'expresssion mathématique (AST)
    La forme normale utilise une forme propre.
     */

    function createNode(params) {
      // dans le cas des sommes et des produits, on applatit d'abord les fils qui auraient la même structure
      if (params.type === TYPE_SUM || params.type === TYPE_PRODUCT || params.type === TYPE_PRODUCT_IMPLICIT || params.type === TYPE_PRODUCT_POINT) {
        var t = [];

        var _iterator = _createForOfIteratorHelper(params.children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;

            if (params.type === child.type) {
              t = t.concat(child.children);
            } else {
              t.push(child);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        params.children = t;
      }

      var node = Object.create(PNode);
      Object.assign(node, params); //  on associe le père à chaque fils

      if (node.children) {
        var _iterator2 = _createForOfIteratorHelper(node),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _child = _step2.value;
            _child.parent = node;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return node;
    } // Deux constantes (à utiliser sous la forme de fonction) servant régulièrement. Singletons.


    var one = function () {
      var instance;
      return function () {
        if (!instance) instance = number('1');
        return instance;
      };
    }();

    exports.one = one;

    var zero = function () {
      var instance;
      return function () {
        if (!instance) instance = number('0');
        return instance;
      };
    }();

    exports.zero = zero;

    function sum(children) {
      return createNode({
        type: TYPE_SUM,
        children: children
      });
    }

    function difference(children) {
      return createNode({
        type: TYPE_DIFFERENCE,
        children: children
      });
    }

    function division(children) {
      return createNode({
        type: TYPE_DIVISION,
        children: children
      });
    }

    function product(children) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TYPE_PRODUCT;
      return createNode({
        type: type,
        children: children
      });
    }

    function quotient(children) {
      return createNode({
        type: TYPE_QUOTIENT,
        children: children
      });
    }

    function power(children) {
      return createNode({
        type: TYPE_POWER,
        children: children
      });
    }

    function opposite(children) {
      return createNode({
        type: TYPE_OPPOSITE,
        children: children
      });
    }

    function positive(children) {
      return createNode({
        type: TYPE_POSITIVE,
        children: children
      });
    }

    function bracket(children) {
      return createNode({
        type: TYPE_BRACKET,
        children: children
      });
    }

    function radical(children) {
      return createNode({
        type: TYPE_RADICAL,
        children: children
      });
    }

    function percentage(children) {
      return createNode({
        type: TYPE_PERCENTAGE,
        children: children
      });
    }

    function number(value) {
      return createNode({
        type: TYPE_NUMBER,
        value: parseFloat(value)
      });
    }

    function symbol(letter) {
      return createNode({
        type: TYPE_SYMBOL,
        letter: letter
      });
    }

    function segmentLength(begin, end) {
      return createNode({
        type: TYPE_SEGMENT_LENGTH,
        begin: begin,
        end: end
      });
    }

    function notdefined(error) {
      return createNode({
        type: TYPE_ERROR,
        error: error
      });
    }

    function hole() {
      return createNode({
        type: TYPE_HOLE
      });
    }

    function template(params) {
      return createNode(_objectSpread({
        type: TYPE_TEMPLATE
      }, params));
    }

    function equality(children) {
      return createNode({
        type: TYPE_EQUALITY,
        children: children
      });
    }

    function inequality(children, relation) {
      return createNode({
        type: relation,
        children: children
      });
    }
    });

    var unit_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.unit = unit;
    exports.baseUnits = void 0;



    var TYPE_UNIT = 'type unit'; // une unité simple ou composée

    var PUnit = {
      mult: function mult(u) {
        return unit(this.u.mult(u, node.TYPE_PRODUCT_POINT), this.normal.mult(u.normal));
      },
      div: function div(u) {
        return unit(this.u.div(u), this.normal.div(u.normal));
      },
      pow: function pow(n) {
        //  n doit être un entier relatif
        return unit(this.u.pow(n), this.normal.pow(n.normal));
      },
      toString: function toString() {
        return this.u.string;
      },

      get string() {
        return this.toString();
      },

      isConvertibleTo: function isConvertibleTo(expectedUnit) {
        return this.normal.isConvertibleTo(expectedUnit.normal); // on compare les bases de la forme normale
      },
      getCoefTo: function getCoefTo(u) {
        return this.normal.getCoefTo(u.normal).node;
      },
      equalsTo: function equalsTo(u) {
        return this.normal.equalsTo(u.normal);
      }
    };
    /* 
    ne doit être appelée à l'extérieur que pour créer une unité simple. Les unités composées sont créées par multiplication, division ou exponentiation.
    */

    function unit(u, normal) {
      if (!normal) {
        // c'est une unité simple
        var coef = (0, node.number)(baseUnits[u][0]);
        var base = (0, node.symbol)(baseUnits[u][1]);
        normal = coef.mult(base).normal;
      }

      var e = Object.create(PUnit);
      Object.assign(e, {
        type: TYPE_UNIT,
        u: (0, node.symbol)(u),
        normal: normal
      });
      return e;
    }

    var baseUnits = {
      kL: [1000, 'L'],
      hL: [100, 'L'],
      daL: [10, 'L'],
      L: [1, 'L'],
      dL: [0.1, 'L'],
      cL: [0.01, 'L'],
      mL: [0.001, 'L'],
      km: [1000, 'm'],
      hm: [100, 'm'],
      dam: [10, 'm'],
      m: [1, 'm'],
      dm: [0.1, 'm'],
      cm: [0.01, 'm'],
      mm: [0.001, 'm'],
      t: [1000000, 'g'],
      q: [100000, 'g'],
      kg: [1000, 'g'],
      hg: [100, 'g'],
      dag: [10, 'g'],
      g: [1, 'g'],
      dg: [0.1, 'g'],
      cg: [0.01, 'g'],
      mg: [0.001, 'g'],
      an: [1, 's'],
      ans: [1, 's'],
      mois: [1, 's'],
      semaine: [1, 's'],
      semaines: [1, 's'],
      j: [86400, 's'],
      h: [3600, 's'],
      min: [60, 's'],
      s: [1, 's'],
      ms: [0.001, 's'],
      '°': [1, '°'],
      noUnit: [1, 'noUnit']
    };
    exports.baseUnits = baseUnits;
    });

    var parser_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;







    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

    function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    // import template from './template'
    // const COMMA = token(',')
    // const SEMICOLON = token(';')
    var PLUS = (0, lexer_1.token)('+');
    var MINUS = (0, lexer_1.token)('-');
    var TIMES = (0, lexer_1.token)('*');
    var DIV = (0, lexer_1.token)(':');
    var FRAC = (0, lexer_1.token)('/');
    var POW = (0, lexer_1.token)('^');
    var HOLE = (0, lexer_1.token)('?');
    var PERIOD = (0, lexer_1.token)('.');
    var EQUAL = (0, lexer_1.token)('=');
    var PERCENT = (0, lexer_1.token)('%');
    var COMP = (0, lexer_1.token)('@[<>]=?'); // const ANTISLASH = token('\\')
    // const DIGITS = token('@(\\d)+')

    var OPENING_BRACKET = (0, lexer_1.token)('(');
    var CLOSING_BRACKET = (0, lexer_1.token)(')');
    var SEMICOLON = (0, lexer_1.token)(';');
    var OPENING_SQUAREBRACKET = (0, lexer_1.token)('[');
    var CLOSING_SQUAREBRACKET = (0, lexer_1.token)(']');
    var OPENING_CURLYBRACKET = (0, lexer_1.token)('{');
    var CLOSING_CURLYBRACKET = (0, lexer_1.token)('}'); // const INTEGER_TEMPLATE = '@\\$(e[pi])(r)?'

    var VALUE_DECIMAL_TEMPLATE = (0, lexer_1.token)('$$');
    var INTEGER_TEMPLATE = (0, lexer_1.token)('@\\$(e[pi]?)(r)?');
    var VARIABLE_TEMPLATE = (0, lexer_1.token)('@\\$(\\d)+');
    var LIST_TEMPLATE = (0, lexer_1.token)('$l');
    var VALUE_TEMPLATE = (0, lexer_1.token)('$');
    var SEGMENT_LENGTH = (0, lexer_1.token)('@[A-Z][A-Z]');
    var CONSTANTS = (0, lexer_1.token)('@pi');
    var FUNCTION = (0, lexer_1.token)('@cos|sin|sqrt'); // NUMBER      = token("\\d+(\\.\\d+)?"); // obligé de doubler les \ sinon ils sont enlevés de la chaine

    var DECIMAL = (0, lexer_1.token)('@[\\d]+[,\\.][\\d]+'); // obligé de doubler les \ sinon ils sont enlevés de la chaine

    var INTEGER = (0, lexer_1.token)('@[\\d]+'); // obligé de doubler les \ sinon ils sont enlevés de la chaine

    var UNIT = (0, lexer_1.token)('@kL|hL|daL|L|dL|cL|mL|km|hm|dam|dm|cm|mm|t|q|kg|hg|dag|dg|cg|mg|°|ans|an|semaines|semaine|mois|min|ms|m|g|n|s|j|h'); // const TEMPLATE = token(`@${regexBase}|${regexInteger}|${regexDecimal}`)
    // const LENGTH = token('@km|hm|dam|dm|cm|mm|m')
    // const MASS = token('@kg|hg|dag|dg|cg|mg|g')
    // const ANGLE = token('°')
    // const TIME = '@an|mois|jour|h|min|s|ms'

    var SYMBOL = (0, lexer_1.token)('@[a-z]{1}'); // const TEMPLATE = token('@\\$[edfrnsEDF]')
    // const MACRO = token('SUMA|SUMI|SUMZ|PRODUCTZ|evaluate|INT|DECIMAL')
    // sur les conventions de calcul :
    // http://images.math.cnrs.fr/Une-nouvelle-convention-de-calcul.html#nb4
    // conventions choisies ici
    // les produits implicites sont considérés comme une expression entre parenthèses par rapport à la division
    // mais l'exponentiation reste prioritaire
    // pour une suite de puissances, on fait de la gauche vers la droite
    // *  <Systeme> ::= <Relation> <Systeme'>
    // *  <Systeme'> ::= , <Relation> <Systeme'> | $
    //  *  <Relation> ::= <Expression> <Relation'>
    //  *  <Relation'> ::= = <Expression> | <= <Expression> | < <Expression> | > <Expression> | >= <Expression> |$
    //  *  <Expression> ::= - <Terme> <Expression'> | + <Terme> <Expression'> | <Terme> <Expression'>
    //  *  <Expression'> ::= + <Terme> <Expression'> | - <Terme> <Expression'> | $
    //  *  <Terme> ::= <Facteur> <Terme'>
    //  *  <Terme'> ::= (* <Facteur> | : <Facteur2> | / <Facteur2> ) <Terme'> | $
    //  *  <Facteur> ::= <Atome> (<Puissance>   | <ProduitImplicite>)
    //  *  <Puissance> ::= ^ <Atome> <Puissance> | $
    //  *  <ProduitImplicite> -> <Atome'> <ProduitImplicite> | $              //produits implicites
    //  *  <Facteur2> -> <Atome> <Puissance>                          //facteur2:eviter les produits implicites apres la division
    //  *  <Atome> -> (<Nombre> | <Atome'>) (Unit | $)                           //pour etre sur qu'un nombre est devant dans un produit implicite
    //  *  <Atome'> -> ? | <Litteral>  | <Fonction>  | ( <Expression> )
    //  <Unit> -> <ComposedUnit> <Unit'>
    //  <Unit'> ::= .<ComposedUnit> | $
    //  <Composed=unit> ::= <SimpleUnit> (^(Integer | -Integer) | $)

    var ParsingError = /*#__PURE__*/function (_Error) {
      _inherits(ParsingError, _Error);

      var _super = _createSuper(ParsingError);

      function ParsingError() {
        _classCallCheck(this, ParsingError);

        return _super.apply(this, arguments);
      }

      return ParsingError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    function parser() {
      var _lex;

      var _lexem;

      var _input;

      var _parts;

      function failure(msg) {
        var place = '-'.repeat(_lex.pos);
        place += '^';
        var text = "".concat(_input, "\n").concat(place, "\n").concat(msg);
        throw new ParsingError(text);
      }

      function match(t) {
        if (_lex.match(t)) {
          _lexem = _lex.lexem;
          _parts = _lex.parts;
          return _lexem;
        }

        return false;
      }

      function require(t) {
        if (!match(t)) throw new ParsingError("".concat(t.pattern, " required"));
      }

      function parseExpression(options) {
        return parseRelation(options);
      }

      function parseRelation(options) {
        var e = parseMember(options);
        var relation;

        if (match(EQUAL) || match(COMP)) {
          relation = _lexem;
        }

        switch (relation) {
          case '=':
            e = (0, node.equality)([e, parseMember(options)]);
            break;

          case '<':
          case '>':
          case '<=':
          case '>=':
            e = (0, node.inequality)([e, parseMember(options)], relation);
        }

        return e;
      }

      function parseMember(options) {
        var e;
        var term;
        var unit = {
          string: unit_1.baseUnits.noUnit[1]
        };
        var sign;

        if (match(MINUS) || match(PLUS)) {
          sign = _lexem;
        }

        term = parseTerm(options);

        switch (sign) {
          case '-':
            e = (0, node.opposite)([term]);
            break;

          case '+':
            e = (0, node.positive)([term]);
            break;

          default:
            e = term;
        }

        if (term.unit) unit = term.unit;

        while (match(PLUS) || match(MINUS)) {
          sign = _lexem;
          term = parseTerm(options);

          if (!term.unit && unit.string !== unit_1.baseUnits.noUnit[1] || term.unit && unit.string === unit_1.baseUnits.noUnit[1] || term.unit && !term.unit.isConvertibleTo(unit)) {
            failure("Erreur d'unité");
          }

          e = sign === '+' ? (0, node.sum)([e, term]) : (0, node.difference)([e, term]);
        }

        return e;
      }

      function parseTerm(options) {
        var e = parseFraction(options);

        while (match(TIMES) || match(DIV)) {
          if (_lexem === '*') {
            e = (0, node.product)([e, parseFraction(options)]);
          } else {
            e = (0, node.division)([e, parseFraction(options)]);
          }
        }

        return e;
      }

      function parseFraction(options) {
        var e = parseImplicitFactors(options);

        while (match(FRAC)) {
          e = (0, node.quotient)([e, parseImplicitFactors(options)]);
        }

        return e;
      }

      function parseImplicitFactors(options) {
        var e = parsePower(options);
        var factors = [e];

        if (options && options.implicit) {
          var next;

          while (next = parsePower(options, true)) {
            if (next.isNumber()) {
              failure('Number must be placed in fronthead');
            } else {
              factors.push(next);
            }
          }
        }

        return factors.length === 1 ? e : (0, node.product)(factors, node.TYPE_PRODUCT_IMPLICIT);
      }

      function parsePower(options) {
        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var e = parseAtom(options, optional); // parseAtom peut retrouner undefined dans le cas d'une recherche infructueuse  de produit implicite

        if (e) {
          while (match(POW)) {
            // TODO : vérifier qu'il n'y a pas d'unité dans l'exposant
            e = (0, node.power)([e, parseAtom(options)]);
          }
        }

        return e;
      }

      function parseAtom(options) {
        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var e, func;

        if (match(SEGMENT_LENGTH)) {
          e = (0, node.segmentLength)(_lexem.charAt(0), _lexem.charAt(1));
        } else if (match(DECIMAL) || match(INTEGER)) {
          e = (0, node.number)(_lexem);
        } else if (match(HOLE)) {
          e = (0, node.hole)();
        } else if (func = match(FUNCTION)) {
          require(OPENING_BRACKET);

          switch (func) {
            case 'sqrt':
              e = (0, node.radical)([parseExpression(options)]);
              break;

            default:
              e = null;
          }

          require(CLOSING_BRACKET);
        } else if (match(CONSTANTS)) {
          e = (0, node.symbol)(_lexem);
        } else if (match(SYMBOL)) {
          switch (_lexem) {
            /*
            case "p":
              e = parseFactory.PI;
            */
            default:
              e = (0, node.symbol)(_lexem);
          }
        } else if (match(OPENING_BRACKET)) {
          // TODO: rajouter dans options qu'il ne faut pas de nouvelles unités
          e = (0, node.bracket)([parseExpression(options)]);

          require(CLOSING_BRACKET);
        } else if (match(INTEGER_TEMPLATE)) {
          var nature = _parts[2];
          var relative = _parts[3];
          var minDigit = (0, node.hole)();
          var maxDigit = (0, node.hole)();
          var min = (0, node.hole)();
          var max = (0, node.hole)(); // $e : entier positif
          // $en : entier négatif
          // $er : entier relatif
          // $ep : entier pair
          // $ei : entier impair
          // $e{3} : max 3 chiffres                 ** accolades ne passent pas dans les commentaires
          // $e{2;3} : entre 2 et 3 chiffres
          // $e([ ])
          // dans 'l'expression régulière :
          // _parts[2] renvoie la nature ($e, $er, ouu $en)
          // _parts[4] et _parts[6] : nb chiffres min et max
          // _parts[4] nb chiffres ax si il n'y a pas _parts[6]

          if (match(OPENING_CURLYBRACKET)) {
            maxDigit = parseExpression(options);

            if (match(SEMICOLON)) {
              minDigit = maxDigit;
              maxDigit = parseExpression(options);
            }

            require(CLOSING_CURLYBRACKET);
          } else if (match(OPENING_SQUAREBRACKET)) {
            min = parseExpression(options);

            require(SEMICOLON);

            max = parseExpression(options);

            require(CLOSING_SQUAREBRACKET);
          }

          e = (0, node.template)({
            nature: '$' + nature,
            relative: relative,
            children: [minDigit, maxDigit, min, max]
          });
        } else if (match(VARIABLE_TEMPLATE)) {
          var _nature = _parts[2];
          e = (0, node.template)({
            nature: '$' + _nature,
            children: []
          });
        } else if (match(LIST_TEMPLATE)) {
          var _nature2 = _lexem;

          require(OPENING_CURLYBRACKET);

          var children = [parseExpression(options)];

          while (match(SEMICOLON)) {
            children.push(parseExpression(options));
          }

          require(CLOSING_CURLYBRACKET);

          e = (0, node.template)({
            nature: _nature2,
            children: children
          });
        } else if (match(VALUE_DECIMAL_TEMPLATE)) {
          var precision = null;

          if (match(INTEGER)) {
            precision = parseInt(_lexem, 10);
          }

          require(OPENING_CURLYBRACKET);

          e = (0, node.template)({
            nature: '$$',
            precision: precision,
            children: [parseExpression(options)]
          });

          require(CLOSING_CURLYBRACKET);
        } else if (match(VALUE_TEMPLATE)) {
          require(OPENING_CURLYBRACKET);

          e = (0, node.template)({
            nature: '$',
            children: [parseExpression(options)]
          });

          require(CLOSING_CURLYBRACKET);
        } else if (!optional) {
          failure('No valid atom found');
        }

        if (e && match(PERCENT)) {
          e = (0, node.percentage)([e]);
        }

        if (e) {
          var _unit = parseUnit();

          if (_unit) e.unit = _unit;
        }

        return e;
      }

      function parseUnit() {
        function getUnit() {
          var u = (0, unit_1.unit)(_lexem);

          if (match(POW)) {
            var n = parseAtom();

            if (!(n.isInt() || n.isBracket() && n.first.isOpposite() && n.first.first.isInt())) {
              failure('Integer required');
            }

            u = u.pow(n);
          }

          return u;
        }

        if (match(UNIT)) {
          var result = getUnit();

          while (match(PERIOD)) {
            if (match(UNIT)) {
              result = (0, node.product)([result, getUnit()], '.');
            } else {
              failure('Unit required');
            }
          }

          return result;
        } else {
          return null;
        }
      }

      return {
        parse: function parse(input) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            implicit: true
          };
          _input = input;
          _lex = (0, lexer_1.lexer)(input);
          var e;

          try {
            e = parseExpression(options);
          } catch (error) {
            e = (0, node.notdefined)({
              message: error.message
            });
          }

          return e;
        }
      };
    }

    var _default = parser;
    exports["default"] = _default;
    });

    var math_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.math = math;

    var _parser = _interopRequireDefault(parser_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function math(exp) {
      var e = (0, _parser["default"])().parse(exp);
      return e;
    }
    });

    const emptyCard = {
        enounce: '',
        variables: {},
        answer: '',
        explanation: '',
        warning: '',
        name:'Nouvelle Flash Card',
        grade:'6ème',
        level:'1'
      };

    function generateCard(card) {
        // firestore returns objects with read-only properties
       
        if (!card) return emptyCard
        // console.log('generate card', card)
      
        let tempCard = {
          ...card,
          variables: {},
          
        };
        

        if (card.variables) {
          Object.getOwnPropertyNames(card.variables).forEach((variable) => {
            tempCard.variables[variable] = math_1.math(
              card.variables[variable],
            ).generate().string;
      
            const regex = new RegExp(variable, 'g');
            const generated = tempCard.variables[variable];
            tempCard.enounce = tempCard.enounce.replace(regex, generated);
            tempCard.answer = tempCard.answer.replace(regex, generated);
            if (tempCard.explanation) {
              tempCard.explanation = tempCard.explanation.replace(regex, generated);
            }
          });
        }
        
        const regex = /\*\*(.*?)\*\*/g;
        const replacement = (matched, p1) => {
          return `$$${math_1.math(p1).generate().latex}$$`
        };
      
        tempCard.answer = tempCard.answer.replace(regex, replacement);
        tempCard.enounce = tempCard.enounce.replace(regex, replacement);
        if (tempCard.explanation) {
          tempCard.explanation = tempCard.explanation.replace(regex, replacement);
        }
      
        // console.log('newCard', tempCard)
      
        return tempCard
      }

    /* src/Diaporama.svelte generated by Svelte v3.24.1 */

    const { console: console_1$3 } = globals;
    const file$k = "src/Diaporama.svelte";

    // (157:0) {:catch error}
    function create_catch_block$4(ctx) {
    	let p;
    	let t_value = /*error*/ ctx[21].message + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			this.h();
    		},
    		l: function claim(nodes) {
    			p = claim_element(nodes, "P", { style: true });
    			var p_nodes = children(p);
    			t = claim_text(p_nodes, t_value);
    			p_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_style(p, "color", "red");
    			add_location(p, file$k, 157, 2, 4073);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*cardsP*/ 1 && t_value !== (t_value = /*error*/ ctx[21].message + "")) set_data_dev(t, t_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$4.name,
    		type: "catch",
    		source: "(157:0) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (143:0) {:then cards}
    function create_then_block$4(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$b, create_else_block$7];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*cards*/ ctx[4] && /*cards*/ ctx[4].length) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$4.name,
    		type: "then",
    		source: "(143:0) {:then cards}",
    		ctx
    	});

    	return block;
    }

    // (153:2) {:else}
    function create_else_block$7(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("liste vide");
    			this.h();
    		},
    		l: function claim(nodes) {
    			p = claim_element(nodes, "P", { style: true });
    			var p_nodes = children(p);
    			t = claim_text(p_nodes, "liste vide");
    			p_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_style(p, "color", "red");
    			add_location(p, file$k, 153, 4, 4010);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(153:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (144:2) {#if cards && cards.length}
    function create_if_block$b(ctx) {
    	let flashcard;
    	let current;

    	flashcard = new FlashCard({
    			props: {
    				card: /*cards*/ ctx[4][/*card_i*/ ctx[1]],
    				onNext: /*handleNextCard*/ ctx[5],
    				preloadImages: true,
    				frontLocalUrlP: /*frontLocalUrlP*/ ctx[2],
    				backLocalUrlP: /*backLocalUrlP*/ ctx[3],
    				isLast: /*card_i*/ ctx[1] == /*cards*/ ctx[4].length - 1
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(flashcard.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(flashcard.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(flashcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const flashcard_changes = {};
    			if (dirty & /*cardsP, card_i*/ 3) flashcard_changes.card = /*cards*/ ctx[4][/*card_i*/ ctx[1]];
    			if (dirty & /*frontLocalUrlP*/ 4) flashcard_changes.frontLocalUrlP = /*frontLocalUrlP*/ ctx[2];
    			if (dirty & /*backLocalUrlP*/ 8) flashcard_changes.backLocalUrlP = /*backLocalUrlP*/ ctx[3];
    			if (dirty & /*card_i, cardsP*/ 3) flashcard_changes.isLast = /*card_i*/ ctx[1] == /*cards*/ ctx[4].length - 1;
    			flashcard.$set(flashcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(flashcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(flashcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(flashcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(144:2) {#if cards && cards.length}",
    		ctx
    	});

    	return block;
    }

    // (141:15)    <p>...waiting</p> {:then cards}
    function create_pending_block$4(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text("...waiting");
    			this.h();
    		},
    		l: function claim(nodes) {
    			p = claim_element(nodes, "P", {});
    			var p_nodes = children(p);
    			t = claim_text(p_nodes, "...waiting");
    			p_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			add_location(p, file$k, 141, 2, 3709);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$4.name,
    		type: "pending",
    		source: "(141:15)    <p>...waiting</p> {:then cards}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let await_block_anchor;
    	let promise;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block$4,
    		then: create_then_block$4,
    		catch: create_catch_block$4,
    		value: 4,
    		error: 21,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*cardsP*/ ctx[0], info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		l: function claim(nodes) {
    			await_block_anchor = empty();
    			info.block.l(nodes);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*cardsP*/ 1 && promise !== (promise = /*cardsP*/ ctx[0]) && handle_promise(promise, info)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[4] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let $images;
    	validate_store(images, "images");
    	component_subscribe($$self, images, $$value => $$invalidate(18, $images = $$value));
    	let { location } = $$props;
    	let queryParams;
    	let subject;
    	let domain;
    	let theme;
    	let level;
    	let filters = [];
    	let isFinished = false;
    	const { trace } = getLogger("FlashCards", "trace");
    	let cards;
    	let cardsP;
    	let card_i;
    	let frontFirstLocalUrlP;
    	let backFirstLocalUrlP;
    	let nextFrontLocalUrlP;
    	let nextBackLocalUrlP;
    	let frontLocalUrlP;
    	let backLocalUrlP;
    	trace("filters", filters);

    	const handleNextCard = () => {
    		if (card_i < cards.length - 1) {
    			$$invalidate(1, card_i++, card_i);
    		} else {
    			$$invalidate(13, isFinished = true);
    		}
    	};

    	const getLocalUrl = async imgPath => {
    		trace("getting image :", imgPath);
    		console.log("images store", $images);

    		if ($images[imgPath]) {
    			trace("image found in store :", imgPath);
    			return $images[imgPath];
    		}

    		trace("fetching image :", imgPath);

    		return storage.child(imgPath).getDownloadURL().then(url => {
    			const promise = new Promise((resolve, reject) => {
    					const xhr = new XMLHttpRequest();
    					xhr.responseType = "blob";

    					xhr.onload = () => {
    						trace("img dowloadeed", imgPath);
    						const blob = xhr.response;
    						const localUrl = URL.createObjectURL(blob);

    						images.update(store => {
    							store[imgPath] = localUrl;
    							return store;
    						});

    						console.log("images store", $images);
    						resolve(localUrl);
    					};

    					xhr.onerror = () => {
    						reject();
    					};

    					xhr.open("GET", url);
    					xhr.send();
    				});

    			return promise;
    		}).catch(err => error("error while fetching image :", err.message));
    	};

    	const writable_props = ["location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn(`<Diaporama> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Diaporama", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("location" in $$props) $$invalidate(6, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		images,
    		fetchCollection,
    		storage,
    		shuffle,
    		getLogger,
    		Button: Button_1,
    		Label,
    		FlashCard,
    		queryString,
    		navigate,
    		generateCard,
    		getCollection,
    		location,
    		queryParams,
    		subject,
    		domain,
    		theme,
    		level,
    		filters,
    		isFinished,
    		trace,
    		cards,
    		cardsP,
    		card_i,
    		frontFirstLocalUrlP,
    		backFirstLocalUrlP,
    		nextFrontLocalUrlP,
    		nextBackLocalUrlP,
    		frontLocalUrlP,
    		backLocalUrlP,
    		handleNextCard,
    		getLocalUrl,
    		$images
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(6, location = $$props.location);
    		if ("queryParams" in $$props) $$invalidate(7, queryParams = $$props.queryParams);
    		if ("subject" in $$props) $$invalidate(8, subject = $$props.subject);
    		if ("domain" in $$props) $$invalidate(9, domain = $$props.domain);
    		if ("theme" in $$props) $$invalidate(10, theme = $$props.theme);
    		if ("level" in $$props) $$invalidate(11, level = $$props.level);
    		if ("filters" in $$props) $$invalidate(12, filters = $$props.filters);
    		if ("isFinished" in $$props) $$invalidate(13, isFinished = $$props.isFinished);
    		if ("cards" in $$props) $$invalidate(4, cards = $$props.cards);
    		if ("cardsP" in $$props) $$invalidate(0, cardsP = $$props.cardsP);
    		if ("card_i" in $$props) $$invalidate(1, card_i = $$props.card_i);
    		if ("frontFirstLocalUrlP" in $$props) $$invalidate(14, frontFirstLocalUrlP = $$props.frontFirstLocalUrlP);
    		if ("backFirstLocalUrlP" in $$props) $$invalidate(15, backFirstLocalUrlP = $$props.backFirstLocalUrlP);
    		if ("nextFrontLocalUrlP" in $$props) $$invalidate(16, nextFrontLocalUrlP = $$props.nextFrontLocalUrlP);
    		if ("nextBackLocalUrlP" in $$props) $$invalidate(17, nextBackLocalUrlP = $$props.nextBackLocalUrlP);
    		if ("frontLocalUrlP" in $$props) $$invalidate(2, frontLocalUrlP = $$props.frontLocalUrlP);
    		if ("backLocalUrlP" in $$props) $$invalidate(3, backLocalUrlP = $$props.backLocalUrlP);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*location, queryParams, subject, filters, domain, theme, level*/ 8128) {
    			 {
    				$$invalidate(7, queryParams = queryString.parse(location.search));
    				$$invalidate(8, subject = queryParams.subject);
    				$$invalidate(9, domain = queryParams.domain);
    				$$invalidate(10, theme = queryParams.theme);
    				$$invalidate(11, level = queryParams.level);
    				$$invalidate(12, filters = []);
    				if (subject) filters.push({ subject });
    				if (domain) filters.push({ domain });
    				if (theme) filters.push({ theme });
    				if (level) filters.push({ level });
    			}
    		}

    		if ($$self.$$.dirty & /*filters*/ 4096) {
    			 {
    				const getCards = async filters => {
    					// first seek in store
    					$$invalidate(0, cardsP = getCollection({ collectionPath: "FlashCards", filters }).then(values => {
    						trace("crds received, ", values);
    						shuffle(values);

    						if (values.length) {
    							$$invalidate(1, card_i = 0);
    							const card = values[0];
    							$$invalidate(14, frontFirstLocalUrlP = card.image ? getLocalUrl(card.image) : null);
    							$$invalidate(15, backFirstLocalUrlP = card.imageAnswer ? getLocalUrl(card.imageAnswer) : null);
    						}

    						$$invalidate(4, cards = values);
    						return values;
    					}));
    				};

    				$$invalidate(13, isFinished = false);
    				getCards(filters);
    			}
    		}

    		if ($$self.$$.dirty & /*isFinished, subject, domain*/ 8960) {
    			 {
    				if (isFinished) {
    					navigate(`/flash-cards?subject=${subject}&domain=${domain}`);
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*card_i, frontFirstLocalUrlP, nextFrontLocalUrlP, backFirstLocalUrlP, nextBackLocalUrlP, cards*/ 245778) {
    			 {
    				$$invalidate(2, frontLocalUrlP = card_i === 0 ? frontFirstLocalUrlP : nextFrontLocalUrlP);
    				$$invalidate(3, backLocalUrlP = card_i === 0 ? backFirstLocalUrlP : nextBackLocalUrlP);

    				$$invalidate(16, nextFrontLocalUrlP = cards && card_i < cards.length - 1 && cards[card_i + 1].image
    				? getLocalUrl(cards[card_i + 1].image)
    				: null);

    				$$invalidate(17, nextBackLocalUrlP = cards && card_i < cards.length - 1 && cards[card_i + 1].imageAnswer
    				? getLocalUrl(cards[card_i + 1].imageAnswer)
    				: null);
    			}
    		}
    	};

    	return [cardsP, card_i, frontLocalUrlP, backLocalUrlP, cards, handleNextCard, location];
    }

    class Diaporama extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, { location: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Diaporama",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[6] === undefined && !("location" in props)) {
    			console_1$3.warn("<Diaporama> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Diaporama>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Diaporama>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.24.1 */
    const file$l = "src/App.svelte";

    // (17:4) <Link to="/">
    function create_default_slot_7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Home");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "Home");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(17:4) <Link to=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (18:4) <Link to="about">
    function create_default_slot_6$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("About");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "About");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$1.name,
    		type: "slot",
    		source: "(18:4) <Link to=\\\"about\\\">",
    		ctx
    	});

    	return block;
    }

    // (19:4) <Link to="flash-cards">
    function create_default_slot_5$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Flash cards");
    		},
    		l: function claim(nodes) {
    			t = claim_text(nodes, "Flash cards");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(19:4) <Link to=\\\"flash-cards\\\">",
    		ctx
    	});

    	return block;
    }

    // (22:4) <Route path="about/:id/:id2" let:params>
    function create_default_slot_4$2(ctx) {
    	let about;
    	let current;
    	const about_spread_levels = [/*params*/ ctx[2]];
    	let about_props = {};

    	for (let i = 0; i < about_spread_levels.length; i += 1) {
    		about_props = assign(about_props, about_spread_levels[i]);
    	}

    	about = new About({ props: about_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(about.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(about.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(about, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const about_changes = (dirty & /*params*/ 4)
    			? get_spread_update(about_spread_levels, [get_spread_object(/*params*/ ctx[2])])
    			: {};

    			about.$set(about_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(about.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(about.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(about, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$2.name,
    		type: "slot",
    		source: "(22:4) <Route path=\\\"about/:id/:id2\\\" let:params>",
    		ctx
    	});

    	return block;
    }

    // (25:4) <Route path="flash-cards/play"  let:location>
    function create_default_slot_3$3(ctx) {
    	let diaporama;
    	let current;

    	diaporama = new Diaporama({
    			props: { location: /*location*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(diaporama.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(diaporama.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(diaporama, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const diaporama_changes = {};
    			if (dirty & /*location*/ 2) diaporama_changes.location = /*location*/ ctx[1];
    			diaporama.$set(diaporama_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(diaporama.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(diaporama.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(diaporama, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$3.name,
    		type: "slot",
    		source: "(25:4) <Route path=\\\"flash-cards/play\\\"  let:location>",
    		ctx
    	});

    	return block;
    }

    // (28:4) <Route path="flash-cards"  let:location>
    function create_default_slot_2$3(ctx) {
    	let flashcards;
    	let current;

    	flashcards = new FlashCards({
    			props: { location: /*location*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(flashcards.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(flashcards.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(flashcards, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const flashcards_changes = {};
    			if (dirty & /*location*/ 2) flashcards_changes.location = /*location*/ ctx[1];
    			flashcards.$set(flashcards_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(flashcards.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(flashcards.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(flashcards, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(28:4) <Route path=\\\"flash-cards\\\"  let:location>",
    		ctx
    	});

    	return block;
    }

    // (31:4) <Route path="/">
    function create_default_slot_1$5(ctx) {
    	let home;
    	let current;
    	home = new Home({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(home.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(home.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(home, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(31:4) <Route path=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (15:0) <Router url="{url}">
    function create_default_slot$8(ctx) {
    	let nav;
    	let link0;
    	let t0;
    	let link1;
    	let t1;
    	let link2;
    	let t2;
    	let div;
    	let route0;
    	let t3;
    	let route1;
    	let t4;
    	let route2;
    	let t5;
    	let route3;
    	let current;

    	link0 = new Link({
    			props: {
    				to: "/",
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	link1 = new Link({
    			props: {
    				to: "about",
    				$$slots: { default: [create_default_slot_6$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	link2 = new Link({
    			props: {
    				to: "flash-cards",
    				$$slots: { default: [create_default_slot_5$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route0 = new Route({
    			props: {
    				path: "about/:id/:id2",
    				$$slots: {
    					default: [
    						create_default_slot_4$2,
    						({ params }) => ({ 2: params }),
    						({ params }) => params ? 4 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: {
    				path: "flash-cards/play",
    				$$slots: {
    					default: [
    						create_default_slot_3$3,
    						({ location }) => ({ 1: location }),
    						({ location }) => location ? 2 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route2 = new Route({
    			props: {
    				path: "flash-cards",
    				$$slots: {
    					default: [
    						create_default_slot_2$3,
    						({ location }) => ({ 1: location }),
    						({ location }) => location ? 2 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route3 = new Route({
    			props: {
    				path: "/",
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			create_component(link0.$$.fragment);
    			t0 = space();
    			create_component(link1.$$.fragment);
    			t1 = space();
    			create_component(link2.$$.fragment);
    			t2 = space();
    			div = element("div");
    			create_component(route0.$$.fragment);
    			t3 = space();
    			create_component(route1.$$.fragment);
    			t4 = space();
    			create_component(route2.$$.fragment);
    			t5 = space();
    			create_component(route3.$$.fragment);
    			this.h();
    		},
    		l: function claim(nodes) {
    			nav = claim_element(nodes, "NAV", {});
    			var nav_nodes = children(nav);
    			claim_component(link0.$$.fragment, nav_nodes);
    			t0 = claim_space(nav_nodes);
    			claim_component(link1.$$.fragment, nav_nodes);
    			t1 = claim_space(nav_nodes);
    			claim_component(link2.$$.fragment, nav_nodes);
    			nav_nodes.forEach(detach_dev);
    			t2 = claim_space(nodes);
    			div = claim_element(nodes, "DIV", {});
    			var div_nodes = children(div);
    			claim_component(route0.$$.fragment, div_nodes);
    			t3 = claim_space(div_nodes);
    			claim_component(route1.$$.fragment, div_nodes);
    			t4 = claim_space(div_nodes);
    			claim_component(route2.$$.fragment, div_nodes);
    			t5 = claim_space(div_nodes);
    			claim_component(route3.$$.fragment, div_nodes);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			add_location(nav, file$l, 15, 2, 479);
    			add_location(div, file$l, 20, 2, 605);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			mount_component(link0, nav, null);
    			append_dev(nav, t0);
    			mount_component(link1, nav, null);
    			append_dev(nav, t1);
    			mount_component(link2, nav, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(route0, div, null);
    			append_dev(div, t3);
    			mount_component(route1, div, null);
    			append_dev(div, t4);
    			mount_component(route2, div, null);
    			append_dev(div, t5);
    			mount_component(route3, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const link0_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				link0_changes.$$scope = { dirty, ctx };
    			}

    			link0.$set(link0_changes);
    			const link1_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				link1_changes.$$scope = { dirty, ctx };
    			}

    			link1.$set(link1_changes);
    			const link2_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				link2_changes.$$scope = { dirty, ctx };
    			}

    			link2.$set(link2_changes);
    			const route0_changes = {};

    			if (dirty & /*$$scope, params*/ 12) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);
    			const route1_changes = {};

    			if (dirty & /*$$scope, location*/ 10) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    			const route2_changes = {};

    			if (dirty & /*$$scope, location*/ 10) {
    				route2_changes.$$scope = { dirty, ctx };
    			}

    			route2.$set(route2_changes);
    			const route3_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				route3_changes.$$scope = { dirty, ctx };
    			}

    			route3.$set(route3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(link0.$$.fragment, local);
    			transition_in(link1.$$.fragment, local);
    			transition_in(link2.$$.fragment, local);
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(link0.$$.fragment, local);
    			transition_out(link1.$$.fragment, local);
    			transition_out(link2.$$.fragment, local);
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_component(link0);
    			destroy_component(link1);
    			destroy_component(link2);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(route0);
    			destroy_component(route1);
    			destroy_component(route2);
    			destroy_component(route3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(15:0) <Router url=\\\"{url}\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let router;
    	let current;

    	router = new Router({
    			props: {
    				url: /*url*/ ctx[0],
    				$$slots: { default: [create_default_slot$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(router.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(router.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const router_changes = {};
    			if (dirty & /*url*/ 1) router_changes.url = /*url*/ ctx[0];

    			if (dirty & /*$$scope*/ 8) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { url = "" } = $$props;
    	const writable_props = ["url"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("App", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("url" in $$props) $$invalidate(0, url = $$props.url);
    	};

    	$$self.$capture_state = () => ({
    		FlashCard,
    		FlashCards,
    		Router,
    		Link,
    		Route,
    		Home,
    		About,
    		Button: Button_1,
    		FlipCard,
    		Group,
    		Diaporama,
    		url
    	});

    	$$self.$inject_state = $$props => {
    		if ("url" in $$props) $$invalidate(0, url = $$props.url);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [url];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, { url: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get url() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set url(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const app = new App({
    	target: document.body,
    	hydrate: true
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
